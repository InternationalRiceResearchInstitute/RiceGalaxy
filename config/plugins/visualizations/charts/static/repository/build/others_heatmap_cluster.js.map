{"version":3,"sources":["webpack:///others_heatmap_cluster.js","webpack:///webpack/bootstrap e3622d0033a89edad914?63f1********************","webpack:///./static/repository/visualizations/others/heatmap_cluster/wrapper.js","webpack:///./static/repository/utilities/utils.js?825c******************","webpack:///./static/repository/visualizations/utilities/tabular-utilities.js?ccb0****************","webpack:///./static/repository/visualizations/utilities/tabular-datasets.js?bf7b******************","webpack:///./static/repository/utilities/jobs.js?c47c***","webpack:///./static/repository/visualizations/others/heatmap/heatmap-parameters.js","webpack:///./static/repository/visualizations/others/heatmap/heatmap-plugin.js"],"names":["define","modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","0","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","Utilities","Jobs","HeatMap","Backbone","View","extend","initialize","options","request","chart","buildJobDictionary","dataset","dataset_groups","Collection","groups","each","group","index","add","__data_columns","x","is_label","y","z","is_numeric","key","get","dataset_id","render","canvas_id","panelHelper","process","reject","apply","undefined","1","clone","obj","JSON","parse","stringify","isJSON","text","test","replace","top","__utils__get__","cache_key","cache","success","window","console","debug","url","data","response","error","ajaxConfig","contentType","type","$","isEmptyObject","indexOf","param","dataType","ajax","done","jQuery","parseJSON","e","fail","response_text","responseText","always","complete","merge","optionsDefault","_","defaults","uid","__utils__uid__","4","Utils","Datasets","settings_string","columns_string","group_index","settings","attributes","settings_value","pair","RegExp","substring","length","data_columns","name","parseInt","tool_id","inputs","input","src","columns","targets","result","valid","state","resolve","err","getDomains","keys","_apply","operator","value","value_sub","d3","values","d","Math","min","max","makeSeries","plot_data","value_index","point","key_index","column_index","push","makeCategories","column_keys","array","value_dict","String","mapCategories","i","makeUniqueCategories","with_index","categories","counter","column_def","j","makeTickFormat","precision","formatter","d3format","prefix","formatPrefix","scale","toFixed","symbol","format","label","isNaN","addZoom","fixDomain","domain","boundary","scaleExtent","zoomed","yDomain","yScale","y_boundary","xDomain","xScale","x_boundary","redraw","unzoomed","d3zoom","translate","yAxis","xAxis","svg","slice","behavior","zoom","nice","on","5","_cache","column_list","column_name","column","block_id","_block_id","_fillFromCache","Galaxy","root","data_type","provider","indeces","toString","results","Array","row","v","limit","column_data","dict","20","WAITTIME","parameters","cleanup","set","dataset_id_job","wait","definition","outputs","refreshHdas","job","save","message","previous","deleted","ready","setTimeout","currHistoryPanel","refreshContents","38","colorSets","seis","reverse","sealand","redgreen","ocean","cool","copper","gray","hot","jet","no_green","polar","red2green","relief","split","wysiwyg","39","HeatmapParameters","margin","right","bottom","left","style","font-weight","font-family","font-size","legend","width","size","background_color","debug_color","self","this","color_set","linear","zMin","zMax","zScale","quantize","range","axis","orient","_makeTickFormat","tooltip","select","append","attr","container","empty","xTickStart","ceil","xTickEnd","floor","yTickStart","yTickEnd","tickValues","height","rowCount","colCount","boxWidth","boxHeight","_buildBoxes","_buildX","_buildY","_buildLegend","_locator","_color","chartBody","boxes","selectAll","gEnter","enter","trim","event","stopPropagation","xLabel","yLabel","open","html","_templateTooltip","pageY","exit","remove","font_size","gxAxis","xFontSize","getBBox","gxAxisLabel","gxTickLabel","gyAxis","yFontSize","gyAxisLabel","legendSize","legendWidth","legendElements","legendElementHeight","legendHeight","substr","tickFormat","_handleError"],"mappings":"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","file":"others_heatmap_cluster.js","sourcesContent":["define(function() { return /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(4), __webpack_require__(20), __webpack_require__(39) ], __WEBPACK_AMD_DEFINE_RESULT__ = function( Utilities, Jobs, HeatMap ) {\n\t    return Backbone.View.extend({\n\t        initialize: function( options ) {\n\t            Jobs.request( options.chart, Utilities.buildJobDictionary( options.chart, 'heatmap' ), function( dataset ) {\n\t                var index = 0;\n\t                var dataset_groups = new Backbone.Collection();\n\t                options.chart.groups.each( function( group, index ) {\n\t                    dataset_groups.add({\n\t                        __data_columns: {\n\t                            x : { is_label   : true },\n\t                            y : { is_label   : true },\n\t                            z : { is_numeric : true }\n\t                        },\n\t                        x     : index++,\n\t                        y     : index++,\n\t                        z     : index++,\n\t                        key   : group.get( 'key' )\n\t                    });\n\t                });\n\t                options.dataset_id = dataset.id;\n\t                options.dataset_groups = dataset_groups;\n\t                options.render = function( canvas_id, groups ) {\n\t                    new HeatMap({\n\t                        chart       : options.chart,\n\t                        canvas_id   : canvas_id,\n\t                        groups      : groups\n\t                    });\n\t                    return true;\n\t                };\n\t                Utilities.panelHelper( options );\n\t            }, function() { options.process.reject() } );\n\t        }\n\t    });\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n\n/***/ 1:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/** Useful helper functions */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t\n\t    /** Clone */\n\t    function clone( obj ) {\n\t        return JSON.parse( JSON.stringify( obj ) || null );\n\t    };\n\t\n\t    /**\n\t     * Check if a string is a json string\n\t     * @param{String}   text - Content to be validated\n\t     */\n\t    function isJSON(text) {\n\t        return /^[\\],:{}\\s]*$/.test(text.replace(/\\\\[\"\\\\\\/bfnrtu]/g, '@').\n\t            replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']').\n\t            replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''));\n\t    };\n\t\n\t    /**\n\t     * Request handler for GET\n\t     * @param{String}   url     - Url request is made to\n\t     * @param{Function} success - Callback on success\n\t     * @param{Function} error   - Callback on error\n\t     * @param{Boolean}  cache   - Use cached data if available\n\t     */\n\t    function get (options) {\n\t        top.__utils__get__ = top.__utils__get__ || {};\n\t        var cache_key = JSON.stringify( options );\n\t        if (options.cache && top.__utils__get__[cache_key]) {\n\t            options.success && options.success(top.__utils__get__[cache_key]);\n\t            window.console.debug('utils.js::get() - Fetching from cache [' + options.url + '].');\n\t        } else {\n\t            request({\n\t                url     : options.url,\n\t                data    : options.data,\n\t                success : function(response) {\n\t                    top.__utils__get__[cache_key] = response;\n\t                    options.success && options.success(response);\n\t                },\n\t                error : function(response) {\n\t                    options.error && options.error(response);\n\t                }\n\t            });\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Request handler\n\t     * @param{String}   method  - Request method ['GET', 'POST', 'DELETE', 'PUT']\n\t     * @param{String}   url     - Url request is made to\n\t     * @param{Object}   data    - Data send to url\n\t     * @param{Function} success - Callback on success\n\t     * @param{Function} error   - Callback on error\n\t     */\n\t    function request (options) {\n\t        var ajaxConfig = {\n\t            contentType : 'application/json',\n\t            type        : options.type || 'GET',\n\t            data        : options.data || {},\n\t            url         : options.url\n\t        }\n\t        if ( ajaxConfig.type == 'GET' || ajaxConfig.type == 'DELETE' ) {\n\t            if ( !$.isEmptyObject(ajaxConfig.data) ) {\n\t                ajaxConfig.url += ajaxConfig.url.indexOf('?') == -1 ? '?' : '&';\n\t                ajaxConfig.url += $.param(ajaxConfig.data, true);\n\t            }\n\t            ajaxConfig.data = null;\n\t        } else {\n\t            ajaxConfig.dataType = 'json';\n\t            ajaxConfig.url      = ajaxConfig.url;\n\t            ajaxConfig.data     = JSON.stringify( ajaxConfig.data );\n\t        }\n\t        $.ajax( ajaxConfig ).done( function( response ) {\n\t            if ( typeof response === 'string' && isJSON( response ) ) {\n\t                try {\n\t                    response = response.replace( 'Infinity,', '\"Infinity\",' );\n\t                    response = jQuery.parseJSON( response );\n\t                } catch ( e ) {\n\t                    console.debug( e );\n\t                }\n\t            }\n\t            options.success && options.success( response );\n\t        }).fail( function( response ) {\n\t            var response_text = null;\n\t            try {\n\t                response_text = jQuery.parseJSON( response.responseText );\n\t            } catch (e) {\n\t                response_text = response.responseText;\n\t            }\n\t            options.error && options.error( response_text, response );\n\t        }).always( function() {\n\t            options.complete && options.complete();\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Safely merge to dictionaries\n\t     * @param{Object}   options         - Target dictionary\n\t     * @param{Object}   optionsDefault  - Source dictionary\n\t     */\n\t    function merge (options, optionsDefault) {\n\t        if (options) {\n\t            return _.defaults(options, optionsDefault);\n\t        } else {\n\t            return optionsDefault;\n\t        }\n\t    };\n\t\n\t    /** Create a unique id */\n\t    function uid(){\n\t        top.__utils__uid__ = top.__utils__uid__ || 0;\n\t        return 'uid-' + top.__utils__uid__++;\n\t    };\n\t\n\t    return {\n\t        get     : get,\n\t        merge   : merge,\n\t        uid     : uid,\n\t        request : request,\n\t        clone   : clone,\n\t        isJSON  : isJSON\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n\n/***/ 4:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1), __webpack_require__(5) ], __WEBPACK_AMD_DEFINE_RESULT__ = function( Utils, Datasets ) {\n\t    /** build job dictionary */\n\t    function buildJobDictionary( chart, module ) {\n\t        var settings_string = '';\n\t        var columns_string = '';\n\t        var group_index = 0;\n\t        for ( key in chart.settings.attributes ) {\n\t            var settings_value = chart.settings.get( key );\n\t            _.each( [ [ ' ', '&#32;' ], [ ',', '&#44;' ], [ ':', '&#58;' ] ], function( pair ) {\n\t                settings_value = settings_value.replace( new RegExp( pair[ 0 ], 'g' ), pair[ 1 ] );\n\t            });\n\t            settings_string += key + ':' + settings_value + ', ';\n\t        };\n\t        settings_string = settings_string.substring( 0, settings_string.length - 2 )\n\t        chart.groups.each( function( group ) {\n\t            group_index++;\n\t            _.each( group.get( '__data_columns' ), function( data_columns, name ) {\n\t                columns_string += name + '_' + group_index + ':' + ( parseInt( group.get( name ) ) + 1 ) + ', ';\n\t            });\n\t        });\n\t        columns_string = columns_string.substring( 0, columns_string.length - 2 );\n\t        return {\n\t                    'tool_id'       : 'charts',\n\t                    'inputs'        : {\n\t                        'input'     : {\n\t                            'id'    : chart.get( 'dataset_id' ),\n\t                            'src'   : 'hda'\n\t                        },\n\t                        'module'    : module,\n\t                        'columns'   : columns_string,\n\t                        'settings'  : settings_string\n\t                    }\n\t                }\n\t    };\n\t\n\t    /** Assists in assigning the viewport panels */\n\t    function panelHelper( options ) {\n\t        var self = this;\n\t        var process             = options.process;\n\t        var chart               = options.chart;\n\t        var render              = options.render;\n\t        var targets             = options.targets;\n\t        var dataset_id          = options.dataset_id || options.chart.get( 'dataset_id' );\n\t        var dataset_groups      = options.dataset_groups || options.chart.groups;\n\t        Datasets.request({\n\t            chart           : chart,\n\t            dataset_id      : dataset_id,\n\t            dataset_groups  : dataset_groups,\n\t            success         : function( result ) {\n\t                try {\n\t                    if ( targets.length == result.length ) {\n\t                        var valid = true;\n\t                        for ( var group_index in result ) {\n\t                            var group = result[ group_index ];\n\t                            if ( !render( targets[ group_index ], [ group ] ) ) {\n\t                                valid = false;\n\t                                break;\n\t                            }\n\t                        }\n\t                        if ( valid ) {\n\t                            chart.state( 'ok', 'Multi-panel chart drawn.' );\n\t                        }\n\t                    } else if ( targets.length == 1 ) {\n\t                        if ( render( targets[ 0 ], result ) ) {\n\t                            chart.state( 'ok', 'Chart drawn.' );\n\t                        }\n\t                    } else {\n\t                        chart.state( 'failed', 'Invalid panel count.' );\n\t                    }\n\t                    process.resolve();\n\t                } catch ( err ) {\n\t                    console.debug( 'FAILED: tabular-utilities::panelHelper() - ' + err );\n\t                    chart.state( 'failed', err );\n\t                    process.reject();\n\t                }\n\t            }\n\t        });\n\t    };\n\t\n\t    /** Get domain boundaries value */\n\t    function getDomains( groups, keys ) {\n\t        function _apply( operator, key ) {\n\t            var value = undefined;\n\t            for ( var group_index in groups ) {\n\t                var value_sub = d3[ operator ]( groups[ group_index ].values, function( d ) { return d[ key ] } );\n\t                value = value === undefined ? value_sub : Math[ operator ]( value, value_sub );\n\t            }\n\t            return value;\n\t        };\n\t        var result = {};\n\t        for( var index in keys ) {\n\t            var key = keys[ index ];\n\t            result[ key ] = {\n\t                min : _apply( 'min', key ),\n\t                max : _apply( 'max', key ),\n\t            };\n\t           \n\t        }\n\t        return result;\n\t    };\n\t\n\t    /** Default series maker */\n\t    function makeSeries( groups, keys ) {\n\t        var plot_data = [];\n\t        for ( var group_index in groups ) {\n\t            var group = groups[ group_index ];\n\t            var data = [];\n\t            for ( var value_index in group.values ) {\n\t                var point = [];\n\t                if ( keys ) {\n\t                    for ( var key_index in keys ) {\n\t                        var column_index = keys[ key_index ];\n\t                        point.push( group.values[ value_index ][ column_index ] );\n\t                    }\n\t                } else {\n\t                    for ( var column_index in group.values[ value_index ] ) {\n\t                        point.push( group.values[ value_index ][ column_index ] );\n\t                    }\n\t                }\n\t                data.push( point );\n\t            }\n\t            plot_data.push( data );\n\t        }\n\t        return plot_data;\n\t    };\n\t\n\t    /** Default category maker */\n\t    function makeCategories( groups, column_keys ) {\n\t        var array = {};\n\t        var data_columns = groups[ 0 ].__data_columns;\n\t        _.each( column_keys, function( key ) {\n\t            if ( data_columns[ key ].is_label ) {\n\t                array[ key ] = [];\n\t            }\n\t        });\n\t        if ( groups && groups[ 0 ] ) {\n\t            _.each( groups[ 0 ].values, function( value_dict ) {\n\t                for ( var key in array ) {\n\t                    array[ key ].push( String( value_dict[ key ] ) );\n\t                }\n\t            });\n\t        }\n\t        mapCategories( array, groups );\n\t        return { array : array }\n\t    };\n\t\n\t    /** Apply default mapping index all values contained in label columns (for all groups) */\n\t    function mapCategories( array, groups ) {\n\t        _.each( groups, function( group ) {\n\t            _.each( group.values, function( value_dict, i ) {\n\t                for ( var key in array ) {\n\t                    value_dict[ key ] = parseInt( i )\n\t                }\n\t            });\n\t        });\n\t    };\n\t\n\t    /** Category make for unique category labels */\n\t    function makeUniqueCategories( groups, with_index ) {\n\t        var categories  = {};\n\t        var array       = {};\n\t        var counter     = {};\n\t        var data_columns = groups[ 0 ].__data_columns;\n\t        _.each( data_columns, function( column_def, key ) {\n\t            if ( column_def.is_label ) {\n\t                categories[ key ] = {};\n\t                array[ key ]      = [];\n\t                counter[ key ]    = 0;\n\t            }\n\t        });\n\t        // index all values contained in label columns (for all groups)\n\t        for ( var i in groups ) {\n\t            var group = groups[ i ];\n\t            for ( var j in group.values ) {\n\t                var value_dict = group.values[ j ];\n\t                for ( var key in categories ) {\n\t                    var value = String( value_dict[ key ] );\n\t                    if ( categories[ key ][ value ] === undefined ) {\n\t                        categories[ key ][ value ] = counter[ key ];\n\t                        array[ key ].push( with_index ? [counter[key], value] : value );\n\t                        counter[ key ]++;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        // convert group values into category indeces\n\t        for ( var i in groups ) {\n\t            var group = groups[ i ];\n\t            for ( var j in group.values ) {\n\t                var value_dict = group.values[ j ];\n\t                for ( var key in categories ) {\n\t                    var value = String( value_dict[ key ] );\n\t                    value_dict[ key ] = categories[ key ][ value ];\n\t                }\n\t            }\n\t        }\n\t        return {\n\t            categories  : categories,\n\t            array       : array,\n\t            counter     : counter\n\t        }\n\t    };\n\t\n\t    /** Make axis */\n\t    function makeTickFormat ( options ) {\n\t        var type        = options.type;\n\t        var precision   = options.precision;\n\t        var categories  = options.categories;\n\t        var formatter   = options.formatter;\n\t        if ( type == 'hide' ) {\n\t            formatter( function() { return '' } );\n\t        } else if ( type == 'auto' ) {\n\t            if ( categories ) {\n\t                formatter( function( value ) { return categories[ value ] || '' } );\n\t            }\n\t        } else {\n\t            var d3format = function( d ) {\n\t                switch ( type ) {\n\t                    case 's':\n\t                        var prefix = d3.formatPrefix( d );\n\t                        return prefix.scale( d ).toFixed() + prefix.symbol;\n\t                    default :\n\t                        return d3.format( '.' + precision + type )( d );\n\t                }\n\t            };\n\t            if ( categories ) {\n\t                formatter( function( value ) {\n\t                    var label = categories[ value ];\n\t                    if ( label ) {\n\t                        if ( isNaN( label ) ) {\n\t                            return label;\n\t                        } else {\n\t                            try {\n\t                                return d3format( label );\n\t                            } catch ( err ) {\n\t                                return label;\n\t                            }\n\t                        }\n\t                    } else {\n\t                        return '';\n\t                    }\n\t                });\n\t            } else {\n\t                formatter( function( value ) { return d3format( value ) } );\n\t            }\n\t        }\n\t    };\n\t\n\t    /** Add zoom handler */\n\t    function addZoom( options ) {\n\t        var scaleExtent = 100;\n\t        var yAxis       = options.yAxis;\n\t        var xAxis       = options.xAxis;\n\t        var xDomain     = options.xDomain || xAxis.scale().domain;\n\t        var yDomain     = options.yDomain || yAxis.scale().domain;\n\t        var redraw      = options.redraw;\n\t        var svg         = options.svg;\n\t        var xScale      = xAxis.scale();\n\t        var yScale      = yAxis.scale();\n\t        var x_boundary  = xScale.domain().slice();\n\t        var y_boundary  = yScale.domain().slice();\n\t        var d3zoom      = d3.behavior.zoom();\n\t        xScale.nice();\n\t        yScale.nice();\n\t        function fixDomain( domain, boundary ) {\n\t            domain[ 0 ] = Math.min( Math.max( domain[ 0 ], boundary[ 0 ] ), boundary[ 1 ] - boundary[ 1 ]/scaleExtent );\n\t            domain[ 1 ] = Math.max( boundary[ 0 ] + boundary[ 1 ] / scaleExtent, Math.min( domain[ 1 ], boundary[ 1 ] ) );\n\t            return domain;\n\t        };\n\t        function zoomed() {\n\t            yDomain( fixDomain( yScale.domain(), y_boundary ) );\n\t            xDomain( fixDomain( xScale.domain(), x_boundary ) );\n\t            redraw();\n\t        };\n\t        function unzoomed() {\n\t            xDomain( x_boundary );\n\t            yDomain( y_boundary );\n\t            redraw();\n\t            d3zoom.scale( 1 );\n\t            d3zoom.translate( [ 0 , 0 ] );\n\t        };\n\t        d3zoom.x( xScale )\n\t              .y( yScale )\n\t              .scaleExtent( [ 1, scaleExtent ] )\n\t              .on( 'zoom', zoomed );\n\t        svg.call( d3zoom ).on( 'dblclick.zoom', unzoomed );\n\t        return d3zoom;\n\t    };\n\t\n\t    return {\n\t        buildJobDictionary      : buildJobDictionary,\n\t        panelHelper             : panelHelper,\n\t        makeCategories          : makeCategories,\n\t        makeUniqueCategories    : makeUniqueCategories,\n\t        makeSeries              : makeSeries,\n\t        getDomains              : getDomains,\n\t        mapCategories           : mapCategories,\n\t        makeTickFormat          : makeTickFormat,\n\t        addZoom                 : addZoom\n\t    }\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n\n/***/ 5:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/** This class handles, formats and caches datasets. */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1) ], __WEBPACK_AMD_DEFINE_RESULT__ = function( Utils ) {\n\t    /** Fills request dictionary with data from cache/response */\n\t    var _cache = {};\n\t    var request = function( options ) {\n\t        var groups      = options.dataset_groups;\n\t        var dataset_id  = options.dataset_id;\n\t        // identify columns needed to fulfill request\n\t        var column_list = [];\n\t        groups.each( function( group ) {\n\t            _.each( group.get( '__data_columns' ), function( column_def, column_name ) {\n\t                var column = group.get( column_name );\n\t                var block_id = _block_id( dataset_id, column );\n\t                if ( column_list.indexOf( column ) === -1 && !_cache[ block_id ] && column != 'auto' && column != 'zero' && column !== undefined ) {\n\t                    column_list.push( column );\n\t                }\n\t            });\n\t        });\n\t        if ( column_list.length == 0 ) {\n\t            _fillFromCache( options );\n\t            return;\n\t        }\n\t        // Fetch data columns into dataset object\n\t        Utils.get({\n\t            url     : Galaxy.root + 'api/datasets/' + dataset_id,\n\t            data    : {\n\t                data_type   : 'raw_data',\n\t                provider    : 'dataset-column',\n\t                indeces     : column_list.toString()\n\t            },\n\t            success : function( response ) {\n\t                var results = new Array( column_list.length );\n\t                for ( var i = 0; i < results.length; i++ ) {\n\t                    results[ i ] = [];\n\t                }\n\t                for ( var i in response.data ) {\n\t                    var row = response.data[ i ];\n\t                    for ( var j in row ) {\n\t                        var v = row[ j ];\n\t                        if ( v !== undefined && v != 2147483647 ) {\n\t                            results[ j ].push( v );\n\t                        }\n\t                    }\n\t                }\n\t                console.debug( 'tabular-datasets::_fetch() - Fetching complete.' );\n\t                for ( var i in results ) {\n\t                    var column = column_list[ i ];\n\t                    var block_id = _block_id( dataset_id, column );\n\t                    _cache[ block_id ] = results[ i ];\n\t                }\n\t                _fillFromCache( options );\n\t            }\n\t        });\n\t    };\n\t\n\t    /** Fill data from cache */\n\t    var _fillFromCache = function( options ) {\n\t        var groups      = options.dataset_groups;\n\t        var dataset_id  = options.dataset_id;\n\t        console.debug( 'tabular-datasets::_fillFromCache() - Filling request from cache.' );\n\t        var limit = 0;\n\t        groups.each( function( group ) {\n\t            _.each( group.get( '__data_columns' ), function( column_def, column_name ) {\n\t                var column = group.get( column_name );\n\t                var block_id = _block_id( dataset_id, column );\n\t                var column_data = _cache[ block_id ];\n\t                if ( column_data ) {\n\t                    limit = Math.max( limit, column_data.length );\n\t                }\n\t            });\n\t        });\n\t        if ( limit == 0 ) {\n\t            console.debug( 'tabular-datasets::_fillFromCache() - No data available.' );\n\t        }\n\t        var results = [];\n\t        groups.each( function( group, group_index ) {\n\t            var dict = Utils.merge( { key: ( group_index ) + ':' + group.get( 'key' ), values: [] }, group.attributes );\n\t            for ( var j = 0; j < limit; j++ ) {\n\t                dict.values[ j ] = { x : parseInt( j ) };\n\t            }\n\t            results.push( dict );\n\t        });\n\t        groups.each( function( group, group_index ) {\n\t            var values = results[ group_index ].values;\n\t            _.each( group.get( '__data_columns' ), function( column_def, column_name ) {\n\t                var column = group.get( column_name );\n\t                switch ( column ) {\n\t                    case 'auto':\n\t                        for ( var j = 0; j < limit; j++ ) {\n\t                            values[ j ][ column_name ] = parseInt( j );\n\t                        }\n\t                        break;\n\t                    case 'zero':\n\t                        for ( var j = 0; j < limit; j++ ) {\n\t                            values[ j ][ column_name ] = 0;\n\t                        }\n\t                        break;\n\t                    default:\n\t                        var block_id = _block_id( dataset_id, column );\n\t                        var column_data = _cache[ block_id ];\n\t                        for ( var j = 0; j < limit; j++ ) {\n\t                            var value = values[ j ];\n\t                            var v = column_data[ j ];\n\t                            if ( isNaN( v ) && !column_def.is_label ) {\n\t                                v = 0;\n\t                            }\n\t                            value[ column_name ] = v;\n\t                        }\n\t                }\n\t            });\n\t        });\n\t        options.success( results );\n\t    };\n\t\n\t    /** Get block id */\n\t    var _block_id = function ( dataset_id, column ) {\n\t        return dataset_id + '_' + '_' + column;\n\t    };\n\t\n\t    return { request: request };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n\n/***/ 20:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/** This class handles job submissions to the Galaxy API. */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1) ], __WEBPACK_AMD_DEFINE_RESULT__ = function( Utils ) {\n\t\n\t    /** Time to wait before refreshing to check if job has completed */\n\t    var WAITTIME = 1000;\n\t\n\t    /** Submit job request to charts tool */\n\t    var request = function( chart, parameters, success, error ) {\n\t        chart.state( 'wait', 'Requesting job results...' );\n\t         if ( chart.get( 'modified' ) ) {\n\t            cleanup( chart );\n\t            chart.set( 'modified', false );\n\t        }\n\t        var dataset_id_job = chart.get( 'dataset_id_job' );\n\t        if ( dataset_id_job != '' ) {\n\t            wait( chart, success, error );\n\t        } else {\n\t            var chart_id            = chart.id;\n\t            var chart_type          = chart.get( 'type' );\n\t            var chart_definition    = chart.definition;\n\t            chart.state( 'wait', 'Sending job request...' );\n\t            Utils.request({\n\t                type    : 'POST',\n\t                url     : Galaxy.root + 'api/tools',\n\t                data    : parameters,\n\t                success : function( response ) {\n\t                    if ( !response.outputs || response.outputs.length == 0 ) {\n\t                        chart.state( 'failed', 'Job submission failed. No response.' );\n\t                        error && error();\n\t                    } else {\n\t                        refreshHdas();\n\t                        var job = response.outputs[0];\n\t                        chart.state( 'wait', 'Your job has been queued. You may close the browser window. The job will run in the background.' );\n\t                        chart.set( 'dataset_id_job', job.id );\n\t                        chart.save();\n\t                        wait( chart, success, error );\n\t                    }\n\t                },\n\t                error   : function( response ) {\n\t                    var message = '';\n\t                    if ( response && response.message && response.message.data && response.message.data.input ) {\n\t                        message = response.message.data.input + '.';\n\t                    }\n\t                    chart.state( 'failed', 'This visualization requires the \\'' + parameters.tool_id + '\\' tool. Please make sure it is installed. ' + message );\n\t                    error && error();\n\t                          \n\t                }\n\t            });\n\t        }\n\t    };\n\t\n\t    /* Remove previous data when re-running jobs */\n\t    var cleanup = function( chart ) {\n\t        var self = this;\n\t        var previous =  chart.get( 'dataset_id_job' );\n\t        if (previous != '') {\n\t            Utils.request({\n\t                type    : 'PUT',\n\t                url     : Galaxy.root + 'api/histories/none/contents/' + previous,\n\t                data    : { deleted: true },\n\t                success : function() { refreshHdas() }\n\t            });\n\t            chart.set( 'dataset_id_job', '' );\n\t        }\n\t    };\n\t\n\t    /** Request job details */\n\t    var wait = function( chart, success, error ) {\n\t        var self = this;\n\t        Utils.request({\n\t            type    : 'GET',\n\t            url     : Galaxy.root + 'api/datasets/' + chart.get( 'dataset_id_job' ),\n\t            data    : {},\n\t            success : function( dataset ) {\n\t                var ready = false;\n\t                switch ( dataset.state ) {\n\t                    case 'ok':\n\t                        chart.state( 'wait', 'Job completed successfully...' );\n\t                        success && success( dataset );\n\t                        ready = true;\n\t                        break;\n\t                    case 'error':\n\t                        chart.state( 'failed', 'Job has failed. Please check the history for details.' );\n\t                        error && error( dataset );\n\t                        ready = true;\n\t                        break;\n\t                    case 'running':\n\t                        chart.state( 'wait', 'Your job is running. You may close the browser window. The job will continue in the background.' );\n\t                }\n\t                !ready && setTimeout( function() { wait( chart, success, error ) }, WAITTIME );\n\t            }\n\t        });\n\t    };\n\t\n\t    /** Refresh history panel */\n\t    var refreshHdas = function() {\n\t        Galaxy && Galaxy.currHistoryPanel && Galaxy.currHistoryPanel.refreshContents();\n\t    };\n\t\n\t    return { request: request }\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n\n/***/ 38:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t    return {\n\t        colorSets: {\n\t            seis:       ['#AA0000', '#D00000', '#F70000', '#FF1D00', '#FF4400', '#FF6A00', '#FF9000', '#FFB700', '#FFDD00', '#FFFF00', '#FFFF00', '#FFFF00', '#BDFF0C', '#73FF1A', '#3FFA36', '#16F45A', '#00D08B', '#0087CD', '#0048FA', '#0024E3'].reverse(),\n\t            \n\t            sealand:    ['#8C66FF', '#6A66FF', '#6684FF', '#66A7FF', '#66CAFF', '#66ECFF', '#66FFF0', '#66FFCE', '#66FFAB', '#66FF88', '#66FF66', '#88FF66', '#ABFF66', '#CEFF66', '#FFEEA6', '#FFD3A6', '#FFB8A6', '#FFAAB0', '#FFB5CB', '#FFC0E1'].reverse(),\n\t            \n\t            redgreen:   ['#005824', '#1A693B', '#347B53', '#4F8D6B', '#699F83', '#83B09B', '#9EC2B3', '#B8D4CB', '#D2E6E3', '#EDF8FB', '#FFFFFF', '#F1EEF6', '#E6D3E1','#DBB9CD', '#D19EB9', '#C684A4', '#BB6990', '#B14F7C', '#A63467', '#9B1A53', '#91003F'],\n\t            \n\t            ocean:      ['#000000', '#000209', '#000413', '#00061E', '#000728', '#000932', '#002650', '#00426E', '#005E8C', '#007AAA', '#0096C8', '#22A9C2', '#45BCBB', '#67CFB5', '#8AE2AE', '#ACF6A8', '#BCF8B9', '#CBF9CA', '#DBFBDC', '#EBFDED'].reverse(),\n\t            \n\t            cool:       ['#00FFFF', '#0DF2FF', '#19E6FF', '#26D9FF', '#33CCFF', '#3FBFFF', '#4CB3FF', '#59A6FF', '#6699FF', '#738CFF', '#7F7FFF', '#8C73FF', '#9966FF', '#A659FF', '#B24DFF', '#BF3FFF', '#CC33FF', '#D926FF', '#E619FF', '#F20DFF'],\n\t            \n\t            copper:     ['#000000', '#100906', '#1F130D', '#301E13', '#40281A', '#50321F', '#603C26', '#70462D', '#805033', '#905A3A', '#A06440', '#B06E46', '#C0784D', '#D08253', '#E08C5A', '#F09660', '#FFA066', '#FFAA6D', '#FFB473', '#FFBE7A'].reverse(),\n\t            \n\t            gray:       ['#000000', '#0D0D0D', '#191919', '#262626', '#333333', '#3F3F3F', '#4C4C4C', '#595959', '#666666', '#737373', '#7F7F7F', '#8C8C8C', '#999999', '#A6A6A6', '#B2B2B2', '#BFBFBF', '#CCCCCC', '#D9D9D9', '#E6E6E6', '#F2F2F2'].reverse(),\n\t            \n\t            hot:        ['#000000', '#220000', '#440000', '#660000', '#880000', '#AA0000', '#CC0000', '#EE0000', '#FF1100', '#FF3300', '#FF5500', '#FF7700', '#FF9900', '#FFBB00', '#FFDD00', '#FFFF00', '#FFFF33', '#FFFF66', '#FFFF99', '#FFFFCC'].reverse(),\n\t            \n\t            jet:        ['#00007F', '#0000B2', '#0000E5', '#0019FF', '#004DFF', '#007FFF', '#00B2FF', '#00E5FF', '#FFFFF2', '#FFFFD9', '#FFFFBF', '#FFFFA5', '#FFFF8C', '#FFE500', '#FFB300', '#FF7F00', '#FF4C00', '#FF1900', '#E50000', '#B20000'],\n\t            \n\t            no_green:   ['#1F60FF', '#1F60FF', '#1F9FFF', '#1FBFFF', '#00CFFF', '#2AFFFF', '#2AFFFF', '#55FFFF', '#7FFFFF', '#AAFFFF', '#FFFF54', '#FFFF54', '#FFF000', '#FFBF00', '#FFA800', '#FF8A00', '#FF8A00', '#FF7000', '#FF4D00', '#FF0000'],\n\t\n\t            polar:      ['#0000FF', '#1919FF', '#3333FF', '#4C4CFF', '#6666FF', '#7F7FFF', '#9999FF', '#B2B2FF', '#CCCCFF', '#E6E6FF', '#FFFFFF', '#FFE5E5', '#FFCCCC', '#FFB2B2', '#FF9999', '#FF7F7F', '#FF6666', '#FF4C4C', '#FF3333', '#FF1A1A'],\n\t\n\t            red2green:  ['#FF0000', '#FF1919', '#FF3333', '#FF4C4C', '#FF6666', '#FF7F7F', '#FF9999', '#FFB2B2', '#FFCCCC', '#FFE6E6', '#FFFFFF', '#E5FFE5', '#CCFFCC', '#B2FFB2', '#99FF99', '#7FFF7F',  '#66FF66', '#4CFF4C', '#33FF33', '#1AFF1A'].reverse(),\n\t\n\t            relief:     ['#000000', '#000413', '#000728', '#002650', '#005E8C', '#0096C8', '#45BCBB', '#8AE2AE', '#BCF8B9', '#DBFBDC', '#467832', '#887438', '#B19D48', '#DBC758', '#FAE769', '#FAEB7E', '#FCED93', '#FCF1A7', '#FCF6C1', '#FDFAE0'].reverse(),\n\t            \n\t            split:      ['#7F7FFF', '#6666E6', '#4D4DCC', '#3333B3', '#1A1A99', '#00007F', '#000066', '#00004D', '#000033', '#00001A', '#000000', '#1A0000', '#330000', '#4D0000', '#660000', '#7F0000', '#991A1A', '#B33333', '#CC4D4D', '#E66666'],\n\t            \n\t            wysiwyg:    ['#3F003F', '#3F003F', '#3F00BF', '#003FFF', '#00A0FF', '#3FBFFF', '#3FBFFF', '#40E0FF', '#3FFFBF', '#3FFF3F', '#7FFF3F', '#BFFF3F', '#BFFF3F', '#FFE040', '#FFE040', '#FF6040', '#FF1F40', '#FF60C0', '#FFA0FF', '#FFA0FF'].reverse()\n\t        }\n\t    }\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n\n/***/ 39:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(4), __webpack_require__(1), __webpack_require__(38) ], __WEBPACK_AMD_DEFINE_RESULT__ = function( Utilities, Utils, HeatmapParameters ) {\n\t    return Backbone.View.extend({\n\t        optionsDefault: {\n\t            margin: {\n\t                top                 : 40,\n\t                right               : 70,\n\t                bottom              : 70,\n\t                left                : 70\n\t            },\n\t            style: {\n\t                'font-weight'       : 'normal',\n\t                'font-family'       : 'Verdana',\n\t                'font-size'         : 12\n\t            },\n\t            legend: {\n\t                width               : 15,\n\t                size                : 0.9,\n\t                style : {\n\t                    'font-weight'   : 'normal',\n\t                    'font-family'   : 'Verdana',\n\t                    'font-size'     : 11\n\t                },\n\t                limit               : 7\n\t            },\n\t            background_color        : '#FFFFFF',\n\t            debug_color             : '#FFFFFF'\n\t        },\n\t        \n\t        initialize: function( options ) {\n\t            var self = this;\n\t            this.chart          = options.chart;\n\t            this.canvas_id      = options.canvas_id;\n\t            this.group          = options.groups[ 0 ];\n\t            this.data           = options.groups[ 0 ].values;\n\t            this.options        = Utils.merge ( this.optionsDefault, options );\n\t            \n\t            // get color set\n\t            this.color_set = HeatmapParameters.colorSets[ this.chart.settings.get( 'color_set' ) ];\n\t            \n\t            // categories\n\t            this.categories = Utilities.makeUniqueCategories( [ this.group ] );\n\t            \n\t            // domains/scales\n\t            this.xScale = d3.scale.linear().domain( [ 0, this.categories.array.x.length ] );\n\t            this.yScale = d3.scale.linear().domain( [ 0, this.categories.array.y.length ] );\n\t            \n\t            // color scale\n\t            this.zMin = d3.min( this.data, function( d ) { return d.z; } );\n\t            this.zMax = d3.max( this.data, function( d ) { return d.z; } );\n\t            this.zScale = d3.scale.quantize().domain( [ this.zMin, this.zMax ] ).range( this.color_set );\n\t\n\t            // create axis\n\t            this.xAxis = d3.svg.axis().scale( this.xScale ).orient( 'bottom' );\n\t            this.yAxis = d3.svg.axis().scale( this.yScale ).orient( 'left' );\n\t            \n\t            // make categories\n\t            this._makeTickFormat( 'x' );\n\t            this._makeTickFormat( 'y' );\n\t            \n\t            // add tooltip\n\t            this.tooltip = d3.select( '.charts-viewport-container' ).append( 'div' )\n\t                .attr( 'class', 'charts-tooltip' )\n\t                .style( this.options.style )\n\t                .style( 'opacity', 0 );\n\t            \n\t            // refresh on window resize\n\t            $( window ).on( 'resize', function () { self.redraw() } );\n\t            this.redraw();\n\t            Utilities.addZoom({\n\t                xAxis       : this.xAxis,\n\t                yAxis       : this.yAxis,\n\t                redraw      : function() { self.redraw() },\n\t                svg         : d3.select( '#' + this.canvas_id )\n\t            });\n\t        },\n\t            \n\t        /** Redraw */\n\t        redraw: function() {\n\t            // get parameters\n\t            var chart       = this.chart;\n\t            var data        = this.data;\n\t            var self        = this;\n\t            this.data       = data;\n\t            \n\t            // get/reset container\n\t            var container = $( '#' + this.canvas_id );\n\t            container.empty();\n\t            \n\t            // get domain\n\t            var xDomain = this.xScale.domain();\n\t            var yDomain = this.yScale.domain();\n\t            \n\t            // set ticks\n\t            var xTickStart = Math.ceil( xDomain[ 0 ] );\n\t            var xTickEnd   = Math.floor( xDomain[ 1 ] );\n\t            var yTickStart = Math.ceil( yDomain[ 0 ] );\n\t            var yTickEnd   = Math.floor( yDomain[ 1 ] );\n\t            this.xAxis.tickValues( d3.range( xTickStart, xTickEnd, 1 ) );\n\t            this.yAxis.tickValues( d3.range( yTickStart, yTickEnd, 1 ) );\n\t            \n\t            // get margins\n\t            var margin = this.options.margin;\n\t            \n\t            // configure dimensions\n\t            this.height = parseInt( container.height() ) - margin.top - margin.bottom;\n\t            this.width  = parseInt( container.width() ) - margin.left - margin.right;\n\t            \n\t            // set range\n\t            this.xScale.range( [ 0, this.width ] );\n\t            this.yScale.range( [ this.height, 0 ] );\n\t\n\t            // get box properties\n\t            this.rowCount = yDomain[ 1 ] - yDomain[ 0 ];\n\t            this.colCount = xDomain[ 1 ] - xDomain[ 0 ];\n\t            this.boxWidth = Math.max( 1, Math.floor( this.width / this.colCount ) );\n\t            this.boxHeight = Math.max( 1, Math.floor( this.height / this.rowCount ) );\n\t            \n\t            // create group\n\t            var svg = this.svg = d3.select( '#' + this.canvas_id )\n\t                                   .append( 'g' )\n\t                                   .attr( 'class', 'heatmap' )\n\t                                   .attr( 'transform', 'translate(' + margin.left + ',' + margin.top + ')' );\n\t                        \n\t            // build elements\n\t            this._buildBoxes();\n\t            this._buildX();\n\t            this._buildY();\n\t            \n\t            // show legend only if requested\n\t            if ( this.chart.settings.get('show_legend') == 'true' ) {\n\t                this._buildLegend();\n\t            }\n\t        },\n\t        \n\t        /** Build boxes */\n\t        _buildBoxes: function() {\n\t            var self = this;\n\t            var height      = this.height;\n\t            var width       = this.width;\n\t            var margin      = this.options.margin;\n\t            var svg         = this.svg;\n\t            var boxWidth    = this.boxWidth;\n\t            var boxHeight   = this.boxHeight;\n\t            function _locator( d ) { return 'translate(' + self.xScale( d.x ) + ',' + self.yScale( d.y + 1 ) + ')' };\n\t            function _color ( d ) { return self.zScale( d.z ) };\n\t\n\t            // set background color\n\t            var gBackground = svg.append( 'rect' )\n\t                .attr( 'width', width )\n\t                .attr( 'height', height )\n\t                .attr( 'fill', this.options.background_color );\n\t\n\t            // clip path\n\t            var clip = svg.append( 'clipPath' )\n\t                .attr( 'id', 'clip' )\n\t                .append( 'rect' )\n\t                .attr( 'x', 0 )\n\t                .attr( 'y', 0 )\n\t                .attr( 'width', width )\n\t                .attr( 'height', height );\n\t\n\t            // create chart area\n\t            var chartBody = svg.append( 'g' ).attr( 'clip-path', 'url(#clip)' );\n\t                \n\t            // add boxes to chart area\n\t            var boxes = chartBody.selectAll( 'box-group' ).data( this.data, function( d, i ) {\n\t                return d.x + '\\0' + d.y;\n\t            });\n\t            var gEnter = boxes.enter().append( 'g' )\n\t                .attr( 'class', 'box-group' );\n\t            gEnter.append( 'rect' )\n\t                .attr( 'class','heat-box' );\n\t            boxes.selectAll( 'rect' )\n\t                .attr( 'rx', 1 )\n\t                .attr( 'ry', 1 )\n\t                .attr( 'fill', _color )\n\t                .attr( 'width', boxWidth )\n\t                .attr( 'height', boxHeight )\n\t                .attr( 'transform', _locator );\n\t            \n\t            // add tooltip events\n\t            boxes.selectAll( 'rect' )\n\t            .on( 'dblclick', function( d ) {\n\t                var url = self.chart.settings.get( 'url_template' ).trim();\n\t                if ( url ) {\n\t                    d3.event.stopPropagation();\n\t                    var xLabel = self.categories.array.x[ d.x ];\n\t                    var yLabel = self.categories.array.y[ d.y ];\n\t                    window.open( url.replace( '__LABEL__', xLabel ) );\n\t                    window.open( url.replace( '__LABEL__', yLabel ) );\n\t                }\n\t            })\n\t            .on('mouseover', function( d ) {\n\t                self.tooltip.style( 'opacity', 0.9 );\n\t                self.tooltip .html( self._templateTooltip( d ) )\n\t                    .style( 'left', ( d3.event.pageX ) + 'px' )\n\t                    .style( 'top', ( d3.event.pageY - 20 ) + 'px' );\n\t                })\n\t            .on('mouseout', function( d ) {\n\t                self.tooltip.style( 'opacity', 0 );\n\t            });\n\t\n\t            // initially hide tooltips\n\t            this.tooltip.style( 'opacity', 0 );\n\t            \n\t            // exit\n\t            boxes.exit().remove();\n\t        },\n\t        \n\t        /** Build x axis */\n\t        _buildX : function() {\n\t            var self = this;\n\t            var height      = this.height;\n\t            var width       = this.width;\n\t            var margin      = this.options.margin;\n\t            var svg         = this.svg;\n\t            var font_size   = this.options.style[ 'font-size' ];\n\t            var boxWidth    = this.boxWidth;\n\t            \n\t            // draw x axis\n\t            this.gxAxis = svg.append( 'g' )\n\t                .attr( 'class', 'x axis' )\n\t                .style( 'stroke-width', 1 )\n\t                .attr( 'transform', 'translate(0,' + height + ')' )\n\t                .call( this.xAxis );\n\t                \n\t            // fix text\n\t            var xFontSize = Math.min( boxWidth, font_size );\n\t            this.gxAxis.selectAll( 'text' )\n\t                .style( this.options.style )\n\t                .style( { 'font-size': xFontSize + 'px' } )\n\t                .attr( 'transform', function( d ) {\n\t                    var y = -this.getBBox().height - 15;\n\t                    var x = -xFontSize + boxWidth / 2;\n\t                    return 'rotate(-90)translate(' + y + ',' + x + ')';\n\t                });\n\t                \n\t            // set background color\n\t            var gxAxisLabelBackground = svg.append( 'rect' )\n\t                .attr( 'width', width )\n\t                .attr( 'height', font_size + 3 )\n\t                .attr( 'y', height + margin.bottom - font_size - 3 )\n\t                .attr( 'fill', this.options.debug_color )\n\t                .attr( 'opacity', 0.7 );\n\t                \n\t            // axis label\n\t            this.gxAxisLabel = svg.append( 'text' )\n\t                .attr( 'class', 'x label' )\n\t                .style( this.options.style )\n\t                .text( this.chart.settings.get( 'x_axis_label' ) )\n\t                .attr( 'transform', function( d ) {\n\t                    var y = height + margin.bottom - font_size / 3;\n\t                    var x = ( width - this.getBBox().width ) / 2;\n\t                    return 'translate(' + x + ',' + y + ')';\n\t                });\n\t                \n\t            // chart title\n\t            this.gxTickLabel = svg.append( 'text' )\n\t                .attr( 'class', 'title' )\n\t                .style( this.options.style )\n\t                .style({'font-size' : 1.1 * font_size } )\n\t                .text( this.group.key )\n\t                .attr( 'transform', function( d ) {\n\t                    var y = -margin.top / 2;\n\t                    var x = ( width - this.getBBox().width ) / 2;\n\t                    return 'translate(' + x + ',' + y + ')';\n\t                });\n\t        },\n\t        \n\t        /** Build y axis */\n\t        _buildY : function() {\n\t            var self = this;\n\t            var height      = this.height;\n\t            var width       = this.width;\n\t            var margin      = this.options.margin;\n\t            var svg         = this.svg;\n\t            var font_size   = this.options.style[ 'font-size' ];\n\t            var boxHeight   = this.boxHeight;\n\t            \n\t            // draw y axis\n\t            this.gyAxis = svg.append( 'g' )\n\t                .attr( 'class', 'y axis' )\n\t                .style( 'stroke-width', 1 )\n\t                .call( this.yAxis );\n\t\n\t            // fix text\n\t            var yFontSize = Math.min( boxHeight, font_size );\n\t            this.gyAxis.selectAll( 'text' )\n\t                .style( this.options.style )\n\t                .style( { 'font-size': yFontSize + 'px' } )\n\t                .attr( 'y', -boxHeight / 2 );\n\t            \n\t            // set background color\n\t            var gyAxisLabelBackground = svg.append( 'rect' )\n\t                .attr( 'width', font_size )\n\t                .attr( 'height', height )\n\t                .attr( 'x', -margin.left )\n\t                .attr( 'fill', this.options.debug_color )\n\t                .attr( 'opacity', 0.7 );\n\t                \n\t            // axis label\n\t            this.gyAxisLabel = svg.append( 'text' )\n\t                .attr( 'class', 'y label' )\n\t                .style( this.options.style )\n\t                .text( this.chart.settings.get( 'y_axis_label' ) )\n\t                .attr( 'transform', function( d ) {\n\t                    var x = -margin.left + font_size - 2;\n\t                    var y = -( height + this.getBBox().width ) / 2;\n\t                    return 'rotate(-90)translate(' + y + ',' + x + ')';\n\t                });\n\t        },\n\t\n\t        /** Build legend */\n\t        _buildLegend : function() {\n\t            var self = this;\n\t            var height      = this.height;\n\t            var width       = this.width;\n\t            var margin      = this.options.margin;\n\t            var font_size   = this.options.legend.style[ 'font-size' ];\n\t            var limit       = this.options.legend.limit;\n\t            var legendSize  = this.options.legend.size;\n\t            var legendWidth = this.options.legend.width;\n\t            var legendElements = this.zScale.range().length;\n\t            var legendElementHeight = Math.max( legendSize * height / legendElements, font_size );\n\t            var legendHeight = legendElements * legendElementHeight / 2;\n\t            var data = d3.range( this.zMin, this.zMax, 2 * ( this.zMax - this.zMin ) / legendElements ).reverse();\n\t            if ( data.length < 2 ) {\n\t                return;\n\t            }\n\t            var legend = this.svg.selectAll( '.legend' )\n\t                .data( data )\n\t                .enter().append( 'g' )\n\t                    .attr( 'class', 'legend' )\n\t                    .attr( 'transform', function( d, i ) {\n\t                        var x = width + 10;\n\t                        var y = ( ( height - legendHeight ) / 2 ) + ( i * legendElementHeight );\n\t                        return 'translate(' + x + ',' + y + ')';\n\t                    });\n\t            legend.append( 'rect' )\n\t                  .attr( 'width', legendWidth )\n\t                  .attr( 'height', legendElementHeight )\n\t                  .style( 'fill', function( z ) { return self.zScale( z ) } );\n\t            legend.append('text')\n\t                  .attr( 'x', legendWidth + 4 )\n\t                  .attr( 'y', function() { return ( legendElementHeight + this.getBBox().height ) / 2 } )\n\t                  .style( this.options.legend.style )\n\t                  .text( function( d ) { return String( d ).length > limit ? String( d ).substr( 0, limit - 2 ) + '..' : String( d ) } );\n\t            this.svg.append( 'text' )\n\t                .style( this.options.legend.style )\n\t                .style( { 'font-size' : 9, 'font-weight': 'bold' } )\n\t                .text( 'Legend' )\n\t                .attr( 'transform', function( d, i ) {\n\t                    var x = width + ( margin.right - this.getBBox().width ) / 2;\n\t                    var y = ( ( height - legendHeight ) / 2 ) - 10;\n\t                    return 'translate(' + x + ',' + y + ')';\n\t                });\n\t        },\n\t\n\t        /** Create axes formatting */\n\t        _makeTickFormat: function( id ) {\n\t            var settings = this.chart.settings;\n\t            var self = this;\n\t            Utilities.makeTickFormat({\n\t                categories  : self.categories.array[ id ],\n\t                type        : settings.get( id + '_axis_type|type' ),\n\t                precision   : settings.get( id + '_axis_type|precision' ),\n\t                formatter   : function( formatter ) {\n\t                    if ( formatter ) {\n\t                        self[ id + 'Axis' ].tickFormat( function( value ) {\n\t                           return formatter( value );\n\t                        });\n\t                    }\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Handle error */\n\t        _handleError: function( err ) {\n\t            this.chart.state( 'failed', err );\n\t        },\n\t\n\t        /** Main template */\n\t        _templateTooltip: function(d) {\n\t            var x = this.categories.array.x[ d.x ];\n\t            var y = this.categories.array.y[ d.y ];\n\t            var z = d.z;\n\t            return  '<table>' +\n\t                        '<tr>' +\n\t                            '<td class=\"charts-tooltip-first\">Row:</td>' +\n\t                            '<td>' + y + '</td>' +\n\t                        '</tr>' +\n\t                        '<tr>' +\n\t                            '<td class=\"charts-tooltip-first\">Column:</td>' +\n\t                            '<td>' + x + '</td>' +\n\t                        '</tr>' +\n\t                        '<tr>' +\n\t                            '<td class=\"charts-tooltip-first\">Value:</td>' +\n\t                            '<td>' + z + '</td>' +\n\t                        '</tr>' +\n\t                    '</table>';\n\t        }\n\t    });\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }\n\n/******/ })});;\n\n\n/** WEBPACK FOOTER **\n ** others_heatmap_cluster.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap e3622d0033a89edad914\n **/","define( [ 'visualizations/utilities/tabular-utilities', 'utilities/jobs', 'visualizations/others/heatmap/heatmap-plugin' ], function( Utilities, Jobs, HeatMap ) {\n    return Backbone.View.extend({\n        initialize: function( options ) {\n            Jobs.request( options.chart, Utilities.buildJobDictionary( options.chart, 'heatmap' ), function( dataset ) {\n                var index = 0;\n                var dataset_groups = new Backbone.Collection();\n                options.chart.groups.each( function( group, index ) {\n                    dataset_groups.add({\n                        __data_columns: {\n                            x : { is_label   : true },\n                            y : { is_label   : true },\n                            z : { is_numeric : true }\n                        },\n                        x     : index++,\n                        y     : index++,\n                        z     : index++,\n                        key   : group.get( 'key' )\n                    });\n                });\n                options.dataset_id = dataset.id;\n                options.dataset_groups = dataset_groups;\n                options.render = function( canvas_id, groups ) {\n                    new HeatMap({\n                        chart       : options.chart,\n                        canvas_id   : canvas_id,\n                        groups      : groups\n                    });\n                    return true;\n                };\n                Utilities.panelHelper( options );\n            }, function() { options.process.reject() } );\n        }\n    });\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./static/repository/visualizations/others/heatmap_cluster/wrapper.js\n ** module id = 0\n ** module chunks = 21\n **/","/** Useful helper functions */\ndefine( [], function() {\n\n    /** Clone */\n    function clone( obj ) {\n        return JSON.parse( JSON.stringify( obj ) || null );\n    };\n\n    /**\n     * Check if a string is a json string\n     * @param{String}   text - Content to be validated\n     */\n    function isJSON(text) {\n        return /^[\\],:{}\\s]*$/.test(text.replace(/\\\\[\"\\\\\\/bfnrtu]/g, '@').\n            replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']').\n            replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''));\n    };\n\n    /**\n     * Request handler for GET\n     * @param{String}   url     - Url request is made to\n     * @param{Function} success - Callback on success\n     * @param{Function} error   - Callback on error\n     * @param{Boolean}  cache   - Use cached data if available\n     */\n    function get (options) {\n        top.__utils__get__ = top.__utils__get__ || {};\n        var cache_key = JSON.stringify( options );\n        if (options.cache && top.__utils__get__[cache_key]) {\n            options.success && options.success(top.__utils__get__[cache_key]);\n            window.console.debug('utils.js::get() - Fetching from cache [' + options.url + '].');\n        } else {\n            request({\n                url     : options.url,\n                data    : options.data,\n                success : function(response) {\n                    top.__utils__get__[cache_key] = response;\n                    options.success && options.success(response);\n                },\n                error : function(response) {\n                    options.error && options.error(response);\n                }\n            });\n        }\n    };\n\n    /**\n     * Request handler\n     * @param{String}   method  - Request method ['GET', 'POST', 'DELETE', 'PUT']\n     * @param{String}   url     - Url request is made to\n     * @param{Object}   data    - Data send to url\n     * @param{Function} success - Callback on success\n     * @param{Function} error   - Callback on error\n     */\n    function request (options) {\n        var ajaxConfig = {\n            contentType : 'application/json',\n            type        : options.type || 'GET',\n            data        : options.data || {},\n            url         : options.url\n        }\n        if ( ajaxConfig.type == 'GET' || ajaxConfig.type == 'DELETE' ) {\n            if ( !$.isEmptyObject(ajaxConfig.data) ) {\n                ajaxConfig.url += ajaxConfig.url.indexOf('?') == -1 ? '?' : '&';\n                ajaxConfig.url += $.param(ajaxConfig.data, true);\n            }\n            ajaxConfig.data = null;\n        } else {\n            ajaxConfig.dataType = 'json';\n            ajaxConfig.url      = ajaxConfig.url;\n            ajaxConfig.data     = JSON.stringify( ajaxConfig.data );\n        }\n        $.ajax( ajaxConfig ).done( function( response ) {\n            if ( typeof response === 'string' && isJSON( response ) ) {\n                try {\n                    response = response.replace( 'Infinity,', '\"Infinity\",' );\n                    response = jQuery.parseJSON( response );\n                } catch ( e ) {\n                    console.debug( e );\n                }\n            }\n            options.success && options.success( response );\n        }).fail( function( response ) {\n            var response_text = null;\n            try {\n                response_text = jQuery.parseJSON( response.responseText );\n            } catch (e) {\n                response_text = response.responseText;\n            }\n            options.error && options.error( response_text, response );\n        }).always( function() {\n            options.complete && options.complete();\n        });\n    };\n\n    /**\n     * Safely merge to dictionaries\n     * @param{Object}   options         - Target dictionary\n     * @param{Object}   optionsDefault  - Source dictionary\n     */\n    function merge (options, optionsDefault) {\n        if (options) {\n            return _.defaults(options, optionsDefault);\n        } else {\n            return optionsDefault;\n        }\n    };\n\n    /** Create a unique id */\n    function uid(){\n        top.__utils__uid__ = top.__utils__uid__ || 0;\n        return 'uid-' + top.__utils__uid__++;\n    };\n\n    return {\n        get     : get,\n        merge   : merge,\n        uid     : uid,\n        request : request,\n        clone   : clone,\n        isJSON  : isJSON\n    };\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./static/repository/utilities/utils.js\n ** module id = 1\n ** module chunks = 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n **/","define( [ 'utilities/utils', 'visualizations/utilities/tabular-datasets' ], function( Utils, Datasets ) {\n    /** build job dictionary */\n    function buildJobDictionary( chart, module ) {\n        var settings_string = '';\n        var columns_string = '';\n        var group_index = 0;\n        for ( key in chart.settings.attributes ) {\n            var settings_value = chart.settings.get( key );\n            _.each( [ [ ' ', '&#32;' ], [ ',', '&#44;' ], [ ':', '&#58;' ] ], function( pair ) {\n                settings_value = settings_value.replace( new RegExp( pair[ 0 ], 'g' ), pair[ 1 ] );\n            });\n            settings_string += key + ':' + settings_value + ', ';\n        };\n        settings_string = settings_string.substring( 0, settings_string.length - 2 )\n        chart.groups.each( function( group ) {\n            group_index++;\n            _.each( group.get( '__data_columns' ), function( data_columns, name ) {\n                columns_string += name + '_' + group_index + ':' + ( parseInt( group.get( name ) ) + 1 ) + ', ';\n            });\n        });\n        columns_string = columns_string.substring( 0, columns_string.length - 2 );\n        return {\n                    'tool_id'       : 'charts',\n                    'inputs'        : {\n                        'input'     : {\n                            'id'    : chart.get( 'dataset_id' ),\n                            'src'   : 'hda'\n                        },\n                        'module'    : module,\n                        'columns'   : columns_string,\n                        'settings'  : settings_string\n                    }\n                }\n    };\n\n    /** Assists in assigning the viewport panels */\n    function panelHelper( options ) {\n        var self = this;\n        var process             = options.process;\n        var chart               = options.chart;\n        var render              = options.render;\n        var targets             = options.targets;\n        var dataset_id          = options.dataset_id || options.chart.get( 'dataset_id' );\n        var dataset_groups      = options.dataset_groups || options.chart.groups;\n        Datasets.request({\n            chart           : chart,\n            dataset_id      : dataset_id,\n            dataset_groups  : dataset_groups,\n            success         : function( result ) {\n                try {\n                    if ( targets.length == result.length ) {\n                        var valid = true;\n                        for ( var group_index in result ) {\n                            var group = result[ group_index ];\n                            if ( !render( targets[ group_index ], [ group ] ) ) {\n                                valid = false;\n                                break;\n                            }\n                        }\n                        if ( valid ) {\n                            chart.state( 'ok', 'Multi-panel chart drawn.' );\n                        }\n                    } else if ( targets.length == 1 ) {\n                        if ( render( targets[ 0 ], result ) ) {\n                            chart.state( 'ok', 'Chart drawn.' );\n                        }\n                    } else {\n                        chart.state( 'failed', 'Invalid panel count.' );\n                    }\n                    process.resolve();\n                } catch ( err ) {\n                    console.debug( 'FAILED: tabular-utilities::panelHelper() - ' + err );\n                    chart.state( 'failed', err );\n                    process.reject();\n                }\n            }\n        });\n    };\n\n    /** Get domain boundaries value */\n    function getDomains( groups, keys ) {\n        function _apply( operator, key ) {\n            var value = undefined;\n            for ( var group_index in groups ) {\n                var value_sub = d3[ operator ]( groups[ group_index ].values, function( d ) { return d[ key ] } );\n                value = value === undefined ? value_sub : Math[ operator ]( value, value_sub );\n            }\n            return value;\n        };\n        var result = {};\n        for( var index in keys ) {\n            var key = keys[ index ];\n            result[ key ] = {\n                min : _apply( 'min', key ),\n                max : _apply( 'max', key ),\n            };\n           \n        }\n        return result;\n    };\n\n    /** Default series maker */\n    function makeSeries( groups, keys ) {\n        var plot_data = [];\n        for ( var group_index in groups ) {\n            var group = groups[ group_index ];\n            var data = [];\n            for ( var value_index in group.values ) {\n                var point = [];\n                if ( keys ) {\n                    for ( var key_index in keys ) {\n                        var column_index = keys[ key_index ];\n                        point.push( group.values[ value_index ][ column_index ] );\n                    }\n                } else {\n                    for ( var column_index in group.values[ value_index ] ) {\n                        point.push( group.values[ value_index ][ column_index ] );\n                    }\n                }\n                data.push( point );\n            }\n            plot_data.push( data );\n        }\n        return plot_data;\n    };\n\n    /** Default category maker */\n    function makeCategories( groups, column_keys ) {\n        var array = {};\n        var data_columns = groups[ 0 ].__data_columns;\n        _.each( column_keys, function( key ) {\n            if ( data_columns[ key ].is_label ) {\n                array[ key ] = [];\n            }\n        });\n        if ( groups && groups[ 0 ] ) {\n            _.each( groups[ 0 ].values, function( value_dict ) {\n                for ( var key in array ) {\n                    array[ key ].push( String( value_dict[ key ] ) );\n                }\n            });\n        }\n        mapCategories( array, groups );\n        return { array : array }\n    };\n\n    /** Apply default mapping index all values contained in label columns (for all groups) */\n    function mapCategories( array, groups ) {\n        _.each( groups, function( group ) {\n            _.each( group.values, function( value_dict, i ) {\n                for ( var key in array ) {\n                    value_dict[ key ] = parseInt( i )\n                }\n            });\n        });\n    };\n\n    /** Category make for unique category labels */\n    function makeUniqueCategories( groups, with_index ) {\n        var categories  = {};\n        var array       = {};\n        var counter     = {};\n        var data_columns = groups[ 0 ].__data_columns;\n        _.each( data_columns, function( column_def, key ) {\n            if ( column_def.is_label ) {\n                categories[ key ] = {};\n                array[ key ]      = [];\n                counter[ key ]    = 0;\n            }\n        });\n        // index all values contained in label columns (for all groups)\n        for ( var i in groups ) {\n            var group = groups[ i ];\n            for ( var j in group.values ) {\n                var value_dict = group.values[ j ];\n                for ( var key in categories ) {\n                    var value = String( value_dict[ key ] );\n                    if ( categories[ key ][ value ] === undefined ) {\n                        categories[ key ][ value ] = counter[ key ];\n                        array[ key ].push( with_index ? [counter[key], value] : value );\n                        counter[ key ]++;\n                    }\n                }\n            }\n        }\n        // convert group values into category indeces\n        for ( var i in groups ) {\n            var group = groups[ i ];\n            for ( var j in group.values ) {\n                var value_dict = group.values[ j ];\n                for ( var key in categories ) {\n                    var value = String( value_dict[ key ] );\n                    value_dict[ key ] = categories[ key ][ value ];\n                }\n            }\n        }\n        return {\n            categories  : categories,\n            array       : array,\n            counter     : counter\n        }\n    };\n\n    /** Make axis */\n    function makeTickFormat ( options ) {\n        var type        = options.type;\n        var precision   = options.precision;\n        var categories  = options.categories;\n        var formatter   = options.formatter;\n        if ( type == 'hide' ) {\n            formatter( function() { return '' } );\n        } else if ( type == 'auto' ) {\n            if ( categories ) {\n                formatter( function( value ) { return categories[ value ] || '' } );\n            }\n        } else {\n            var d3format = function( d ) {\n                switch ( type ) {\n                    case 's':\n                        var prefix = d3.formatPrefix( d );\n                        return prefix.scale( d ).toFixed() + prefix.symbol;\n                    default :\n                        return d3.format( '.' + precision + type )( d );\n                }\n            };\n            if ( categories ) {\n                formatter( function( value ) {\n                    var label = categories[ value ];\n                    if ( label ) {\n                        if ( isNaN( label ) ) {\n                            return label;\n                        } else {\n                            try {\n                                return d3format( label );\n                            } catch ( err ) {\n                                return label;\n                            }\n                        }\n                    } else {\n                        return '';\n                    }\n                });\n            } else {\n                formatter( function( value ) { return d3format( value ) } );\n            }\n        }\n    };\n\n    /** Add zoom handler */\n    function addZoom( options ) {\n        var scaleExtent = 100;\n        var yAxis       = options.yAxis;\n        var xAxis       = options.xAxis;\n        var xDomain     = options.xDomain || xAxis.scale().domain;\n        var yDomain     = options.yDomain || yAxis.scale().domain;\n        var redraw      = options.redraw;\n        var svg         = options.svg;\n        var xScale      = xAxis.scale();\n        var yScale      = yAxis.scale();\n        var x_boundary  = xScale.domain().slice();\n        var y_boundary  = yScale.domain().slice();\n        var d3zoom      = d3.behavior.zoom();\n        xScale.nice();\n        yScale.nice();\n        function fixDomain( domain, boundary ) {\n            domain[ 0 ] = Math.min( Math.max( domain[ 0 ], boundary[ 0 ] ), boundary[ 1 ] - boundary[ 1 ]/scaleExtent );\n            domain[ 1 ] = Math.max( boundary[ 0 ] + boundary[ 1 ] / scaleExtent, Math.min( domain[ 1 ], boundary[ 1 ] ) );\n            return domain;\n        };\n        function zoomed() {\n            yDomain( fixDomain( yScale.domain(), y_boundary ) );\n            xDomain( fixDomain( xScale.domain(), x_boundary ) );\n            redraw();\n        };\n        function unzoomed() {\n            xDomain( x_boundary );\n            yDomain( y_boundary );\n            redraw();\n            d3zoom.scale( 1 );\n            d3zoom.translate( [ 0 , 0 ] );\n        };\n        d3zoom.x( xScale )\n              .y( yScale )\n              .scaleExtent( [ 1, scaleExtent ] )\n              .on( 'zoom', zoomed );\n        svg.call( d3zoom ).on( 'dblclick.zoom', unzoomed );\n        return d3zoom;\n    };\n\n    return {\n        buildJobDictionary      : buildJobDictionary,\n        panelHelper             : panelHelper,\n        makeCategories          : makeCategories,\n        makeUniqueCategories    : makeUniqueCategories,\n        makeSeries              : makeSeries,\n        getDomains              : getDomains,\n        mapCategories           : mapCategories,\n        makeTickFormat          : makeTickFormat,\n        addZoom                 : addZoom\n    }\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./static/repository/visualizations/utilities/tabular-utilities.js\n ** module id = 4\n ** module chunks = 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 21 22 24\n **/","/** This class handles, formats and caches datasets. */\ndefine( [ 'utilities/utils' ], function( Utils ) {\n    /** Fills request dictionary with data from cache/response */\n    var _cache = {};\n    var request = function( options ) {\n        var groups      = options.dataset_groups;\n        var dataset_id  = options.dataset_id;\n        // identify columns needed to fulfill request\n        var column_list = [];\n        groups.each( function( group ) {\n            _.each( group.get( '__data_columns' ), function( column_def, column_name ) {\n                var column = group.get( column_name );\n                var block_id = _block_id( dataset_id, column );\n                if ( column_list.indexOf( column ) === -1 && !_cache[ block_id ] && column != 'auto' && column != 'zero' && column !== undefined ) {\n                    column_list.push( column );\n                }\n            });\n        });\n        if ( column_list.length == 0 ) {\n            _fillFromCache( options );\n            return;\n        }\n        // Fetch data columns into dataset object\n        Utils.get({\n            url     : Galaxy.root + 'api/datasets/' + dataset_id,\n            data    : {\n                data_type   : 'raw_data',\n                provider    : 'dataset-column',\n                indeces     : column_list.toString()\n            },\n            success : function( response ) {\n                var results = new Array( column_list.length );\n                for ( var i = 0; i < results.length; i++ ) {\n                    results[ i ] = [];\n                }\n                for ( var i in response.data ) {\n                    var row = response.data[ i ];\n                    for ( var j in row ) {\n                        var v = row[ j ];\n                        if ( v !== undefined && v != 2147483647 ) {\n                            results[ j ].push( v );\n                        }\n                    }\n                }\n                console.debug( 'tabular-datasets::_fetch() - Fetching complete.' );\n                for ( var i in results ) {\n                    var column = column_list[ i ];\n                    var block_id = _block_id( dataset_id, column );\n                    _cache[ block_id ] = results[ i ];\n                }\n                _fillFromCache( options );\n            }\n        });\n    };\n\n    /** Fill data from cache */\n    var _fillFromCache = function( options ) {\n        var groups      = options.dataset_groups;\n        var dataset_id  = options.dataset_id;\n        console.debug( 'tabular-datasets::_fillFromCache() - Filling request from cache.' );\n        var limit = 0;\n        groups.each( function( group ) {\n            _.each( group.get( '__data_columns' ), function( column_def, column_name ) {\n                var column = group.get( column_name );\n                var block_id = _block_id( dataset_id, column );\n                var column_data = _cache[ block_id ];\n                if ( column_data ) {\n                    limit = Math.max( limit, column_data.length );\n                }\n            });\n        });\n        if ( limit == 0 ) {\n            console.debug( 'tabular-datasets::_fillFromCache() - No data available.' );\n        }\n        var results = [];\n        groups.each( function( group, group_index ) {\n            var dict = Utils.merge( { key: ( group_index ) + ':' + group.get( 'key' ), values: [] }, group.attributes );\n            for ( var j = 0; j < limit; j++ ) {\n                dict.values[ j ] = { x : parseInt( j ) };\n            }\n            results.push( dict );\n        });\n        groups.each( function( group, group_index ) {\n            var values = results[ group_index ].values;\n            _.each( group.get( '__data_columns' ), function( column_def, column_name ) {\n                var column = group.get( column_name );\n                switch ( column ) {\n                    case 'auto':\n                        for ( var j = 0; j < limit; j++ ) {\n                            values[ j ][ column_name ] = parseInt( j );\n                        }\n                        break;\n                    case 'zero':\n                        for ( var j = 0; j < limit; j++ ) {\n                            values[ j ][ column_name ] = 0;\n                        }\n                        break;\n                    default:\n                        var block_id = _block_id( dataset_id, column );\n                        var column_data = _cache[ block_id ];\n                        for ( var j = 0; j < limit; j++ ) {\n                            var value = values[ j ];\n                            var v = column_data[ j ];\n                            if ( isNaN( v ) && !column_def.is_label ) {\n                                v = 0;\n                            }\n                            value[ column_name ] = v;\n                        }\n                }\n            });\n        });\n        options.success( results );\n    };\n\n    /** Get block id */\n    var _block_id = function ( dataset_id, column ) {\n        return dataset_id + '_' + '_' + column;\n    };\n\n    return { request: request };\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./static/repository/visualizations/utilities/tabular-datasets.js\n ** module id = 5\n ** module chunks = 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 24\n **/","/** This class handles job submissions to the Galaxy API. */\ndefine( [ 'utilities/utils' ], function( Utils ) {\n\n    /** Time to wait before refreshing to check if job has completed */\n    var WAITTIME = 1000;\n\n    /** Submit job request to charts tool */\n    var request = function( chart, parameters, success, error ) {\n        chart.state( 'wait', 'Requesting job results...' );\n         if ( chart.get( 'modified' ) ) {\n            cleanup( chart );\n            chart.set( 'modified', false );\n        }\n        var dataset_id_job = chart.get( 'dataset_id_job' );\n        if ( dataset_id_job != '' ) {\n            wait( chart, success, error );\n        } else {\n            var chart_id            = chart.id;\n            var chart_type          = chart.get( 'type' );\n            var chart_definition    = chart.definition;\n            chart.state( 'wait', 'Sending job request...' );\n            Utils.request({\n                type    : 'POST',\n                url     : Galaxy.root + 'api/tools',\n                data    : parameters,\n                success : function( response ) {\n                    if ( !response.outputs || response.outputs.length == 0 ) {\n                        chart.state( 'failed', 'Job submission failed. No response.' );\n                        error && error();\n                    } else {\n                        refreshHdas();\n                        var job = response.outputs[0];\n                        chart.state( 'wait', 'Your job has been queued. You may close the browser window. The job will run in the background.' );\n                        chart.set( 'dataset_id_job', job.id );\n                        chart.save();\n                        wait( chart, success, error );\n                    }\n                },\n                error   : function( response ) {\n                    var message = '';\n                    if ( response && response.message && response.message.data && response.message.data.input ) {\n                        message = response.message.data.input + '.';\n                    }\n                    chart.state( 'failed', 'This visualization requires the \\'' + parameters.tool_id + '\\' tool. Please make sure it is installed. ' + message );\n                    error && error();\n                          \n                }\n            });\n        }\n    };\n\n    /* Remove previous data when re-running jobs */\n    var cleanup = function( chart ) {\n        var self = this;\n        var previous =  chart.get( 'dataset_id_job' );\n        if (previous != '') {\n            Utils.request({\n                type    : 'PUT',\n                url     : Galaxy.root + 'api/histories/none/contents/' + previous,\n                data    : { deleted: true },\n                success : function() { refreshHdas() }\n            });\n            chart.set( 'dataset_id_job', '' );\n        }\n    };\n\n    /** Request job details */\n    var wait = function( chart, success, error ) {\n        var self = this;\n        Utils.request({\n            type    : 'GET',\n            url     : Galaxy.root + 'api/datasets/' + chart.get( 'dataset_id_job' ),\n            data    : {},\n            success : function( dataset ) {\n                var ready = false;\n                switch ( dataset.state ) {\n                    case 'ok':\n                        chart.state( 'wait', 'Job completed successfully...' );\n                        success && success( dataset );\n                        ready = true;\n                        break;\n                    case 'error':\n                        chart.state( 'failed', 'Job has failed. Please check the history for details.' );\n                        error && error( dataset );\n                        ready = true;\n                        break;\n                    case 'running':\n                        chart.state( 'wait', 'Your job is running. You may close the browser window. The job will continue in the background.' );\n                }\n                !ready && setTimeout( function() { wait( chart, success, error ) }, WAITTIME );\n            }\n        });\n    };\n\n    /** Refresh history panel */\n    var refreshHdas = function() {\n        Galaxy && Galaxy.currHistoryPanel && Galaxy.currHistoryPanel.refreshContents();\n    };\n\n    return { request: request }\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./static/repository/utilities/jobs.js\n ** module id = 20\n ** module chunks = 2 3 7 8 21\n **/","define([], function() {\n    return {\n        colorSets: {\n            seis:       ['#AA0000', '#D00000', '#F70000', '#FF1D00', '#FF4400', '#FF6A00', '#FF9000', '#FFB700', '#FFDD00', '#FFFF00', '#FFFF00', '#FFFF00', '#BDFF0C', '#73FF1A', '#3FFA36', '#16F45A', '#00D08B', '#0087CD', '#0048FA', '#0024E3'].reverse(),\n            \n            sealand:    ['#8C66FF', '#6A66FF', '#6684FF', '#66A7FF', '#66CAFF', '#66ECFF', '#66FFF0', '#66FFCE', '#66FFAB', '#66FF88', '#66FF66', '#88FF66', '#ABFF66', '#CEFF66', '#FFEEA6', '#FFD3A6', '#FFB8A6', '#FFAAB0', '#FFB5CB', '#FFC0E1'].reverse(),\n            \n            redgreen:   ['#005824', '#1A693B', '#347B53', '#4F8D6B', '#699F83', '#83B09B', '#9EC2B3', '#B8D4CB', '#D2E6E3', '#EDF8FB', '#FFFFFF', '#F1EEF6', '#E6D3E1','#DBB9CD', '#D19EB9', '#C684A4', '#BB6990', '#B14F7C', '#A63467', '#9B1A53', '#91003F'],\n            \n            ocean:      ['#000000', '#000209', '#000413', '#00061E', '#000728', '#000932', '#002650', '#00426E', '#005E8C', '#007AAA', '#0096C8', '#22A9C2', '#45BCBB', '#67CFB5', '#8AE2AE', '#ACF6A8', '#BCF8B9', '#CBF9CA', '#DBFBDC', '#EBFDED'].reverse(),\n            \n            cool:       ['#00FFFF', '#0DF2FF', '#19E6FF', '#26D9FF', '#33CCFF', '#3FBFFF', '#4CB3FF', '#59A6FF', '#6699FF', '#738CFF', '#7F7FFF', '#8C73FF', '#9966FF', '#A659FF', '#B24DFF', '#BF3FFF', '#CC33FF', '#D926FF', '#E619FF', '#F20DFF'],\n            \n            copper:     ['#000000', '#100906', '#1F130D', '#301E13', '#40281A', '#50321F', '#603C26', '#70462D', '#805033', '#905A3A', '#A06440', '#B06E46', '#C0784D', '#D08253', '#E08C5A', '#F09660', '#FFA066', '#FFAA6D', '#FFB473', '#FFBE7A'].reverse(),\n            \n            gray:       ['#000000', '#0D0D0D', '#191919', '#262626', '#333333', '#3F3F3F', '#4C4C4C', '#595959', '#666666', '#737373', '#7F7F7F', '#8C8C8C', '#999999', '#A6A6A6', '#B2B2B2', '#BFBFBF', '#CCCCCC', '#D9D9D9', '#E6E6E6', '#F2F2F2'].reverse(),\n            \n            hot:        ['#000000', '#220000', '#440000', '#660000', '#880000', '#AA0000', '#CC0000', '#EE0000', '#FF1100', '#FF3300', '#FF5500', '#FF7700', '#FF9900', '#FFBB00', '#FFDD00', '#FFFF00', '#FFFF33', '#FFFF66', '#FFFF99', '#FFFFCC'].reverse(),\n            \n            jet:        ['#00007F', '#0000B2', '#0000E5', '#0019FF', '#004DFF', '#007FFF', '#00B2FF', '#00E5FF', '#FFFFF2', '#FFFFD9', '#FFFFBF', '#FFFFA5', '#FFFF8C', '#FFE500', '#FFB300', '#FF7F00', '#FF4C00', '#FF1900', '#E50000', '#B20000'],\n            \n            no_green:   ['#1F60FF', '#1F60FF', '#1F9FFF', '#1FBFFF', '#00CFFF', '#2AFFFF', '#2AFFFF', '#55FFFF', '#7FFFFF', '#AAFFFF', '#FFFF54', '#FFFF54', '#FFF000', '#FFBF00', '#FFA800', '#FF8A00', '#FF8A00', '#FF7000', '#FF4D00', '#FF0000'],\n\n            polar:      ['#0000FF', '#1919FF', '#3333FF', '#4C4CFF', '#6666FF', '#7F7FFF', '#9999FF', '#B2B2FF', '#CCCCFF', '#E6E6FF', '#FFFFFF', '#FFE5E5', '#FFCCCC', '#FFB2B2', '#FF9999', '#FF7F7F', '#FF6666', '#FF4C4C', '#FF3333', '#FF1A1A'],\n\n            red2green:  ['#FF0000', '#FF1919', '#FF3333', '#FF4C4C', '#FF6666', '#FF7F7F', '#FF9999', '#FFB2B2', '#FFCCCC', '#FFE6E6', '#FFFFFF', '#E5FFE5', '#CCFFCC', '#B2FFB2', '#99FF99', '#7FFF7F',  '#66FF66', '#4CFF4C', '#33FF33', '#1AFF1A'].reverse(),\n\n            relief:     ['#000000', '#000413', '#000728', '#002650', '#005E8C', '#0096C8', '#45BCBB', '#8AE2AE', '#BCF8B9', '#DBFBDC', '#467832', '#887438', '#B19D48', '#DBC758', '#FAE769', '#FAEB7E', '#FCED93', '#FCF1A7', '#FCF6C1', '#FDFAE0'].reverse(),\n            \n            split:      ['#7F7FFF', '#6666E6', '#4D4DCC', '#3333B3', '#1A1A99', '#00007F', '#000066', '#00004D', '#000033', '#00001A', '#000000', '#1A0000', '#330000', '#4D0000', '#660000', '#7F0000', '#991A1A', '#B33333', '#CC4D4D', '#E66666'],\n            \n            wysiwyg:    ['#3F003F', '#3F003F', '#3F00BF', '#003FFF', '#00A0FF', '#3FBFFF', '#3FBFFF', '#40E0FF', '#3FFFBF', '#3FFF3F', '#7FFF3F', '#BFFF3F', '#BFFF3F', '#FFE040', '#FFE040', '#FF6040', '#FF1F40', '#FF60C0', '#FFA0FF', '#FFA0FF'].reverse()\n        }\n    }\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./static/repository/visualizations/others/heatmap/heatmap-parameters.js\n ** module id = 38\n ** module chunks = 21 22\n **/","define( [ 'visualizations/utilities/tabular-utilities', 'utilities/utils', 'visualizations/others/heatmap/heatmap-parameters' ], function( Utilities, Utils, HeatmapParameters ) {\n    return Backbone.View.extend({\n        optionsDefault: {\n            margin: {\n                top                 : 40,\n                right               : 70,\n                bottom              : 70,\n                left                : 70\n            },\n            style: {\n                'font-weight'       : 'normal',\n                'font-family'       : 'Verdana',\n                'font-size'         : 12\n            },\n            legend: {\n                width               : 15,\n                size                : 0.9,\n                style : {\n                    'font-weight'   : 'normal',\n                    'font-family'   : 'Verdana',\n                    'font-size'     : 11\n                },\n                limit               : 7\n            },\n            background_color        : '#FFFFFF',\n            debug_color             : '#FFFFFF'\n        },\n        \n        initialize: function( options ) {\n            var self = this;\n            this.chart          = options.chart;\n            this.canvas_id      = options.canvas_id;\n            this.group          = options.groups[ 0 ];\n            this.data           = options.groups[ 0 ].values;\n            this.options        = Utils.merge ( this.optionsDefault, options );\n            \n            // get color set\n            this.color_set = HeatmapParameters.colorSets[ this.chart.settings.get( 'color_set' ) ];\n            \n            // categories\n            this.categories = Utilities.makeUniqueCategories( [ this.group ] );\n            \n            // domains/scales\n            this.xScale = d3.scale.linear().domain( [ 0, this.categories.array.x.length ] );\n            this.yScale = d3.scale.linear().domain( [ 0, this.categories.array.y.length ] );\n            \n            // color scale\n            this.zMin = d3.min( this.data, function( d ) { return d.z; } );\n            this.zMax = d3.max( this.data, function( d ) { return d.z; } );\n            this.zScale = d3.scale.quantize().domain( [ this.zMin, this.zMax ] ).range( this.color_set );\n\n            // create axis\n            this.xAxis = d3.svg.axis().scale( this.xScale ).orient( 'bottom' );\n            this.yAxis = d3.svg.axis().scale( this.yScale ).orient( 'left' );\n            \n            // make categories\n            this._makeTickFormat( 'x' );\n            this._makeTickFormat( 'y' );\n            \n            // add tooltip\n            this.tooltip = d3.select( '.charts-viewport-container' ).append( 'div' )\n                .attr( 'class', 'charts-tooltip' )\n                .style( this.options.style )\n                .style( 'opacity', 0 );\n            \n            // refresh on window resize\n            $( window ).on( 'resize', function () { self.redraw() } );\n            this.redraw();\n            Utilities.addZoom({\n                xAxis       : this.xAxis,\n                yAxis       : this.yAxis,\n                redraw      : function() { self.redraw() },\n                svg         : d3.select( '#' + this.canvas_id )\n            });\n        },\n            \n        /** Redraw */\n        redraw: function() {\n            // get parameters\n            var chart       = this.chart;\n            var data        = this.data;\n            var self        = this;\n            this.data       = data;\n            \n            // get/reset container\n            var container = $( '#' + this.canvas_id );\n            container.empty();\n            \n            // get domain\n            var xDomain = this.xScale.domain();\n            var yDomain = this.yScale.domain();\n            \n            // set ticks\n            var xTickStart = Math.ceil( xDomain[ 0 ] );\n            var xTickEnd   = Math.floor( xDomain[ 1 ] );\n            var yTickStart = Math.ceil( yDomain[ 0 ] );\n            var yTickEnd   = Math.floor( yDomain[ 1 ] );\n            this.xAxis.tickValues( d3.range( xTickStart, xTickEnd, 1 ) );\n            this.yAxis.tickValues( d3.range( yTickStart, yTickEnd, 1 ) );\n            \n            // get margins\n            var margin = this.options.margin;\n            \n            // configure dimensions\n            this.height = parseInt( container.height() ) - margin.top - margin.bottom;\n            this.width  = parseInt( container.width() ) - margin.left - margin.right;\n            \n            // set range\n            this.xScale.range( [ 0, this.width ] );\n            this.yScale.range( [ this.height, 0 ] );\n\n            // get box properties\n            this.rowCount = yDomain[ 1 ] - yDomain[ 0 ];\n            this.colCount = xDomain[ 1 ] - xDomain[ 0 ];\n            this.boxWidth = Math.max( 1, Math.floor( this.width / this.colCount ) );\n            this.boxHeight = Math.max( 1, Math.floor( this.height / this.rowCount ) );\n            \n            // create group\n            var svg = this.svg = d3.select( '#' + this.canvas_id )\n                                   .append( 'g' )\n                                   .attr( 'class', 'heatmap' )\n                                   .attr( 'transform', 'translate(' + margin.left + ',' + margin.top + ')' );\n                        \n            // build elements\n            this._buildBoxes();\n            this._buildX();\n            this._buildY();\n            \n            // show legend only if requested\n            if ( this.chart.settings.get('show_legend') == 'true' ) {\n                this._buildLegend();\n            }\n        },\n        \n        /** Build boxes */\n        _buildBoxes: function() {\n            var self = this;\n            var height      = this.height;\n            var width       = this.width;\n            var margin      = this.options.margin;\n            var svg         = this.svg;\n            var boxWidth    = this.boxWidth;\n            var boxHeight   = this.boxHeight;\n            function _locator( d ) { return 'translate(' + self.xScale( d.x ) + ',' + self.yScale( d.y + 1 ) + ')' };\n            function _color ( d ) { return self.zScale( d.z ) };\n\n            // set background color\n            var gBackground = svg.append( 'rect' )\n                .attr( 'width', width )\n                .attr( 'height', height )\n                .attr( 'fill', this.options.background_color );\n\n            // clip path\n            var clip = svg.append( 'clipPath' )\n                .attr( 'id', 'clip' )\n                .append( 'rect' )\n                .attr( 'x', 0 )\n                .attr( 'y', 0 )\n                .attr( 'width', width )\n                .attr( 'height', height );\n\n            // create chart area\n            var chartBody = svg.append( 'g' ).attr( 'clip-path', 'url(#clip)' );\n                \n            // add boxes to chart area\n            var boxes = chartBody.selectAll( 'box-group' ).data( this.data, function( d, i ) {\n                return d.x + '\\0' + d.y;\n            });\n            var gEnter = boxes.enter().append( 'g' )\n                .attr( 'class', 'box-group' );\n            gEnter.append( 'rect' )\n                .attr( 'class','heat-box' );\n            boxes.selectAll( 'rect' )\n                .attr( 'rx', 1 )\n                .attr( 'ry', 1 )\n                .attr( 'fill', _color )\n                .attr( 'width', boxWidth )\n                .attr( 'height', boxHeight )\n                .attr( 'transform', _locator );\n            \n            // add tooltip events\n            boxes.selectAll( 'rect' )\n            .on( 'dblclick', function( d ) {\n                var url = self.chart.settings.get( 'url_template' ).trim();\n                if ( url ) {\n                    d3.event.stopPropagation();\n                    var xLabel = self.categories.array.x[ d.x ];\n                    var yLabel = self.categories.array.y[ d.y ];\n                    window.open( url.replace( '__LABEL__', xLabel ) );\n                    window.open( url.replace( '__LABEL__', yLabel ) );\n                }\n            })\n            .on('mouseover', function( d ) {\n                self.tooltip.style( 'opacity', 0.9 );\n                self.tooltip .html( self._templateTooltip( d ) )\n                    .style( 'left', ( d3.event.pageX ) + 'px' )\n                    .style( 'top', ( d3.event.pageY - 20 ) + 'px' );\n                })\n            .on('mouseout', function( d ) {\n                self.tooltip.style( 'opacity', 0 );\n            });\n\n            // initially hide tooltips\n            this.tooltip.style( 'opacity', 0 );\n            \n            // exit\n            boxes.exit().remove();\n        },\n        \n        /** Build x axis */\n        _buildX : function() {\n            var self = this;\n            var height      = this.height;\n            var width       = this.width;\n            var margin      = this.options.margin;\n            var svg         = this.svg;\n            var font_size   = this.options.style[ 'font-size' ];\n            var boxWidth    = this.boxWidth;\n            \n            // draw x axis\n            this.gxAxis = svg.append( 'g' )\n                .attr( 'class', 'x axis' )\n                .style( 'stroke-width', 1 )\n                .attr( 'transform', 'translate(0,' + height + ')' )\n                .call( this.xAxis );\n                \n            // fix text\n            var xFontSize = Math.min( boxWidth, font_size );\n            this.gxAxis.selectAll( 'text' )\n                .style( this.options.style )\n                .style( { 'font-size': xFontSize + 'px' } )\n                .attr( 'transform', function( d ) {\n                    var y = -this.getBBox().height - 15;\n                    var x = -xFontSize + boxWidth / 2;\n                    return 'rotate(-90)translate(' + y + ',' + x + ')';\n                });\n                \n            // set background color\n            var gxAxisLabelBackground = svg.append( 'rect' )\n                .attr( 'width', width )\n                .attr( 'height', font_size + 3 )\n                .attr( 'y', height + margin.bottom - font_size - 3 )\n                .attr( 'fill', this.options.debug_color )\n                .attr( 'opacity', 0.7 );\n                \n            // axis label\n            this.gxAxisLabel = svg.append( 'text' )\n                .attr( 'class', 'x label' )\n                .style( this.options.style )\n                .text( this.chart.settings.get( 'x_axis_label' ) )\n                .attr( 'transform', function( d ) {\n                    var y = height + margin.bottom - font_size / 3;\n                    var x = ( width - this.getBBox().width ) / 2;\n                    return 'translate(' + x + ',' + y + ')';\n                });\n                \n            // chart title\n            this.gxTickLabel = svg.append( 'text' )\n                .attr( 'class', 'title' )\n                .style( this.options.style )\n                .style({'font-size' : 1.1 * font_size } )\n                .text( this.group.key )\n                .attr( 'transform', function( d ) {\n                    var y = -margin.top / 2;\n                    var x = ( width - this.getBBox().width ) / 2;\n                    return 'translate(' + x + ',' + y + ')';\n                });\n        },\n        \n        /** Build y axis */\n        _buildY : function() {\n            var self = this;\n            var height      = this.height;\n            var width       = this.width;\n            var margin      = this.options.margin;\n            var svg         = this.svg;\n            var font_size   = this.options.style[ 'font-size' ];\n            var boxHeight   = this.boxHeight;\n            \n            // draw y axis\n            this.gyAxis = svg.append( 'g' )\n                .attr( 'class', 'y axis' )\n                .style( 'stroke-width', 1 )\n                .call( this.yAxis );\n\n            // fix text\n            var yFontSize = Math.min( boxHeight, font_size );\n            this.gyAxis.selectAll( 'text' )\n                .style( this.options.style )\n                .style( { 'font-size': yFontSize + 'px' } )\n                .attr( 'y', -boxHeight / 2 );\n            \n            // set background color\n            var gyAxisLabelBackground = svg.append( 'rect' )\n                .attr( 'width', font_size )\n                .attr( 'height', height )\n                .attr( 'x', -margin.left )\n                .attr( 'fill', this.options.debug_color )\n                .attr( 'opacity', 0.7 );\n                \n            // axis label\n            this.gyAxisLabel = svg.append( 'text' )\n                .attr( 'class', 'y label' )\n                .style( this.options.style )\n                .text( this.chart.settings.get( 'y_axis_label' ) )\n                .attr( 'transform', function( d ) {\n                    var x = -margin.left + font_size - 2;\n                    var y = -( height + this.getBBox().width ) / 2;\n                    return 'rotate(-90)translate(' + y + ',' + x + ')';\n                });\n        },\n\n        /** Build legend */\n        _buildLegend : function() {\n            var self = this;\n            var height      = this.height;\n            var width       = this.width;\n            var margin      = this.options.margin;\n            var font_size   = this.options.legend.style[ 'font-size' ];\n            var limit       = this.options.legend.limit;\n            var legendSize  = this.options.legend.size;\n            var legendWidth = this.options.legend.width;\n            var legendElements = this.zScale.range().length;\n            var legendElementHeight = Math.max( legendSize * height / legendElements, font_size );\n            var legendHeight = legendElements * legendElementHeight / 2;\n            var data = d3.range( this.zMin, this.zMax, 2 * ( this.zMax - this.zMin ) / legendElements ).reverse();\n            if ( data.length < 2 ) {\n                return;\n            }\n            var legend = this.svg.selectAll( '.legend' )\n                .data( data )\n                .enter().append( 'g' )\n                    .attr( 'class', 'legend' )\n                    .attr( 'transform', function( d, i ) {\n                        var x = width + 10;\n                        var y = ( ( height - legendHeight ) / 2 ) + ( i * legendElementHeight );\n                        return 'translate(' + x + ',' + y + ')';\n                    });\n            legend.append( 'rect' )\n                  .attr( 'width', legendWidth )\n                  .attr( 'height', legendElementHeight )\n                  .style( 'fill', function( z ) { return self.zScale( z ) } );\n            legend.append('text')\n                  .attr( 'x', legendWidth + 4 )\n                  .attr( 'y', function() { return ( legendElementHeight + this.getBBox().height ) / 2 } )\n                  .style( this.options.legend.style )\n                  .text( function( d ) { return String( d ).length > limit ? String( d ).substr( 0, limit - 2 ) + '..' : String( d ) } );\n            this.svg.append( 'text' )\n                .style( this.options.legend.style )\n                .style( { 'font-size' : 9, 'font-weight': 'bold' } )\n                .text( 'Legend' )\n                .attr( 'transform', function( d, i ) {\n                    var x = width + ( margin.right - this.getBBox().width ) / 2;\n                    var y = ( ( height - legendHeight ) / 2 ) - 10;\n                    return 'translate(' + x + ',' + y + ')';\n                });\n        },\n\n        /** Create axes formatting */\n        _makeTickFormat: function( id ) {\n            var settings = this.chart.settings;\n            var self = this;\n            Utilities.makeTickFormat({\n                categories  : self.categories.array[ id ],\n                type        : settings.get( id + '_axis_type|type' ),\n                precision   : settings.get( id + '_axis_type|precision' ),\n                formatter   : function( formatter ) {\n                    if ( formatter ) {\n                        self[ id + 'Axis' ].tickFormat( function( value ) {\n                           return formatter( value );\n                        });\n                    }\n                }\n            });\n        },\n\n        /** Handle error */\n        _handleError: function( err ) {\n            this.chart.state( 'failed', err );\n        },\n\n        /** Main template */\n        _templateTooltip: function(d) {\n            var x = this.categories.array.x[ d.x ];\n            var y = this.categories.array.y[ d.y ];\n            var z = d.z;\n            return  '<table>' +\n                        '<tr>' +\n                            '<td class=\"charts-tooltip-first\">Row:</td>' +\n                            '<td>' + y + '</td>' +\n                        '</tr>' +\n                        '<tr>' +\n                            '<td class=\"charts-tooltip-first\">Column:</td>' +\n                            '<td>' + x + '</td>' +\n                        '</tr>' +\n                        '<tr>' +\n                            '<td class=\"charts-tooltip-first\">Value:</td>' +\n                            '<td>' + z + '</td>' +\n                        '</tr>' +\n                    '</table>';\n        }\n    });\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./static/repository/visualizations/others/heatmap/heatmap-plugin.js\n ** module id = 39\n ** module chunks = 21 22\n **/"],"sourceRoot":""}