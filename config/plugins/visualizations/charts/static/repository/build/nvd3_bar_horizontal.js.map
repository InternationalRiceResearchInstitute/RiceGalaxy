{"version":3,"sources":["webpack:///nvd3_bar_horizontal.js","webpack:///webpack/bootstrap e3622d0033a89edad914?63f1****************","webpack:///./static/repository/visualizations/nvd3/bar_horizontal/wrapper.js","webpack:///./static/repository/utilities/utils.js?825c**************","webpack:///./static/repository/visualizations/utilities/tabular-utilities.js?ccb0**************","webpack:///./static/repository/visualizations/utilities/tabular-datasets.js?bf7b**************","webpack:///./~/css-loader/lib/css-base.js?da04**************","webpack:///./~/style-loader/addStyles.js?b980**************","webpack:///./static/repository/plugins/nvd3/nv.d3.css?e878*********","webpack:///./static/repository/plugins/nvd3/nv.d3.css?3f1e**********","webpack:///./static/repository/plugins/nvd3/nv.d3.js?7602*********","webpack:///./static/repository/visualizations/nvd3/common/wrapper.js?0443*********"],"names":["define","modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","NVD3","Backbone","Model","extend","initialize","options","type","apply","undefined","clone","obj","JSON","parse","stringify","isJSON","text","test","replace","get","top","__utils__get__","cache_key","cache","success","window","console","debug","url","request","data","response","error","ajaxConfig","contentType","$","isEmptyObject","indexOf","param","dataType","ajax","done","jQuery","parseJSON","e","fail","response_text","responseText","always","complete","merge","optionsDefault","_","defaults","uid","__utils__uid__","Utils","Datasets","buildJobDictionary","chart","settings_string","columns_string","group_index","key","settings","attributes","settings_value","each","pair","RegExp","substring","length","groups","group","data_columns","name","parseInt","tool_id","inputs","input","src","columns","panelHelper","process","render","targets","dataset_id","dataset_groups","result","valid","state","resolve","err","reject","getDomains","keys","_apply","operator","value","value_sub","d3","values","d","Math","index","min","max","makeSeries","plot_data","value_index","point","key_index","column_index","push","makeCategories","column_keys","array","__data_columns","is_label","value_dict","String","mapCategories","i","makeUniqueCategories","with_index","categories","counter","column_def","j","makeTickFormat","precision","formatter","d3format","prefix","formatPrefix","scale","toFixed","symbol","format","label","isNaN","addZoom","fixDomain","domain","boundary","scaleExtent","zoomed","yDomain","yScale","y_boundary","xDomain","xScale","x_boundary","redraw","unzoomed","d3zoom","translate","yAxis","xAxis","svg","slice","behavior","zoom","nice","x","y","on","_cache","column_list","column_name","column","block_id","_block_id","_fillFromCache","Galaxy","root","data_type","provider","indeces","toString","results","Array","row","v","limit","column_data","dict","list","this","item","join","mediaQuery","alreadyImportedModules","addStylesToDom","styles","domStyle","stylesInDom","refs","parts","addStyle","listToStyles","newStyles","css","media","sourceMap","part","insertStyleElement","styleElement","head","getHeadElement","lastStyleElementInsertedAtTop","styleElementsInsertedAtTop","insertAt","nextSibling","insertBefore","appendChild","firstChild","Error","removeStyleElement","parentNode","removeChild","idx","splice","createStyleElement","document","createElement","createLinkElement","linkElement","rel","update","remove","singleton","styleIndex","singletonCounter","singletonElement","applyToSingletonTag","bind","URL","createObjectURL","revokeObjectURL","Blob","btoa","updateLink","href","applyToTag","newObj","styleSheet","cssText","replaceText","cssNode","createTextNode","childNodes","setAttribute","unescape","encodeURIComponent","blob","oldSrc","memoize","fn","memo","arguments","isOldIE","navigator","userAgent","toLowerCase","getElementsByTagName","newList","mayRemove","textStore","replacement","filter","Boolean","content","locals","daysInMonth","month","year","Date","getDate","d3_time_range","floor","step","number","t0","t1","dt","time","times","date","nv","version","dev","tooltip","utils","models","charts","graphs","logs","dispatch","startTime","endTime","totalTime","log","Function","prototype","active","render_start","setTimeout","graph","queue","generate","callback","callee","render_end","addGraph","identity","strip","s","monthEnd","getFullYear","getMonth","monthEnds","setUTCDate","getUTCDate","setDate","interactiveGuideline","layer","selection","mouseHandler","d3mouse","mouse","mouseX","mouseY","subtractMargin","mouseOutAnyReason","isMSIE","event","offsetX","offsetY","target","tagName","className","baseVal","match","margin","left","availableWidth","availableHeight","relatedTarget","ownerSVGElement","nvPointerEventsClass","elementMouseout","renderGuideLine","pointXValue","invert","elementMousemove","elementDblclick","container","select","width","height","wrap","selectAll","wrapEnter","enter","append","attr","svgContainer","showGuideLine","line","NaNtoZero","exit","linear","interactiveBisect","searchVal","xAccessor","bisect","bisector","currentValue","nextIndex","nextValue","abs","nearestValueIndex","threshold","yDistMax","Infinity","indexToHighlight","forEach","delta","convertViewBoxRatio","chartContainer","node","viewBox","split","ratio","style","position","getTooltipContainer","newContent","body","classes","innerHTML","classed","nvtooltip","enabled","dataSeriesExists","fixedTop","contentGenerator","tooltipElem","svgComp","svgOffset","getBoundingClientRect","svgBound","chartBound","svgBoundTop","containerBound","offsetLeft","scrollLeft","offsetTop","scrollTop","snapDistance","calcTooltipPosition","gravity","distance","random","valueFormatter","headerFormatter","table","theadEnter","html","tbodyEnter","trowEnter","series","highlight","color","opacityScale","range","opacity","outerHTML","footer","show","pos","dist","parentContainer","findFirstNonSVGParent","Elem","findTotalOffsetTop","initialTop","offsetParent","findTotalOffsetLeft","initialLeft","offsetHeight","offsetWidth","windowWidth","windowSize","windowHeight","pageYOffset","pageXOffset","innerWidth","scrollWidth","innerHeight","scrollHeight","tooltipTop","tooltipLeft","tLeft","tTop","cleanup","tooltips","getElementsByClassName","purging","transitionDelay","removeMe","pop","size","compatMode","documentElement","windowResize","fun","oldresize","onresize","getColor","Object","defaultColor","colors","category20","customTheme","dictionary","getKey","defaultColors","defIndex","pjax","links","load","fragment","replaceChild","history","pushState","textContent","preventDefault","calcApproxTextWidth","svgTextElem","fontSize","textLength","n","optionsFunc","args","map","axis","g","ticks","orient","scale0","fmt","tickFormat","axisLabel","axisLabelText","w","showMaxMin","axisMaxMin","tickPadding","xLabelMargin","maxTextWidth","xTicks","rotateLabels","getBBox","sin","PI","isOrdinal","rangeBand","staggerLabels","rotateYLabel","right","axisLabelDistance","maxMinRange","highlightZero","parseFloat","round","__data__","copy","bottom","rebind","rangeBands","historicalBar","extent","getX","concat","forceX","padData","xRange","getY","forceY","yRange","defsEnter","gEnter","chartClick","clipEdge","bars","interactive","elementMouseover","pointIndex","seriesIndex","elementClick","stopPropagation","elementDblClick","rval","highlightPoint","isHoverOver","clearHighlights","bullet","rangez","ranges","sort","descending","markerz","markers","measurez","measures","rangeLabelz","rangeLabels","markerLabelz","markerLabels","measureLabelz","measureLabels","x1","reverse","__chart__","rangeMin","rangeMax","rangeAvg","w1","xp1","datum","h3","bulletChart","that","noDataText","noData","x0","title","subtitle","bulletWrap","transition","tick","tickEnter","tickUpdate","showTooltip","timer","flush","offsetElement","tooltipShow","tooltipHide","tooltipContent","cumulativeLineChart","dragStart","dragMove","dx","updateZero","dragEnd","stateChange","indexLine","oldDuration","transitionDuration","disabled","defaultState","indexDrag","drag","lines","rescaleY","seriesDomains","initialDomain","completeDomain","clamp","indexify","interactivePointerEvents","showLegend","legend","showControls","controlsData","controls","rightAlign","rightAlignYAxis","tempDisabled","useInteractiveGuideline","interactiveLayer","display","linesWrap","avgLineData","average","avgLines","getAvgLineY","yVal","showXAxis","tickSize","showYAxis","newState","singlePoint","pointXLocation","allData","yValue","domainExtent","xValue","indexValue","noErrorCheck","updateState","useVoronoi","discreteBar","seriesData","y0","showValues","hover","barsEnter","valueFormat","rectClass","ordinal","discreteBarChart","beforeUpdate","discretebar","barsWrap","distribution","naxis","distWrap","getData","functor","historicalBarChart","indentedTree","click","unshift","shiftKey","_values","hasChildren","icon","iconOpen","iconClose","folded","depth","tree","layout","children","childIndent","nodes","tableEnter","tableClass","header","thead","theadRow1","tbody","filterZero","nodeEnter","nodeName","getUrl","showCount","order","scatter","seriesEnter","legendMouseover","legendMouseout","legendClick","radioButtonMode","every","legendDblclick","align","seriesWidths","nodeTextLength","legendText","getComputedTextLength","seriesPerRow","legendWidth","columnWidths","k","reduce","prev","cur","xPositions","curX","ceil","xpos","ypos","newxpos","maxwidth","scatterWrap","areaPaths","isArea","area","interpolate","defined","y1","linePaths","sizeDomain","lineChart","linePlusBarChart","dataBars","bar","dataLines","y2","originalKey","y1Axis","y2Axis","lineWithFocusChart","resizePath","availableHeight2","updateBrushBG","brush","empty","brushExtent","brushBG","x2","leftWidth","rightWidth","onBrush","focusLinesWrap","availableHeight1","height2","margin2","lines2","focusEnter","contextEnter","contextLinesWrap","oldTransition","brushBGenter","gBrush","x2Axis","xTickFormat","yTickFormat","linePlusBarWithFocusChart","focusBarsWrap","y3","bars2","y4","series1","series2","bars2Wrap","lines2Wrap","y3Axis","y4Axis","multiBar","hideable","stacked","stack","offset","stackOffset","posBase","negBase","f","groupSpacing","barColor","rgb","darker","delay","multiBarChart","multibar","controlWidth","getTranslate","staggerUp","staggerDown","totalInBetweenTicks","reduceXTicks","multiBarHorizontal","valuePadding","showBarLabels","multiBarHorizontalChart","multiChart","dataLines1","dataLines2","dataBars1","dataBars2","dataStack1","dataStack2","lines1","bars1","stack1","stack2","lines1Wrap","bars1Wrap","stack1Wrap","stack2Wrap","extraValue1","a","b","aVal","extraValue2","yScale1","yDomain1","yScale2","yDomain2","yAxis1","yAxis2","stackedArea","ohlcBar","getLow","getHigh","getOpen","getClose","open","close","high","low","pie","radius","arcRadius","arc","outerRadius","startAngle","endAngle","donut","innerRadius","donutRatio","slices","pieLabels","ae","pageX","pageY","_current","showLabels","labelsArc","pieLabelsOutside","donutLabelsOutside","labelSunbeamLayout","rotateAngle","centroid","labelLocationHash","avgHeight","avgWidth","createHashKey","coordinates","center","hashKey","percent","labelTypes","labelThreshold","labelType","getDescription","description","pieChart","pieWrap","tooltipLabel","updateInteractiveLayer","vertices","groupIndex","pX","pY","pointArray","pointActive","clipVoronoi","pointClipsEnter","pointClips","clipRadius","bounds","geom","polygon","epsilon","voronoi","clip","pointPaths","mouseEventCallback","mDispatch","needsUpdate","getSize","padDataOuter","z","forceSize","sizeRange","z0","onlyCircles","points","pointKey","sqrt","getShape","clearTimeout","timeoutID","shape","notActive","zScale","scatterChart","updateFisheye","pauseFisheye","distortion","fisheye","focus","distX","distY","xPadding","yPadding","showDistX","showDistY","tooltipX","tooltipY","leftX","topX","leftY","topY","xVal","tooltipXContent","tooltipYContent","scatterPlusLineChart","regWrap","regLine","slope","intercept","sparkline","paths","yValues","maxPoint","lastIndexOf","minPoint","currentPoint","animate","sparklinePlus","updateValueLine","paused","hoverValue","hoverEnter","sparklineHover","getClosestIndex","closestIndex","sparklineWrap","valueWrap","rightAlignValue","alignValue","showValue","dataRaw","aseries","dataFiltered","out","yHeight","zeroArea","path","areaMouseover","areaMouseout","areaClick","d3_stackedOffset_stackPercent","stackData","o","stackedAreaChart","controlLabels","metaKey","stream","expanded","stack_percent","cData","stackedWrap","setTickFormat","yAxisTickFormat","tooltipValue","stackedValue","stackedY0","stackedY","Utilities","View","self","canvas_id","makeConfig","d3chart","_makeAxes","definition","showmaxmin","canvas","zoomable"],"mappings":"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","file":"nvd3_bar_horizontal.js","sourcesContent":["define(function() { return /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(11) ], __WEBPACK_AMD_DEFINE_RESULT__ = function( NVD3 ) {\n\t    return Backbone.Model.extend({\n\t        initialize: function( options ) {\n\t            options.type = 'multiBarHorizontalChart';\n\t            new NVD3( options );\n\t        }\n\t    });\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/** Useful helper functions */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t\n\t    /** Clone */\n\t    function clone( obj ) {\n\t        return JSON.parse( JSON.stringify( obj ) || null );\n\t    };\n\t\n\t    /**\n\t     * Check if a string is a json string\n\t     * @param{String}   text - Content to be validated\n\t     */\n\t    function isJSON(text) {\n\t        return /^[\\],:{}\\s]*$/.test(text.replace(/\\\\[\"\\\\\\/bfnrtu]/g, '@').\n\t            replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']').\n\t            replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''));\n\t    };\n\t\n\t    /**\n\t     * Request handler for GET\n\t     * @param{String}   url     - Url request is made to\n\t     * @param{Function} success - Callback on success\n\t     * @param{Function} error   - Callback on error\n\t     * @param{Boolean}  cache   - Use cached data if available\n\t     */\n\t    function get (options) {\n\t        top.__utils__get__ = top.__utils__get__ || {};\n\t        var cache_key = JSON.stringify( options );\n\t        if (options.cache && top.__utils__get__[cache_key]) {\n\t            options.success && options.success(top.__utils__get__[cache_key]);\n\t            window.console.debug('utils.js::get() - Fetching from cache [' + options.url + '].');\n\t        } else {\n\t            request({\n\t                url     : options.url,\n\t                data    : options.data,\n\t                success : function(response) {\n\t                    top.__utils__get__[cache_key] = response;\n\t                    options.success && options.success(response);\n\t                },\n\t                error : function(response) {\n\t                    options.error && options.error(response);\n\t                }\n\t            });\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Request handler\n\t     * @param{String}   method  - Request method ['GET', 'POST', 'DELETE', 'PUT']\n\t     * @param{String}   url     - Url request is made to\n\t     * @param{Object}   data    - Data send to url\n\t     * @param{Function} success - Callback on success\n\t     * @param{Function} error   - Callback on error\n\t     */\n\t    function request (options) {\n\t        var ajaxConfig = {\n\t            contentType : 'application/json',\n\t            type        : options.type || 'GET',\n\t            data        : options.data || {},\n\t            url         : options.url\n\t        }\n\t        if ( ajaxConfig.type == 'GET' || ajaxConfig.type == 'DELETE' ) {\n\t            if ( !$.isEmptyObject(ajaxConfig.data) ) {\n\t                ajaxConfig.url += ajaxConfig.url.indexOf('?') == -1 ? '?' : '&';\n\t                ajaxConfig.url += $.param(ajaxConfig.data, true);\n\t            }\n\t            ajaxConfig.data = null;\n\t        } else {\n\t            ajaxConfig.dataType = 'json';\n\t            ajaxConfig.url      = ajaxConfig.url;\n\t            ajaxConfig.data     = JSON.stringify( ajaxConfig.data );\n\t        }\n\t        $.ajax( ajaxConfig ).done( function( response ) {\n\t            if ( typeof response === 'string' && isJSON( response ) ) {\n\t                try {\n\t                    response = response.replace( 'Infinity,', '\"Infinity\",' );\n\t                    response = jQuery.parseJSON( response );\n\t                } catch ( e ) {\n\t                    console.debug( e );\n\t                }\n\t            }\n\t            options.success && options.success( response );\n\t        }).fail( function( response ) {\n\t            var response_text = null;\n\t            try {\n\t                response_text = jQuery.parseJSON( response.responseText );\n\t            } catch (e) {\n\t                response_text = response.responseText;\n\t            }\n\t            options.error && options.error( response_text, response );\n\t        }).always( function() {\n\t            options.complete && options.complete();\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Safely merge to dictionaries\n\t     * @param{Object}   options         - Target dictionary\n\t     * @param{Object}   optionsDefault  - Source dictionary\n\t     */\n\t    function merge (options, optionsDefault) {\n\t        if (options) {\n\t            return _.defaults(options, optionsDefault);\n\t        } else {\n\t            return optionsDefault;\n\t        }\n\t    };\n\t\n\t    /** Create a unique id */\n\t    function uid(){\n\t        top.__utils__uid__ = top.__utils__uid__ || 0;\n\t        return 'uid-' + top.__utils__uid__++;\n\t    };\n\t\n\t    return {\n\t        get     : get,\n\t        merge   : merge,\n\t        uid     : uid,\n\t        request : request,\n\t        clone   : clone,\n\t        isJSON  : isJSON\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 2 */,\n/* 3 */,\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1), __webpack_require__(5) ], __WEBPACK_AMD_DEFINE_RESULT__ = function( Utils, Datasets ) {\n\t    /** build job dictionary */\n\t    function buildJobDictionary( chart, module ) {\n\t        var settings_string = '';\n\t        var columns_string = '';\n\t        var group_index = 0;\n\t        for ( key in chart.settings.attributes ) {\n\t            var settings_value = chart.settings.get( key );\n\t            _.each( [ [ ' ', '&#32;' ], [ ',', '&#44;' ], [ ':', '&#58;' ] ], function( pair ) {\n\t                settings_value = settings_value.replace( new RegExp( pair[ 0 ], 'g' ), pair[ 1 ] );\n\t            });\n\t            settings_string += key + ':' + settings_value + ', ';\n\t        };\n\t        settings_string = settings_string.substring( 0, settings_string.length - 2 )\n\t        chart.groups.each( function( group ) {\n\t            group_index++;\n\t            _.each( group.get( '__data_columns' ), function( data_columns, name ) {\n\t                columns_string += name + '_' + group_index + ':' + ( parseInt( group.get( name ) ) + 1 ) + ', ';\n\t            });\n\t        });\n\t        columns_string = columns_string.substring( 0, columns_string.length - 2 );\n\t        return {\n\t                    'tool_id'       : 'charts',\n\t                    'inputs'        : {\n\t                        'input'     : {\n\t                            'id'    : chart.get( 'dataset_id' ),\n\t                            'src'   : 'hda'\n\t                        },\n\t                        'module'    : module,\n\t                        'columns'   : columns_string,\n\t                        'settings'  : settings_string\n\t                    }\n\t                }\n\t    };\n\t\n\t    /** Assists in assigning the viewport panels */\n\t    function panelHelper( options ) {\n\t        var self = this;\n\t        var process             = options.process;\n\t        var chart               = options.chart;\n\t        var render              = options.render;\n\t        var targets             = options.targets;\n\t        var dataset_id          = options.dataset_id || options.chart.get( 'dataset_id' );\n\t        var dataset_groups      = options.dataset_groups || options.chart.groups;\n\t        Datasets.request({\n\t            chart           : chart,\n\t            dataset_id      : dataset_id,\n\t            dataset_groups  : dataset_groups,\n\t            success         : function( result ) {\n\t                try {\n\t                    if ( targets.length == result.length ) {\n\t                        var valid = true;\n\t                        for ( var group_index in result ) {\n\t                            var group = result[ group_index ];\n\t                            if ( !render( targets[ group_index ], [ group ] ) ) {\n\t                                valid = false;\n\t                                break;\n\t                            }\n\t                        }\n\t                        if ( valid ) {\n\t                            chart.state( 'ok', 'Multi-panel chart drawn.' );\n\t                        }\n\t                    } else if ( targets.length == 1 ) {\n\t                        if ( render( targets[ 0 ], result ) ) {\n\t                            chart.state( 'ok', 'Chart drawn.' );\n\t                        }\n\t                    } else {\n\t                        chart.state( 'failed', 'Invalid panel count.' );\n\t                    }\n\t                    process.resolve();\n\t                } catch ( err ) {\n\t                    console.debug( 'FAILED: tabular-utilities::panelHelper() - ' + err );\n\t                    chart.state( 'failed', err );\n\t                    process.reject();\n\t                }\n\t            }\n\t        });\n\t    };\n\t\n\t    /** Get domain boundaries value */\n\t    function getDomains( groups, keys ) {\n\t        function _apply( operator, key ) {\n\t            var value = undefined;\n\t            for ( var group_index in groups ) {\n\t                var value_sub = d3[ operator ]( groups[ group_index ].values, function( d ) { return d[ key ] } );\n\t                value = value === undefined ? value_sub : Math[ operator ]( value, value_sub );\n\t            }\n\t            return value;\n\t        };\n\t        var result = {};\n\t        for( var index in keys ) {\n\t            var key = keys[ index ];\n\t            result[ key ] = {\n\t                min : _apply( 'min', key ),\n\t                max : _apply( 'max', key ),\n\t            };\n\t           \n\t        }\n\t        return result;\n\t    };\n\t\n\t    /** Default series maker */\n\t    function makeSeries( groups, keys ) {\n\t        var plot_data = [];\n\t        for ( var group_index in groups ) {\n\t            var group = groups[ group_index ];\n\t            var data = [];\n\t            for ( var value_index in group.values ) {\n\t                var point = [];\n\t                if ( keys ) {\n\t                    for ( var key_index in keys ) {\n\t                        var column_index = keys[ key_index ];\n\t                        point.push( group.values[ value_index ][ column_index ] );\n\t                    }\n\t                } else {\n\t                    for ( var column_index in group.values[ value_index ] ) {\n\t                        point.push( group.values[ value_index ][ column_index ] );\n\t                    }\n\t                }\n\t                data.push( point );\n\t            }\n\t            plot_data.push( data );\n\t        }\n\t        return plot_data;\n\t    };\n\t\n\t    /** Default category maker */\n\t    function makeCategories( groups, column_keys ) {\n\t        var array = {};\n\t        var data_columns = groups[ 0 ].__data_columns;\n\t        _.each( column_keys, function( key ) {\n\t            if ( data_columns[ key ].is_label ) {\n\t                array[ key ] = [];\n\t            }\n\t        });\n\t        if ( groups && groups[ 0 ] ) {\n\t            _.each( groups[ 0 ].values, function( value_dict ) {\n\t                for ( var key in array ) {\n\t                    array[ key ].push( String( value_dict[ key ] ) );\n\t                }\n\t            });\n\t        }\n\t        mapCategories( array, groups );\n\t        return { array : array }\n\t    };\n\t\n\t    /** Apply default mapping index all values contained in label columns (for all groups) */\n\t    function mapCategories( array, groups ) {\n\t        _.each( groups, function( group ) {\n\t            _.each( group.values, function( value_dict, i ) {\n\t                for ( var key in array ) {\n\t                    value_dict[ key ] = parseInt( i )\n\t                }\n\t            });\n\t        });\n\t    };\n\t\n\t    /** Category make for unique category labels */\n\t    function makeUniqueCategories( groups, with_index ) {\n\t        var categories  = {};\n\t        var array       = {};\n\t        var counter     = {};\n\t        var data_columns = groups[ 0 ].__data_columns;\n\t        _.each( data_columns, function( column_def, key ) {\n\t            if ( column_def.is_label ) {\n\t                categories[ key ] = {};\n\t                array[ key ]      = [];\n\t                counter[ key ]    = 0;\n\t            }\n\t        });\n\t        // index all values contained in label columns (for all groups)\n\t        for ( var i in groups ) {\n\t            var group = groups[ i ];\n\t            for ( var j in group.values ) {\n\t                var value_dict = group.values[ j ];\n\t                for ( var key in categories ) {\n\t                    var value = String( value_dict[ key ] );\n\t                    if ( categories[ key ][ value ] === undefined ) {\n\t                        categories[ key ][ value ] = counter[ key ];\n\t                        array[ key ].push( with_index ? [counter[key], value] : value );\n\t                        counter[ key ]++;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        // convert group values into category indeces\n\t        for ( var i in groups ) {\n\t            var group = groups[ i ];\n\t            for ( var j in group.values ) {\n\t                var value_dict = group.values[ j ];\n\t                for ( var key in categories ) {\n\t                    var value = String( value_dict[ key ] );\n\t                    value_dict[ key ] = categories[ key ][ value ];\n\t                }\n\t            }\n\t        }\n\t        return {\n\t            categories  : categories,\n\t            array       : array,\n\t            counter     : counter\n\t        }\n\t    };\n\t\n\t    /** Make axis */\n\t    function makeTickFormat ( options ) {\n\t        var type        = options.type;\n\t        var precision   = options.precision;\n\t        var categories  = options.categories;\n\t        var formatter   = options.formatter;\n\t        if ( type == 'hide' ) {\n\t            formatter( function() { return '' } );\n\t        } else if ( type == 'auto' ) {\n\t            if ( categories ) {\n\t                formatter( function( value ) { return categories[ value ] || '' } );\n\t            }\n\t        } else {\n\t            var d3format = function( d ) {\n\t                switch ( type ) {\n\t                    case 's':\n\t                        var prefix = d3.formatPrefix( d );\n\t                        return prefix.scale( d ).toFixed() + prefix.symbol;\n\t                    default :\n\t                        return d3.format( '.' + precision + type )( d );\n\t                }\n\t            };\n\t            if ( categories ) {\n\t                formatter( function( value ) {\n\t                    var label = categories[ value ];\n\t                    if ( label ) {\n\t                        if ( isNaN( label ) ) {\n\t                            return label;\n\t                        } else {\n\t                            try {\n\t                                return d3format( label );\n\t                            } catch ( err ) {\n\t                                return label;\n\t                            }\n\t                        }\n\t                    } else {\n\t                        return '';\n\t                    }\n\t                });\n\t            } else {\n\t                formatter( function( value ) { return d3format( value ) } );\n\t            }\n\t        }\n\t    };\n\t\n\t    /** Add zoom handler */\n\t    function addZoom( options ) {\n\t        var scaleExtent = 100;\n\t        var yAxis       = options.yAxis;\n\t        var xAxis       = options.xAxis;\n\t        var xDomain     = options.xDomain || xAxis.scale().domain;\n\t        var yDomain     = options.yDomain || yAxis.scale().domain;\n\t        var redraw      = options.redraw;\n\t        var svg         = options.svg;\n\t        var xScale      = xAxis.scale();\n\t        var yScale      = yAxis.scale();\n\t        var x_boundary  = xScale.domain().slice();\n\t        var y_boundary  = yScale.domain().slice();\n\t        var d3zoom      = d3.behavior.zoom();\n\t        xScale.nice();\n\t        yScale.nice();\n\t        function fixDomain( domain, boundary ) {\n\t            domain[ 0 ] = Math.min( Math.max( domain[ 0 ], boundary[ 0 ] ), boundary[ 1 ] - boundary[ 1 ]/scaleExtent );\n\t            domain[ 1 ] = Math.max( boundary[ 0 ] + boundary[ 1 ] / scaleExtent, Math.min( domain[ 1 ], boundary[ 1 ] ) );\n\t            return domain;\n\t        };\n\t        function zoomed() {\n\t            yDomain( fixDomain( yScale.domain(), y_boundary ) );\n\t            xDomain( fixDomain( xScale.domain(), x_boundary ) );\n\t            redraw();\n\t        };\n\t        function unzoomed() {\n\t            xDomain( x_boundary );\n\t            yDomain( y_boundary );\n\t            redraw();\n\t            d3zoom.scale( 1 );\n\t            d3zoom.translate( [ 0 , 0 ] );\n\t        };\n\t        d3zoom.x( xScale )\n\t              .y( yScale )\n\t              .scaleExtent( [ 1, scaleExtent ] )\n\t              .on( 'zoom', zoomed );\n\t        svg.call( d3zoom ).on( 'dblclick.zoom', unzoomed );\n\t        return d3zoom;\n\t    };\n\t\n\t    return {\n\t        buildJobDictionary      : buildJobDictionary,\n\t        panelHelper             : panelHelper,\n\t        makeCategories          : makeCategories,\n\t        makeUniqueCategories    : makeUniqueCategories,\n\t        makeSeries              : makeSeries,\n\t        getDomains              : getDomains,\n\t        mapCategories           : mapCategories,\n\t        makeTickFormat          : makeTickFormat,\n\t        addZoom                 : addZoom\n\t    }\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/** This class handles, formats and caches datasets. */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1) ], __WEBPACK_AMD_DEFINE_RESULT__ = function( Utils ) {\n\t    /** Fills request dictionary with data from cache/response */\n\t    var _cache = {};\n\t    var request = function( options ) {\n\t        var groups      = options.dataset_groups;\n\t        var dataset_id  = options.dataset_id;\n\t        // identify columns needed to fulfill request\n\t        var column_list = [];\n\t        groups.each( function( group ) {\n\t            _.each( group.get( '__data_columns' ), function( column_def, column_name ) {\n\t                var column = group.get( column_name );\n\t                var block_id = _block_id( dataset_id, column );\n\t                if ( column_list.indexOf( column ) === -1 && !_cache[ block_id ] && column != 'auto' && column != 'zero' && column !== undefined ) {\n\t                    column_list.push( column );\n\t                }\n\t            });\n\t        });\n\t        if ( column_list.length == 0 ) {\n\t            _fillFromCache( options );\n\t            return;\n\t        }\n\t        // Fetch data columns into dataset object\n\t        Utils.get({\n\t            url     : Galaxy.root + 'api/datasets/' + dataset_id,\n\t            data    : {\n\t                data_type   : 'raw_data',\n\t                provider    : 'dataset-column',\n\t                indeces     : column_list.toString()\n\t            },\n\t            success : function( response ) {\n\t                var results = new Array( column_list.length );\n\t                for ( var i = 0; i < results.length; i++ ) {\n\t                    results[ i ] = [];\n\t                }\n\t                for ( var i in response.data ) {\n\t                    var row = response.data[ i ];\n\t                    for ( var j in row ) {\n\t                        var v = row[ j ];\n\t                        if ( v !== undefined && v != 2147483647 ) {\n\t                            results[ j ].push( v );\n\t                        }\n\t                    }\n\t                }\n\t                console.debug( 'tabular-datasets::_fetch() - Fetching complete.' );\n\t                for ( var i in results ) {\n\t                    var column = column_list[ i ];\n\t                    var block_id = _block_id( dataset_id, column );\n\t                    _cache[ block_id ] = results[ i ];\n\t                }\n\t                _fillFromCache( options );\n\t            }\n\t        });\n\t    };\n\t\n\t    /** Fill data from cache */\n\t    var _fillFromCache = function( options ) {\n\t        var groups      = options.dataset_groups;\n\t        var dataset_id  = options.dataset_id;\n\t        console.debug( 'tabular-datasets::_fillFromCache() - Filling request from cache.' );\n\t        var limit = 0;\n\t        groups.each( function( group ) {\n\t            _.each( group.get( '__data_columns' ), function( column_def, column_name ) {\n\t                var column = group.get( column_name );\n\t                var block_id = _block_id( dataset_id, column );\n\t                var column_data = _cache[ block_id ];\n\t                if ( column_data ) {\n\t                    limit = Math.max( limit, column_data.length );\n\t                }\n\t            });\n\t        });\n\t        if ( limit == 0 ) {\n\t            console.debug( 'tabular-datasets::_fillFromCache() - No data available.' );\n\t        }\n\t        var results = [];\n\t        groups.each( function( group, group_index ) {\n\t            var dict = Utils.merge( { key: ( group_index ) + ':' + group.get( 'key' ), values: [] }, group.attributes );\n\t            for ( var j = 0; j < limit; j++ ) {\n\t                dict.values[ j ] = { x : parseInt( j ) };\n\t            }\n\t            results.push( dict );\n\t        });\n\t        groups.each( function( group, group_index ) {\n\t            var values = results[ group_index ].values;\n\t            _.each( group.get( '__data_columns' ), function( column_def, column_name ) {\n\t                var column = group.get( column_name );\n\t                switch ( column ) {\n\t                    case 'auto':\n\t                        for ( var j = 0; j < limit; j++ ) {\n\t                            values[ j ][ column_name ] = parseInt( j );\n\t                        }\n\t                        break;\n\t                    case 'zero':\n\t                        for ( var j = 0; j < limit; j++ ) {\n\t                            values[ j ][ column_name ] = 0;\n\t                        }\n\t                        break;\n\t                    default:\n\t                        var block_id = _block_id( dataset_id, column );\n\t                        var column_data = _cache[ block_id ];\n\t                        for ( var j = 0; j < limit; j++ ) {\n\t                            var value = values[ j ];\n\t                            var v = column_data[ j ];\n\t                            if ( isNaN( v ) && !column_def.is_label ) {\n\t                                v = 0;\n\t                            }\n\t                            value[ column_name ] = v;\n\t                        }\n\t                }\n\t            });\n\t        });\n\t        options.success( results );\n\t    };\n\t\n\t    /** Get block id */\n\t    var _block_id = function ( dataset_id, column ) {\n\t        return dataset_id + '_' + '_' + column;\n\t    };\n\t\n\t    return { request: request };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\r\n\t// css base code, injected by the css-loader\r\n\tmodule.exports = function() {\r\n\t\tvar list = [];\r\n\t\r\n\t\t// return the list of modules as css string\r\n\t\tlist.toString = function toString() {\r\n\t\t\tvar result = [];\r\n\t\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\t\tvar item = this[i];\r\n\t\t\t\tif(item[2]) {\r\n\t\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresult.push(item[1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result.join(\"\");\r\n\t\t};\r\n\t\r\n\t\t// import a list of modules into the list\r\n\t\tlist.i = function(modules, mediaQuery) {\r\n\t\t\tif(typeof modules === \"string\")\r\n\t\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\t\tvar alreadyImportedModules = {};\r\n\t\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\t\tvar id = this[i][0];\r\n\t\t\t\tif(typeof id === \"number\")\r\n\t\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t\t}\r\n\t\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\t\tvar item = modules[i];\r\n\t\t\t\t// skip already imported module\r\n\t\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlist.push(item);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\treturn list;\r\n\t};\r\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\r\n\tvar stylesInDom = {},\r\n\t\tmemoize = function(fn) {\r\n\t\t\tvar memo;\r\n\t\t\treturn function () {\r\n\t\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\t\treturn memo;\r\n\t\t\t};\r\n\t\t},\r\n\t\tisOldIE = memoize(function() {\r\n\t\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t\t}),\r\n\t\tgetHeadElement = memoize(function () {\r\n\t\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t\t}),\r\n\t\tsingletonElement = null,\r\n\t\tsingletonCounter = 0,\r\n\t\tstyleElementsInsertedAtTop = [];\r\n\t\r\n\tmodule.exports = function(list, options) {\r\n\t\tif(false) {\r\n\t\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t\t}\r\n\t\r\n\t\toptions = options || {};\r\n\t\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t\t// tags it will allow on a page\r\n\t\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\t\r\n\t\t// By default, add <style> tags to the bottom of <head>.\r\n\t\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\r\n\t\r\n\t\tvar styles = listToStyles(list);\r\n\t\taddStylesToDom(styles, options);\r\n\t\r\n\t\treturn function update(newList) {\r\n\t\t\tvar mayRemove = [];\r\n\t\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\t\tvar item = styles[i];\r\n\t\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\t\tdomStyle.refs--;\r\n\t\t\t\tmayRemove.push(domStyle);\r\n\t\t\t}\r\n\t\t\tif(newList) {\r\n\t\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\t\taddStylesToDom(newStyles, options);\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\t\r\n\tfunction addStylesToDom(styles, options) {\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tif(domStyle) {\r\n\t\t\t\tdomStyle.refs++;\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t\t}\r\n\t\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tvar parts = [];\r\n\t\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t\t}\r\n\t\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction listToStyles(list) {\r\n\t\tvar styles = [];\r\n\t\tvar newStyles = {};\r\n\t\tfor(var i = 0; i < list.length; i++) {\r\n\t\t\tvar item = list[i];\r\n\t\t\tvar id = item[0];\r\n\t\t\tvar css = item[1];\r\n\t\t\tvar media = item[2];\r\n\t\t\tvar sourceMap = item[3];\r\n\t\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\t\tif(!newStyles[id])\r\n\t\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\t\telse\r\n\t\t\t\tnewStyles[id].parts.push(part);\r\n\t\t}\r\n\t\treturn styles;\r\n\t}\r\n\t\r\n\tfunction insertStyleElement(options, styleElement) {\r\n\t\tvar head = getHeadElement();\r\n\t\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\r\n\t\tif (options.insertAt === \"top\") {\r\n\t\t\tif(!lastStyleElementInsertedAtTop) {\r\n\t\t\t\thead.insertBefore(styleElement, head.firstChild);\r\n\t\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\r\n\t\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\r\n\t\t\t} else {\r\n\t\t\t\thead.appendChild(styleElement);\r\n\t\t\t}\r\n\t\t\tstyleElementsInsertedAtTop.push(styleElement);\r\n\t\t} else if (options.insertAt === \"bottom\") {\r\n\t\t\thead.appendChild(styleElement);\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction removeStyleElement(styleElement) {\r\n\t\tstyleElement.parentNode.removeChild(styleElement);\r\n\t\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\r\n\t\tif(idx >= 0) {\r\n\t\t\tstyleElementsInsertedAtTop.splice(idx, 1);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction createStyleElement(options) {\r\n\t\tvar styleElement = document.createElement(\"style\");\r\n\t\tstyleElement.type = \"text/css\";\r\n\t\tinsertStyleElement(options, styleElement);\r\n\t\treturn styleElement;\r\n\t}\r\n\t\r\n\tfunction createLinkElement(options) {\r\n\t\tvar linkElement = document.createElement(\"link\");\r\n\t\tlinkElement.rel = \"stylesheet\";\r\n\t\tinsertStyleElement(options, linkElement);\r\n\t\treturn linkElement;\r\n\t}\r\n\t\r\n\tfunction addStyle(obj, options) {\r\n\t\tvar styleElement, update, remove;\r\n\t\r\n\t\tif (options.singleton) {\r\n\t\t\tvar styleIndex = singletonCounter++;\r\n\t\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\r\n\t\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t\t} else if(obj.sourceMap &&\r\n\t\t\ttypeof URL === \"function\" &&\r\n\t\t\ttypeof URL.createObjectURL === \"function\" &&\r\n\t\t\ttypeof URL.revokeObjectURL === \"function\" &&\r\n\t\t\ttypeof Blob === \"function\" &&\r\n\t\t\ttypeof btoa === \"function\") {\r\n\t\t\tstyleElement = createLinkElement(options);\r\n\t\t\tupdate = updateLink.bind(null, styleElement);\r\n\t\t\tremove = function() {\r\n\t\t\t\tremoveStyleElement(styleElement);\r\n\t\t\t\tif(styleElement.href)\r\n\t\t\t\t\tURL.revokeObjectURL(styleElement.href);\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tstyleElement = createStyleElement(options);\r\n\t\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\t\tremove = function() {\r\n\t\t\t\tremoveStyleElement(styleElement);\r\n\t\t\t};\r\n\t\t}\r\n\t\r\n\t\tupdate(obj);\r\n\t\r\n\t\treturn function updateStyle(newObj) {\r\n\t\t\tif(newObj) {\r\n\t\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\t\treturn;\r\n\t\t\t\tupdate(obj = newObj);\r\n\t\t\t} else {\r\n\t\t\t\tremove();\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\t\r\n\tvar replaceText = (function () {\r\n\t\tvar textStore = [];\r\n\t\r\n\t\treturn function (index, replacement) {\r\n\t\t\ttextStore[index] = replacement;\r\n\t\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t\t};\r\n\t})();\r\n\t\r\n\tfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\t\tvar css = remove ? \"\" : obj.css;\r\n\t\r\n\t\tif (styleElement.styleSheet) {\r\n\t\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t\t} else {\r\n\t\t\tvar cssNode = document.createTextNode(css);\r\n\t\t\tvar childNodes = styleElement.childNodes;\r\n\t\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\t\tif (childNodes.length) {\r\n\t\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t\t} else {\r\n\t\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction applyToTag(styleElement, obj) {\r\n\t\tvar css = obj.css;\r\n\t\tvar media = obj.media;\r\n\t\r\n\t\tif(media) {\r\n\t\t\tstyleElement.setAttribute(\"media\", media)\r\n\t\t}\r\n\t\r\n\t\tif(styleElement.styleSheet) {\r\n\t\t\tstyleElement.styleSheet.cssText = css;\r\n\t\t} else {\r\n\t\t\twhile(styleElement.firstChild) {\r\n\t\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t\t}\r\n\t\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction updateLink(linkElement, obj) {\r\n\t\tvar css = obj.css;\r\n\t\tvar sourceMap = obj.sourceMap;\r\n\t\r\n\t\tif(sourceMap) {\r\n\t\t\t// http://stackoverflow.com/a/26603875\r\n\t\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t\t}\r\n\t\r\n\t\tvar blob = new Blob([css], { type: \"text/css\" });\r\n\t\r\n\t\tvar oldSrc = linkElement.href;\r\n\t\r\n\t\tlinkElement.href = URL.createObjectURL(blob);\r\n\t\r\n\t\tif(oldSrc)\r\n\t\t\tURL.revokeObjectURL(oldSrc);\r\n\t}\r\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = __webpack_require__(6)();\n\t// imports\n\t\n\t\n\t// module\n\texports.push([module.id, \".chartWrap{margin:0;padding:0;overflow:hidden}.nvtooltip.with-3d-shadow,.with-3d-shadow .nvtooltip{box-shadow:0 5px 10px rgba(0,0,0,.2);border-radius:6px}.nvtooltip{position:absolute;background-color:#fff;padding:1px;border:1px solid rgba(0,0,0,.2);z-index:10000;font-family:Arial;font-size:13px;text-align:left;pointer-events:none;white-space:nowrap;-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.nvtooltip.with-transitions,.with-transitions .nvtooltip{transition:opacity .25s linear;-moz-transition:opacity .25s linear;-webkit-transition:opacity .25s linear;transition-delay:.25s;-moz-transition-delay:.25s;-webkit-transition-delay:.25s}.nvtooltip.x-nvtooltip,.nvtooltip.y-nvtooltip{padding:8px}.nvtooltip h3{margin:0;padding:4px 14px;line-height:18px;font-weight:400;background-color:hsla(0,0%,97%,.75);text-align:center;border-bottom:1px solid #ebebeb;border-radius:5px 5px 0 0}.nvtooltip p{margin:0;padding:5px 14px;text-align:center}.nvtooltip span{display:inline-block;margin:2px 0}.nvtooltip table{margin:6px;border-spacing:0}.nvtooltip table td{padding:2px 9px 2px 0;vertical-align:middle}.nvtooltip table td.key{font-weight:400}.nvtooltip table td.value{text-align:right;font-weight:700}.nvtooltip table tr.highlight td{padding:1px 9px 1px 0;border-bottom-style:solid;border-bottom-width:1px;border-top-style:solid;border-top-width:1px}.nvtooltip table td.legend-color-guide div{width:8px;height:8px;vertical-align:middle}.nvtooltip .footer{padding:3px;text-align:center}.nvtooltip-pending-removal{position:absolute;pointer-events:none}svg{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:block;width:100%;height:100%}svg text{font:400 12px Arial}svg .title{font:700 14px Arial}.nvd3 .nv-background{fill:#fff;fill-opacity:0}.nvd3.nv-noData{font-size:18px;font-weight:700}.nv-brush .extent{fill-opacity:.125;shape-rendering:crispEdges}.nvd3 .nv-legend .nv-series{cursor:pointer}.nvd3 .nv-legend .disabled circle{fill-opacity:0}.nvd3 .nv-axis{pointer-events:none}.nvd3 .nv-axis path{fill:none;stroke:#000;stroke-opacity:.75;shape-rendering:crispEdges}.nvd3 .nv-axis path.domain{stroke-opacity:.75}.nvd3 .nv-axis.nv-x path.domain{stroke-opacity:0}.nvd3 .nv-axis text{font-size:11px}.nv-axis line{fill:none;stroke:#e5e5e5;shape-rendering:crispEdges}.nvd3 .nv-axis .zero line,.nvd3 .nv-axis line.zero{stroke-opacity:.75}.nvd3 .nv-axis .nv-axisMaxMin text{font-weight:700}.nvd3 .x2 .nv-axis .nv-axisMaxMin text,.nvd3 .x3 .nv-axis .nv-axisMaxMin text,.nvd3 .x .nv-axis .nv-axisMaxMin text{text-anchor:middle}.nv-brush .resize path{fill:#eee;stroke:#666}.nvd3 .nv-bars .negative rect{zfill:brown}.nvd3 .nv-bars rect{zfill:#4682b4;fill-opacity:.75;transition:fill-opacity .25s linear;-moz-transition:fill-opacity .25s linear;-webkit-transition:fill-opacity .25s linear}.nvd3 .nv-bars rect.hover{fill-opacity:1}.nvd3 .nv-bars .hover rect{fill:#add8e6}.nvd3 .nv-bars text{fill:transparent}.nvd3 .nv-bars .hover text{fill:#000}.nvd3 .nv-discretebar .nv-groups rect,.nvd3 .nv-multibar .nv-groups rect,.nvd3 .nv-multibarHorizontal .nv-groups rect{stroke-opacity:0;transition:fill-opacity .25s linear;-moz-transition:fill-opacity .25s linear;-webkit-transition:fill-opacity .25s linear}.nvd3 .nv-discretebar .nv-groups rect:hover,.nvd3 .nv-multibar .nv-groups rect:hover,.nvd3 .nv-multibarHorizontal .nv-groups rect:hover{fill-opacity:1}.nvd3 .nv-discretebar .nv-groups text,.nvd3 .nv-multibarHorizontal .nv-groups text{font-weight:700;fill:#000;stroke:transparent}.nvd3.nv-pie path{stroke-opacity:0;transition:fill-opacity .25s linear,stroke-width .25s linear,stroke-opacity .25s linear;-moz-transition:fill-opacity .25s linear,stroke-width .25s linear,stroke-opacity .25s linear;-webkit-transition:fill-opacity .25s linear,stroke-width .25s linear,stroke-opacity .25s linear}.nvd3.nv-pie .nv-slice text{stroke:#000;stroke-width:0}.nvd3.nv-pie path{stroke:#fff;stroke-width:1px;stroke-opacity:1}.nvd3.nv-pie .hover path{fill-opacity:.7}.nvd3.nv-pie .nv-label{pointer-events:none}.nvd3.nv-pie .nv-label rect{fill-opacity:0;stroke-opacity:0}.nvd3 .nv-groups path.nv-line{fill:none;stroke-width:1.5px}.nvd3 .nv-groups path.nv-line.nv-thin-line{stroke-width:1px}.nvd3 .nv-groups path.nv-area{stroke:none}.nvd3 .nv-line.hover path{stroke-width:6px}.nvd3.nv-line .nvd3.nv-scatter .nv-groups .nv-point{fill-opacity:0;stroke-opacity:0}.nvd3.nv-scatter.nv-single-point .nv-groups .nv-point{fill-opacity:.5!important;stroke-opacity:.5!important}.with-transitions .nvd3 .nv-groups .nv-point{transition:stroke-width .25s linear,stroke-opacity .25s linear;-moz-transition:stroke-width .25s linear,stroke-opacity .25s linear;-webkit-transition:stroke-width .25s linear,stroke-opacity .25s linear}.nvd3 .nv-groups .nv-point.hover,.nvd3.nv-scatter .nv-groups .nv-point.hover{stroke-width:7px;fill-opacity:.95!important;stroke-opacity:.95!important}.nvd3 .nv-point-paths path{stroke:#aaa;stroke-opacity:0;fill:#eee;fill-opacity:0}.nvd3 .nv-indexLine{cursor:ew-resize}.nvd3 .nv-distribution{pointer-events:none}.nvd3 .nv-groups .nv-point.hover{stroke-width:20px;stroke-opacity:.5}.nvd3 .nv-scatter .nv-point.hover{fill-opacity:1}.nvd3.nv-stackedarea path.nv-area{fill-opacity:.7;stroke-opacity:0;transition:fill-opacity .25s linear,stroke-opacity .25s linear;-moz-transition:fill-opacity .25s linear,stroke-opacity .25s linear;-webkit-transition:fill-opacity .25s linear,stroke-opacity .25s linear}.nvd3.nv-stackedarea path.nv-area.hover{fill-opacity:.9}.nvd3.nv-stackedarea .nv-groups .nv-point{stroke-opacity:0;fill-opacity:0}.nvd3.nv-linePlusBar .nv-bar rect{fill-opacity:.75}.nvd3.nv-linePlusBar .nv-bar rect:hover{fill-opacity:1}.nvd3.nv-bullet{font:10px sans-serif}.nvd3.nv-bullet .nv-measure{fill-opacity:.8}.nvd3.nv-bullet .nv-measure:hover{fill-opacity:1}.nvd3.nv-bullet .nv-marker{stroke:#000;stroke-width:2px}.nvd3.nv-bullet .nv-markerTriangle{stroke:#000;fill:#fff;stroke-width:1.5px}.nvd3.nv-bullet .nv-tick line{stroke:#666;stroke-width:.5px}.nvd3.nv-bullet .nv-range.nv-s0{fill:#eee}.nvd3.nv-bullet .nv-range.nv-s1{fill:#ddd}.nvd3.nv-bullet .nv-range.nv-s2{fill:#ccc}.nvd3.nv-bullet .nv-title{font-size:14px;font-weight:700}.nvd3.nv-bullet .nv-subtitle{fill:#999}.nvd3.nv-bullet .nv-range{fill:#bababa;fill-opacity:.4}.nvd3.nv-bullet .nv-range:hover{fill-opacity:.7}.nvd3.nv-sparkline path{fill:none}.nvd3.nv-sparklineplus g.nv-hoverValue{pointer-events:none}.nvd3.nv-sparklineplus .nv-hoverValue line{stroke:#333;stroke-width:1.5px}.nvd3.nv-sparklineplus,.nvd3.nv-sparklineplus g{pointer-events:all}.nvd3 .nv-hoverArea{fill-opacity:0;stroke-opacity:0}.nvd3.nv-sparklineplus .nv-xValue,.nvd3.nv-sparklineplus .nv-yValue{stroke-width:0;font-size:.9em;font-weight:400}.nvd3.nv-sparklineplus .nv-yValue{stroke:#f66}.nvd3.nv-sparklineplus .nv-maxValue{stroke:#2ca02c;fill:#2ca02c}.nvd3.nv-sparklineplus .nv-minValue{stroke:#d62728;fill:#d62728}.nvd3.nv-sparklineplus .nv-currentValue{font-weight:700;font-size:1.1em}.nvd3.nv-ohlcBar .nv-ticks .nv-tick{stroke-width:2px}.nvd3.nv-ohlcBar .nv-ticks .nv-tick.hover{stroke-width:4px}.nvd3.nv-ohlcBar .nv-ticks .nv-tick.positive{stroke:#2ca02c}.nvd3.nv-ohlcBar .nv-ticks .nv-tick.negative{stroke:#d62728}.nvd3.nv-historicalStockChart .nv-axis .nv-axislabel{font-weight:700}.nvd3.nv-historicalStockChart .nv-dragTarget{fill-opacity:0;stroke:none;cursor:move}.nvd3 .nv-brush .extent{fill-opacity:0!important}.nvd3 .nv-brushBackground rect{stroke:#000;stroke-width:.4;fill:#fff;fill-opacity:.7}.nvd3.nv-indentedtree .name{margin-left:5px}.nvd3.nv-indentedtree .clickable{color:#08c;cursor:pointer}.nvd3.nv-indentedtree span.clickable:hover{color:#005580;text-decoration:underline}.nvd3.nv-indentedtree .nv-childrenCount{display:inline-block;margin-left:5px}.nvd3.nv-indentedtree .nv-treeicon,.nvd3.nv-indentedtree .nv-treeicon.nv-folded{cursor:pointer}.nvd3 .background path{fill:none;stroke:#ccc;stroke-opacity:.4;shape-rendering:crispEdges}.nvd3 .foreground path{fill:none;stroke:#4682b4;stroke-opacity:.7}.nvd3 .brush .extent{fill-opacity:.3;stroke:#fff;shape-rendering:crispEdges}.axis path,.nvd3 .axis line{fill:none;stroke:#000;shape-rendering:crispEdges}.nvd3 .axis text{text-shadow:0 1px 0 #fff}.nvd3 .nv-interactiveGuideLine{pointer-events:none}.nvd3 line.nv-guideline{stroke:#ccc}\", \"\"]);\n\t\n\t// exports\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// style-loader: Adds some css to the DOM by adding a <style> tag\n\t\n\t// load the styles\n\tvar content = __webpack_require__(8);\n\tif(typeof content === 'string') content = [[module.id, content, '']];\n\t// add the styles to the DOM\n\tvar update = __webpack_require__(7)(content, {});\n\tif(content.locals) module.exports = content.locals;\n\t// Hot Module Replacement\n\tif(false) {\n\t\t// When the styles change, update the <style> tags\n\t\tif(!content.locals) {\n\t\t\tmodule.hot.accept(\"!!./../../../../node_modules/css-loader/index.js!./nv.d3.css\", function() {\n\t\t\t\tvar newContent = require(\"!!./../../../../node_modules/css-loader/index.js!./nv.d3.css\");\n\t\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\t\tupdate(newContent);\n\t\t\t});\n\t\t}\n\t\t// When the module is disposed, remove the <style> tags\n\t\tmodule.hot.dispose(function() { update(); });\n\t}\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t(function(){\n\t\n\tvar nv = window.nv || {};\n\t\n\t\n\tnv.version = '1.1.15b';\n\tnv.dev = true //set false when in production\n\t\n\twindow.nv = nv;\n\t\n\tnv.tooltip = nv.tooltip || {}; // For the tooltip system\n\tnv.utils = nv.utils || {}; // Utility subsystem\n\tnv.models = nv.models || {}; //stores all the possible models/components\n\tnv.charts = {}; //stores all the ready to use charts\n\tnv.graphs = []; //stores all the graphs currently on the page\n\tnv.logs = {}; //stores some statistics and potential error messages\n\t\n\tnv.dispatch = d3.dispatch('render_start', 'render_end');\n\t\n\t// *************************************************************************\n\t//  Development render timers - disabled if dev = false\n\t\n\tif (nv.dev) {\n\t  nv.dispatch.on('render_start', function(e) {\n\t    nv.logs.startTime = +new Date();\n\t  });\n\t\n\t  nv.dispatch.on('render_end', function(e) {\n\t    nv.logs.endTime = +new Date();\n\t    nv.logs.totalTime = nv.logs.endTime - nv.logs.startTime;\n\t    nv.log('total', nv.logs.totalTime); // used for development, to keep track of graph generation times\n\t  });\n\t}\n\t\n\t// ********************************************\n\t//  Public Core NV functions\n\t\n\t// Logs all arguments, and returns the last so you can test things in place\n\t// Note: in IE8 console.log is an object not a function, and if modernizr is used\n\t// then calling Function.prototype.bind with with anything other than a function\n\t// causes a TypeError to be thrown.\n\tnv.log = function() {\n\t  if (nv.dev && console.log && console.log.apply)\n\t    console.log.apply(console, arguments)\n\t  else if (nv.dev && typeof console.log == \"function\" && Function.prototype.bind) {\n\t    var log = Function.prototype.bind.call(console.log, console);\n\t    log.apply(console, arguments);\n\t  }\n\t  return arguments[arguments.length - 1];\n\t};\n\t\n\t\n\tnv.render = function render(step) {\n\t  step = step || 1; // number of graphs to generate in each timeout loop\n\t\n\t  nv.render.active = true;\n\t  nv.dispatch.render_start();\n\t\n\t  setTimeout(function() {\n\t    var chart, graph;\n\t\n\t    for (var i = 0; i < step && (graph = nv.render.queue[i]); i++) {\n\t      chart = graph.generate();\n\t      if (typeof graph.callback == typeof(Function)) graph.callback(chart);\n\t      nv.graphs.push(chart);\n\t    }\n\t\n\t    nv.render.queue.splice(0, i);\n\t\n\t    if (nv.render.queue.length) setTimeout(arguments.callee, 0);\n\t    else {\n\t      nv.dispatch.render_end();\n\t      nv.render.active = false;\n\t    }\n\t  }, 0);\n\t};\n\t\n\tnv.render.active = false;\n\tnv.render.queue = [];\n\t\n\tnv.addGraph = function(obj) {\n\t  if (typeof arguments[0] === typeof(Function))\n\t    obj = {generate: arguments[0], callback: arguments[1]};\n\t\n\t  nv.render.queue.push(obj);\n\t\n\t  if (!nv.render.active) nv.render();\n\t};\n\t\n\tnv.identity = function(d) { return d; };\n\t\n\tnv.strip = function(s) { return s.replace(/(\\s|&)/g,''); };\n\t\n\tfunction daysInMonth(month,year) {\n\t  return (new Date(year, month+1, 0)).getDate();\n\t}\n\t\n\tfunction d3_time_range(floor, step, number) {\n\t  return function(t0, t1, dt) {\n\t    var time = floor(t0), times = [];\n\t    if (time < t0) step(time);\n\t    if (dt > 1) {\n\t      while (time < t1) {\n\t        var date = new Date(+time);\n\t        if ((number(date) % dt === 0)) times.push(date);\n\t        step(time);\n\t      }\n\t    } else {\n\t      while (time < t1) { times.push(new Date(+time)); step(time); }\n\t    }\n\t    return times;\n\t  };\n\t}\n\t\n\td3.time.monthEnd = function(date) {\n\t  return new Date(date.getFullYear(), date.getMonth(), 0);\n\t};\n\t\n\td3.time.monthEnds = d3_time_range(d3.time.monthEnd, function(date) {\n\t    date.setUTCDate(date.getUTCDate() + 1);\n\t    date.setDate(daysInMonth(date.getMonth() + 1, date.getFullYear()));\n\t  }, function(date) {\n\t    return date.getMonth();\n\t  }\n\t);\n\t\n\t/* Utility class to handle creation of an interactive layer.\n\tThis places a rectangle on top of the chart. When you mouse move over it, it sends a dispatch\n\tcontaining the X-coordinate. It can also render a vertical line where the mouse is located.\n\t\n\tdispatch.elementMousemove is the important event to latch onto.  It is fired whenever the mouse moves over\n\tthe rectangle. The dispatch is given one object which contains the mouseX/Y location.\n\tIt also has 'pointXValue', which is the conversion of mouseX to the x-axis scale.\n\t*/\n\tnv.interactiveGuideline = function() {\n\t\t\"use strict\";\n\t\tvar tooltip = nv.models.tooltip();\n\t\t//Public settings\n\t\tvar width = null\n\t\t, height = null\n\t    //Please pass in the bounding chart's top and left margins\n\t    //This is important for calculating the correct mouseX/Y positions.\n\t\t, margin = {left: 0, top: 0}\n\t\t, xScale = d3.scale.linear()\n\t\t, yScale = d3.scale.linear()\n\t\t, dispatch = d3.dispatch('elementMousemove', 'elementMouseout','elementDblclick')\n\t\t, showGuideLine = true\n\t\t, svgContainer = null  \n\t    //Must pass in the bounding chart's <svg> container.\n\t    //The mousemove event is attached to this container.\n\t\t;\n\t\n\t\t//Private variables\n\t\tvar isMSIE = navigator.userAgent.indexOf(\"MSIE\") !== -1  //Check user-agent for Microsoft Internet Explorer.\n\t\t;\n\t\n\t\n\t\tfunction layer(selection) {\n\t\t\tselection.each(function(data) {\n\t\t\t\t\tvar container = d3.select(this);\n\t\t\t\t\t\n\t\t\t\t\tvar availableWidth = (width || 960), availableHeight = (height || 400);\n\t\n\t\t\t\t\tvar wrap = container.selectAll(\"g.nv-wrap.nv-interactiveLineLayer\").data([data]);\n\t\t\t\t\tvar wrapEnter = wrap.enter()\n\t\t\t\t\t\t\t\t\t.append(\"g\").attr(\"class\", \" nv-wrap nv-interactiveLineLayer\");\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\twrapEnter.append(\"g\").attr(\"class\",\"nv-interactiveGuideLine\");\n\t\t\t\t\t\n\t\t\t\t\tif (!svgContainer) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\n\t                function mouseHandler() {\n\t                      var d3mouse = d3.mouse(this);\n\t                      var mouseX = d3mouse[0];\n\t                      var mouseY = d3mouse[1];\n\t                      var subtractMargin = true;\n\t                      var mouseOutAnyReason = false;\n\t                      if (isMSIE) {\n\t                         /*\n\t                            D3.js (or maybe SVG.getScreenCTM) has a nasty bug in Internet Explorer 10.\n\t                            d3.mouse() returns incorrect X,Y mouse coordinates when mouse moving\n\t                            over a rect in IE 10.\n\t                            However, d3.event.offsetX/Y also returns the mouse coordinates\n\t                            relative to the triggering <rect>. So we use offsetX/Y on IE.  \n\t                         */\n\t                         mouseX = d3.event.offsetX;\n\t                         mouseY = d3.event.offsetY;\n\t\n\t                         /*\n\t                            On IE, if you attach a mouse event listener to the <svg> container,\n\t                            it will actually trigger it for all the child elements (like <path>, <circle>, etc).\n\t                            When this happens on IE, the offsetX/Y is set to where ever the child element\n\t                            is located.\n\t                            As a result, we do NOT need to subtract margins to figure out the mouse X/Y\n\t                            position under this scenario. Removing the line below *will* cause \n\t                            the interactive layer to not work right on IE.\n\t                         */\n\t                         if(d3.event.target.tagName !== \"svg\")\n\t                            subtractMargin = false;\n\t\n\t                         if (d3.event.target.className.baseVal.match(\"nv-legend\"))\n\t                         \tmouseOutAnyReason = true;\n\t                          \n\t                      }\n\t\n\t                      if(subtractMargin) {\n\t                         mouseX -= margin.left;\n\t                         mouseY -= margin.top;\n\t                      }\n\t\n\t                      /* If mouseX/Y is outside of the chart's bounds,\n\t                      trigger a mouseOut event.\n\t                      */\n\t                      if (mouseX < 0 || mouseY < 0 \n\t                        || mouseX > availableWidth || mouseY > availableHeight\n\t                        || (d3.event.relatedTarget && d3.event.relatedTarget.ownerSVGElement === undefined)\n\t                        || mouseOutAnyReason\n\t                        ) \n\t                      {\n\t                      \t\tif (isMSIE) {\n\t                      \t\t\tif (d3.event.relatedTarget \n\t                      \t\t\t\t&& d3.event.relatedTarget.ownerSVGElement === undefined\n\t                      \t\t\t\t&& d3.event.relatedTarget.className.match(tooltip.nvPointerEventsClass)) {\n\t                      \t\t\t\treturn;\n\t                      \t\t\t}\n\t                      \t\t}\n\t                            dispatch.elementMouseout({\n\t                               mouseX: mouseX,\n\t                               mouseY: mouseY\n\t                            });\n\t                            layer.renderGuideLine(null); //hide the guideline\n\t                            return;\n\t                      }\n\t                      \n\t                      var pointXValue = xScale.invert(mouseX);\n\t                      dispatch.elementMousemove({\n\t                            mouseX: mouseX,\n\t                            mouseY: mouseY,\n\t                            pointXValue: pointXValue\n\t                      });\n\t\n\t                      //If user double clicks the layer, fire a elementDblclick dispatch.\n\t                      if (d3.event.type === \"dblclick\") {\n\t                        dispatch.elementDblclick({\n\t                            mouseX: mouseX,\n\t                            mouseY: mouseY,\n\t                            pointXValue: pointXValue\n\t                        });\n\t                      }\n\t                }\n\t\n\t\t\t\t\tsvgContainer\n\t\t\t\t\t      .on(\"mousemove\",mouseHandler, true)\n\t\t\t\t\t      .on(\"mouseout\" ,mouseHandler,true)\n\t                      .on(\"dblclick\" ,mouseHandler)\n\t\t\t\t\t      ;\n\t\n\t\t\t\t\t //Draws a vertical guideline at the given X postion.\n\t\t\t\t\tlayer.renderGuideLine = function(x) {\n\t\t\t\t\t \tif (!showGuideLine) return;\n\t\t\t\t\t \tvar line = wrap.select(\".nv-interactiveGuideLine\")\n\t\t\t\t\t \t      .selectAll(\"line\")\n\t\t\t\t\t \t      .data((x != null) ? [nv.utils.NaNtoZero(x)] : [], String);\n\t\n\t\t\t\t\t \tline.enter()\n\t\t\t\t\t \t\t.append(\"line\")\n\t\t\t\t\t \t\t.attr(\"class\", \"nv-guideline\")\n\t\t\t\t\t \t\t.attr(\"x1\", function(d) { return d;})\n\t\t\t\t\t \t\t.attr(\"x2\", function(d) { return d;})\n\t\t\t\t\t \t\t.attr(\"y1\", availableHeight)\n\t\t\t\t\t \t\t.attr(\"y2\",0)\n\t\t\t\t\t \t\t;\n\t\t\t\t\t \tline.exit().remove();\n\t\n\t\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\n\t\tlayer.dispatch = dispatch;\n\t\tlayer.tooltip = tooltip;\n\t\n\t\tlayer.margin = function(_) {\n\t\t    if (!arguments.length) return margin;\n\t\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t\t    return layer;\n\t    };\n\t\n\t\tlayer.width = function(_) {\n\t\t\tif (!arguments.length) return width;\n\t\t\twidth = _;\n\t\t\treturn layer;\n\t\t};\n\t\n\t\tlayer.height = function(_) {\n\t\t\tif (!arguments.length) return height;\n\t\t\theight = _;\n\t\t\treturn layer;\n\t\t};\n\t\n\t\tlayer.xScale = function(_) {\n\t\t\tif (!arguments.length) return xScale;\n\t\t\txScale = _;\n\t\t\treturn layer;\n\t\t};\n\t\n\t\tlayer.showGuideLine = function(_) {\n\t\t\tif (!arguments.length) return showGuideLine;\n\t\t\tshowGuideLine = _;\n\t\t\treturn layer;\n\t\t};\n\t\n\t\tlayer.svgContainer = function(_) {\n\t\t\tif (!arguments.length) return svgContainer;\n\t\t\tsvgContainer = _;\n\t\t\treturn layer;\n\t\t};\n\t\n\t\n\t\treturn layer;\n\t};\n\t\n\t/* Utility class that uses d3.bisect to find the index in a given array, where a search value can be inserted.\n\tThis is different from normal bisectLeft; this function finds the nearest index to insert the search value.\n\t\n\tFor instance, lets say your array is [1,2,3,5,10,30], and you search for 28. \n\tNormal d3.bisectLeft will return 4, because 28 is inserted after the number 10.  But interactiveBisect will return 5\n\tbecause 28 is closer to 30 than 10.\n\t\n\tUnit tests can be found in: interactiveBisectTest.html\n\t\n\tHas the following known issues:\n\t   * Will not work if the data points move backwards (ie, 10,9,8,7, etc) or if the data points are in random order.\n\t   * Won't work if there are duplicate x coordinate values.\n\t*/\n\tnv.interactiveBisect = function (values, searchVal, xAccessor) {\n\t\t  \"use strict\";\n\t      if (! values instanceof Array) return null;\n\t      if (typeof xAccessor !== 'function') xAccessor = function(d,i) { return d.x;}\n\t\n\t      var bisect = d3.bisector(xAccessor).left;\n\t      var index = d3.max([0, bisect(values,searchVal) - 1]);\n\t      var currentValue = xAccessor(values[index], index);\n\t      if (typeof currentValue === 'undefined') currentValue = index;\n\t\n\t      if (currentValue === searchVal) return index;  //found exact match\n\t\n\t      var nextIndex = d3.min([index+1, values.length - 1]);\n\t      var nextValue = xAccessor(values[nextIndex], nextIndex);\n\t      if (typeof nextValue === 'undefined') nextValue = nextIndex;\n\t\n\t      if (Math.abs(nextValue - searchVal) >= Math.abs(currentValue - searchVal))\n\t          return index;\n\t      else\n\t          return nextIndex\n\t};\n\t\n\t/*\n\tReturns the index in the array \"values\" that is closest to searchVal.\n\tOnly returns an index if searchVal is within some \"threshold\".\n\tOtherwise, returns null.\n\t*/\n\tnv.nearestValueIndex = function (values, searchVal, threshold) {\n\t      \"use strict\";\n\t      var yDistMax = Infinity, indexToHighlight = null;\n\t      values.forEach(function(d,i) {\n\t         var delta = Math.abs(searchVal - d);\n\t         if ( delta <= yDistMax && delta < threshold) {\n\t            yDistMax = delta;\n\t            indexToHighlight = i;\n\t         }\n\t      });\n\t      return indexToHighlight;\n\t};/* Tooltip rendering model for nvd3 charts.\n\twindow.nv.models.tooltip is the updated,new way to render tooltips.\n\t\n\twindow.nv.tooltip.show is the old tooltip code.\n\twindow.nv.tooltip.* also has various helper methods.\n\t*/\n\t(function() {\n\t  \"use strict\";\n\t  window.nv.tooltip = {};\n\t\n\t  /* Model which can be instantiated to handle tooltip rendering.\n\t    Example usage: \n\t    var tip = nv.models.tooltip().gravity('w').distance(23)\n\t                .data(myDataObject);\n\t\n\t        tip();    //just invoke the returned function to render tooltip.\n\t  */\n\t  window.nv.models.tooltip = function() {\n\t        var content = null    //HTML contents of the tooltip.  If null, the content is generated via the data variable.\n\t        ,   data = null     /* Tooltip data. If data is given in the proper format, a consistent tooltip is generated.\n\t        Format of data:\n\t        {\n\t            key: \"Date\",\n\t            value: \"August 2009\", \n\t            series: [\n\t                    {\n\t                        key: \"Series 1\",\n\t                        value: \"Value 1\",\n\t                        color: \"#000\"\n\t                    },\n\t                    {\n\t                        key: \"Series 2\",\n\t                        value: \"Value 2\",\n\t                        color: \"#00f\"\n\t                    }\n\t            ]\n\t\n\t        }\n\t\n\t        */\n\t        ,   gravity = 'w'   //Can be 'n','s','e','w'. Determines how tooltip is positioned.\n\t        ,   distance = 50   //Distance to offset tooltip from the mouse location.\n\t        ,   snapDistance = 25   //Tolerance allowed before tooltip is moved from its current position (creates 'snapping' effect)\n\t        ,   fixedTop = null //If not null, this fixes the top position of the tooltip.\n\t        ,   classes = null  //Attaches additional CSS classes to the tooltip DIV that is created.\n\t        ,   chartContainer = null   //Parent DIV, of the SVG Container that holds the chart.\n\t        ,   tooltipElem = null  //actual DOM element representing the tooltip.\n\t        ,   position = {left: null, top: null}      //Relative position of the tooltip inside chartContainer.\n\t        ,   enabled = true  //True -> tooltips are rendered. False -> don't render tooltips.\n\t        //Generates a unique id when you create a new tooltip() object\n\t        ,   id = \"nvtooltip-\" + Math.floor(Math.random() * 100000)\n\t        ;\n\t\n\t        //CSS class to specify whether element should not have mouse events.\n\t        var  nvPointerEventsClass = \"nv-pointer-events-none\";\n\t\n\t        //Format function for the tooltip values column\n\t        var valueFormatter = function(d,i) {\n\t            return d;\n\t        };\n\t\n\t        //Format function for the tooltip header value.\n\t        var headerFormatter = function(d) {\n\t            return d;\n\t        };\n\t\n\t        //By default, the tooltip model renders a beautiful table inside a DIV.\n\t        //You can override this function if a custom tooltip is desired.\n\t        var contentGenerator = function(d) {\n\t            if (content != null) return content;\n\t\n\t            if (d == null) return '';\n\t\n\t            var table = d3.select(document.createElement(\"table\"));\n\t            var theadEnter = table.selectAll(\"thead\")\n\t                .data([d])\n\t                .enter().append(\"thead\");\n\t            theadEnter.append(\"tr\")\n\t                .append(\"td\")\n\t                .attr(\"colspan\",3)\n\t                .append(\"strong\")\n\t                    .classed(\"x-value\",true)\n\t                    .html(headerFormatter(d.value));\n\t\n\t            var tbodyEnter = table.selectAll(\"tbody\")\n\t                .data([d])\n\t                .enter().append(\"tbody\");\n\t            var trowEnter = tbodyEnter.selectAll(\"tr\")\n\t                .data(function(p) { return p.series})\n\t                .enter()\n\t                .append(\"tr\")\n\t                .classed(\"highlight\", function(p) { return p.highlight})\n\t                ;\n\t\n\t            trowEnter.append(\"td\")\n\t                .classed(\"legend-color-guide\",true)\n\t                .append(\"div\")\n\t                    .style(\"background-color\", function(p) { return p.color});\n\t            trowEnter.append(\"td\")\n\t                .classed(\"key\",true)\n\t                .html(function(p) {return p.key});\n\t            trowEnter.append(\"td\")\n\t                .classed(\"value\",true)\n\t                .html(function(p,i) { return valueFormatter(p.value,i) });\n\t\n\t\n\t            trowEnter.selectAll(\"td\").each(function(p) {\n\t                if (p.highlight) {\n\t                    var opacityScale = d3.scale.linear().domain([0,1]).range([\"#fff\",p.color]);\n\t                    var opacity = 0.6;\n\t                    d3.select(this)\n\t                        .style(\"border-bottom-color\", opacityScale(opacity))\n\t                        .style(\"border-top-color\", opacityScale(opacity))\n\t                        ;\n\t                }\n\t            });\n\t\n\t            var html = table.node().outerHTML;\n\t            if (d.footer !== undefined)\n\t                html += \"<div class='footer'>\" + d.footer + \"</div>\";\n\t            return html;\n\t\n\t        };\n\t\n\t        var dataSeriesExists = function(d) {\n\t            if (d && d.series && d.series.length > 0) return true;\n\t\n\t            return false;\n\t        };\n\t\n\t        //In situations where the chart is in a 'viewBox', re-position the tooltip based on how far chart is zoomed.\n\t        function convertViewBoxRatio() {\n\t            if (chartContainer) {\n\t              var svg = d3.select(chartContainer);\n\t              if (svg.node().tagName !== \"svg\") {\n\t                 svg = svg.select(\"svg\");\n\t              }\n\t              var viewBox = (svg.node()) ? svg.attr('viewBox') : null;\n\t              if (viewBox) {\n\t                viewBox = viewBox.split(' ');\n\t                var ratio = parseInt(svg.style('width')) / viewBox[2];\n\t                \n\t                position.left = position.left * ratio;\n\t                position.top  = position.top * ratio;\n\t              }\n\t            }\n\t        }\n\t\n\t        //Creates new tooltip container, or uses existing one on DOM.\n\t        function getTooltipContainer(newContent) {\n\t            var body;\n\t            if (chartContainer)\n\t                body = d3.select(chartContainer);\n\t            else\n\t                body = d3.select(\"body\");\n\t\n\t            var container = body.select(\".nvtooltip\");\n\t            if (container.node() === null) {\n\t                //Create new tooltip div if it doesn't exist on DOM.\n\t                container = body.append(\"div\")\n\t                    .attr(\"class\", \"nvtooltip \" + (classes? classes: \"xy-tooltip\"))\n\t                    .attr(\"id\",id)\n\t                    ;\n\t            }\n\t        \n\t\n\t            container.node().innerHTML = newContent;\n\t            container.style(\"top\",0).style(\"left\",0).style(\"opacity\",0);\n\t            container.selectAll(\"div, table, td, tr\").classed(nvPointerEventsClass,true)\n\t            container.classed(nvPointerEventsClass,true);\n\t            return container.node();\n\t        }\n\t\n\t        \n\t\n\t        //Draw the tooltip onto the DOM.\n\t        function nvtooltip() {\n\t            if (!enabled) return;\n\t            if (!dataSeriesExists(data)) return;\n\t\n\t            convertViewBoxRatio();\n\t\n\t            var left = position.left;\n\t            var top = (fixedTop != null) ? fixedTop : position.top;\n\t            var container = getTooltipContainer(contentGenerator(data));\n\t            tooltipElem = container;\n\t            if (chartContainer) {\n\t                var svgComp = chartContainer.getElementsByTagName(\"svg\")[0];\n\t                var boundRect = (svgComp) ? svgComp.getBoundingClientRect() : chartContainer.getBoundingClientRect();\n\t                var svgOffset = {left:0,top:0};\n\t                if (svgComp) {\n\t                    var svgBound = svgComp.getBoundingClientRect();\n\t                    var chartBound = chartContainer.getBoundingClientRect();\n\t                    var svgBoundTop = svgBound.top;\n\t                    \n\t                    //Defensive code. Sometimes, svgBoundTop can be a really negative\n\t                    //  number, like -134254. That's a bug. \n\t                    //  If such a number is found, use zero instead. FireFox bug only\n\t                    if (svgBoundTop < 0) {\n\t                        var containerBound = chartContainer.getBoundingClientRect();\n\t                        svgBoundTop = (Math.abs(svgBoundTop) > containerBound.height) ? 0 : svgBoundTop;\n\t                    } \n\t                    svgOffset.top = Math.abs(svgBoundTop - chartBound.top);\n\t                    svgOffset.left = Math.abs(svgBound.left - chartBound.left);\n\t                }\n\t                //If the parent container is an overflow <div> with scrollbars, subtract the scroll offsets.\n\t                //You need to also add any offset between the <svg> element and its containing <div>\n\t                //Finally, add any offset of the containing <div> on the whole page.\n\t                left += chartContainer.offsetLeft + svgOffset.left - 2*chartContainer.scrollLeft;\n\t                top += chartContainer.offsetTop + svgOffset.top - 2*chartContainer.scrollTop;\n\t            }\n\t\n\t            if (snapDistance && snapDistance > 0) {\n\t                top = Math.floor(top/snapDistance) * snapDistance;\n\t            }\n\t\n\t            nv.tooltip.calcTooltipPosition([left,top], gravity, distance, container);\n\t            return nvtooltip;\n\t        };\n\t\n\t        nvtooltip.nvPointerEventsClass = nvPointerEventsClass;\n\t        \n\t        nvtooltip.content = function(_) {\n\t            if (!arguments.length) return content;\n\t            content = _;\n\t            return nvtooltip;\n\t        };\n\t\n\t        //Returns tooltipElem...not able to set it.\n\t        nvtooltip.tooltipElem = function() {\n\t            return tooltipElem;\n\t        };\n\t\n\t        nvtooltip.contentGenerator = function(_) {\n\t            if (!arguments.length) return contentGenerator;\n\t            if (typeof _ === 'function') {\n\t                contentGenerator = _;\n\t            }\n\t            return nvtooltip;\n\t        };\n\t\n\t        nvtooltip.data = function(_) {\n\t            if (!arguments.length) return data;\n\t            data = _;\n\t            return nvtooltip;\n\t        };\n\t\n\t        nvtooltip.gravity = function(_) {\n\t            if (!arguments.length) return gravity;\n\t            gravity = _;\n\t            return nvtooltip;\n\t        };\n\t\n\t        nvtooltip.distance = function(_) {\n\t            if (!arguments.length) return distance;\n\t            distance = _;\n\t            return nvtooltip;\n\t        };\n\t\n\t        nvtooltip.snapDistance = function(_) {\n\t            if (!arguments.length) return snapDistance;\n\t            snapDistance = _;\n\t            return nvtooltip;\n\t        };\n\t\n\t        nvtooltip.classes = function(_) {\n\t            if (!arguments.length) return classes;\n\t            classes = _;\n\t            return nvtooltip;\n\t        };\n\t\n\t        nvtooltip.chartContainer = function(_) {\n\t            if (!arguments.length) return chartContainer;\n\t            chartContainer = _;\n\t            return nvtooltip;\n\t        };\n\t\n\t        nvtooltip.position = function(_) {\n\t            if (!arguments.length) return position;\n\t            position.left = (typeof _.left !== 'undefined') ? _.left : position.left;\n\t            position.top = (typeof _.top !== 'undefined') ? _.top : position.top;\n\t            return nvtooltip;\n\t        };\n\t\n\t        nvtooltip.fixedTop = function(_) {\n\t            if (!arguments.length) return fixedTop;\n\t            fixedTop = _;\n\t            return nvtooltip;\n\t        };\n\t\n\t        nvtooltip.enabled = function(_) {\n\t            if (!arguments.length) return enabled;\n\t            enabled = _;\n\t            return nvtooltip;\n\t        };\n\t\n\t        nvtooltip.valueFormatter = function(_) {\n\t            if (!arguments.length) return valueFormatter;\n\t            if (typeof _ === 'function') {\n\t                valueFormatter = _;\n\t            }\n\t            return nvtooltip;\n\t        };\n\t\n\t        nvtooltip.headerFormatter = function(_) {\n\t            if (!arguments.length) return headerFormatter;\n\t            if (typeof _ === 'function') {\n\t                headerFormatter = _;\n\t            }\n\t            return nvtooltip;\n\t        };\n\t\n\t        //id() is a read-only function. You can't use it to set the id.\n\t        nvtooltip.id = function() {\n\t            return id;\n\t        };\n\t\n\t\n\t        return nvtooltip;\n\t  };\n\t\n\t\n\t  //Original tooltip.show function. Kept for backward compatibility.\n\t  // pos = [left,top]\n\t  nv.tooltip.show = function(pos, content, gravity, dist, parentContainer, classes) {\n\t      \n\t        //Create new tooltip div if it doesn't exist on DOM.\n\t        var   container = document.createElement('div');\n\t        container.className = 'nvtooltip ' + (classes ? classes : 'xy-tooltip');\n\t\n\t        var body = parentContainer;\n\t        if ( !parentContainer || parentContainer.tagName.match(/g|svg/i)) {\n\t            //If the parent element is an SVG element, place tooltip in the <body> element.\n\t            body = document.getElementsByTagName('body')[0];\n\t        }\n\t   \n\t        container.style.left = 0;\n\t        container.style.top = 0;\n\t        container.style.opacity = 0;\n\t        container.innerHTML = content;\n\t        body.appendChild(container);\n\t        \n\t        //If the parent container is an overflow <div> with scrollbars, subtract the scroll offsets.\n\t        if (parentContainer) {\n\t           pos[0] = pos[0] - parentContainer.scrollLeft;\n\t           pos[1] = pos[1] - parentContainer.scrollTop;\n\t        }\n\t        nv.tooltip.calcTooltipPosition(pos, gravity, dist, container);\n\t  };\n\t\n\t  //Looks up the ancestry of a DOM element, and returns the first NON-svg node.\n\t  nv.tooltip.findFirstNonSVGParent = function(Elem) {\n\t            while(Elem.tagName.match(/^g|svg$/i) !== null) {\n\t                Elem = Elem.parentNode;\n\t            }\n\t            return Elem;\n\t  };\n\t\n\t  //Finds the total offsetTop of a given DOM element.\n\t  //Looks up the entire ancestry of an element, up to the first relatively positioned element.\n\t  nv.tooltip.findTotalOffsetTop = function ( Elem, initialTop ) {\n\t                var offsetTop = initialTop;\n\t                \n\t                do {\n\t                    if( !isNaN( Elem.offsetTop ) ) {\n\t                        offsetTop += (Elem.offsetTop);\n\t                    }\n\t                } while( Elem = Elem.offsetParent );\n\t                return offsetTop;\n\t  };\n\t\n\t  //Finds the total offsetLeft of a given DOM element.\n\t  //Looks up the entire ancestry of an element, up to the first relatively positioned element.\n\t  nv.tooltip.findTotalOffsetLeft = function ( Elem, initialLeft) {\n\t                var offsetLeft = initialLeft;\n\t                \n\t                do {\n\t                    if( !isNaN( Elem.offsetLeft ) ) {\n\t                        offsetLeft += (Elem.offsetLeft);\n\t                    }\n\t                } while( Elem = Elem.offsetParent );\n\t                return offsetLeft;\n\t  };\n\t\n\t  //Global utility function to render a tooltip on the DOM.\n\t  //pos = [left,top] coordinates of where to place the tooltip, relative to the SVG chart container.\n\t  //gravity = how to orient the tooltip\n\t  //dist = how far away from the mouse to place tooltip\n\t  //container = tooltip DIV\n\t  nv.tooltip.calcTooltipPosition = function(pos, gravity, dist, container) {\n\t\n\t            var height = parseInt(container.offsetHeight),\n\t                width = parseInt(container.offsetWidth),\n\t                windowWidth = nv.utils.windowSize().width,\n\t                windowHeight = nv.utils.windowSize().height,\n\t                scrollTop = window.pageYOffset,\n\t                scrollLeft = window.pageXOffset,\n\t                left, top;\n\t\n\t            windowHeight = window.innerWidth >= document.body.scrollWidth ? windowHeight : windowHeight - 16;\n\t            windowWidth = window.innerHeight >= document.body.scrollHeight ? windowWidth : windowWidth - 16;\n\t\n\t            gravity = gravity || 's';\n\t            dist = dist || 20;\n\t\n\t            var tooltipTop = function ( Elem ) {\n\t                return nv.tooltip.findTotalOffsetTop(Elem, top);\n\t            };\n\t\n\t            var tooltipLeft = function ( Elem ) {\n\t                return nv.tooltip.findTotalOffsetLeft(Elem,left);\n\t            };\n\t\n\t            switch (gravity) {\n\t              case 'e':\n\t                left = pos[0] - width - dist;\n\t                top = pos[1] - (height / 2);\n\t                var tLeft = tooltipLeft(container);\n\t                var tTop = tooltipTop(container);\n\t                if (tLeft < scrollLeft) left = pos[0] + dist > scrollLeft ? pos[0] + dist : scrollLeft - tLeft + left;\n\t                if (tTop < scrollTop) top = scrollTop - tTop + top;\n\t                if (tTop + height > scrollTop + windowHeight) top = scrollTop + windowHeight - tTop + top - height;\n\t                break;\n\t              case 'w':\n\t                left = pos[0] + dist;\n\t                top = pos[1] - (height / 2);\n\t                var tLeft = tooltipLeft(container);\n\t                var tTop = tooltipTop(container);\n\t                if (tLeft + width > windowWidth) left = pos[0] - width - dist;\n\t                if (tTop < scrollTop) top = scrollTop + 5;\n\t                if (tTop + height > scrollTop + windowHeight) top = scrollTop + windowHeight - tTop + top - height;\n\t                break;\n\t              case 'n':\n\t                left = pos[0] - (width / 2) - 5;\n\t                top = pos[1] + dist;\n\t                var tLeft = tooltipLeft(container);\n\t                var tTop = tooltipTop(container);\n\t                if (tLeft < scrollLeft) left = scrollLeft + 5;\n\t                if (tLeft + width > windowWidth) left = left - width/2 + 5;\n\t                if (tTop + height > scrollTop + windowHeight) top = scrollTop + windowHeight - tTop + top - height;\n\t                break;\n\t              case 's':\n\t                left = pos[0] - (width / 2);\n\t                top = pos[1] - height - dist;\n\t                var tLeft = tooltipLeft(container);\n\t                var tTop = tooltipTop(container);\n\t                if (tLeft < scrollLeft) left = scrollLeft + 5;\n\t                if (tLeft + width > windowWidth) left = left - width/2 + 5;\n\t                if (scrollTop > tTop) top = scrollTop;\n\t                break;\n\t              case 'none':\n\t                left = pos[0];\n\t                top = pos[1] - dist;\n\t                var tLeft = tooltipLeft(container);\n\t                var tTop = tooltipTop(container);\n\t                break;\n\t            }\n\t\n\t\n\t            container.style.left = left+'px';\n\t            container.style.top = top+'px';\n\t            container.style.opacity = 1;\n\t            container.style.position = 'absolute'; \n\t\n\t            return container;\n\t    };\n\t\n\t    //Global utility function to remove tooltips from the DOM.\n\t    nv.tooltip.cleanup = function() {\n\t\n\t              // Find the tooltips, mark them for removal by this class (so others cleanups won't find it)\n\t              var tooltips = document.getElementsByClassName('nvtooltip');\n\t              var purging = [];\n\t              while(tooltips.length) {\n\t                purging.push(tooltips[0]);\n\t                tooltips[0].style.transitionDelay = '0 !important';\n\t                tooltips[0].style.opacity = 0;\n\t                tooltips[0].className = 'nvtooltip-pending-removal';\n\t              }\n\t\n\t              setTimeout(function() {\n\t\n\t                  while (purging.length) {\n\t                     var removeMe = purging.pop();\n\t                      removeMe.parentNode.removeChild(removeMe);\n\t                  }\n\t            }, 500);\n\t    };\n\t\n\t})();\n\t\n\tnv.utils.windowSize = function() {\n\t    // Sane defaults\n\t    var size = {width: 640, height: 480};\n\t\n\t    // Earlier IE uses Doc.body\n\t    if (document.body && document.body.offsetWidth) {\n\t        size.width = document.body.offsetWidth;\n\t        size.height = document.body.offsetHeight;\n\t    }\n\t\n\t    // IE can use depending on mode it is in\n\t    if (document.compatMode=='CSS1Compat' &&\n\t        document.documentElement &&\n\t        document.documentElement.offsetWidth ) {\n\t        size.width = document.documentElement.offsetWidth;\n\t        size.height = document.documentElement.offsetHeight;\n\t    }\n\t\n\t    // Most recent browsers use\n\t    if (window.innerWidth && window.innerHeight) {\n\t        size.width = window.innerWidth;\n\t        size.height = window.innerHeight;\n\t    }\n\t    return (size);\n\t};\n\t\n\t\n\t\n\t// Easy way to bind multiple functions to window.onresize\n\t// TODO: give a way to remove a function after its bound, other than removing all of them\n\tnv.utils.windowResize = function(fun){\n\t  if (fun === undefined) return;\n\t  var oldresize = window.onresize;\n\t\n\t  window.onresize = function(e) {\n\t    if (typeof oldresize == 'function') oldresize(e);\n\t    fun(e);\n\t  }\n\t}\n\t\n\t// Backwards compatible way to implement more d3-like coloring of graphs.\n\t// If passed an array, wrap it in a function which implements the old default\n\t// behavior\n\tnv.utils.getColor = function(color) {\n\t    if (!arguments.length) return nv.utils.defaultColor(); //if you pass in nothing, get default colors back\n\t\n\t    if( Object.prototype.toString.call( color ) === '[object Array]' )\n\t        return function(d, i) { return d.color || color[i % color.length]; };\n\t    else\n\t        return color;\n\t        //can't really help it if someone passes rubbish as color\n\t}\n\t\n\t// Default color chooser uses the index of an object as before.\n\tnv.utils.defaultColor = function() {\n\t    var colors = d3.scale.category20().range();\n\t    return function(d, i) { return d.color || colors[i % colors.length] };\n\t}\n\t\n\t\n\t// Returns a color function that takes the result of 'getKey' for each series and\n\t// looks for a corresponding color from the dictionary,\n\tnv.utils.customTheme = function(dictionary, getKey, defaultColors) {\n\t  getKey = getKey || function(series) { return series.key }; // use default series.key if getKey is undefined\n\t  defaultColors = defaultColors || d3.scale.category20().range(); //default color function\n\t\n\t  var defIndex = defaultColors.length; //current default color (going in reverse)\n\t\n\t  return function(series, index) {\n\t    var key = getKey(series);\n\t\n\t    if (!defIndex) defIndex = defaultColors.length; //used all the default colors, start over\n\t\n\t    if (typeof dictionary[key] !== \"undefined\")\n\t      return (typeof dictionary[key] === \"function\") ? dictionary[key]() : dictionary[key];\n\t    else\n\t      return defaultColors[--defIndex]; // no match in dictionary, use default color\n\t  }\n\t}\n\t\n\t\n\t\n\t// From the PJAX example on d3js.org, while this is not really directly needed\n\t// it's a very cool method for doing pjax, I may expand upon it a little bit,\n\t// open to suggestions on anything that may be useful\n\tnv.utils.pjax = function(links, content) {\n\t  d3.selectAll(links).on(\"click\", function() {\n\t    history.pushState(this.href, this.textContent, this.href);\n\t    load(this.href);\n\t    d3.event.preventDefault();\n\t  });\n\t\n\t  function load(href) {\n\t    d3.html(href, function(fragment) {\n\t      var target = d3.select(content).node();\n\t      target.parentNode.replaceChild(d3.select(fragment).select(content).node(), target);\n\t      nv.utils.pjax(links, content);\n\t    });\n\t  }\n\t\n\t  d3.select(window).on(\"popstate\", function() {\n\t    if (d3.event.state) load(d3.event.state);\n\t  });\n\t}\n\t\n\t/* For situations where we want to approximate the width in pixels for an SVG:text element.\n\tMost common instance is when the element is in a display:none; container.\n\tForumla is : text.length * font-size * constant_factor\n\t*/\n\tnv.utils.calcApproxTextWidth = function (svgTextElem) {\n\t    if (typeof svgTextElem.style === 'function'\n\t        && typeof svgTextElem.text === 'function') {\n\t        var fontSize = parseInt(svgTextElem.style(\"font-size\").replace(\"px\",\"\"));\n\t        var textLength = svgTextElem.text().length;\n\t\n\t        return textLength * fontSize * 0.5;\n\t    }\n\t    return 0;\n\t};\n\t\n\t/* Numbers that are undefined, null or NaN, convert them to zeros.\n\t*/\n\tnv.utils.NaNtoZero = function(n) {\n\t    if (typeof n !== 'number'\n\t        || isNaN(n)\n\t        || n === null\n\t        || n === Infinity) return 0;\n\t\n\t    return n;\n\t};\n\t\n\t/*\n\tSnippet of code you can insert into each nv.models.* to give you the ability to\n\tdo things like:\n\tchart.options({\n\t  showXAxis: true,\n\t  tooltips: true\n\t});\n\t\n\tTo enable in the chart:\n\tchart.options = nv.utils.optionsFunc.bind(chart);\n\t*/\n\tnv.utils.optionsFunc = function(args) {\n\t    if (args) {\n\t      d3.map(args).forEach((function(key,value) {\n\t        if (typeof this[key] === \"function\") {\n\t           this[key](value);\n\t        }\n\t      }).bind(this));\n\t    }\n\t    return this;\n\t};nv.models.axis = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var axis = d3.svg.axis()\n\t    ;\n\t\n\t  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t    , width = 75 //only used for tickLabel currently\n\t    , height = 60 //only used for tickLabel currently\n\t    , scale = d3.scale.linear()\n\t    , axisLabelText = null\n\t    , showMaxMin = true //TODO: showMaxMin should be disabled on all ordinal scaled axes\n\t    , highlightZero = true\n\t    , rotateLabels = 0\n\t    , rotateYLabel = true\n\t    , staggerLabels = false\n\t    , isOrdinal = false\n\t    , ticks = null\n\t    , axisLabelDistance = 12 //The larger this number is, the closer the axis label is to the axis.\n\t    ;\n\t\n\t  axis\n\t    .scale(scale)\n\t    .orient('bottom')\n\t    .tickFormat(function(d) { return d })\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var scale0;\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this);\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-axis').data([data]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-axis');\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g')\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      if (ticks !== null)\n\t        axis.ticks(ticks);\n\t      else if (axis.orient() == 'top' || axis.orient() == 'bottom')\n\t        axis.ticks(Math.abs(scale.range()[1] - scale.range()[0]) / 100);\n\t\n\t\n\t      //TODO: consider calculating width/height based on whether or not label is added, for reference in charts using this component\n\t\n\t\n\t      g.call(axis);\n\t\n\t      scale0 = scale0 || axis.scale();\n\t\n\t      var fmt = axis.tickFormat();\n\t      if (fmt == null) {\n\t        fmt = scale0.tickFormat();\n\t      }\n\t\n\t      var axisLabel = g.selectAll('text.nv-axislabel')\n\t          .data([axisLabelText || null]);\n\t      axisLabel.exit().remove();\n\t      switch (axis.orient()) {\n\t        case 'top':\n\t          axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n\t          var w = (scale.range().length==2) ? scale.range()[1] : (scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]));\n\t          axisLabel\n\t              .attr('text-anchor', 'middle')\n\t              .attr('y', 0)\n\t              .attr('x', w/2);\n\t          if (showMaxMin) {\n\t            var axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n\t                           .data(scale.domain());\n\t            axisMaxMin.enter().append('g').attr('class', 'nv-axisMaxMin').append('text');\n\t            axisMaxMin.exit().remove();\n\t            axisMaxMin\n\t                .attr('transform', function(d,i) {\n\t                  return 'translate(' + scale(d) + ',0)'\n\t                })\n\t              .select('text')\n\t                .attr('dy', '-0.5em')\n\t                .attr('y', -axis.tickPadding())\n\t                .attr('text-anchor', 'middle')\n\t                .text(function(d,i) {\n\t                  var v = fmt(d);\n\t                  return ('' + v).match('NaN') ? '' : v;\n\t                });\n\t            axisMaxMin\n\t                .attr('transform', function(d,i) {\n\t                  return 'translate(' + scale.range()[i] + ',0)'\n\t                });\n\t          }\n\t          break;\n\t        case 'bottom':\n\t          var xLabelMargin = 36;\n\t          var maxTextWidth = 30;\n\t          var xTicks = g.selectAll('g').select(\"text\");\n\t          if (rotateLabels%360) {\n\t            //Calculate the longest xTick width\n\t            xTicks.each(function(d,i){\n\t              var width = this.getBBox().width;\n\t              if(width > maxTextWidth) maxTextWidth = width;\n\t            });\n\t            //Convert to radians before calculating sin. Add 30 to margin for healthy padding.\n\t            var sin = Math.abs(Math.sin(rotateLabels*Math.PI/180));\n\t            var xLabelMargin = (sin ? sin*maxTextWidth : maxTextWidth)+30;\n\t            //Rotate all xTicks\n\t            xTicks\n\t              .attr('transform', function(d,i,j) { return 'rotate(' + rotateLabels + ' 0,0)' })\n\t              .style('text-anchor', rotateLabels%360 > 0 ? 'start' : 'end');\n\t          }\n\t          axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n\t          var w = (scale.range().length==2) ? scale.range()[1] : (scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]));\n\t          axisLabel\n\t              .attr('text-anchor', 'middle')\n\t              .attr('y', xLabelMargin)\n\t              .attr('x', w/2);\n\t          if (showMaxMin) {\n\t          //if (showMaxMin && !isOrdinal) {\n\t            var axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n\t                           //.data(scale.domain())\n\t                           .data([scale.domain()[0], scale.domain()[scale.domain().length - 1]]);\n\t            axisMaxMin.enter().append('g').attr('class', 'nv-axisMaxMin').append('text');\n\t            axisMaxMin.exit().remove();\n\t            axisMaxMin\n\t                .attr('transform', function(d,i) {\n\t                  return 'translate(' + (scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0)) + ',0)'\n\t                })\n\t              .select('text')\n\t                .attr('dy', '.71em')\n\t                .attr('y', axis.tickPadding())\n\t                .attr('transform', function(d,i,j) { return 'rotate(' + rotateLabels + ' 0,0)' })\n\t                .style('text-anchor', rotateLabels ? (rotateLabels%360 > 0 ? 'start' : 'end') : 'middle')\n\t                .text(function(d,i) {\n\t                  var v = fmt(d);\n\t                  return ('' + v).match('NaN') ? '' : v;\n\t                });\n\t            axisMaxMin\n\t                .attr('transform', function(d,i) {\n\t                  //return 'translate(' + scale.range()[i] + ',0)'\n\t                  //return 'translate(' + scale(d) + ',0)'\n\t                  return 'translate(' + (scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0)) + ',0)'\n\t                });\n\t          }\n\t          if (staggerLabels)\n\t            xTicks\n\t                .attr('transform', function(d,i) { return 'translate(0,' + (i % 2 == 0 ? '0' : '12') + ')' });\n\t\n\t          break;\n\t        case 'right':\n\t          axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n\t          axisLabel\n\t              .style('text-anchor', rotateYLabel ? 'middle' : 'begin')\n\t              .attr('transform', rotateYLabel ? 'rotate(90)' : '')\n\t              .attr('y', rotateYLabel ? (-Math.max(margin.right,width) + 12) : -10) //TODO: consider calculating this based on largest tick width... OR at least expose this on chart\n\t              .attr('x', rotateYLabel ? (scale.range()[0] / 2) : axis.tickPadding());\n\t          if (showMaxMin) {\n\t            var axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n\t                           .data(scale.domain());\n\t            axisMaxMin.enter().append('g').attr('class', 'nv-axisMaxMin').append('text')\n\t                .style('opacity', 0);\n\t            axisMaxMin.exit().remove();\n\t            axisMaxMin\n\t                .attr('transform', function(d,i) {\n\t                  return 'translate(0,' + scale(d) + ')'\n\t                })\n\t              .select('text')\n\t                .attr('dy', '.32em')\n\t                .attr('y', 0)\n\t                .attr('x', axis.tickPadding())\n\t                .style('text-anchor', 'start')\n\t                .text(function(d,i) {\n\t                  var v = fmt(d);\n\t                  return ('' + v).match('NaN') ? '' : v;\n\t                });\n\t            axisMaxMin\n\t                .attr('transform', function(d,i) {\n\t                  return 'translate(0,' + scale.range()[i] + ')'\n\t                })\n\t              .select('text')\n\t                .style('opacity', 1);\n\t          }\n\t          break;\n\t        case 'left':\n\t          /*\n\t          //For dynamically placing the label. Can be used with dynamically-sized chart axis margins\n\t          var yTicks = g.selectAll('g').select(\"text\");\n\t          yTicks.each(function(d,i){\n\t            var labelPadding = this.getBBox().width + axis.tickPadding() + 16;\n\t            if(labelPadding > width) width = labelPadding;\n\t          });\n\t          */\n\t          axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n\t          axisLabel\n\t              .style('text-anchor', rotateYLabel ? 'middle' : 'end')\n\t              .attr('transform', rotateYLabel ? 'rotate(-90)' : '')\n\t              .attr('y', rotateYLabel ? (-Math.max(margin.left,width) + axisLabelDistance) : -10) //TODO: consider calculating this based on largest tick width... OR at least expose this on chart\n\t              .attr('x', rotateYLabel ? (-scale.range()[0] / 2) : -axis.tickPadding());\n\t          if (showMaxMin) {\n\t            var axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n\t                           .data(scale.domain());\n\t            axisMaxMin.enter().append('g').attr('class', 'nv-axisMaxMin').append('text')\n\t                .style('opacity', 0);\n\t            axisMaxMin.exit().remove();\n\t            axisMaxMin\n\t                .attr('transform', function(d,i) {\n\t                  return 'translate(0,' + scale0(d) + ')'\n\t                })\n\t              .select('text')\n\t                .attr('dy', '.32em')\n\t                .attr('y', 0)\n\t                .attr('x', -axis.tickPadding())\n\t                .attr('text-anchor', 'end')\n\t                .text(function(d,i) {\n\t                  var v = fmt(d);\n\t                  return ('' + v).match('NaN') ? '' : v;\n\t                });\n\t            axisMaxMin\n\t                .attr('transform', function(d,i) {\n\t                  return 'translate(0,' + scale.range()[i] + ')'\n\t                })\n\t              .select('text')\n\t                .style('opacity', 1);\n\t          }\n\t          break;\n\t      }\n\t      axisLabel\n\t          .text(function(d) { return d });\n\t\n\t\n\t      if (showMaxMin && (axis.orient() === 'left' || axis.orient() === 'right')) {\n\t        //check if max and min overlap other values, if so, hide the values that overlap\n\t        g.selectAll('g') // the g's wrapping each tick\n\t            .each(function(d,i) {\n\t              d3.select(this).select('text').attr('opacity', 1);\n\t              if (scale(d) < scale.range()[1] + 10 || scale(d) > scale.range()[0] - 10) { // 10 is assuming text height is 16... if d is 0, leave it!\n\t                if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL\n\t                  d3.select(this).attr('opacity', 0);\n\t\n\t                d3.select(this).select('text').attr('opacity', 0); // Don't remove the ZERO line!!\n\t              }\n\t            });\n\t\n\t        //if Max and Min = 0 only show min, Issue #281\n\t        if (scale.domain()[0] == scale.domain()[1] && scale.domain()[0] == 0)\n\t          wrap.selectAll('g.nv-axisMaxMin')\n\t            .style('opacity', function(d,i) { return !i ? 1 : 0 });\n\t\n\t      }\n\t\n\t      if (showMaxMin && (axis.orient() === 'top' || axis.orient() === 'bottom')) {\n\t        var maxMinRange = [];\n\t        wrap.selectAll('g.nv-axisMaxMin')\n\t            .each(function(d,i) {\n\t              try {\n\t                  if (i) // i== 1, max position\n\t                      maxMinRange.push(scale(d) - this.getBBox().width - 4)  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)\n\t                  else // i==0, min position\n\t                      maxMinRange.push(scale(d) + this.getBBox().width + 4)\n\t              }catch (err) {\n\t                  if (i) // i== 1, max position\n\t                      maxMinRange.push(scale(d) - 4)  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)\n\t                  else // i==0, min position\n\t                      maxMinRange.push(scale(d) + 4)\n\t              }\n\t            });\n\t        g.selectAll('g') // the g's wrapping each tick\n\t            .each(function(d,i) {\n\t              if (scale(d) < maxMinRange[0] || scale(d) > maxMinRange[1]) {\n\t                if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL\n\t                  d3.select(this).remove();\n\t                else\n\t                  d3.select(this).select('text').remove(); // Don't remove the ZERO line!!\n\t              }\n\t            });\n\t      }\n\t\n\t\n\t      //highlight zero line ... Maybe should not be an option and should just be in CSS?\n\t      if (highlightZero)\n\t        g.selectAll('.tick')\n\t          .filter(function(d) { return !parseFloat(Math.round(d.__data__*100000)/1000000) && (d.__data__ !== undefined) }) //this is because sometimes the 0 tick is a very small fraction, TODO: think of cleaner technique\n\t            .classed('zero', true);\n\t\n\t      //store old scales for use in transitions on update\n\t      scale0 = scale.copy();\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.axis = axis;\n\t\n\t  d3.rebind(chart, axis, 'orient', 'tickValues', 'tickSubdivide', 'tickSize', 'tickPadding', 'tickFormat');\n\t  d3.rebind(chart, scale, 'domain', 'range', 'rangeBand', 'rangeBands'); //these are also accessible by chart.scale(), but added common ones directly for ease of use\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.margin = function(_) {\n\t    if(!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  }\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.ticks = function(_) {\n\t    if (!arguments.length) return ticks;\n\t    ticks = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.axisLabel = function(_) {\n\t    if (!arguments.length) return axisLabelText;\n\t    axisLabelText = _;\n\t    return chart;\n\t  }\n\t\n\t  chart.showMaxMin = function(_) {\n\t    if (!arguments.length) return showMaxMin;\n\t    showMaxMin = _;\n\t    return chart;\n\t  }\n\t\n\t  chart.highlightZero = function(_) {\n\t    if (!arguments.length) return highlightZero;\n\t    highlightZero = _;\n\t    return chart;\n\t  }\n\t\n\t  chart.scale = function(_) {\n\t    if (!arguments.length) return scale;\n\t    scale = _;\n\t    axis.scale(scale);\n\t    isOrdinal = typeof scale.rangeBands === 'function';\n\t    d3.rebind(chart, scale, 'domain', 'range', 'rangeBand', 'rangeBands');\n\t    return chart;\n\t  }\n\t\n\t  chart.rotateYLabel = function(_) {\n\t    if(!arguments.length) return rotateYLabel;\n\t    rotateYLabel = _;\n\t    return chart;\n\t  }\n\t\n\t  chart.rotateLabels = function(_) {\n\t    if(!arguments.length) return rotateLabels;\n\t    rotateLabels = _;\n\t    return chart;\n\t  }\n\t\n\t  chart.staggerLabels = function(_) {\n\t    if (!arguments.length) return staggerLabels;\n\t    staggerLabels = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.axisLabelDistance = function(_) {\n\t    if (!arguments.length) return axisLabelDistance;\n\t    axisLabelDistance = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t//TODO: consider deprecating and using multibar with single series for this\n\tnv.models.historicalBar = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t    , width = 960\n\t    , height = 500\n\t    , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n\t    , x = d3.scale.linear()\n\t    , y = d3.scale.linear()\n\t    , getX = function(d) { return d.x }\n\t    , getY = function(d) { return d.y }\n\t    , forceX = []\n\t    , forceY = [0]\n\t    , padData = false\n\t    , clipEdge = true\n\t    , color = nv.utils.defaultColor()\n\t    , xDomain\n\t    , yDomain\n\t    , xRange\n\t    , yRange\n\t    , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout')\n\t    , interactive = true\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var availableWidth = width - margin.left - margin.right,\n\t          availableHeight = height - margin.top - margin.bottom,\n\t          container = d3.select(this);\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x   .domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ))\n\t\n\t      if (padData)\n\t        x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n\t      else\n\t        x.range(xRange || [0, availableWidth]);\n\t\n\t      y   .domain(yDomain || d3.extent(data[0].values.map(getY).concat(forceY) ))\n\t          .range(yRange || [availableHeight, 0]);\n\t\n\t      // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n\t\n\t      if (x.domain()[0] === x.domain()[1])\n\t        x.domain()[0] ?\n\t            x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n\t          : x.domain([-1,1]);\n\t\n\t      if (y.domain()[0] === y.domain()[1])\n\t        y.domain()[0] ?\n\t            y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n\t          : y.domain([-1,1]);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-historicalBar-' + id).data([data[0].values]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBar-' + id);\n\t      var defsEnter = wrapEnter.append('defs');\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-bars');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      container\n\t          .on('click', function(d,i) {\n\t            dispatch.chartClick({\n\t                data: d,\n\t                index: i,\n\t                pos: d3.event,\n\t                id: id\n\t            });\n\t          });\n\t\n\t\n\t      defsEnter.append('clipPath')\n\t          .attr('id', 'nv-chart-clip-path-' + id)\n\t        .append('rect');\n\t\n\t      wrap.select('#nv-chart-clip-path-' + id + ' rect')\n\t          .attr('width', availableWidth)\n\t          .attr('height', availableHeight);\n\t\n\t      g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\t\n\t\n\t\n\t      var bars = wrap.select('.nv-bars').selectAll('.nv-bar')\n\t          .data(function(d) { return d }, function(d,i) {return getX(d,i)});\n\t\n\t      bars.exit().remove();\n\t\n\t\n\t      var barsEnter = bars.enter().append('rect')\n\t          //.attr('class', function(d,i,j) { return (getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive') + ' nv-bar-' + j + '-' + i })\n\t          .attr('x', 0 )\n\t          .attr('y', function(d,i) {  return nv.utils.NaNtoZero(y(Math.max(0, getY(d,i)))) })\n\t          .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.abs(y(getY(d,i)) - y(0))) })\n\t          .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; }) \n\t          .on('mouseover', function(d,i) {\n\t            if (!interactive) return;\n\t            d3.select(this).classed('hover', true);\n\t            dispatch.elementMouseover({\n\t                point: d,\n\t                series: data[0],\n\t                pos: [x(getX(d,i)), y(getY(d,i))],  // TODO: Figure out why the value appears to be shifted\n\t                pointIndex: i,\n\t                seriesIndex: 0,\n\t                e: d3.event\n\t            });\n\t\n\t          })\n\t          .on('mouseout', function(d,i) {\n\t                if (!interactive) return;\n\t                d3.select(this).classed('hover', false);\n\t                dispatch.elementMouseout({\n\t                    point: d,\n\t                    series: data[0],\n\t                    pointIndex: i,\n\t                    seriesIndex: 0,\n\t                    e: d3.event\n\t                });\n\t          })\n\t          .on('click', function(d,i) {\n\t                if (!interactive) return;\n\t                dispatch.elementClick({\n\t                    //label: d[label],\n\t                    value: getY(d,i),\n\t                    data: d,\n\t                    index: i,\n\t                    pos: [x(getX(d,i)), y(getY(d,i))],\n\t                    e: d3.event,\n\t                    id: id\n\t                });\n\t              d3.event.stopPropagation();\n\t          })\n\t          .on('dblclick', function(d,i) {\n\t              if (!interactive) return;\n\t              dispatch.elementDblClick({\n\t                  //label: d[label],\n\t                  value: getY(d,i),\n\t                  data: d,\n\t                  index: i,\n\t                  pos: [x(getX(d,i)), y(getY(d,i))],\n\t                  e: d3.event,\n\t                  id: id\n\t              });\n\t              d3.event.stopPropagation();\n\t          });\n\t\n\t      bars\n\t          .attr('fill', function(d,i) { return color(d, i); })\n\t          .attr('class', function(d,i,j) { return (getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive') + ' nv-bar-' + j + '-' + i })\n\t          \n\t          .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; }) \n\t           //TODO: better width calculations that don't assume always uniform data spacing;w\n\t          .attr('width', (availableWidth / data[0].values.length) * .9 );\n\t\n\t\n\t      bars\n\t          .attr('y', function(d,i) {\n\t            var rval = getY(d,i) < 0 ?\n\t                    y(0) :\n\t                    y(0) - y(getY(d,i)) < 1 ?\n\t                      y(0) - 1 :\n\t                      y(getY(d,i));\n\t            return nv.utils.NaNtoZero(rval);\n\t          })\n\t          .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.max(Math.abs(y(getY(d,i)) - y(0)),1)) });\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t  //Create methods to allow outside functions to highlight a specific bar.\n\t  chart.highlightPoint = function(pointIndex, isHoverOver) {\n\t      d3.select(\".nv-historicalBar-\" + id)\n\t        .select(\".nv-bars .nv-bar-0-\" + pointIndex)\n\t              .classed(\"hover\", isHoverOver)\n\t               ;\n\t  };\n\t\n\t  chart.clearHighlights = function() {\n\t      d3.select(\".nv-historicalBar-\" + id)\n\t        .select(\".nv-bars .nv-bar.hover\")\n\t              .classed(\"hover\", false)\n\t               ;\n\t  };\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  chart.dispatch = dispatch;\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  chart.x = function(_) {\n\t    if (!arguments.length) return getX;\n\t    getX = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.y = function(_) {\n\t    if (!arguments.length) return getY;\n\t    getY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xScale = function(_) {\n\t    if (!arguments.length) return x;\n\t    x = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yScale = function(_) {\n\t    if (!arguments.length) return y;\n\t    y = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xDomain = function(_) {\n\t    if (!arguments.length) return xDomain;\n\t    xDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yDomain = function(_) {\n\t    if (!arguments.length) return yDomain;\n\t    yDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xRange = function(_) {\n\t    if (!arguments.length) return xRange;\n\t    xRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yRange = function(_) {\n\t    if (!arguments.length) return yRange;\n\t    yRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.forceX = function(_) {\n\t    if (!arguments.length) return forceX;\n\t    forceX = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.forceY = function(_) {\n\t    if (!arguments.length) return forceY;\n\t    forceY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.padData = function(_) {\n\t    if (!arguments.length) return padData;\n\t    padData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.clipEdge = function(_) {\n\t    if (!arguments.length) return clipEdge;\n\t    clipEdge = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.id = function(_) {\n\t    if (!arguments.length) return id;\n\t    id = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.interactive = function(_) {\n\t    if(!arguments.length) return interactive;\n\t    interactive = false;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\t// Chart design based on the recommendations of Stephen Few. Implementation\n\t// based on the work of Clint Ivy, Jamie Love, and Jason Davies.\n\t// http://projects.instantcognition.com/protovis/bulletchart/\n\t\n\tnv.models.bullet = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t    , orient = 'left' // TODO top & bottom\n\t    , reverse = false\n\t    , ranges = function(d) { return d.ranges }\n\t    , markers = function(d) { return d.markers }\n\t    , measures = function(d) { return d.measures }\n\t    , rangeLabels = function(d) { return d.rangeLabels ? d.rangeLabels : [] }\n\t    , markerLabels = function(d) { return d.markerLabels ? d.markerLabels : []  }\n\t    , measureLabels = function(d) { return d.measureLabels ? d.measureLabels : []  }\n\t    , forceX = [0] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)\n\t    , width = 380\n\t    , height = 30\n\t    , tickFormat = null\n\t    , color = nv.utils.getColor(['#1f77b4'])\n\t    , dispatch = d3.dispatch('elementMouseover', 'elementMouseout')\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(d, i) {\n\t      var availableWidth = width - margin.left - margin.right,\n\t          availableHeight = height - margin.top - margin.bottom,\n\t          container = d3.select(this);\n\t\n\t      var rangez = ranges.call(this, d, i).slice().sort(d3.descending),\n\t          markerz = markers.call(this, d, i).slice().sort(d3.descending),\n\t          measurez = measures.call(this, d, i).slice().sort(d3.descending),\n\t          rangeLabelz = rangeLabels.call(this, d, i).slice(),\n\t          markerLabelz = markerLabels.call(this, d, i).slice(),\n\t          measureLabelz = measureLabels.call(this, d, i).slice();\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      // Compute the new x-scale.\n\t      var x1 = d3.scale.linear()\n\t          .domain( d3.extent(d3.merge([forceX, rangez])) )\n\t          .range(reverse ? [availableWidth, 0] : [0, availableWidth]);\n\t\n\t      // Retrieve the old x-scale, if this is an update.\n\t      var x0 = this.__chart__ || d3.scale.linear()\n\t          .domain([0, Infinity])\n\t          .range(x1.range());\n\t\n\t      // Stash the new scale.\n\t      this.__chart__ = x1;\n\t\n\t\n\t      var rangeMin = d3.min(rangez), //rangez[2]\n\t          rangeMax = d3.max(rangez), //rangez[0]\n\t          rangeAvg = rangez[1];\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-bullet').data([d]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bullet');\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('rect').attr('class', 'nv-range nv-rangeMax');\n\t      gEnter.append('rect').attr('class', 'nv-range nv-rangeAvg');\n\t      gEnter.append('rect').attr('class', 'nv-range nv-rangeMin');\n\t      gEnter.append('rect').attr('class', 'nv-measure');\n\t      gEnter.append('path').attr('class', 'nv-markerTriangle');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t\n\t      var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)\n\t          w1 = function(d) { return Math.abs(x1(d) - x1(0)) };\n\t      var xp0 = function(d) { return d < 0 ? x0(d) : x0(0) },\n\t          xp1 = function(d) { return d < 0 ? x1(d) : x1(0) };\n\t\n\t\n\t      g.select('rect.nv-rangeMax')\n\t          .attr('height', availableHeight)\n\t          .attr('width', w1(rangeMax > 0 ? rangeMax : rangeMin))\n\t          .attr('x', xp1(rangeMax > 0 ? rangeMax : rangeMin))\n\t          .datum(rangeMax > 0 ? rangeMax : rangeMin)\n\t          /*\n\t          .attr('x', rangeMin < 0 ?\n\t                         rangeMax > 0 ?\n\t                             x1(rangeMin)\n\t                           : x1(rangeMax)\n\t                       : x1(0))\n\t                      */\n\t\n\t      g.select('rect.nv-rangeAvg')\n\t          .attr('height', availableHeight)\n\t          .attr('width', w1(rangeAvg))\n\t          .attr('x', xp1(rangeAvg))\n\t          .datum(rangeAvg)\n\t          /*\n\t          .attr('width', rangeMax <= 0 ?\n\t                             x1(rangeMax) - x1(rangeAvg)\n\t                           : x1(rangeAvg) - x1(rangeMin))\n\t          .attr('x', rangeMax <= 0 ?\n\t                         x1(rangeAvg)\n\t                       : x1(rangeMin))\n\t                      */\n\t\n\t      g.select('rect.nv-rangeMin')\n\t          .attr('height', availableHeight)\n\t          .attr('width', w1(rangeMax))\n\t          .attr('x', xp1(rangeMax))\n\t          .attr('width', w1(rangeMax > 0 ? rangeMin : rangeMax))\n\t          .attr('x', xp1(rangeMax > 0 ? rangeMin : rangeMax))\n\t          .datum(rangeMax > 0 ? rangeMin : rangeMax)\n\t          /*\n\t          .attr('width', rangeMax <= 0 ?\n\t                             x1(rangeAvg) - x1(rangeMin)\n\t                           : x1(rangeMax) - x1(rangeAvg))\n\t          .attr('x', rangeMax <= 0 ?\n\t                         x1(rangeMin)\n\t                       : x1(rangeAvg))\n\t                      */\n\t\n\t      g.select('rect.nv-measure')\n\t          .style('fill', color)\n\t          .attr('height', availableHeight / 3)\n\t          .attr('y', availableHeight / 3)\n\t          .attr('width', measurez < 0 ?\n\t                             x1(0) - x1(measurez[0])\n\t                           : x1(measurez[0]) - x1(0))\n\t          .attr('x', xp1(measurez))\n\t          .on('mouseover', function() {\n\t              dispatch.elementMouseover({\n\t                value: measurez[0],\n\t                label: measureLabelz[0] || 'Current',\n\t                pos: [x1(measurez[0]), availableHeight/2]\n\t              })\n\t          })\n\t          .on('mouseout', function() {\n\t              dispatch.elementMouseout({\n\t                value: measurez[0],\n\t                label: measureLabelz[0] || 'Current'\n\t              })\n\t          })\n\t\n\t      var h3 =  availableHeight / 6;\n\t      if (markerz[0]) {\n\t        g.selectAll('path.nv-markerTriangle')\n\t            .attr('transform', function(d) { return 'translate(' + x1(markerz[0]) + ',' + (availableHeight / 2) + ')' })\n\t            .attr('d', 'M0,' + h3 + 'L' + h3 + ',' + (-h3) + ' ' + (-h3) + ',' + (-h3) + 'Z')\n\t            .on('mouseover', function() {\n\t              dispatch.elementMouseover({\n\t                value: markerz[0],\n\t                label: markerLabelz[0] || 'Previous',\n\t                pos: [x1(markerz[0]), availableHeight/2]\n\t              })\n\t            })\n\t            .on('mouseout', function() {\n\t              dispatch.elementMouseout({\n\t                value: markerz[0],\n\t                label: markerLabelz[0] || 'Previous'\n\t              })\n\t            });\n\t      } else {\n\t        g.selectAll('path.nv-markerTriangle').remove();\n\t      }\n\t\n\t\n\t      wrap.selectAll('.nv-range')\n\t          .on('mouseover', function(d,i) {\n\t            var label = rangeLabelz[i] || (!i ? \"Maximum\" : i == 1 ? \"Mean\" : \"Minimum\");\n\t\n\t            dispatch.elementMouseover({\n\t              value: d,\n\t              label: label,\n\t              pos: [x1(d), availableHeight/2]\n\t            })\n\t          })\n\t          .on('mouseout', function(d,i) {\n\t            var label = rangeLabelz[i] || (!i ? \"Maximum\" : i == 1 ? \"Mean\" : \"Minimum\");\n\t\n\t            dispatch.elementMouseout({\n\t              value: d,\n\t              label: label\n\t            })\n\t          })\n\t\n\t/* // THIS IS THE PREVIOUS BULLET IMPLEMENTATION, WILL REMOVE SHORTLY\n\t      // Update the range rects.\n\t      var range = g.selectAll('rect.nv-range')\n\t          .data(rangez);\n\t\n\t      range.enter().append('rect')\n\t          .attr('class', function(d, i) { return 'nv-range nv-s' + i; })\n\t          .attr('width', w0)\n\t          .attr('height', availableHeight)\n\t          .attr('x', reverse ? x0 : 0)\n\t          .on('mouseover', function(d,i) { \n\t              dispatch.elementMouseover({\n\t                value: d,\n\t                label: (i <= 0) ? 'Maximum' : (i > 1) ? 'Minimum' : 'Mean', //TODO: make these labels a variable\n\t                pos: [x1(d), availableHeight/2]\n\t              })\n\t          })\n\t          .on('mouseout', function(d,i) { \n\t              dispatch.elementMouseout({\n\t                value: d,\n\t                label: (i <= 0) ? 'Minimum' : (i >=1) ? 'Maximum' : 'Mean' //TODO: make these labels a variable\n\t              })\n\t          })\n\t\n\t      d3.transition(range)\n\t          .attr('x', reverse ? x1 : 0)\n\t          .attr('width', w1)\n\t          .attr('height', availableHeight);\n\t\n\t\n\t      // Update the measure rects.\n\t      var measure = g.selectAll('rect.nv-measure')\n\t          .data(measurez);\n\t\n\t      measure.enter().append('rect')\n\t          .attr('class', function(d, i) { return 'nv-measure nv-s' + i; })\n\t          .style('fill', function(d,i) { return color(d,i ) })\n\t          .attr('width', w0)\n\t          .attr('height', availableHeight / 3)\n\t          .attr('x', reverse ? x0 : 0)\n\t          .attr('y', availableHeight / 3)\n\t          .on('mouseover', function(d) { \n\t              dispatch.elementMouseover({\n\t                value: d,\n\t                label: 'Current', //TODO: make these labels a variable\n\t                pos: [x1(d), availableHeight/2]\n\t              })\n\t          })\n\t          .on('mouseout', function(d) { \n\t              dispatch.elementMouseout({\n\t                value: d,\n\t                label: 'Current' //TODO: make these labels a variable\n\t              })\n\t          })\n\t\n\t      d3.transition(measure)\n\t          .attr('width', w1)\n\t          .attr('height', availableHeight / 3)\n\t          .attr('x', reverse ? x1 : 0)\n\t          .attr('y', availableHeight / 3);\n\t\n\t\n\t\n\t      // Update the marker lines.\n\t      var marker = g.selectAll('path.nv-markerTriangle')\n\t          .data(markerz);\n\t\n\t      var h3 =  availableHeight / 6;\n\t      marker.enter().append('path')\n\t          .attr('class', 'nv-markerTriangle')\n\t          .attr('transform', function(d) { return 'translate(' + x0(d) + ',' + (availableHeight / 2) + ')' })\n\t          .attr('d', 'M0,' + h3 + 'L' + h3 + ',' + (-h3) + ' ' + (-h3) + ',' + (-h3) + 'Z')\n\t          .on('mouseover', function(d,i) {\n\t              dispatch.elementMouseover({\n\t                value: d,\n\t                label: 'Previous',\n\t                pos: [x1(d), availableHeight/2]\n\t              })\n\t          })\n\t          .on('mouseout', function(d,i) {\n\t              dispatch.elementMouseout({\n\t                value: d,\n\t                label: 'Previous'\n\t              })\n\t          });\n\t\n\t      d3.transition(marker)\n\t          .attr('transform', function(d) { return 'translate(' + (x1(d) - x1(0)) + ',' + (availableHeight / 2) + ')' });\n\t\n\t      marker.exit().remove();\n\t*/\n\t\n\t    });\n\t\n\t    // d3.timer.flush();  // Not needed?\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  chart.dispatch = dispatch;\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  // left, right, top, bottom\n\t  chart.orient = function(_) {\n\t    if (!arguments.length) return orient;\n\t    orient = _;\n\t    reverse = orient == 'right' || orient == 'bottom';\n\t    return chart;\n\t  };\n\t\n\t  // ranges (bad, satisfactory, good)\n\t  chart.ranges = function(_) {\n\t    if (!arguments.length) return ranges;\n\t    ranges = _;\n\t    return chart;\n\t  };\n\t\n\t  // markers (previous, goal)\n\t  chart.markers = function(_) {\n\t    if (!arguments.length) return markers;\n\t    markers = _;\n\t    return chart;\n\t  };\n\t\n\t  // measures (actual, forecast)\n\t  chart.measures = function(_) {\n\t    if (!arguments.length) return measures;\n\t    measures = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.forceX = function(_) {\n\t    if (!arguments.length) return forceX;\n\t    forceX = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.tickFormat = function(_) {\n\t    if (!arguments.length) return tickFormat;\n\t    tickFormat = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t};\n\t\n\t\n\t\n\t// Chart design based on the recommendations of Stephen Few. Implementation\n\t// based on the work of Clint Ivy, Jamie Love, and Jason Davies.\n\t// http://projects.instantcognition.com/protovis/bulletchart/\n\tnv.models.bulletChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var bullet = nv.models.bullet()\n\t    ;\n\t\n\t  var orient = 'left' // TODO top & bottom\n\t    , reverse = false\n\t    , margin = {top: 5, right: 40, bottom: 20, left: 120}\n\t    , ranges = function(d) { return d.ranges }\n\t    , markers = function(d) { return d.markers }\n\t    , measures = function(d) { return d.measures }\n\t    , width = null\n\t    , height = 55\n\t    , tickFormat = null\n\t    , tooltips = true\n\t    , tooltip = function(key, x, y, e, graph) {\n\t        return '<h3>' + x + '</h3>' +\n\t               '<p>' + y + '</p>'\n\t      }\n\t    , noData = 'No Data Available.'\n\t    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide')\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ) + margin.left,\n\t        top = e.pos[1] + ( offsetElement.offsetTop || 0) + margin.top,\n\t        content = tooltip(e.key, e.label, e.value, e, chart);\n\t\n\t    nv.tooltip.show([left, top], content, e.value < 0 ? 'e' : 'w', null, offsetElement);\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(d, i) {\n\t      var container = d3.select(this);\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight = height - margin.top - margin.bottom,\n\t          that = this;\n\t\n\t\n\t      chart.update = function() { chart(selection) };\n\t      chart.container = this;\n\t\n\t      //------------------------------------------------------------\n\t      // Display No Data message if there's nothing to show.\n\t\n\t      if (!d || !ranges.call(this, d, i)) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', 18 + margin.top + availableHeight / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t\n\t      var rangez = ranges.call(this, d, i).slice().sort(d3.descending),\n\t          markerz = markers.call(this, d, i).slice().sort(d3.descending),\n\t          measurez = measures.call(this, d, i).slice().sort(d3.descending);\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-bulletChart').data([d]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bulletChart');\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-bulletWrap');\n\t      gEnter.append('g').attr('class', 'nv-titles');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      // Compute the new x-scale.\n\t      var x1 = d3.scale.linear()\n\t          .domain([0, Math.max(rangez[0], markerz[0], measurez[0])])  // TODO: need to allow forceX and forceY, and xDomain, yDomain\n\t          .range(reverse ? [availableWidth, 0] : [0, availableWidth]);\n\t\n\t      // Retrieve the old x-scale, if this is an update.\n\t      var x0 = this.__chart__ || d3.scale.linear()\n\t          .domain([0, Infinity])\n\t          .range(x1.range());\n\t\n\t      // Stash the new scale.\n\t      this.__chart__ = x1;\n\t\n\t      /*\n\t      // Derive width-scales from the x-scales.\n\t      var w0 = bulletWidth(x0),\n\t          w1 = bulletWidth(x1);\n\t\n\t      function bulletWidth(x) {\n\t        var x0 = x(0);\n\t        return function(d) {\n\t          return Math.abs(x(d) - x(0));\n\t        };\n\t      }\n\t\n\t      function bulletTranslate(x) {\n\t        return function(d) {\n\t          return 'translate(' + x(d) + ',0)';\n\t        };\n\t      }\n\t      */\n\t\n\t      var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)\n\t          w1 = function(d) { return Math.abs(x1(d) - x1(0)) };\n\t\n\t\n\t      var title = gEnter.select('.nv-titles').append('g')\n\t          .attr('text-anchor', 'end')\n\t          .attr('transform', 'translate(-6,' + (height - margin.top - margin.bottom) / 2 + ')');\n\t      title.append('text')\n\t          .attr('class', 'nv-title')\n\t          .text(function(d) { return d.title; });\n\t\n\t      title.append('text')\n\t          .attr('class', 'nv-subtitle')\n\t          .attr('dy', '1em')\n\t          .text(function(d) { return d.subtitle; });\n\t\n\t\n\t\n\t      bullet\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t\n\t      var bulletWrap = g.select('.nv-bulletWrap');\n\t\n\t      d3.transition(bulletWrap).call(bullet);\n\t\n\t\n\t\n\t      // Compute the tick format.\n\t      var format = tickFormat || x1.tickFormat( availableWidth / 100 );\n\t\n\t      // Update the tick groups.\n\t      var tick = g.selectAll('g.nv-tick')\n\t          .data(x1.ticks( availableWidth / 50 ), function(d) {\n\t            return this.textContent || format(d);\n\t          });\n\t\n\t      // Initialize the ticks with the old scale, x0.\n\t      var tickEnter = tick.enter().append('g')\n\t          .attr('class', 'nv-tick')\n\t          .attr('transform', function(d) { return 'translate(' + x0(d) + ',0)' })\n\t          .style('opacity', 1e-6);\n\t\n\t      tickEnter.append('line')\n\t          .attr('y1', availableHeight)\n\t          .attr('y2', availableHeight * 7 / 6);\n\t\n\t      tickEnter.append('text')\n\t          .attr('text-anchor', 'middle')\n\t          .attr('dy', '1em')\n\t          .attr('y', availableHeight * 7 / 6)\n\t          .text(format);\n\t\n\t\n\t      // Transition the updating ticks to the new scale, x1.\n\t      var tickUpdate = d3.transition(tick)\n\t          .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })\n\t          .style('opacity', 1);\n\t\n\t      tickUpdate.select('line')\n\t          .attr('y1', availableHeight)\n\t          .attr('y2', availableHeight * 7 / 6);\n\t\n\t      tickUpdate.select('text')\n\t          .attr('y', availableHeight * 7 / 6);\n\t\n\t      // Transition the exiting ticks to the new scale, x1.\n\t      d3.transition(tick.exit())\n\t          .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })\n\t          .style('opacity', 1e-6)\n\t          .remove();\n\t\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t      dispatch.on('tooltipShow', function(e) {\n\t        e.key = d.title;\n\t        if (tooltips) showTooltip(e, that.parentNode);\n\t      });\n\t\n\t      //============================================================\n\t\n\t    });\n\t\n\t    d3.timer.flush();\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  bullet.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  bullet.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  chart.dispatch = dispatch;\n\t  chart.bullet = bullet;\n\t\n\t  d3.rebind(chart, bullet, 'color');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  // left, right, top, bottom\n\t  chart.orient = function(x) {\n\t    if (!arguments.length) return orient;\n\t    orient = x;\n\t    reverse = orient == 'right' || orient == 'bottom';\n\t    return chart;\n\t  };\n\t\n\t  // ranges (bad, satisfactory, good)\n\t  chart.ranges = function(x) {\n\t    if (!arguments.length) return ranges;\n\t    ranges = x;\n\t    return chart;\n\t  };\n\t\n\t  // markers (previous, goal)\n\t  chart.markers = function(x) {\n\t    if (!arguments.length) return markers;\n\t    markers = x;\n\t    return chart;\n\t  };\n\t\n\t  // measures (actual, forecast)\n\t  chart.measures = function(x) {\n\t    if (!arguments.length) return measures;\n\t    measures = x;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(x) {\n\t    if (!arguments.length) return width;\n\t    width = x;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(x) {\n\t    if (!arguments.length) return height;\n\t    height = x;\n\t    return chart;\n\t  };\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.tickFormat = function(x) {\n\t    if (!arguments.length) return tickFormat;\n\t    tickFormat = x;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t};\n\t\n\t\n\t\n\tnv.models.cumulativeLineChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var lines = nv.models.line()\n\t    , xAxis = nv.models.axis()\n\t    , yAxis = nv.models.axis()\n\t    , legend = nv.models.legend()\n\t    , controls = nv.models.legend()\n\t    , interactiveLayer = nv.interactiveGuideline()\n\t    ;\n\t\n\t  var margin = {top: 30, right: 30, bottom: 50, left: 60}\n\t    , color = nv.utils.defaultColor()\n\t    , width = null\n\t    , height = null\n\t    , showLegend = true\n\t    , showXAxis = true\n\t    , showYAxis = true\n\t    , rightAlignYAxis = false\n\t    , tooltips = true\n\t    , showControls = true\n\t    , useInteractiveGuideline = false\n\t    , rescaleY = true\n\t    , tooltip = function(key, x, y, e, graph) {\n\t        return '<h3>' + key + '</h3>' +\n\t               '<p>' +  y + ' at ' + x + '</p>'\n\t      }\n\t    , x //can be accessed via chart.xScale()\n\t    , y //can be accessed via chart.yScale()\n\t    , id = lines.id()\n\t    , state = { index: 0, rescaleY: rescaleY }\n\t    , defaultState = null\n\t    , noData = 'No Data Available.'\n\t    , average = function(d) { return d.average }\n\t    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n\t    , transitionDuration = 0\n\t    , noErrorCheck = false  //if set to TRUE, will bypass an error check in the indexify function.\n\t    ;\n\t\n\t  xAxis\n\t    .orient('bottom')\n\t    .tickPadding(7)\n\t    ;\n\t  yAxis\n\t    .orient((rightAlignYAxis) ? 'right' : 'left')\n\t    ;\n\t\n\t  //============================================================\n\t  controls.updateState(false);\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t   var dx = d3.scale.linear()\n\t     , index = {i: 0, x: 0}\n\t     ;\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t        x = xAxis.tickFormat()(lines.x()(e.point, e.pointIndex)),\n\t        y = yAxis.tickFormat()(lines.y()(e.point, e.pointIndex)),\n\t        content = tooltip(e.series.key, x, y, e, chart);\n\t\n\t    nv.tooltip.show([left, top], content, null, null, offsetElement);\n\t  };\n\t\n\t  //============================================================\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this).classed('nv-chart-' + id, true),\n\t          that = this;\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t\n\t\n\t      chart.update = function() { container.call(chart) };\n\t      chart.container = this;\n\t\n\t      //set state.disabled\n\t      state.disabled = data.map(function(d) { return !!d.disabled });\n\t\n\t      if (!defaultState) {\n\t        var key;\n\t        defaultState = {};\n\t        for (key in state) {\n\t          if (state[key] instanceof Array)\n\t            defaultState[key] = state[key].slice(0);\n\t          else\n\t            defaultState[key] = state[key];\n\t        }\n\t      }\n\t\n\t      var indexDrag = d3.behavior.drag()\n\t                        .on('dragstart', dragStart)\n\t                        .on('drag', dragMove)\n\t                        .on('dragend', dragEnd);\n\t\n\t\n\t      function dragStart(d,i) {\n\t        d3.select(chart.container)\n\t            .style('cursor', 'ew-resize');\n\t      }\n\t\n\t      function dragMove(d,i) {\n\t        index.x = d3.event.x;\n\t        index.i = Math.round(dx.invert(index.x));\n\t        updateZero();\n\t      }\n\t\n\t      function dragEnd(d,i) {\n\t        d3.select(chart.container)\n\t            .style('cursor', 'auto');\n\t\n\t        // update state and send stateChange with new index\n\t        state.index = index.i;\n\t        dispatch.stateChange(state);\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t      // Display No Data message if there's nothing to show.\n\t\n\t      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', margin.top + availableHeight / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x = lines.xScale();\n\t      y = lines.yScale();\n\t\n\t\n\t      if (!rescaleY) {\n\t        var seriesDomains = data\n\t          .filter(function(series) { return !series.disabled })\n\t          .map(function(series,i) {\n\t            var initialDomain = d3.extent(series.values, lines.y());\n\t\n\t            //account for series being disabled when losing 95% or more\n\t            if (initialDomain[0] < -.95) initialDomain[0] = -.95;\n\t\n\t            return [\n\t              (initialDomain[0] - initialDomain[1]) / (1 + initialDomain[1]),\n\t              (initialDomain[1] - initialDomain[0]) / (1 + initialDomain[0])\n\t            ];\n\t          });\n\t\n\t        var completeDomain = [\n\t          d3.min(seriesDomains, function(d) { return d[0] }),\n\t          d3.max(seriesDomains, function(d) { return d[1] })\n\t        ]\n\t\n\t        lines.yDomain(completeDomain);\n\t      } else {\n\t        lines.yDomain(null);\n\t      }\n\t\n\t\n\t      dx  .domain([0, data[0].values.length - 1]) //Assumes all series have same length\n\t          .range([0, availableWidth])\n\t          .clamp(true);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      var data = indexify(index.i, data);\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t      var interactivePointerEvents = (useInteractiveGuideline) ? \"none\" : \"all\";\n\t      var wrap = container.selectAll('g.nv-wrap.nv-cumulativeLine').data([data]);\n\t      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-cumulativeLine').append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-interactive');\n\t      gEnter.append('g').attr('class', 'nv-x nv-axis').style(\"pointer-events\",\"none\");\n\t      gEnter.append('g').attr('class', 'nv-y nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-background');\n\t      gEnter.append('g').attr('class', 'nv-linesWrap').style(\"pointer-events\",interactivePointerEvents);\n\t      gEnter.append('g').attr('class', 'nv-avgLinesWrap').style(\"pointer-events\",\"none\");\n\t      gEnter.append('g').attr('class', 'nv-legendWrap');\n\t      gEnter.append('g').attr('class', 'nv-controlsWrap');\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Legend\n\t\n\t      if (showLegend) {\n\t        legend.width(availableWidth);\n\t\n\t        g.select('.nv-legendWrap')\n\t            .datum(data)\n\t            .call(legend);\n\t\n\t        if ( margin.top != legend.height()) {\n\t          margin.top = legend.height();\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t        }\n\t\n\t        g.select('.nv-legendWrap')\n\t            .attr('transform', 'translate(0,' + (-margin.top) +')')\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Controls\n\t\n\t      if (showControls) {\n\t        var controlsData = [\n\t          { key: 'Re-scale y-axis', disabled: !rescaleY }\n\t        ];\n\t\n\t        controls\n\t            .width(140)\n\t            .color(['#444', '#444', '#444'])\n\t            .rightAlign(false)\n\t            .margin({top: 5, right: 0, bottom: 5, left: 20})\n\t            ;\n\t\n\t        g.select('.nv-controlsWrap')\n\t            .datum(controlsData)\n\t            .attr('transform', 'translate(0,' + (-margin.top) +')')\n\t            .call(controls);\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      if (rightAlignYAxis) {\n\t          g.select(\".nv-y.nv-axis\")\n\t              .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n\t      }\n\t\n\t      // Show error if series goes below 100%\n\t      var tempDisabled = data.filter(function(d) { return d.tempDisabled });\n\t\n\t      wrap.select('.tempDisabled').remove(); //clean-up and prevent duplicates\n\t      if (tempDisabled.length) {\n\t        wrap.append('text').attr('class', 'tempDisabled')\n\t            .attr('x', availableWidth / 2)\n\t            .attr('y', '-.71em')\n\t            .style('text-anchor', 'end')\n\t            .text(tempDisabled.map(function(d) { return d.key }).join(', ') + ' values cannot be calculated for this time period.');\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t      // Main Chart Component(s)\n\t\n\t      //------------------------------------------------------------\n\t      //Set up interactive layer\n\t      if (useInteractiveGuideline) {\n\t        interactiveLayer\n\t          .width(availableWidth)\n\t          .height(availableHeight)\n\t          .margin({left:margin.left,top:margin.top})\n\t          .svgContainer(container)\n\t          .xScale(x);\n\t        wrap.select(\".nv-interactive\").call(interactiveLayer);\n\t      }\n\t\n\t      gEnter.select('.nv-background')\n\t        .append('rect');\n\t\n\t      g.select('.nv-background rect')\n\t          .attr('width', availableWidth)\n\t          .attr('height', availableHeight);\n\t\n\t      lines\n\t        //.x(function(d) { return d.x })\n\t        .y(function(d) { return d.display.y })\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color(d, i);\n\t        }).filter(function(d,i) { return !data[i].disabled && !data[i].tempDisabled; }));\n\t\n\t\n\t\n\t      var linesWrap = g.select('.nv-linesWrap')\n\t          .datum(data.filter(function(d) { return  !d.disabled && !d.tempDisabled }));\n\t\n\t      //d3.transition(linesWrap).call(lines);\n\t      linesWrap.call(lines);\n\t\n\t      /*Handle average lines [AN-612] ----------------------------*/\n\t\n\t      //Store a series index number in the data array.\n\t      data.forEach(function(d,i) {\n\t            d.seriesIndex = i;\n\t      });\n\t\n\t      var avgLineData = data.filter(function(d) {\n\t          return !d.disabled && !!average(d);\n\t      });\n\t\n\t      var avgLines = g.select(\".nv-avgLinesWrap\").selectAll(\"line\")\n\t              .data(avgLineData, function(d) { return d.key; });\n\t\n\t      var getAvgLineY = function(d) {\n\t          //If average lines go off the svg element, clamp them to the svg bounds.\n\t          var yVal = y(average(d));\n\t          if (yVal < 0) return 0;\n\t          if (yVal > availableHeight) return availableHeight;\n\t          return yVal;\n\t      };\n\t\n\t      avgLines.enter()\n\t              .append('line')\n\t              .style('stroke-width',2)\n\t              .style('stroke-dasharray','10,10')\n\t              .style('stroke',function (d,i) {\n\t                  return lines.color()(d,d.seriesIndex);\n\t              })\n\t              .attr('x1',0)\n\t              .attr('x2',availableWidth)\n\t              .attr('y1', getAvgLineY)\n\t              .attr('y2', getAvgLineY);\n\t\n\t      avgLines\n\t              .style('stroke-opacity',function(d){\n\t                  //If average lines go offscreen, make them transparent\n\t                  var yVal = y(average(d));\n\t                  if (yVal < 0 || yVal > availableHeight) return 0;\n\t                  return 1;\n\t              })\n\t              .attr('x1',0)\n\t              .attr('x2',availableWidth)\n\t              .attr('y1', getAvgLineY)\n\t              .attr('y2', getAvgLineY);\n\t\n\t      avgLines.exit().remove();\n\t\n\t      //Create index line -----------------------------------------\n\t\n\t      var indexLine = linesWrap.selectAll('.nv-indexLine')\n\t          .data([index]);\n\t      indexLine.enter().append('rect').attr('class', 'nv-indexLine')\n\t          .attr('width', 3)\n\t          .attr('x', -2)\n\t          .attr('fill', 'red')\n\t          .attr('fill-opacity', .5)\n\t          .style(\"pointer-events\",\"all\")\n\t          .call(indexDrag)\n\t\n\t      indexLine\n\t          .attr('transform', function(d) { return 'translate(' + dx(d.i) + ',0)' })\n\t          .attr('height', availableHeight)\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Axes\n\t\n\t      if (showXAxis) {\n\t        xAxis\n\t          .scale(x)\n\t          //Suggest how many ticks based on the chart width and D3 should listen (70 is the optimal number for MM/DD/YY dates)\n\t          .ticks( Math.min(data[0].values.length,availableWidth/70) )\n\t          .tickSize(-availableHeight, 0);\n\t\n\t        g.select('.nv-x.nv-axis')\n\t            .attr('transform', 'translate(0,' + y.range()[0] + ')');\n\t        d3.transition(g.select('.nv-x.nv-axis'))\n\t            .call(xAxis);\n\t      }\n\t\n\t\n\t      if (showYAxis) {\n\t        yAxis\n\t          .scale(y)\n\t          .ticks( availableHeight / 36 )\n\t          .tickSize( -availableWidth, 0);\n\t\n\t        d3.transition(g.select('.nv-y.nv-axis'))\n\t            .call(yAxis);\n\t      }\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t\n\t      function updateZero() {\n\t        indexLine\n\t          .data([index]);\n\t\n\t        //When dragging the index line, turn off line transitions.\n\t        // Then turn them back on when done dragging.\n\t        var oldDuration = chart.transitionDuration();\n\t        chart.transitionDuration(0);\n\t        chart.update();\n\t        chart.transitionDuration(oldDuration);\n\t      }\n\t\n\t      g.select('.nv-background rect')\n\t          .on('click', function() {\n\t            index.x = d3.mouse(this)[0];\n\t            index.i = Math.round(dx.invert(index.x));\n\t\n\t            // update state and send stateChange with new index\n\t            state.index = index.i;\n\t            dispatch.stateChange(state);\n\t\n\t            updateZero();\n\t          });\n\t\n\t      lines.dispatch.on('elementClick', function(e) {\n\t        index.i = e.pointIndex;\n\t        index.x = dx(index.i);\n\t\n\t        // update state and send stateChange with new index\n\t        state.index = index.i;\n\t        dispatch.stateChange(state);\n\t\n\t        updateZero();\n\t      });\n\t\n\t      controls.dispatch.on('legendClick', function(d,i) {\n\t        d.disabled = !d.disabled;\n\t        rescaleY = !d.disabled;\n\t\n\t        state.rescaleY = rescaleY;\n\t        dispatch.stateChange(state);\n\t        chart.update();\n\t      });\n\t\n\t\n\t      legend.dispatch.on('stateChange', function(newState) {\n\t        state.disabled = newState.disabled;\n\t        dispatch.stateChange(state);\n\t        chart.update();\n\t      });\n\t\n\t      interactiveLayer.dispatch.on('elementMousemove', function(e) {\n\t          lines.clearHighlights();\n\t          var singlePoint, pointIndex, pointXLocation, allData = [];\n\t\n\t\n\t          data\n\t          .filter(function(series, i) {\n\t            series.seriesIndex = i;\n\t            return !series.disabled;\n\t          })\n\t          .forEach(function(series,i) {\n\t              pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n\t              lines.highlightPoint(i, pointIndex, true);\n\t              var point = series.values[pointIndex];\n\t              if (typeof point === 'undefined') return;\n\t              if (typeof singlePoint === 'undefined') singlePoint = point;\n\t              if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n\t              allData.push({\n\t                  key: series.key,\n\t                  value: chart.y()(point, pointIndex),\n\t                  color: color(series,series.seriesIndex)\n\t              });\n\t          });\n\t\n\t          //Highlight the tooltip entry based on which point the mouse is closest to.\n\t          if (allData.length > 2) {\n\t            var yValue = chart.yScale().invert(e.mouseY);\n\t            var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);\n\t            var threshold = 0.03 * domainExtent;\n\t            var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value}),yValue,threshold);\n\t            if (indexToHighlight !== null)\n\t              allData[indexToHighlight].highlight = true;\n\t          }\n\t\n\t          var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex), pointIndex);\n\t          interactiveLayer.tooltip\n\t                  .position({left: pointXLocation + margin.left, top: e.mouseY + margin.top})\n\t                  .chartContainer(that.parentNode)\n\t                  .enabled(tooltips)\n\t                  .valueFormatter(function(d,i) {\n\t                     return yAxis.tickFormat()(d);\n\t                  })\n\t                  .data(\n\t                      {\n\t                        value: xValue,\n\t                        series: allData\n\t                      }\n\t                  )();\n\t\n\t          interactiveLayer.renderGuideLine(pointXLocation);\n\t\n\t      });\n\t\n\t      interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n\t          dispatch.tooltipHide();\n\t          lines.clearHighlights();\n\t      });\n\t\n\t      dispatch.on('tooltipShow', function(e) {\n\t        if (tooltips) showTooltip(e, that.parentNode);\n\t      });\n\t\n\t\n\t      // Update chart from a state object passed to event handler\n\t      dispatch.on('changeState', function(e) {\n\t\n\t        if (typeof e.disabled !== 'undefined') {\n\t          data.forEach(function(series,i) {\n\t            series.disabled = e.disabled[i];\n\t          });\n\t\n\t          state.disabled = e.disabled;\n\t        }\n\t\n\t\n\t        if (typeof e.index !== 'undefined') {\n\t          index.i = e.index;\n\t          index.x = dx(index.i);\n\t\n\t          state.index = e.index;\n\t\n\t          indexLine\n\t            .data([index]);\n\t        }\n\t\n\t\n\t        if (typeof e.rescaleY !== 'undefined') {\n\t          rescaleY = e.rescaleY;\n\t        }\n\t\n\t        chart.update();\n\t      });\n\t\n\t      //============================================================\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  lines.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  lines.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.dispatch = dispatch;\n\t  chart.lines = lines;\n\t  chart.legend = legend;\n\t  chart.xAxis = xAxis;\n\t  chart.yAxis = yAxis;\n\t  chart.interactiveLayer = interactiveLayer;\n\t\n\t  d3.rebind(chart, lines, 'defined', 'isArea', 'x', 'y', 'xScale','yScale', 'size', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi','useVoronoi',  'id');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    legend.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.rescaleY = function(_) {\n\t    if (!arguments.length) return rescaleY;\n\t    rescaleY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showControls = function(_) {\n\t    if (!arguments.length) return showControls;\n\t    showControls = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.useInteractiveGuideline = function(_) {\n\t    if(!arguments.length) return useInteractiveGuideline;\n\t    useInteractiveGuideline = _;\n\t    if (_ === true) {\n\t       chart.interactive(false);\n\t       chart.useVoronoi(false);\n\t    }\n\t    return chart;\n\t  };\n\t\n\t  chart.showLegend = function(_) {\n\t    if (!arguments.length) return showLegend;\n\t    showLegend = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showXAxis = function(_) {\n\t    if (!arguments.length) return showXAxis;\n\t    showXAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showYAxis = function(_) {\n\t    if (!arguments.length) return showYAxis;\n\t    showYAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.rightAlignYAxis = function(_) {\n\t    if(!arguments.length) return rightAlignYAxis;\n\t    rightAlignYAxis = _;\n\t    yAxis.orient( (_) ? 'right' : 'left');\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.state = function(_) {\n\t    if (!arguments.length) return state;\n\t    state = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.defaultState = function(_) {\n\t    if (!arguments.length) return defaultState;\n\t    defaultState = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.average = function(_) {\n\t     if(!arguments.length) return average;\n\t     average = _;\n\t     return chart;\n\t  };\n\t\n\t  chart.transitionDuration = function(_) {\n\t    if (!arguments.length) return transitionDuration;\n\t    transitionDuration = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.noErrorCheck = function(_) {\n\t    if (!arguments.length) return noErrorCheck;\n\t    noErrorCheck = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Functions\n\t  //------------------------------------------------------------\n\t\n\t  /* Normalize the data according to an index point. */\n\t  function indexify(idx, data) {\n\t    return data.map(function(line, i) {\n\t      if (!line.values) {\n\t         return line;\n\t      }\n\t      var indexValue = line.values[idx];\n\t      if (indexValue == null) {\n\t        return line;\n\t      }\n\t      var v = lines.y()(indexValue, idx);\n\t\n\t      //TODO: implement check below, and disable series if series loses 100% or more cause divide by 0 issue\n\t      if (v < -.95 && !noErrorCheck) {\n\t        //if a series loses more than 100%, calculations fail.. anything close can cause major distortion (but is mathematically correct till it hits 100)\n\t\n\t        line.tempDisabled = true;\n\t        return line;\n\t      }\n\t\n\t      line.tempDisabled = false;\n\t\n\t      line.values = line.values.map(function(point, pointIndex) {\n\t        point.display = {'y': (lines.y()(point, pointIndex) - v) / (1 + v) };\n\t        return point;\n\t      })\n\t\n\t      return line;\n\t    })\n\t  }\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t//TODO: consider deprecating by adding necessary features to multiBar model\n\tnv.models.discreteBar = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t    , width = 960\n\t    , height = 500\n\t    , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n\t    , x = d3.scale.ordinal()\n\t    , y = d3.scale.linear()\n\t    , getX = function(d) { return d.x }\n\t    , getY = function(d) { return d.y }\n\t    , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n\t    , color = nv.utils.defaultColor()\n\t    , showValues = false\n\t    , valueFormat = d3.format(',.2f')\n\t    , xDomain\n\t    , yDomain\n\t    , xRange\n\t    , yRange\n\t    , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout')\n\t    , rectClass = 'discreteBar'\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var x0, y0;\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var availableWidth = width - margin.left - margin.right,\n\t          availableHeight = height - margin.top - margin.bottom,\n\t          container = d3.select(this);\n\t\n\t\n\t      //add series index to each data point for reference\n\t      data.forEach(function(series, i) {\n\t        series.values.forEach(function(point) {\n\t          point.series = i;\n\t        });\n\t      });\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      // remap and flatten the data for use in calculating the scales' domains\n\t      var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n\t            data.map(function(d) {\n\t              return d.values.map(function(d,i) {\n\t                return { x: getX(d,i), y: getY(d,i), y0: d.y0 }\n\t              })\n\t            });\n\t\n\t      x   .domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n\t          .rangeBands(xRange || [0, availableWidth], .1);\n\t\n\t      y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return d.y }).concat(forceY)));\n\t\n\t\n\t      // If showValues, pad the Y axis range to account for label height\n\t      if (showValues) y.range(yRange || [availableHeight - (y.domain()[0] < 0 ? 12 : 0), y.domain()[1] > 0 ? 12 : 0]);\n\t      else y.range(yRange || [availableHeight, 0]);\n\t\n\t      //store old scales if they exist\n\t      x0 = x0 || x;\n\t      y0 = y0 || y.copy().range([y(0),y(0)]);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-discretebar').data([data]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discretebar');\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-groups');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t\n\t      //TODO: by definition, the discrete bar should not have multiple groups, will modify/remove later\n\t      var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n\t          .data(function(d) { return d }, function(d) { return d.key });\n\t      groups.enter().append('g')\n\t          .style('stroke-opacity', 1e-6)\n\t          .style('fill-opacity', 1e-6);\n\t      groups.exit()\n\t          \n\t          .style('stroke-opacity', 1e-6)\n\t          .style('fill-opacity', 1e-6)\n\t          .remove();\n\t      groups\n\t          .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n\t          .classed('hover', function(d) { return d.hover });\n\t      groups\n\t          \n\t          .style('stroke-opacity', 1)\n\t          .style('fill-opacity', .75);\n\t\n\t\n\t      var bars = groups.selectAll('g.nv-bar')\n\t          .data(function(d) { return d.values });\n\t\n\t      bars.exit().remove();\n\t\n\t\n\t      var barsEnter = bars.enter().append('g')\n\t          .attr('transform', function(d,i,j) {\n\t              return 'translate(' + (x(getX(d,i)) + x.rangeBand() * .05 ) + ', ' + y(0) + ')'\n\t          })\n\t          .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n\t            d3.select(this).classed('hover', true);\n\t            dispatch.elementMouseover({\n\t              value: getY(d,i),\n\t              point: d,\n\t              series: data[d.series],\n\t              pos: [x(getX(d,i)) + (x.rangeBand() * (d.series + .5) / data.length), y(getY(d,i))],  // TODO: Figure out why the value appears to be shifted\n\t              pointIndex: i,\n\t              seriesIndex: d.series,\n\t              e: d3.event\n\t            });\n\t          })\n\t          .on('mouseout', function(d,i) {\n\t            d3.select(this).classed('hover', false);\n\t            dispatch.elementMouseout({\n\t              value: getY(d,i),\n\t              point: d,\n\t              series: data[d.series],\n\t              pointIndex: i,\n\t              seriesIndex: d.series,\n\t              e: d3.event\n\t            });\n\t          })\n\t          .on('click', function(d,i) {\n\t            dispatch.elementClick({\n\t              value: getY(d,i),\n\t              point: d,\n\t              series: data[d.series],\n\t              pos: [x(getX(d,i)) + (x.rangeBand() * (d.series + .5) / data.length), y(getY(d,i))],  // TODO: Figure out why the value appears to be shifted\n\t              pointIndex: i,\n\t              seriesIndex: d.series,\n\t              e: d3.event\n\t            });\n\t            d3.event.stopPropagation();\n\t          })\n\t          .on('dblclick', function(d,i) {\n\t            dispatch.elementDblClick({\n\t              value: getY(d,i),\n\t              point: d,\n\t              series: data[d.series],\n\t              pos: [x(getX(d,i)) + (x.rangeBand() * (d.series + .5) / data.length), y(getY(d,i))],  // TODO: Figure out why the value appears to be shifted\n\t              pointIndex: i,\n\t              seriesIndex: d.series,\n\t              e: d3.event\n\t            });\n\t            d3.event.stopPropagation();\n\t          });\n\t\n\t      barsEnter.append('rect')\n\t          .attr('height', 0)\n\t          .attr('width', x.rangeBand() * .9 / data.length )\n\t\n\t      if (showValues) {\n\t        barsEnter.append('text')\n\t          .attr('text-anchor', 'middle')\n\t          ;\n\t\n\t        bars.select('text')\n\t          .text(function(d,i) { return valueFormat(getY(d,i)) })\n\t          \n\t          .attr('x', x.rangeBand() * .9 / 2)\n\t          .attr('y', function(d,i) { return getY(d,i) < 0 ? y(getY(d,i)) - y(0) + 12 : -4 })\n\t\n\t          ;\n\t      } else {\n\t        bars.selectAll('text').remove();\n\t      }\n\t\n\t      bars\n\t          .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive' })\n\t          .style('fill', function(d,i) { return d.color || color(d,i) })\n\t          .style('stroke', function(d,i) { return d.color || color(d,i) })\n\t        .select('rect')\n\t          .attr('class', rectClass)\n\t          \n\t          .attr('width', x.rangeBand() * .9 / data.length);\n\t      bars\n\t          .attr('transform', function(d,i) {\n\t            var left = x(getX(d,i)) + x.rangeBand() * .05,\n\t                top = getY(d,i) < 0 ?\n\t                        y(0) :\n\t                        y(0) - y(getY(d,i)) < 1 ?\n\t                          y(0) - 1 : //make 1 px positive bars show up above y=0\n\t                          y(getY(d,i));\n\t\n\t              return 'translate(' + left + ', ' + top + ')'\n\t          })\n\t        .select('rect')\n\t          .attr('height', function(d,i) {\n\t            return  Math.max(Math.abs(y(getY(d,i)) - y((yDomain && yDomain[0]) || 0)) || 1)\n\t          });\n\t\n\t\n\t      //store old scales for use in transitions on update\n\t      x0 = x.copy();\n\t      y0 = y.copy();\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  chart.dispatch = dispatch;\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.x = function(_) {\n\t    if (!arguments.length) return getX;\n\t    getX = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.y = function(_) {\n\t    if (!arguments.length) return getY;\n\t    getY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xScale = function(_) {\n\t    if (!arguments.length) return x;\n\t    x = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yScale = function(_) {\n\t    if (!arguments.length) return y;\n\t    y = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xDomain = function(_) {\n\t    if (!arguments.length) return xDomain;\n\t    xDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yDomain = function(_) {\n\t    if (!arguments.length) return yDomain;\n\t    yDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xRange = function(_) {\n\t    if (!arguments.length) return xRange;\n\t    xRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yRange = function(_) {\n\t    if (!arguments.length) return yRange;\n\t    yRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.forceY = function(_) {\n\t    if (!arguments.length) return forceY;\n\t    forceY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.id = function(_) {\n\t    if (!arguments.length) return id;\n\t    id = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showValues = function(_) {\n\t    if (!arguments.length) return showValues;\n\t    showValues = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.valueFormat= function(_) {\n\t    if (!arguments.length) return valueFormat;\n\t    valueFormat = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.rectClass= function(_) {\n\t    if (!arguments.length) return rectClass;\n\t    rectClass = _;\n\t    return chart;\n\t  };\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.discreteBarChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var discretebar = nv.models.discreteBar()\n\t    , xAxis = nv.models.axis()\n\t    , yAxis = nv.models.axis()\n\t    ;\n\t\n\t  var margin = {top: 15, right: 10, bottom: 50, left: 60}\n\t    , width = null\n\t    , height = null\n\t    , color = nv.utils.getColor()\n\t    , showXAxis = true\n\t    , showYAxis = true\n\t    , rightAlignYAxis = false\n\t    , staggerLabels = false\n\t    , tooltips = true\n\t    , tooltip = function(key, x, y, e, graph) {\n\t        return '<h3>' + x + '</h3>' +\n\t               '<p>' +  y + '</p>'\n\t      }\n\t    , x\n\t    , y\n\t    , noData = \"No Data Available.\"\n\t    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'beforeUpdate')\n\t    , transitionDuration = 0\n\t    ;\n\t\n\t  xAxis\n\t    .orient('bottom')\n\t    .highlightZero(false)\n\t    .showMaxMin(false)\n\t    .tickFormat(function(d) { return d })\n\t    ;\n\t  yAxis\n\t    .orient((rightAlignYAxis) ? 'right' : 'left')\n\t    .tickFormat(d3.format(',.1f'))\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t        x = xAxis.tickFormat()(discretebar.x()(e.point, e.pointIndex)),\n\t        y = yAxis.tickFormat()(discretebar.y()(e.point, e.pointIndex)),\n\t        content = tooltip(e.series.key, x, y, e, chart);\n\t\n\t    nv.tooltip.show([left, top], content, e.value < 0 ? 'n' : 's', null, offsetElement);\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this),\n\t          that = this;\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t\n\t\n\t      chart.update = function() { \n\t        dispatch.beforeUpdate(); \n\t        container.call(chart); \n\t      };\n\t      chart.container = this;\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Display No Data message if there's nothing to show.\n\t\n\t      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', margin.top + availableHeight / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x = discretebar.xScale();\n\t      y = discretebar.yScale().clamp(true);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-discreteBarWithAxes').data([data]);\n\t      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discreteBarWithAxes').append('g');\n\t      var defsEnter = gEnter.append('defs');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-x nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-y nv-axis')\n\t            .append('g').attr('class', 'nv-zeroLine')\n\t            .append('line');\n\t        \n\t      gEnter.append('g').attr('class', 'nv-barsWrap');\n\t\n\t      g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      if (rightAlignYAxis) {\n\t          g.select(\".nv-y.nv-axis\")\n\t              .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Main Chart Component(s)\n\t\n\t      discretebar\n\t        .width(availableWidth)\n\t        .height(availableHeight);\n\t\n\t\n\t      var barsWrap = g.select('.nv-barsWrap')\n\t          .datum(data.filter(function(d) { return !d.disabled }))\n\t\n\t      barsWrap.call(discretebar);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t\n\t      defsEnter.append('clipPath')\n\t          .attr('id', 'nv-x-label-clip-' + discretebar.id())\n\t        .append('rect');\n\t\n\t      g.select('#nv-x-label-clip-' + discretebar.id() + ' rect')\n\t          .attr('width', x.rangeBand() * (staggerLabels ? 2 : 1))\n\t          .attr('height', 16)\n\t          .attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2 ));\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Axes\n\t\n\t      if (showXAxis) {\n\t          xAxis\n\t            .scale(x)\n\t            .ticks( availableWidth / 100 )\n\t            .tickSize(-availableHeight, 0);\n\t\n\t          g.select('.nv-x.nv-axis')\n\t              .attr('transform', 'translate(0,' + (y.range()[0] + ((discretebar.showValues() && y.domain()[0] < 0) ? 16 : 0)) + ')');\n\t          //d3.transition(g.select('.nv-x.nv-axis'))\n\t          g.select('.nv-x.nv-axis')\n\t              .call(xAxis);\n\t\n\t\n\t          var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n\t\n\t          if (staggerLabels) {\n\t            xTicks\n\t                .selectAll('text')\n\t                .attr('transform', function(d,i,j) { return 'translate(0,' + (j % 2 == 0 ? '5' : '17') + ')' })\n\t          }\n\t      }\n\t\n\t      if (showYAxis) {\n\t          yAxis\n\t            .scale(y)\n\t            .ticks( availableHeight / 36 )\n\t            .tickSize( -availableWidth, 0);\n\t\n\t          g.select('.nv-y.nv-axis')\n\t              .call(yAxis);\n\t      }\n\t\n\t      // Zero line\n\t      g.select(\".nv-zeroLine line\")\n\t        .attr(\"x1\",0)\n\t        .attr(\"x2\",availableWidth)\n\t        .attr(\"y1\", y(0))\n\t        .attr(\"y2\", y(0))\n\t        ;\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t      dispatch.on('tooltipShow', function(e) {\n\t        if (tooltips) showTooltip(e, that.parentNode);\n\t      });\n\t\n\t      //============================================================\n\t\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  discretebar.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  discretebar.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.dispatch = dispatch;\n\t  chart.discretebar = discretebar;\n\t  chart.xAxis = xAxis;\n\t  chart.yAxis = yAxis;\n\t\n\t  d3.rebind(chart, discretebar, 'x', 'y', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'id', 'showValues', 'valueFormat');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    discretebar.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.showXAxis = function(_) {\n\t    if (!arguments.length) return showXAxis;\n\t    showXAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showYAxis = function(_) {\n\t    if (!arguments.length) return showYAxis;\n\t    showYAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.rightAlignYAxis = function(_) {\n\t    if(!arguments.length) return rightAlignYAxis;\n\t    rightAlignYAxis = _;\n\t    yAxis.orient( (_) ? 'right' : 'left');\n\t    return chart;\n\t  };\n\t\n\t  chart.staggerLabels = function(_) {\n\t    if (!arguments.length) return staggerLabels;\n\t    staggerLabels = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.transitionDuration = function(_) {\n\t    if (!arguments.length) return transitionDuration;\n\t    transitionDuration = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.distribution = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t    , width = 400 //technically width or height depending on x or y....\n\t    , size = 8\n\t    , axis = 'x' // 'x' or 'y'... horizontal or vertical\n\t    , getData = function(d) { return d[axis] }  // defaults d.x or d.y\n\t    , color = nv.utils.defaultColor()\n\t    , scale = d3.scale.linear()\n\t    , domain\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var scale0;\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var availableLength = width - (axis === 'x' ? margin.left + margin.right : margin.top + margin.bottom),\n\t          naxis = axis == 'x' ? 'y' : 'x',\n\t          container = d3.select(this);\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      scale0 = scale0 || scale;\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-distribution').data([data]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-distribution');\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      var distWrap = g.selectAll('g.nv-dist')\n\t          .data(function(d) { return d }, function(d) { return d.key });\n\t\n\t      distWrap.enter().append('g');\n\t      distWrap\n\t          .attr('class', function(d,i) { return 'nv-dist nv-series-' + i })\n\t          .style('stroke', function(d,i) { return color(d, i) });\n\t\n\t      var dist = distWrap.selectAll('line.nv-dist' + axis)\n\t          .data(function(d) { return d.values })\n\t      dist.enter().append('line')\n\t          .attr(axis + '1', function(d,i) { return scale0(getData(d,i)) })\n\t          .attr(axis + '2', function(d,i) { return scale0(getData(d,i)) })\n\t      distWrap.exit().selectAll('line.nv-dist' + axis)\n\t          \n\t          .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })\n\t          .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })\n\t          .style('stroke-opacity', 0)\n\t          .remove();\n\t      dist\n\t          .attr('class', function(d,i) { return 'nv-dist' + axis + ' nv-dist' + axis + '-' + i })\n\t          .attr(naxis + '1', 0)\n\t          .attr(naxis + '2', size);\n\t      dist\n\t          \n\t          .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })\n\t          .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })\n\t\n\t\n\t      scale0 = scale.copy();\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.axis = function(_) {\n\t    if (!arguments.length) return axis;\n\t    axis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.size = function(_) {\n\t    if (!arguments.length) return size;\n\t    size = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.getData = function(_) {\n\t    if (!arguments.length) return getData;\n\t    getData = d3.functor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.scale = function(_) {\n\t    if (!arguments.length) return scale;\n\t    scale = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    return chart;\n\t  };\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.historicalBarChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var bars = nv.models.historicalBar()\n\t    , xAxis = nv.models.axis()\n\t    , yAxis = nv.models.axis()\n\t    , legend = nv.models.legend()\n\t    ;\n\t\n\t\n\t  var margin = {top: 30, right: 90, bottom: 50, left: 90}\n\t    , color = nv.utils.defaultColor()\n\t    , width = null\n\t    , height = null\n\t    , showLegend = false\n\t    , showXAxis = true\n\t    , showYAxis = true\n\t    , rightAlignYAxis = false\n\t    , tooltips = true\n\t    , tooltip = function(key, x, y, e, graph) {\n\t        return '<h3>' + key + '</h3>' +\n\t               '<p>' +  y + ' at ' + x + '</p>'\n\t      }\n\t    , x\n\t    , y\n\t    , state = {}\n\t    , defaultState = null\n\t    , noData = 'No Data Available.'\n\t    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n\t    , transitionDuration = 0\n\t    ;\n\t\n\t  xAxis\n\t    .orient('bottom')\n\t    .tickPadding(7)\n\t    ;\n\t  yAxis\n\t    .orient( (rightAlignYAxis) ? 'right' : 'left')\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t\n\t    // New addition to calculate position if SVG is scaled with viewBox, may move TODO: consider implementing everywhere else\n\t    if (offsetElement) {\n\t      var svg = d3.select(offsetElement).select('svg');\n\t      var viewBox = (svg.node()) ? svg.attr('viewBox') : null;\n\t      if (viewBox) {\n\t        viewBox = viewBox.split(' ');\n\t        var ratio = parseInt(svg.style('width')) / viewBox[2];\n\t        e.pos[0] = e.pos[0] * ratio;\n\t        e.pos[1] = e.pos[1] * ratio;\n\t      }\n\t    }\n\t\n\t    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t        x = xAxis.tickFormat()(bars.x()(e.point, e.pointIndex)),\n\t        y = yAxis.tickFormat()(bars.y()(e.point, e.pointIndex)),\n\t        content = tooltip(e.series.key, x, y, e, chart);\n\t\n\t    nv.tooltip.show([left, top], content, null, null, offsetElement);\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this),\n\t          that = this;\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t\n\t\n\t      chart.update = function() { container.call(chart) };\n\t      chart.container = this;\n\t\n\t      //set state.disabled\n\t      state.disabled = data.map(function(d) { return !!d.disabled });\n\t\n\t      if (!defaultState) {\n\t        var key;\n\t        defaultState = {};\n\t        for (key in state) {\n\t          if (state[key] instanceof Array)\n\t            defaultState[key] = state[key].slice(0);\n\t          else\n\t            defaultState[key] = state[key];\n\t        }\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t      // Display noData message if there's nothing to show.\n\t\n\t      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', margin.top + availableHeight / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x = bars.xScale();\n\t      y = bars.yScale();\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-historicalBarChart').data([data]);\n\t      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBarChart').append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-x nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-y nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-barsWrap');\n\t      gEnter.append('g').attr('class', 'nv-legendWrap');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Legend\n\t\n\t      if (showLegend) {\n\t        legend.width(availableWidth);\n\t\n\t        g.select('.nv-legendWrap')\n\t            .datum(data)\n\t            .call(legend);\n\t\n\t        if ( margin.top != legend.height()) {\n\t          margin.top = legend.height();\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t        }\n\t\n\t        wrap.select('.nv-legendWrap')\n\t            .attr('transform', 'translate(0,' + (-margin.top) +')')\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      if (rightAlignYAxis) {\n\t        g.select(\".nv-y.nv-axis\")\n\t            .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n\t      }\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Main Chart Component(s)\n\t\n\t      bars\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color(d, i);\n\t        }).filter(function(d,i) { return !data[i].disabled }));\n\t\n\t\n\t      var barsWrap = g.select('.nv-barsWrap')\n\t          .datum(data.filter(function(d) { return !d.disabled }))\n\t\n\t      barsWrap.call(bars);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Axes\n\t\n\t      if (showXAxis) {\n\t        xAxis\n\t          .scale(x)\n\t          .tickSize(-availableHeight, 0);\n\t\n\t        g.select('.nv-x.nv-axis')\n\t            .attr('transform', 'translate(0,' + y.range()[0] + ')');\n\t        g.select('.nv-x.nv-axis')\n\t            \n\t            .call(xAxis);\n\t      }\n\t\n\t      if (showYAxis) {\n\t        yAxis\n\t          .scale(y)\n\t          .ticks( availableHeight / 36 )\n\t          .tickSize( -availableWidth, 0);\n\t\n\t        g.select('.nv-y.nv-axis')\n\t          \n\t            .call(yAxis);\n\t      }\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t      legend.dispatch.on('legendClick', function(d,i) {\n\t        d.disabled = !d.disabled;\n\t\n\t        if (!data.filter(function(d) { return !d.disabled }).length) {\n\t          data.map(function(d) {\n\t            d.disabled = false;\n\t            wrap.selectAll('.nv-series').classed('disabled', false);\n\t            return d;\n\t          });\n\t        }\n\t\n\t        state.disabled = data.map(function(d) { return !!d.disabled });\n\t        dispatch.stateChange(state);\n\t\n\t        selection.call(chart);\n\t      });\n\t\n\t      legend.dispatch.on('legendDblclick', function(d) {\n\t          //Double clicking should always enable current series, and disabled all others.\n\t          data.forEach(function(d) {\n\t             d.disabled = true;\n\t          });\n\t          d.disabled = false;\n\t\n\t          state.disabled = data.map(function(d) { return !!d.disabled });\n\t          dispatch.stateChange(state);\n\t          chart.update();\n\t      });\n\t\n\t      dispatch.on('tooltipShow', function(e) {\n\t        if (tooltips) showTooltip(e, that.parentNode);\n\t      });\n\t\n\t\n\t      dispatch.on('changeState', function(e) {\n\t\n\t        if (typeof e.disabled !== 'undefined') {\n\t          data.forEach(function(series,i) {\n\t            series.disabled = e.disabled[i];\n\t          });\n\t\n\t          state.disabled = e.disabled;\n\t        }\n\t\n\t        chart.update();\n\t      });\n\t\n\t      //============================================================\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  bars.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  bars.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.dispatch = dispatch;\n\t  chart.bars = bars;\n\t  chart.legend = legend;\n\t  chart.xAxis = xAxis;\n\t  chart.yAxis = yAxis;\n\t\n\t  d3.rebind(chart, bars, 'defined', 'isArea', 'x', 'y', 'size', 'xScale', 'yScale',\n\t    'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi', 'id', 'interpolate','highlightPoint','clearHighlights', 'interactive');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    legend.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.showLegend = function(_) {\n\t    if (!arguments.length) return showLegend;\n\t    showLegend = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showXAxis = function(_) {\n\t    if (!arguments.length) return showXAxis;\n\t    showXAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showYAxis = function(_) {\n\t    if (!arguments.length) return showYAxis;\n\t    showYAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.rightAlignYAxis = function(_) {\n\t    if(!arguments.length) return rightAlignYAxis;\n\t    rightAlignYAxis = _;\n\t    yAxis.orient( (_) ? 'right' : 'left');\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.state = function(_) {\n\t    if (!arguments.length) return state;\n\t    state = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.defaultState = function(_) {\n\t    if (!arguments.length) return defaultState;\n\t    defaultState = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.transitionDuration = function(_) {\n\t    if (!arguments.length) return transitionDuration;\n\t    transitionDuration = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\tnv.models.indentedTree = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var margin = {top: 0, right: 0, bottom: 0, left: 0} //TODO: implement, maybe as margin on the containing div\n\t    , width = 960\n\t    , height = 500\n\t    , color = nv.utils.defaultColor()\n\t    , id = Math.floor(Math.random() * 10000)\n\t    , header = true\n\t    , filterZero = false\n\t    , noData = \"No Data Available.\"\n\t    , childIndent = 20\n\t    , columns = [{key:'key', label: 'Name', type:'text'}] //TODO: consider functions like chart.addColumn, chart.removeColumn, instead of a block like this\n\t    , tableClass = null\n\t    , iconOpen = 'images/grey-plus.png' //TODO: consider removing this and replacing with a '+' or '-' unless user defines images\n\t    , iconClose = 'images/grey-minus.png'\n\t    , dispatch = d3.dispatch('elementClick', 'elementDblclick', 'elementMouseover', 'elementMouseout')\n\t    , getUrl = function(d) { return d.url }\n\t    ;\n\t\n\t  //============================================================\n\t\n\t  var idx = 0;\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var depth = 1,\n\t          container = d3.select(this);\n\t\n\t      var tree = d3.layout.tree()\n\t          .children(function(d) { return d.values })\n\t          .size([height, childIndent]); //Not sure if this is needed now that the result is HTML\n\t\n\t      chart.update = function() { container.call(chart) };\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Display No Data message if there's nothing to show.\n\t      if (!data[0]) data[0] = {key: noData};\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      var nodes = tree.nodes(data[0]);\n\t\n\t      // nodes.map(function(d) {\n\t      //   d.id = i++;\n\t      // })\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = d3.select(this).selectAll('div').data([[nodes]]);\n\t      var wrapEnter = wrap.enter().append('div').attr('class', 'nvd3 nv-wrap nv-indentedtree');\n\t      var tableEnter = wrapEnter.append('table');\n\t      var table = wrap.select('table').attr('width', '100%').attr('class', tableClass);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      if (header) {\n\t        var thead = tableEnter.append('thead');\n\t\n\t        var theadRow1 = thead.append('tr');\n\t\n\t        columns.forEach(function(column) {\n\t          theadRow1\n\t            .append('th')\n\t              .attr('width', column.width ? column.width : '10%')\n\t              .style('text-align', column.type == 'numeric' ? 'right' : 'left')\n\t            .append('span')\n\t              .text(column.label);\n\t        });\n\t      }\n\t\n\t\n\t      var tbody = table.selectAll('tbody')\n\t                    .data(function(d) { return d });\n\t      tbody.enter().append('tbody');\n\t\n\t\n\t\n\t      //compute max generations\n\t      depth = d3.max(nodes, function(node) { return node.depth });\n\t      tree.size([height, depth * childIndent]); //TODO: see if this is necessary at all\n\t\n\t\n\t      // Update the nodes…\n\t      var node = tbody.selectAll('tr')\n\t          // .data(function(d) { return d; }, function(d) { return d.id || (d.id == ++i)});\n\t          .data(function(d) { return d.filter(function(d) { return (filterZero && !d.children) ? filterZero(d) :  true; } )}, function(d,i) { return d.id || (d.id || ++idx)});\n\t          //.style('display', 'table-row'); //TODO: see if this does anything\n\t\n\t      node.exit().remove();\n\t\n\t      node.select('img.nv-treeicon')\n\t          .attr('src', icon)\n\t          .classed('folded', folded);\n\t\n\t      var nodeEnter = node.enter().append('tr');\n\t\n\t\n\t      columns.forEach(function(column, index) {\n\t\n\t        var nodeName = nodeEnter.append('td')\n\t            .style('padding-left', function(d) { return (index ? 0 : d.depth * childIndent + 12 + (icon(d) ? 0 : 16)) + 'px' }, 'important') //TODO: check why I did the ternary here\n\t            .style('text-align', column.type == 'numeric' ? 'right' : 'left');\n\t\n\t\n\t        if (index == 0) {\n\t          nodeName.append('img')\n\t              .classed('nv-treeicon', true)\n\t              .classed('nv-folded', folded)\n\t              .attr('src', icon)\n\t              .style('width', '14px')\n\t              .style('height', '14px')\n\t              .style('padding', '0 1px')\n\t              .style('display', function(d) { return icon(d) ? 'inline-block' : 'none'; })\n\t              .on('click', click);\n\t        }\n\t\n\t\n\t        nodeName.each(function(d) {\n\t          if (!index && getUrl(d))\n\t            d3.select(this)\n\t              .append('a')\n\t              .attr('href',getUrl)\n\t              .attr('class', d3.functor(column.classes))\n\t              .append('span')\n\t          else\n\t            d3.select(this)\n\t              .append('span')\n\t\n\t            d3.select(this).select('span')\n\t              .attr('class', d3.functor(column.classes) )\n\t              .text(function(d) { return column.format ? (d[column.key] ? column.format(d[column.key]) : '-') :  (d[column.key] || '-'); });\n\t          });\n\t\n\t        if  (column.showCount) {\n\t          nodeName.append('span')\n\t              .attr('class', 'nv-childrenCount');\n\t\n\t          node.selectAll('span.nv-childrenCount').text(function(d) {\n\t                return ((d.values && d.values.length) || (d._values && d._values.length)) ?                                   //If this is a parent\n\t                    '(' + ((d.values && (d.values.filter(function(d) { return filterZero ? filterZero(d) :  true; }).length)) //If children are in values check its children and filter\n\t                    || (d._values && d._values.filter(function(d) { return filterZero ? filterZero(d) :  true; }).length)     //Otherwise, do the same, but with the other name, _values...\n\t                    || 0) + ')'                                                                                               //This is the catch-all in case there are no children after a filter\n\t                    : ''                                                                                                     //If this is not a parent, just give an empty string\n\t            });\n\t        }\n\t\n\t        // if (column.click)\n\t        //   nodeName.select('span').on('click', column.click);\n\t\n\t      });\n\t\n\t      node\n\t        .order()\n\t        .on('click', function(d) { \n\t          dispatch.elementClick({\n\t            row: this, //TODO: decide whether or not this should be consistent with scatter/line events or should be an html link (a href)\n\t            data: d,\n\t            pos: [d.x, d.y]\n\t          });\n\t        })\n\t        .on('dblclick', function(d) { \n\t          dispatch.elementDblclick({\n\t            row: this,\n\t            data: d,\n\t            pos: [d.x, d.y]\n\t          });\n\t        })\n\t        .on('mouseover', function(d) { \n\t          dispatch.elementMouseover({\n\t            row: this,\n\t            data: d,\n\t            pos: [d.x, d.y]\n\t          });\n\t        })\n\t        .on('mouseout', function(d) { \n\t          dispatch.elementMouseout({\n\t            row: this,\n\t            data: d,\n\t            pos: [d.x, d.y]\n\t          });\n\t        });\n\t\n\t\n\t\n\t\n\t      // Toggle children on click.\n\t      function click(d, _, unshift) {\n\t        d3.event.stopPropagation();\n\t\n\t        if(d3.event.shiftKey && !unshift) {\n\t          //If you shift-click, it'll toggle fold all the children, instead of itself\n\t          d3.event.shiftKey = false;\n\t          d.values && d.values.forEach(function(node){\n\t            if (node.values || node._values) {\n\t              click(node, 0, true);\n\t            }\n\t          });\n\t          return true;\n\t        }\n\t        if(!hasChildren(d)) {\n\t          //download file\n\t          //window.location.href = d.url;\n\t          return true;\n\t        }\n\t        if (d.values) {\n\t          d._values = d.values;\n\t          d.values = null;\n\t        } else {\n\t          d.values = d._values;\n\t          d._values = null;\n\t        }\n\t        chart.update();\n\t      }\n\t\n\t\n\t      function icon(d) {\n\t        return (d._values && d._values.length) ? iconOpen : (d.values && d.values.length) ? iconClose : '';\n\t      }\n\t\n\t      function folded(d) {\n\t        return (d._values && d._values.length);\n\t      }\n\t\n\t      function hasChildren(d) {\n\t        var values = d.values || d._values;\n\t\n\t        return (values && values.length);\n\t      }\n\t\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    scatter.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.id = function(_) {\n\t    if (!arguments.length) return id;\n\t    id = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.header = function(_) {\n\t    if (!arguments.length) return header;\n\t    header = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.filterZero = function(_) {\n\t    if (!arguments.length) return filterZero;\n\t    filterZero = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.columns = function(_) {\n\t    if (!arguments.length) return columns;\n\t    columns = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tableClass = function(_) {\n\t    if (!arguments.length) return tableClass;\n\t    tableClass = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.iconOpen = function(_){\n\t     if (!arguments.length) return iconOpen;\n\t    iconOpen = _;\n\t    return chart;\n\t  }\n\t\n\t  chart.iconClose = function(_){\n\t     if (!arguments.length) return iconClose;\n\t    iconClose = _;\n\t    return chart;\n\t  }\n\t\n\t  chart.getUrl = function(_){\n\t     if (!arguments.length) return getUrl;\n\t    getUrl = _;\n\t    return chart;\n\t  }\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t};nv.models.legend = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var margin = {top: 5, right: 0, bottom: 5, left: 0}\n\t    , width = 400\n\t    , height = 20\n\t    , getKey = function(d) { return d.key }\n\t    , color = nv.utils.defaultColor()\n\t    , align = true\n\t    , rightAlign = true\n\t    , updateState = true   //If true, legend will update data.disabled and trigger a 'stateChange' dispatch.\n\t    , radioButtonMode = false   //If true, clicking legend items will cause it to behave like a radio button. (only one can be selected at a time)\n\t    , dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange')\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var availableWidth = width - margin.left - margin.right,\n\t          container = d3.select(this);\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-legend').data([data]);\n\t      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');\n\t      var g = wrap.select('g');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      var series = g.selectAll('.nv-series')\n\t          .data(function(d) { return d });\n\t      var seriesEnter = series.enter().append('g').attr('class', 'nv-series')\n\t          .on('mouseover', function(d,i) {\n\t            dispatch.legendMouseover(d,i);  //TODO: Make consistent with other event objects\n\t          })\n\t          .on('mouseout', function(d,i) {\n\t            dispatch.legendMouseout(d,i);\n\t          })\n\t          .on('click', function(d,i) {\n\t            dispatch.legendClick(d,i);\n\t            if (updateState) {\n\t               if (radioButtonMode) {\n\t                   //Radio button mode: set every series to disabled,\n\t                   //  and enable the clicked series.\n\t                   data.forEach(function(series) { series.disabled = true});\n\t                   d.disabled = false;\n\t               }\n\t               else {\n\t                   d.disabled = !d.disabled;\n\t                   if (data.every(function(series) { return series.disabled})) {\n\t                       //the default behavior of NVD3 legends is, if every single series\n\t                       // is disabled, turn all series' back on.\n\t                       data.forEach(function(series) { series.disabled = false});\n\t                   }\n\t               }\n\t               dispatch.stateChange({\n\t                  disabled: data.map(function(d) { return !!d.disabled })\n\t               });\n\t            }\n\t          })\n\t          .on('dblclick', function(d,i) {\n\t            dispatch.legendDblclick(d,i);\n\t            if (updateState) {\n\t                //the default behavior of NVD3 legends, when double clicking one,\n\t                // is to set all other series' to false, and make the double clicked series enabled.\n\t                data.forEach(function(series) {\n\t                   series.disabled = true;\n\t                });\n\t                d.disabled = false;\n\t                dispatch.stateChange({\n\t                    disabled: data.map(function(d) { return !!d.disabled })\n\t                });\n\t            }\n\t          });\n\t      seriesEnter.append('circle')\n\t          .style('stroke-width', 2)\n\t          .attr('class','nv-legend-symbol')\n\t          .attr('r', 5);\n\t      seriesEnter.append('text')\n\t          .attr('text-anchor', 'start')\n\t          .attr('class','nv-legend-text')\n\t          .attr('dy', '.32em')\n\t          .attr('dx', '8');\n\t      series.classed('disabled', function(d) { return d.disabled });\n\t      series.exit().remove();\n\t      series.select('circle')\n\t          .style('fill', function(d,i) { return d.color || color(d,i)})\n\t          .style('stroke', function(d,i) { return d.color || color(d, i) });\n\t      series.select('text').text(getKey);\n\t\n\t\n\t      //TODO: implement fixed-width and max-width options (max-width is especially useful with the align option)\n\t\n\t      // NEW ALIGNING CODE, TODO: clean up\n\t      if (align) {\n\t\n\t        var seriesWidths = [];\n\t        series.each(function(d,i) {\n\t              var legendText = d3.select(this).select('text');\n\t              var nodeTextLength;\n\t              try {\n\t                nodeTextLength = legendText.getComputedTextLength();\n\t                // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead\n\t                if(nodeTextLength <= 0) throw Error();\n\t              }\n\t              catch(e) {\n\t                nodeTextLength = nv.utils.calcApproxTextWidth(legendText);\n\t              }\n\t\n\t              seriesWidths.push(nodeTextLength + 28); // 28 is ~ the width of the circle plus some padding\n\t            });\n\t\n\t        var seriesPerRow = 0;\n\t        var legendWidth = 0;\n\t        var columnWidths = [];\n\t\n\t        while ( legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {\n\t          columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];\n\t          legendWidth += seriesWidths[seriesPerRow++];\n\t        }\n\t        if (seriesPerRow === 0) seriesPerRow = 1; //minimum of one series per row\n\t\n\t\n\t        while ( legendWidth > availableWidth && seriesPerRow > 1 ) {\n\t          columnWidths = [];\n\t          seriesPerRow--;\n\t\n\t          for (var k = 0; k < seriesWidths.length; k++) {\n\t            if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0) )\n\t              columnWidths[k % seriesPerRow] = seriesWidths[k];\n\t          }\n\t\n\t          legendWidth = columnWidths.reduce(function(prev, cur, index, array) {\n\t                          return prev + cur;\n\t                        });\n\t        }\n\t\n\t        var xPositions = [];\n\t        for (var i = 0, curX = 0; i < seriesPerRow; i++) {\n\t            xPositions[i] = curX;\n\t            curX += columnWidths[i];\n\t        }\n\t\n\t        series\n\t            .attr('transform', function(d, i) {\n\t              return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * 20) + ')';\n\t            });\n\t\n\t        //position legend as far right as possible within the total width\n\t        if (rightAlign) {\n\t           g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')');\n\t        }\n\t        else {\n\t           g.attr('transform', 'translate(0' + ',' + margin.top + ')');\n\t        }\n\t\n\t        height = margin.top + margin.bottom + (Math.ceil(seriesWidths.length / seriesPerRow) * 20);\n\t\n\t      } else {\n\t\n\t        var ypos = 5,\n\t            newxpos = 5,\n\t            maxwidth = 0,\n\t            xpos;\n\t        series\n\t            .attr('transform', function(d, i) {\n\t              var length = d3.select(this).select('text').node().getComputedTextLength() + 28;\n\t              xpos = newxpos;\n\t\n\t              if (width < margin.left + margin.right + xpos + length) {\n\t                newxpos = xpos = 5;\n\t                ypos += 20;\n\t              }\n\t\n\t              newxpos += length;\n\t              if (newxpos > maxwidth) maxwidth = newxpos;\n\t\n\t              return 'translate(' + xpos + ',' + ypos + ')';\n\t            });\n\t\n\t        //position legend as far right as possible within the total width\n\t        g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');\n\t\n\t        height = margin.top + margin.bottom + ypos + 15;\n\t\n\t      }\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  chart.dispatch = dispatch;\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.key = function(_) {\n\t    if (!arguments.length) return getKey;\n\t    getKey = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.align = function(_) {\n\t    if (!arguments.length) return align;\n\t    align = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.rightAlign = function(_) {\n\t    if (!arguments.length) return rightAlign;\n\t    rightAlign = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.updateState = function(_) {\n\t    if (!arguments.length) return updateState;\n\t    updateState = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.radioButtonMode = function(_) {\n\t    if (!arguments.length) return radioButtonMode;\n\t    radioButtonMode = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.line = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var  scatter = nv.models.scatter()\n\t    ;\n\t\n\t  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t    , width = 960\n\t    , height = 500\n\t    , color = nv.utils.defaultColor() // a function that returns a color\n\t    , getX = function(d) { return d.x } // accessor to get the x value from a data point\n\t    , getY = function(d) { return d.y } // accessor to get the y value from a data point\n\t    , defined = function(d,i) { return !isNaN(getY(d,i)) && getY(d,i) !== null } // allows a line to be not continuous when it is not defined\n\t    , isArea = function(d) { return d.area } // decides if a line is an area or just a line\n\t    , clipEdge = false // if true, masks lines within x and y scale\n\t    , x //can be accessed via chart.xScale()\n\t    , y //can be accessed via chart.yScale()\n\t    , interpolate = \"linear\" // controls the line interpolation\n\t    ;\n\t\n\t  scatter\n\t    .size(16) // default size\n\t    .sizeDomain([16,256]) //set to speed up calculation, needs to be unset if there is a custom size accessor\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var x0, y0 //used to store previous scales\n\t      ;\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var availableWidth = width - margin.left - margin.right,\n\t          availableHeight = height - margin.top - margin.bottom,\n\t          container = d3.select(this);\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x = scatter.xScale();\n\t      y = scatter.yScale();\n\t\n\t      x0 = x0 || x;\n\t      y0 = y0 || y;\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-line').data([data]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-line');\n\t      var defsEnter = wrapEnter.append('defs');\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g')\n\t\n\t      gEnter.append('g').attr('class', 'nv-groups');\n\t      gEnter.append('g').attr('class', 'nv-scatterWrap');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t\n\t\n\t      scatter\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t\n\t      var scatterWrap = wrap.select('.nv-scatterWrap');\n\t          //.datum(data); // Data automatically trickles down from the wrap\n\t\n\t      scatterWrap.call(scatter);\n\t\n\t\n\t\n\t      defsEnter.append('clipPath')\n\t          .attr('id', 'nv-edge-clip-' + scatter.id())\n\t        .append('rect');\n\t\n\t      wrap.select('#nv-edge-clip-' + scatter.id() + ' rect')\n\t          .attr('width', availableWidth)\n\t          .attr('height', (availableHeight > 0) ? availableHeight : 0);\n\t\n\t      g   .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');\n\t      scatterWrap\n\t          .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');\n\t\n\t\n\t\n\t\n\t      var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n\t          .data(function(d) { return d }, function(d) { return d.key });\n\t      groups.enter().append('g')\n\t          .style('stroke-opacity', 1e-6)\n\t          .style('fill-opacity', 1e-6);\n\t\n\t      groups.exit().remove();\n\t\n\t      groups\n\t          .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n\t          .classed('hover', function(d) { return d.hover })\n\t          .style('fill', function(d,i){ return color(d, i) })\n\t          .style('stroke', function(d,i){ return color(d, i)});\n\t      groups\n\t          \n\t          .style('stroke-opacity', 1)\n\t          .style('fill-opacity', .5);\n\t\n\t\n\t\n\t      var areaPaths = groups.selectAll('path.nv-area')\n\t          .data(function(d) { return isArea(d) ? [d] : [] }); // this is done differently than lines because I need to check if series is an area\n\t      areaPaths.enter().append('path')\n\t          .attr('class', 'nv-area')\n\t          .attr('d', function(d) {\n\t            return d3.svg.area()\n\t                .interpolate(interpolate)\n\t                .defined(defined)\n\t                .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n\t                .y0(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n\t                .y1(function(d,i) { return y0( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })\n\t                //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this\n\t                .apply(this, [d.values])\n\t          });\n\t      groups.exit().selectAll('path.nv-area')\n\t           .remove();\n\t\n\t      areaPaths\n\t          \n\t          .attr('d', function(d) {\n\t            return d3.svg.area()\n\t                .interpolate(interpolate)\n\t                .defined(defined)\n\t                .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n\t                .y0(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n\t                .y1(function(d,i) { return y( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })\n\t                //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this\n\t                .apply(this, [d.values])\n\t          });\n\t\n\t\n\t\n\t      var linePaths = groups.selectAll('path.nv-line')\n\t          .data(function(d) { return [d.values] });\n\t      linePaths.enter().append('path')\n\t          .attr('class', 'nv-line')\n\t          .attr('d',\n\t            d3.svg.line()\n\t              .interpolate(interpolate)\n\t              .defined(defined)\n\t              .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n\t              .y(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n\t          );\n\t\n\t      linePaths\n\t          \n\t          .attr('d',\n\t            d3.svg.line()\n\t              .interpolate(interpolate)\n\t              .defined(defined)\n\t              .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n\t              .y(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n\t          );\n\t\n\t\n\t\n\t      //store old scales for use in transitions on update\n\t      x0 = x.copy();\n\t      y0 = y.copy();\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  chart.dispatch = scatter.dispatch;\n\t  chart.scatter = scatter;\n\t\n\t  d3.rebind(chart, scatter, 'id', 'interactive', 'size', 'xScale', 'yScale', 'zScale', 'xDomain', 'yDomain', 'xRange', 'yRange',\n\t    'sizeDomain', 'forceX', 'forceY', 'forceSize', 'clipVoronoi', 'useVoronoi', 'clipRadius', 'padData','highlightPoint','clearHighlights');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.x = function(_) {\n\t    if (!arguments.length) return getX;\n\t    getX = _;\n\t    scatter.x(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.y = function(_) {\n\t    if (!arguments.length) return getY;\n\t    getY = _;\n\t    scatter.y(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.clipEdge = function(_) {\n\t    if (!arguments.length) return clipEdge;\n\t    clipEdge = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    scatter.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.interpolate = function(_) {\n\t    if (!arguments.length) return interpolate;\n\t    interpolate = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.defined = function(_) {\n\t    if (!arguments.length) return defined;\n\t    defined = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.isArea = function(_) {\n\t    if (!arguments.length) return isArea;\n\t    isArea = d3.functor(_);\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.lineChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var lines = nv.models.line()\n\t    , xAxis = nv.models.axis()\n\t    , yAxis = nv.models.axis()\n\t    , legend = nv.models.legend()\n\t    , interactiveLayer = nv.interactiveGuideline()\n\t    ;\n\t\n\t  var margin = {top: 30, right: 20, bottom: 50, left: 60}\n\t    , color = nv.utils.defaultColor()\n\t    , width = null\n\t    , height = null\n\t    , showLegend = true\n\t    , showXAxis = true\n\t    , showYAxis = true\n\t    , rightAlignYAxis = false\n\t    , useInteractiveGuideline = false\n\t    , tooltips = true\n\t    , tooltip = function(key, x, y, e, graph) {\n\t        return '<h3>' + key + '</h3>' +\n\t               '<p>' +  y + ' at ' + x + '</p>'\n\t      }\n\t    , x\n\t    , y\n\t    , state = {}\n\t    , defaultState = null\n\t    , noData = 'No Data Available.'\n\t    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n\t    , transitionDuration = 0\n\t    ;\n\t\n\t  xAxis\n\t    .orient('bottom')\n\t    .tickPadding(7)\n\t    ;\n\t  yAxis\n\t    .orient((rightAlignYAxis) ? 'right' : 'left')\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t        x = xAxis.tickFormat()(lines.x()(e.point, e.pointIndex)),\n\t        y = yAxis.tickFormat()(lines.y()(e.point, e.pointIndex)),\n\t        content = tooltip(e.series.key, x, y, e, chart);\n\t\n\t    nv.tooltip.show([left, top], content, null, null, offsetElement);\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this),\n\t          that = this;\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t\n\t\n\t      chart.update = function() { container.call(chart) };\n\t      chart.container = this;\n\t\n\t      //set state.disabled\n\t      state.disabled = data.map(function(d) { return !!d.disabled });\n\t\n\t\n\t      if (!defaultState) {\n\t        var key;\n\t        defaultState = {};\n\t        for (key in state) {\n\t          if (state[key] instanceof Array)\n\t            defaultState[key] = state[key].slice(0);\n\t          else\n\t            defaultState[key] = state[key];\n\t        }\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t      // Display noData message if there's nothing to show.\n\t\n\t      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', margin.top + availableHeight / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x = lines.xScale();\n\t      y = lines.yScale();\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-lineChart').data([data]);\n\t      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-lineChart').append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append(\"rect\").style(\"opacity\",0);\n\t      gEnter.append('g').attr('class', 'nv-x nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-y nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-linesWrap');\n\t      gEnter.append('g').attr('class', 'nv-legendWrap');\n\t      gEnter.append('g').attr('class', 'nv-interactive');\n\t\n\t      g.select(\"rect\")\n\t        .attr(\"width\",availableWidth)\n\t        .attr(\"height\",(availableHeight > 0) ? availableHeight : 0);\n\t      //------------------------------------------------------------\n\t      // Legend\n\t\n\t      if (showLegend) {\n\t        legend.width(availableWidth);\n\t\n\t        g.select('.nv-legendWrap')\n\t            .datum(data)\n\t            .call(legend);\n\t\n\t        if ( margin.top != legend.height()) {\n\t          margin.top = legend.height();\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t        }\n\t\n\t        wrap.select('.nv-legendWrap')\n\t            .attr('transform', 'translate(0,' + (-margin.top) +')')\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      if (rightAlignYAxis) {\n\t          g.select(\".nv-y.nv-axis\")\n\t              .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t      // Main Chart Component(s)\n\t\n\t\n\t      //------------------------------------------------------------\n\t      //Set up interactive layer\n\t      if (useInteractiveGuideline) {\n\t        interactiveLayer\n\t           .width(availableWidth)\n\t           .height(availableHeight)\n\t           .margin({left:margin.left, top:margin.top})\n\t           .svgContainer(container)\n\t           .xScale(x);\n\t        wrap.select(\".nv-interactive\").call(interactiveLayer);\n\t      }\n\t\n\t\n\t      lines\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color(d, i);\n\t        }).filter(function(d,i) { return !data[i].disabled }));\n\t\n\t\n\t      var linesWrap = g.select('.nv-linesWrap')\n\t          .datum(data.filter(function(d) { return !d.disabled }))\n\t\n\t      linesWrap.call(lines);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Axes\n\t\n\t      if (showXAxis) {\n\t        xAxis\n\t          .scale(x)\n\t          .ticks( availableWidth / 100 )\n\t          .tickSize(-availableHeight, 0);\n\t\n\t        g.select('.nv-x.nv-axis')\n\t            .attr('transform', 'translate(0,' + y.range()[0] + ')');\n\t        g.select('.nv-x.nv-axis')\n\t            \n\t            .call(xAxis);\n\t      }\n\t\n\t      if (showYAxis) {\n\t        yAxis\n\t          .scale(y)\n\t          .ticks( availableHeight / 36 )\n\t          .tickSize( -availableWidth, 0);\n\t\n\t        g.select('.nv-y.nv-axis')\n\t            \n\t            .call(yAxis);\n\t      }\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t      legend.dispatch.on('stateChange', function(newState) {\n\t          state = newState;\n\t          dispatch.stateChange(state);\n\t          chart.update();\n\t      });\n\t\n\t      interactiveLayer.dispatch.on('elementMousemove', function(e) {\n\t          lines.clearHighlights();\n\t          var singlePoint, pointIndex, pointXLocation, allData = [];\n\t          data\n\t          .filter(function(series, i) {\n\t            series.seriesIndex = i;\n\t            return !series.disabled;\n\t          })\n\t          .forEach(function(series,i) {\n\t              pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n\t              lines.highlightPoint(i, pointIndex, true);\n\t              var point = series.values[pointIndex];\n\t              if (typeof point === 'undefined') return;\n\t              if (typeof singlePoint === 'undefined') singlePoint = point;\n\t              if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n\t              allData.push({\n\t                  key: series.key,\n\t                  value: chart.y()(point, pointIndex),\n\t                  color: color(series,series.seriesIndex)\n\t              });\n\t          });\n\t          //Highlight the tooltip entry based on which point the mouse is closest to.\n\t          if (allData.length > 2) {\n\t            var yValue = chart.yScale().invert(e.mouseY);\n\t            var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);\n\t            var threshold = 0.03 * domainExtent;\n\t            var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value}),yValue,threshold);\n\t            if (indexToHighlight !== null)\n\t              allData[indexToHighlight].highlight = true;\n\t          }\n\t\n\t          var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex));\n\t          interactiveLayer.tooltip\n\t                  .position({left: pointXLocation + margin.left, top: e.mouseY + margin.top})\n\t                  .chartContainer(that.parentNode)\n\t                  .enabled(tooltips)\n\t                  .valueFormatter(function(d,i) {\n\t                     return yAxis.tickFormat()(d);\n\t                  })\n\t                  .data(\n\t                      {\n\t                        value: xValue,\n\t                        series: allData\n\t                      }\n\t                  )();\n\t\n\t          interactiveLayer.renderGuideLine(pointXLocation);\n\t\n\t      });\n\t\n\t      interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n\t          dispatch.tooltipHide();\n\t          lines.clearHighlights();\n\t      });\n\t\n\t      dispatch.on('tooltipShow', function(e) {\n\t        if (tooltips) showTooltip(e, that.parentNode);\n\t      });\n\t\n\t\n\t      dispatch.on('changeState', function(e) {\n\t\n\t        if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {\n\t          data.forEach(function(series,i) {\n\t            series.disabled = e.disabled[i];\n\t          });\n\t\n\t          state.disabled = e.disabled;\n\t        }\n\t\n\t        chart.update();\n\t      });\n\t\n\t      //============================================================\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  lines.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  lines.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.dispatch = dispatch;\n\t  chart.lines = lines;\n\t  chart.legend = legend;\n\t  chart.xAxis = xAxis;\n\t  chart.yAxis = yAxis;\n\t  chart.interactiveLayer = interactiveLayer;\n\t\n\t  d3.rebind(chart, lines, 'defined', 'isArea', 'x', 'y', 'size', 'xScale', 'yScale', 'xDomain', 'yDomain', 'xRange', 'yRange'\n\t    , 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi', 'useVoronoi','id', 'interpolate');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    legend.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.showLegend = function(_) {\n\t    if (!arguments.length) return showLegend;\n\t    showLegend = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showXAxis = function(_) {\n\t    if (!arguments.length) return showXAxis;\n\t    showXAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showYAxis = function(_) {\n\t    if (!arguments.length) return showYAxis;\n\t    showYAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.rightAlignYAxis = function(_) {\n\t    if(!arguments.length) return rightAlignYAxis;\n\t    rightAlignYAxis = _;\n\t    yAxis.orient( (_) ? 'right' : 'left');\n\t    return chart;\n\t  };\n\t\n\t  chart.useInteractiveGuideline = function(_) {\n\t    if(!arguments.length) return useInteractiveGuideline;\n\t    useInteractiveGuideline = _;\n\t    if (_ === true) {\n\t       chart.interactive(false);\n\t       chart.useVoronoi(false);\n\t    }\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.state = function(_) {\n\t    if (!arguments.length) return state;\n\t    state = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.defaultState = function(_) {\n\t    if (!arguments.length) return defaultState;\n\t    defaultState = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.transitionDuration = function(_) {\n\t    if (!arguments.length) return transitionDuration;\n\t    transitionDuration = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.linePlusBarChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var lines = nv.models.line()\n\t    , bars = nv.models.historicalBar()\n\t    , xAxis = nv.models.axis()\n\t    , y1Axis = nv.models.axis()\n\t    , y2Axis = nv.models.axis()\n\t    , legend = nv.models.legend()\n\t    ;\n\t\n\t  var margin = {top: 30, right: 60, bottom: 50, left: 60}\n\t    , width = null\n\t    , height = null\n\t    , getX = function(d) { return d.x }\n\t    , getY = function(d) { return d.y }\n\t    , color = nv.utils.defaultColor()\n\t    , showLegend = true\n\t    , tooltips = true\n\t    , tooltip = function(key, x, y, e, graph) {\n\t        return '<h3>' + key + '</h3>' +\n\t               '<p>' +  y + ' at ' + x + '</p>';\n\t      }\n\t    , x\n\t    , y1\n\t    , y2\n\t    , state = {}\n\t    , defaultState = null\n\t    , noData = \"No Data Available.\"\n\t    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n\t    ;\n\t\n\t  bars\n\t    .padData(true)\n\t    ;\n\t  lines\n\t    .clipEdge(false)\n\t    .padData(true)\n\t    ;\n\t  xAxis\n\t    .orient('bottom')\n\t    .tickPadding(7)\n\t    .highlightZero(false)\n\t    ;\n\t  y1Axis\n\t    .orient('left')\n\t    ;\n\t  y2Axis\n\t    .orient('right')\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t      var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t          top = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t          x = xAxis.tickFormat()(lines.x()(e.point, e.pointIndex)),\n\t          y = (e.series.bar ? y1Axis : y2Axis).tickFormat()(lines.y()(e.point, e.pointIndex)),\n\t          content = tooltip(e.series.key, x, y, e, chart);\n\t\n\t      nv.tooltip.show([left, top], content, e.value < 0 ? 'n' : 's', null, offsetElement);\n\t    }\n\t    ;\n\t\n\t  //------------------------------------------------------------\n\t\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this),\n\t          that = this;\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t\n\t      chart.update = function() { container.call(chart); };\n\t      // chart.container = this;\n\t\n\t      //set state.disabled\n\t      state.disabled = data.map(function(d) { return !!d.disabled });\n\t\n\t      if (!defaultState) {\n\t        var key;\n\t        defaultState = {};\n\t        for (key in state) {\n\t          if (state[key] instanceof Array)\n\t            defaultState[key] = state[key].slice(0);\n\t          else\n\t            defaultState[key] = state[key];\n\t        }\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t      // Display No Data message if there's nothing to show.\n\t\n\t      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', margin.top + availableHeight / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      var dataBars = data.filter(function(d) { return !d.disabled && d.bar });\n\t      var dataLines = data.filter(function(d) { return !d.bar }); // removed the !d.disabled clause here to fix Issue #240\n\t\n\t      //x = xAxis.scale();\n\t       x = dataLines.filter(function(d) { return !d.disabled; }).length && dataLines.filter(function(d) { return !d.disabled; })[0].values.length ? lines.xScale() : bars.xScale();\n\t      //x = dataLines.filter(function(d) { return !d.disabled; }).length ? lines.xScale() : bars.xScale(); //old code before change above\n\t      y1 = bars.yScale();\n\t      y2 = lines.yScale();\n\t\n\t      //------------------------------------------------------------\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = d3.select(this).selectAll('g.nv-wrap.nv-linePlusBar').data([data]);\n\t      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-linePlusBar').append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-x nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-y1 nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-y2 nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-barsWrap');\n\t      gEnter.append('g').attr('class', 'nv-linesWrap');\n\t      gEnter.append('g').attr('class', 'nv-legendWrap');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Legend\n\t\n\t      if (showLegend) {\n\t        legend.width( availableWidth / 2 );\n\t\n\t        g.select('.nv-legendWrap')\n\t            .datum(data.map(function(series) {\n\t              series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n\t              series.key = series.originalKey + (series.bar ? ' (left axis)' : ' (right axis)');\n\t              return series;\n\t            }))\n\t          .call(legend);\n\t\n\t        if ( margin.top != legend.height()) {\n\t          margin.top = legend.height();\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t        }\n\t\n\t        g.select('.nv-legendWrap')\n\t            .attr('transform', 'translate(' + ( availableWidth / 2 ) + ',' + (-margin.top) +')');\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Main Chart Component(s)\n\t\n\t\n\t      lines\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color(d, i);\n\t        }).filter(function(d,i) { return !data[i].disabled && !data[i].bar }))\n\t\n\t      bars\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color(d, i);\n\t        }).filter(function(d,i) { return !data[i].disabled && data[i].bar }))\n\t\n\t\n\t\n\t      var barsWrap = g.select('.nv-barsWrap')\n\t          .datum(dataBars.length ? dataBars : [{values:[]}])\n\t\n\t      var linesWrap = g.select('.nv-linesWrap')\n\t          .datum(dataLines[0] && !dataLines[0].disabled ? dataLines : [{values:[]}] );\n\t          //.datum(!dataLines[0].disabled ? dataLines : [{values:dataLines[0].values.map(function(d) { return [d[0], null] }) }] );\n\t\n\t      d3.transition(barsWrap).call(bars);\n\t      d3.transition(linesWrap).call(lines);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Axes\n\t\n\t      xAxis\n\t        .scale(x)\n\t        .ticks( availableWidth / 100 )\n\t        .tickSize(-availableHeight, 0);\n\t\n\t      g.select('.nv-x.nv-axis')\n\t          .attr('transform', 'translate(0,' + y1.range()[0] + ')');\n\t      d3.transition(g.select('.nv-x.nv-axis'))\n\t          .call(xAxis);\n\t\n\t\n\t      y1Axis\n\t        .scale(y1)\n\t        .ticks( availableHeight / 36 )\n\t        .tickSize(-availableWidth, 0);\n\t\n\t      d3.transition(g.select('.nv-y1.nv-axis'))\n\t          .style('opacity', dataBars.length ? 1 : 0)\n\t          .call(y1Axis);\n\t\n\t\n\t      y2Axis\n\t        .scale(y2)\n\t        .ticks( availableHeight / 36 )\n\t        .tickSize(dataBars.length ? 0 : -availableWidth, 0); // Show the y2 rules only if y1 has none\n\t\n\t      g.select('.nv-y2.nv-axis')\n\t          .style('opacity', dataLines.length ? 1 : 0)\n\t          .attr('transform', 'translate(' + availableWidth + ',0)');\n\t          //.attr('transform', 'translate(' + x.range()[1] + ',0)');\n\t\n\t      d3.transition(g.select('.nv-y2.nv-axis'))\n\t          .call(y2Axis);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t      legend.dispatch.on('stateChange', function(newState) { \n\t        state = newState;\n\t        dispatch.stateChange(state);\n\t        chart.update();\n\t      });\n\t\n\t      dispatch.on('tooltipShow', function(e) {\n\t        if (tooltips) showTooltip(e, that.parentNode);\n\t      });\n\t\n\t\n\t      // Update chart from a state object passed to event handler\n\t      dispatch.on('changeState', function(e) {\n\t\n\t        if (typeof e.disabled !== 'undefined') {\n\t          data.forEach(function(series,i) {\n\t            series.disabled = e.disabled[i];\n\t          });\n\t\n\t          state.disabled = e.disabled;\n\t        }\n\t\n\t        chart.update();\n\t      });\n\t\n\t      //============================================================\n\t\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  lines.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  lines.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  bars.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  bars.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.dispatch = dispatch;\n\t  chart.legend = legend;\n\t  chart.lines = lines;\n\t  chart.bars = bars;\n\t  chart.xAxis = xAxis;\n\t  chart.y1Axis = y1Axis;\n\t  chart.y2Axis = y2Axis;\n\t\n\t  d3.rebind(chart, lines, 'defined', 'size', 'clipVoronoi', 'interpolate');\n\t  //TODO: consider rebinding x, y and some other stuff, and simply do soemthign lile bars.x(lines.x()), etc.\n\t  //d3.rebind(chart, lines, 'x', 'y', 'size', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi', 'id');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  chart.x = function(_) {\n\t    if (!arguments.length) return getX;\n\t    getX = _;\n\t    lines.x(_);\n\t    bars.x(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.y = function(_) {\n\t    if (!arguments.length) return getY;\n\t    getY = _;\n\t    lines.y(_);\n\t    bars.y(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    legend.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.showLegend = function(_) {\n\t    if (!arguments.length) return showLegend;\n\t    showLegend = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.state = function(_) {\n\t    if (!arguments.length) return state;\n\t    state = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.defaultState = function(_) {\n\t    if (!arguments.length) return defaultState;\n\t    defaultState = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\tnv.models.lineWithFocusChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var lines = nv.models.line()\n\t    , lines2 = nv.models.line()\n\t    , xAxis = nv.models.axis()\n\t    , yAxis = nv.models.axis()\n\t    , x2Axis = nv.models.axis()\n\t    , y2Axis = nv.models.axis()\n\t    , legend = nv.models.legend()\n\t    , brush = d3.svg.brush()\n\t    ;\n\t\n\t  var margin = {top: 30, right: 30, bottom: 30, left: 60}\n\t    , margin2 = {top: 0, right: 30, bottom: 20, left: 60}\n\t    , color = nv.utils.defaultColor()\n\t    , width = null\n\t    , height = null\n\t    , height2 = 100\n\t    , x\n\t    , y\n\t    , x2\n\t    , y2\n\t    , showLegend = true\n\t    , brushExtent = null\n\t    , tooltips = true\n\t    , tooltip = function(key, x, y, e, graph) {\n\t        return '<h3>' + key + '</h3>' +\n\t               '<p>' +  y + ' at ' + x + '</p>'\n\t      }\n\t    , noData = \"No Data Available.\"\n\t    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'brush')\n\t    , transitionDuration = 0\n\t    ;\n\t\n\t  lines\n\t    .clipEdge(true)\n\t    ;\n\t  lines2\n\t    .interactive(false)\n\t    ;\n\t  xAxis\n\t    .orient('bottom')\n\t    .tickPadding(5)\n\t    ;\n\t  yAxis\n\t    .orient('left')\n\t    ;\n\t  x2Axis\n\t    .orient('bottom')\n\t    .tickPadding(5)\n\t    ;\n\t  y2Axis\n\t    .orient('left')\n\t    ;\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t        x = xAxis.tickFormat()(lines.x()(e.point, e.pointIndex)),\n\t        y = yAxis.tickFormat()(lines.y()(e.point, e.pointIndex)),\n\t        content = tooltip(e.series.key, x, y, e, chart);\n\t\n\t    nv.tooltip.show([left, top], content, null, null, offsetElement);\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this),\n\t          that = this;\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight1 = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom - height2,\n\t          availableHeight2 = height2 - margin2.top - margin2.bottom;\n\t\n\t      chart.update = function() { container.call(chart) };\n\t      chart.container = this;\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Display No Data message if there's nothing to show.\n\t\n\t      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', margin.top + availableHeight1 / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x = lines.xScale();\n\t      y = lines.yScale();\n\t      x2 = lines2.xScale();\n\t      y2 = lines2.yScale();\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-lineWithFocusChart').data([data]);\n\t      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-lineWithFocusChart').append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-legendWrap');\n\t\n\t      var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n\t      focusEnter.append('g').attr('class', 'nv-x nv-axis');\n\t      focusEnter.append('g').attr('class', 'nv-y nv-axis');\n\t      focusEnter.append('g').attr('class', 'nv-linesWrap');\n\t\n\t      var contextEnter = gEnter.append('g').attr('class', 'nv-context');\n\t      contextEnter.append('g').attr('class', 'nv-x nv-axis');\n\t      contextEnter.append('g').attr('class', 'nv-y nv-axis');\n\t      contextEnter.append('g').attr('class', 'nv-linesWrap');\n\t      contextEnter.append('g').attr('class', 'nv-brushBackground');\n\t      contextEnter.append('g').attr('class', 'nv-x nv-brush');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Legend\n\t\n\t      if (showLegend) {\n\t        legend.width(availableWidth);\n\t\n\t        g.select('.nv-legendWrap')\n\t            .datum(data)\n\t            .call(legend);\n\t\n\t        if ( margin.top != legend.height()) {\n\t          margin.top = legend.height();\n\t          availableHeight1 = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom - height2;\n\t        }\n\t\n\t        g.select('.nv-legendWrap')\n\t            .attr('transform', 'translate(0,' + (-margin.top) +')')\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Main Chart Component(s)\n\t\n\t      lines\n\t        .width(availableWidth)\n\t        .height(availableHeight1)\n\t        .color(\n\t          data\n\t            .map(function(d,i) {\n\t              return d.color || color(d, i);\n\t            })\n\t            .filter(function(d,i) {\n\t              return !data[i].disabled;\n\t          })\n\t        );\n\t\n\t      lines2\n\t        .defined(lines.defined())\n\t        .width(availableWidth)\n\t        .height(availableHeight2)\n\t        .color(\n\t          data\n\t            .map(function(d,i) {\n\t              return d.color || color(d, i);\n\t            })\n\t            .filter(function(d,i) {\n\t              return !data[i].disabled;\n\t          })\n\t        );\n\t\n\t      g.select('.nv-context')\n\t          .attr('transform', 'translate(0,' + ( availableHeight1 + margin.bottom + margin2.top) + ')')\n\t\n\t      var contextLinesWrap = g.select('.nv-context .nv-linesWrap')\n\t          .datum(data.filter(function(d) { return !d.disabled }))\n\t\n\t      d3.transition(contextLinesWrap).call(lines2);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      /*\n\t      var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n\t          .datum(data.filter(function(d) { return !d.disabled }))\n\t\n\t      d3.transition(focusLinesWrap).call(lines);\n\t     */\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Main (Focus) Axes\n\t\n\t      xAxis\n\t        .scale(x)\n\t        .ticks( availableWidth / 100 )\n\t        .tickSize(-availableHeight1, 0);\n\t\n\t      yAxis\n\t        .scale(y)\n\t        .ticks( availableHeight1 / 36 )\n\t        .tickSize( -availableWidth, 0);\n\t\n\t      g.select('.nv-focus .nv-x.nv-axis')\n\t          .attr('transform', 'translate(0,' + availableHeight1 + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Brush\n\t\n\t      brush\n\t        .x(x2)\n\t        .on('brush', function() {\n\t            //When brushing, turn off transitions because chart needs to change immediately.\n\t            var oldTransition = chart.transitionDuration();\n\t            chart.transitionDuration(0); \n\t            onBrush();\n\t            chart.transitionDuration(oldTransition);\n\t        });\n\t\n\t      if (brushExtent) brush.extent(brushExtent);\n\t\n\t      var brushBG = g.select('.nv-brushBackground').selectAll('g')\n\t          .data([brushExtent || brush.extent()])\n\t\n\t      var brushBGenter = brushBG.enter()\n\t          .append('g');\n\t\n\t      brushBGenter.append('rect')\n\t          .attr('class', 'left')\n\t          .attr('x', 0)\n\t          .attr('y', 0)\n\t          .attr('height', availableHeight2);\n\t\n\t      brushBGenter.append('rect')\n\t          .attr('class', 'right')\n\t          .attr('x', 0)\n\t          .attr('y', 0)\n\t          .attr('height', availableHeight2);\n\t\n\t      var gBrush = g.select('.nv-x.nv-brush')\n\t          .call(brush);\n\t      gBrush.selectAll('rect')\n\t          //.attr('y', -5)\n\t          .attr('height', availableHeight2);\n\t      gBrush.selectAll('.resize').append('path').attr('d', resizePath);\n\t\n\t      onBrush();\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Secondary (Context) Axes\n\t\n\t      x2Axis\n\t        .scale(x2)\n\t        .ticks( availableWidth / 100 )\n\t        .tickSize(-availableHeight2, 0);\n\t\n\t      g.select('.nv-context .nv-x.nv-axis')\n\t          .attr('transform', 'translate(0,' + y2.range()[0] + ')');\n\t      d3.transition(g.select('.nv-context .nv-x.nv-axis'))\n\t          .call(x2Axis);\n\t\n\t\n\t      y2Axis\n\t        .scale(y2)\n\t        .ticks( availableHeight2 / 36 )\n\t        .tickSize( -availableWidth, 0);\n\t\n\t      d3.transition(g.select('.nv-context .nv-y.nv-axis'))\n\t          .call(y2Axis);\n\t\n\t      g.select('.nv-context .nv-x.nv-axis')\n\t          .attr('transform', 'translate(0,' + y2.range()[0] + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t      legend.dispatch.on('stateChange', function(newState) { \n\t        chart.update();\n\t      });\n\t\n\t      dispatch.on('tooltipShow', function(e) {\n\t        if (tooltips) showTooltip(e, that.parentNode);\n\t      });\n\t\n\t      //============================================================\n\t\n\t\n\t      //============================================================\n\t      // Functions\n\t      //------------------------------------------------------------\n\t\n\t      // Taken from crossfilter (http://square.github.com/crossfilter/)\n\t      function resizePath(d) {\n\t        var e = +(d == 'e'),\n\t            x = e ? 1 : -1,\n\t            y = availableHeight2 / 3;\n\t        return 'M' + (.5 * x) + ',' + y\n\t            + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n\t            + 'V' + (2 * y - 6)\n\t            + 'A6,6 0 0 ' + e + ' ' + (.5 * x) + ',' + (2 * y)\n\t            + 'Z'\n\t            + 'M' + (2.5 * x) + ',' + (y + 8)\n\t            + 'V' + (2 * y - 8)\n\t            + 'M' + (4.5 * x) + ',' + (y + 8)\n\t            + 'V' + (2 * y - 8);\n\t      }\n\t\n\t\n\t      function updateBrushBG() {\n\t        if (!brush.empty()) brush.extent(brushExtent);\n\t        brushBG\n\t            .data([brush.empty() ? x2.domain() : brushExtent])\n\t            .each(function(d,i) {\n\t              var leftWidth = x2(d[0]) - x.range()[0],\n\t                  rightWidth = x.range()[1] - x2(d[1]);\n\t              d3.select(this).select('.left')\n\t                .attr('width',  leftWidth < 0 ? 0 : leftWidth);\n\t\n\t              d3.select(this).select('.right')\n\t                .attr('x', x2(d[1]))\n\t                .attr('width', rightWidth < 0 ? 0 : rightWidth);\n\t            });\n\t      }\n\t\n\t\n\t      function onBrush() {\n\t        brushExtent = brush.empty() ? null : brush.extent();\n\t        var extent = brush.empty() ? x2.domain() : brush.extent();\n\t\n\t        //The brush extent cannot be less than one.  If it is, don't update the line chart.\n\t        if (Math.abs(extent[0] - extent[1]) <= 1) {\n\t          return;\n\t        }\n\t\n\t        dispatch.brush({extent: extent, brush: brush});\n\t\n\t\n\t        updateBrushBG();\n\t\n\t        // Update Main (Focus)\n\t        var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n\t            .datum(\n\t              data\n\t                .filter(function(d) { return !d.disabled })\n\t                .map(function(d,i) {\n\t                  return {\n\t                    key: d.key,\n\t                    values: d.values.filter(function(d,i) {\n\t                      return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n\t                    })\n\t                  }\n\t                })\n\t            );\n\t        focusLinesWrap.call(lines);\n\t\n\t\n\t        // Update Main (Focus) Axes\n\t        g.select('.nv-focus .nv-x.nv-axis')\n\t            .call(xAxis);\n\t        g.select('.nv-focus .nv-y.nv-axis')\n\t            .call(yAxis);\n\t      }\n\t\n\t      //============================================================\n\t\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  lines.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  lines.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.dispatch = dispatch;\n\t  chart.legend = legend;\n\t  chart.lines = lines;\n\t  chart.lines2 = lines2;\n\t  chart.xAxis = xAxis;\n\t  chart.yAxis = yAxis;\n\t  chart.x2Axis = x2Axis;\n\t  chart.y2Axis = y2Axis;\n\t\n\t  d3.rebind(chart, lines, 'defined', 'isArea', 'size', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi', 'id');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  chart.x = function(_) {\n\t    if (!arguments.length) return lines.x;\n\t    lines.x(_);\n\t    lines2.x(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.y = function(_) {\n\t    if (!arguments.length) return lines.y;\n\t    lines.y(_);\n\t    lines2.y(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.margin2 = function(_) {\n\t    if (!arguments.length) return margin2;\n\t    margin2 = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height2 = function(_) {\n\t    if (!arguments.length) return height2;\n\t    height2 = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color =nv.utils.getColor(_);\n\t    legend.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.showLegend = function(_) {\n\t    if (!arguments.length) return showLegend;\n\t    showLegend = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.interpolate = function(_) {\n\t    if (!arguments.length) return lines.interpolate();\n\t    lines.interpolate(_);\n\t    lines2.interpolate(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  // Chart has multiple similar Axes, to prevent code duplication, probably need to link all axis functions manually like below\n\t  chart.xTickFormat = function(_) {\n\t    if (!arguments.length) return xAxis.tickFormat();\n\t    xAxis.tickFormat(_);\n\t    x2Axis.tickFormat(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.yTickFormat = function(_) {\n\t    if (!arguments.length) return yAxis.tickFormat();\n\t    yAxis.tickFormat(_);\n\t    y2Axis.tickFormat(_);\n\t    return chart;\n\t  };\n\t  \n\t  chart.brushExtent = function(_) {\n\t    if (!arguments.length) return brushExtent;\n\t    brushExtent = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.transitionDuration = function(_) {\n\t    if (!arguments.length) return transitionDuration;\n\t    transitionDuration = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.linePlusBarWithFocusChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var lines = nv.models.line()\n\t    , lines2 = nv.models.line()\n\t    , bars = nv.models.historicalBar()\n\t    , bars2 = nv.models.historicalBar()\n\t    , xAxis = nv.models.axis()\n\t    , x2Axis = nv.models.axis()\n\t    , y1Axis = nv.models.axis()\n\t    , y2Axis = nv.models.axis()\n\t    , y3Axis = nv.models.axis()\n\t    , y4Axis = nv.models.axis()\n\t    , legend = nv.models.legend()\n\t    , brush = d3.svg.brush()\n\t    ;\n\t\n\t  var margin = {top: 30, right: 30, bottom: 30, left: 60}\n\t    , margin2 = {top: 0, right: 30, bottom: 20, left: 60}\n\t    , width = null\n\t    , height = null\n\t    , height2 = 100\n\t    , getX = function(d) { return d.x }\n\t    , getY = function(d) { return d.y }\n\t    , color = nv.utils.defaultColor()\n\t    , showLegend = true\n\t    , extent\n\t    , brushExtent = null\n\t    , tooltips = true\n\t    , tooltip = function(key, x, y, e, graph) {\n\t        return '<h3>' + key + '</h3>' +\n\t               '<p>' +  y + ' at ' + x + '</p>';\n\t      }\n\t    , x\n\t    , x2\n\t    , y1\n\t    , y2\n\t    , y3\n\t    , y4\n\t    , noData = \"No Data Available.\"\n\t    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'brush')\n\t    , transitionDuration = 0\n\t    ;\n\t\n\t  lines\n\t    .clipEdge(true)\n\t    ;\n\t  lines2\n\t    .interactive(false)\n\t    ;\n\t  xAxis\n\t    .orient('bottom')\n\t    .tickPadding(5)\n\t    ;\n\t  y1Axis\n\t    .orient('left')\n\t    ;\n\t  y2Axis\n\t    .orient('right')\n\t    ;\n\t  x2Axis\n\t    .orient('bottom')\n\t    .tickPadding(5)\n\t    ;\n\t  y3Axis\n\t    .orient('left')\n\t    ;\n\t  y4Axis\n\t    .orient('right')\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t    if (extent) {\n\t        e.pointIndex += Math.ceil(extent[0]);\n\t    }\n\t    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t        x = xAxis.tickFormat()(lines.x()(e.point, e.pointIndex)),\n\t        y = (e.series.bar ? y1Axis : y2Axis).tickFormat()(lines.y()(e.point, e.pointIndex)),\n\t        content = tooltip(e.series.key, x, y, e, chart);\n\t\n\t    nv.tooltip.show([left, top], content, e.value < 0 ? 'n' : 's', null, offsetElement);\n\t  };\n\t\n\t  //------------------------------------------------------------\n\t\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this),\n\t          that = this;\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight1 = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom - height2,\n\t          availableHeight2 = height2 - margin2.top - margin2.bottom;\n\t\n\t      chart.update = function() { container.call(chart); };\n\t      chart.container = this;\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Display No Data message if there's nothing to show.\n\t\n\t      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', margin.top + availableHeight1 / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      var dataBars = data.filter(function(d) { return !d.disabled && d.bar });\n\t      var dataLines = data.filter(function(d) { return !d.bar }); // removed the !d.disabled clause here to fix Issue #240\n\t\n\t      x = bars.xScale();\n\t      x2 = x2Axis.scale();\n\t      y1 = bars.yScale();\n\t      y2 = lines.yScale();\n\t      y3 = bars2.yScale();\n\t      y4 = lines2.yScale();\n\t\n\t      var series1 = data\n\t        .filter(function(d) { return !d.disabled && d.bar })\n\t        .map(function(d) {\n\t          return d.values.map(function(d,i) {\n\t            return { x: getX(d,i), y: getY(d,i) }\n\t          })\n\t        });\n\t\n\t      var series2 = data\n\t        .filter(function(d) { return !d.disabled && !d.bar })\n\t        .map(function(d) {\n\t          return d.values.map(function(d,i) {\n\t            return { x: getX(d,i), y: getY(d,i) }\n\t          })\n\t        });\n\t\n\t      x   .range([0, availableWidth]);\n\t      \n\t      x2  .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x } ))\n\t          .range([0, availableWidth]);\n\t\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-linePlusBar').data([data]);\n\t      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-linePlusBar').append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-legendWrap');\n\t      \n\t      var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n\t      focusEnter.append('g').attr('class', 'nv-x nv-axis');\n\t      focusEnter.append('g').attr('class', 'nv-y1 nv-axis');\n\t      focusEnter.append('g').attr('class', 'nv-y2 nv-axis');\n\t      focusEnter.append('g').attr('class', 'nv-barsWrap');\n\t      focusEnter.append('g').attr('class', 'nv-linesWrap');\n\t\n\t      var contextEnter = gEnter.append('g').attr('class', 'nv-context');\n\t      contextEnter.append('g').attr('class', 'nv-x nv-axis');\n\t      contextEnter.append('g').attr('class', 'nv-y1 nv-axis');\n\t      contextEnter.append('g').attr('class', 'nv-y2 nv-axis');\n\t      contextEnter.append('g').attr('class', 'nv-barsWrap');\n\t      contextEnter.append('g').attr('class', 'nv-linesWrap');\n\t      contextEnter.append('g').attr('class', 'nv-brushBackground');\n\t      contextEnter.append('g').attr('class', 'nv-x nv-brush');\n\t\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Legend\n\t\n\t      if (showLegend) {\n\t        legend.width( availableWidth / 2 );\n\t\n\t        g.select('.nv-legendWrap')\n\t            .datum(data.map(function(series) {\n\t              series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n\t              series.key = series.originalKey + (series.bar ? ' (left axis)' : ' (right axis)');\n\t              return series;\n\t            }))\n\t          .call(legend);\n\t\n\t        if ( margin.top != legend.height()) {\n\t          margin.top = legend.height();\n\t          availableHeight1 = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom - height2;\n\t        }\n\t\n\t        g.select('.nv-legendWrap')\n\t            .attr('transform', 'translate(' + ( availableWidth / 2 ) + ',' + (-margin.top) +')');\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Context Components\n\t\n\t      bars2\n\t        .width(availableWidth)\n\t        .height(availableHeight2)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color(d, i);\n\t        }).filter(function(d,i) { return !data[i].disabled && data[i].bar }));\n\t\n\t      lines2\n\t        .width(availableWidth)\n\t        .height(availableHeight2)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color(d, i);\n\t        }).filter(function(d,i) { return !data[i].disabled && !data[i].bar }));\n\t        \n\t      var bars2Wrap = g.select('.nv-context .nv-barsWrap')\n\t          .datum(dataBars.length ? dataBars : [{values:[]}]);\n\t\n\t      var lines2Wrap = g.select('.nv-context .nv-linesWrap')\n\t          .datum(!dataLines[0].disabled ? dataLines : [{values:[]}]);\n\t          \n\t      g.select('.nv-context')\n\t          .attr('transform', 'translate(0,' + ( availableHeight1 + margin.bottom + margin2.top) + ')')\n\t\n\t      bars2Wrap.call(bars2);\n\t      lines2Wrap.call(lines2);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Brush\n\t\n\t      brush\n\t        .x(x2)\n\t        .on('brush', onBrush);\n\t\n\t      if (brushExtent) brush.extent(brushExtent);\n\t\n\t      var brushBG = g.select('.nv-brushBackground').selectAll('g')\n\t          .data([brushExtent || brush.extent()])\n\t\n\t      var brushBGenter = brushBG.enter()\n\t          .append('g');\n\t\n\t      brushBGenter.append('rect')\n\t          .attr('class', 'left')\n\t          .attr('x', 0)\n\t          .attr('y', 0)\n\t          .attr('height', availableHeight2);\n\t\n\t      brushBGenter.append('rect')\n\t          .attr('class', 'right')\n\t          .attr('x', 0)\n\t          .attr('y', 0)\n\t          .attr('height', availableHeight2);\n\t\n\t      var gBrush = g.select('.nv-x.nv-brush')\n\t          .call(brush);\n\t      gBrush.selectAll('rect')\n\t          //.attr('y', -5)\n\t          .attr('height', availableHeight2);\n\t      gBrush.selectAll('.resize').append('path').attr('d', resizePath);\n\t\n\t      //------------------------------------------------------------\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Secondary (Context) Axes\n\t\n\t      x2Axis\n\t        .ticks( availableWidth / 100 )\n\t        .tickSize(-availableHeight2, 0);\n\t\n\t      g.select('.nv-context .nv-x.nv-axis')\n\t          .attr('transform', 'translate(0,' + y3.range()[0] + ')');\n\t      g.select('.nv-context .nv-x.nv-axis')\n\t          .call(x2Axis);\n\t\n\t\n\t      y3Axis\n\t        .scale(y3)\n\t        .ticks( availableHeight2 / 36 )\n\t        .tickSize( -availableWidth, 0);\n\t\n\t      g.select('.nv-context .nv-y1.nv-axis')\n\t          .style('opacity', dataBars.length ? 1 : 0)\n\t          .attr('transform', 'translate(0,' + x2.range()[0] + ')');\n\t          \n\t      g.select('.nv-context .nv-y1.nv-axis')\n\t          .call(y3Axis);\n\t          \n\t\n\t      y4Axis\n\t        .scale(y4)\n\t        .ticks( availableHeight2 / 36 )\n\t        .tickSize(dataBars.length ? 0 : -availableWidth, 0); // Show the y2 rules only if y1 has none\n\t\n\t      g.select('.nv-context .nv-y2.nv-axis')\n\t          .style('opacity', dataLines.length ? 1 : 0)\n\t          .attr('transform', 'translate(' + x2.range()[1] + ',0)');\n\t\n\t      g.select('.nv-context .nv-y2.nv-axis')\n\t          .call(y4Axis);\n\t          \n\t      //------------------------------------------------------------\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t      legend.dispatch.on('stateChange', function(newState) { \n\t        chart.update();\n\t      });\n\t\n\t      dispatch.on('tooltipShow', function(e) {\n\t        if (tooltips) showTooltip(e, that.parentNode);\n\t      });\n\t\n\t      //============================================================\n\t\n\t\n\t      //============================================================\n\t      // Functions\n\t      //------------------------------------------------------------\n\t\n\t      // Taken from crossfilter (http://square.github.com/crossfilter/)\n\t      function resizePath(d) {\n\t        var e = +(d == 'e'),\n\t            x = e ? 1 : -1,\n\t            y = availableHeight2 / 3;\n\t        return 'M' + (.5 * x) + ',' + y\n\t            + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n\t            + 'V' + (2 * y - 6)\n\t            + 'A6,6 0 0 ' + e + ' ' + (.5 * x) + ',' + (2 * y)\n\t            + 'Z'\n\t            + 'M' + (2.5 * x) + ',' + (y + 8)\n\t            + 'V' + (2 * y - 8)\n\t            + 'M' + (4.5 * x) + ',' + (y + 8)\n\t            + 'V' + (2 * y - 8);\n\t      }\n\t\n\t\n\t      function updateBrushBG() {\n\t        if (!brush.empty()) brush.extent(brushExtent);\n\t        brushBG\n\t            .data([brush.empty() ? x2.domain() : brushExtent])\n\t            .each(function(d,i) {\n\t              var leftWidth = x2(d[0]) - x2.range()[0],\n\t                  rightWidth = x2.range()[1] - x2(d[1]);\n\t              d3.select(this).select('.left')\n\t                .attr('width',  leftWidth < 0 ? 0 : leftWidth);\n\t\n\t              d3.select(this).select('.right')\n\t                .attr('x', x2(d[1]))\n\t                .attr('width', rightWidth < 0 ? 0 : rightWidth);\n\t            });\n\t      }\n\t\n\t\n\t      function onBrush() {\n\t        brushExtent = brush.empty() ? null : brush.extent();\n\t        extent = brush.empty() ? x2.domain() : brush.extent();\n\t\n\t\n\t        dispatch.brush({extent: extent, brush: brush});\n\t\n\t        updateBrushBG();\n\t\n\t\n\t        //------------------------------------------------------------\n\t        // Prepare Main (Focus) Bars and Lines\n\t        \n\t        bars\n\t        .width(availableWidth)\n\t        .height(availableHeight1)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color(d, i);\n\t        }).filter(function(d,i) { return !data[i].disabled && data[i].bar }));\n\t\n\t\n\t        lines\n\t        .width(availableWidth)\n\t        .height(availableHeight1)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color(d, i);\n\t        }).filter(function(d,i) { return !data[i].disabled && !data[i].bar }));\n\t\n\t        var focusBarsWrap = g.select('.nv-focus .nv-barsWrap')\n\t            .datum(!dataBars.length ? [{values:[]}] :\n\t              dataBars\n\t                .map(function(d,i) {\n\t                  return {\n\t                    key: d.key,\n\t                    values: d.values.filter(function(d,i) {\n\t                      return bars.x()(d,i) >= extent[0] && bars.x()(d,i) <= extent[1];\n\t                    })\n\t                  }\n\t                })\n\t            );\n\t        \n\t        var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n\t            .datum(dataLines[0].disabled ? [{values:[]}] :\n\t              dataLines\n\t                .map(function(d,i) {\n\t                  return {\n\t                    key: d.key,\n\t                    values: d.values.filter(function(d,i) {\n\t                      return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n\t                    })\n\t                  }\n\t                })\n\t             );\n\t                 \n\t        //------------------------------------------------------------\n\t        \n\t        \n\t        //------------------------------------------------------------\n\t        // Update Main (Focus) X Axis\n\t\n\t        if (dataBars.length) {\n\t            x = bars.xScale();\n\t        } else {\n\t            x = lines.xScale();\n\t        }\n\t        \n\t        xAxis\n\t        .scale(x)\n\t        .ticks( availableWidth / 100 )\n\t        .tickSize(-availableHeight1, 0);\n\t\n\t        xAxis.domain([Math.ceil(extent[0]), Math.floor(extent[1])]);\n\t        \n\t        g.select('.nv-x.nv-axis')\n\t          .call(xAxis);\n\t        //------------------------------------------------------------\n\t        \n\t        \n\t        //------------------------------------------------------------\n\t        // Update Main (Focus) Bars and Lines\n\t\n\t        focusBarsWrap.call(bars);\n\t        focusLinesWrap.call(lines);\n\t        \n\t        //------------------------------------------------------------\n\t        \n\t          \n\t        //------------------------------------------------------------\n\t        // Setup and Update Main (Focus) Y Axes\n\t        \n\t        g.select('.nv-focus .nv-x.nv-axis')\n\t          .attr('transform', 'translate(0,' + y1.range()[0] + ')');\n\t\n\t\n\t        y1Axis\n\t        .scale(y1)\n\t        .ticks( availableHeight1 / 36 )\n\t        .tickSize(-availableWidth, 0);\n\t\n\t        g.select('.nv-focus .nv-y1.nv-axis')\n\t          .style('opacity', dataBars.length ? 1 : 0);\n\t\n\t\n\t        y2Axis\n\t        .scale(y2)\n\t        .ticks( availableHeight1 / 36 )\n\t        .tickSize(dataBars.length ? 0 : -availableWidth, 0); // Show the y2 rules only if y1 has none\n\t\n\t        g.select('.nv-focus .nv-y2.nv-axis')\n\t          .style('opacity', dataLines.length ? 1 : 0)\n\t          .attr('transform', 'translate(' + x.range()[1] + ',0)');\n\t\n\t        g.select('.nv-focus .nv-y1.nv-axis')\n\t            .call(y1Axis);\n\t        g.select('.nv-focus .nv-y2.nv-axis')\n\t            .call(y2Axis);\n\t      }\n\t\n\t      //============================================================\n\t\n\t      onBrush();\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  lines.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  lines.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  bars.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  bars.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.dispatch = dispatch;\n\t  chart.legend = legend;\n\t  chart.lines = lines;\n\t  chart.lines2 = lines2;\n\t  chart.bars = bars;\n\t  chart.bars2 = bars2;\n\t  chart.xAxis = xAxis;\n\t  chart.x2Axis = x2Axis;\n\t  chart.y1Axis = y1Axis;\n\t  chart.y2Axis = y2Axis;\n\t  chart.y3Axis = y3Axis;\n\t  chart.y4Axis = y4Axis;\n\t\n\t  d3.rebind(chart, lines, 'defined', 'size', 'clipVoronoi', 'interpolate');\n\t  //TODO: consider rebinding x, y and some other stuff, and simply do soemthign lile bars.x(lines.x()), etc.\n\t  //d3.rebind(chart, lines, 'x', 'y', 'size', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi', 'id');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  chart.x = function(_) {\n\t    if (!arguments.length) return getX;\n\t    getX = _;\n\t    lines.x(_);\n\t    bars.x(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.y = function(_) {\n\t    if (!arguments.length) return getY;\n\t    getY = _;\n\t    lines.y(_);\n\t    bars.y(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    legend.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.showLegend = function(_) {\n\t    if (!arguments.length) return showLegend;\n\t    showLegend = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.brushExtent = function(_) {\n\t    if (!arguments.length) return brushExtent;\n\t    brushExtent = _;\n\t    return chart;\n\t  };\n\t\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.multiBar = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t    , width = 960\n\t    , height = 500\n\t    , x = d3.scale.ordinal()\n\t    , y = d3.scale.linear()\n\t    , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n\t    , getX = function(d) { return d.x }\n\t    , getY = function(d) { return d.y }\n\t    , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n\t    , clipEdge = true\n\t    , stacked = false\n\t    , stackOffset = 'zero' // options include 'silhouette', 'wiggle', 'expand', 'zero', or a custom function\n\t    , color = nv.utils.defaultColor()\n\t    , hideable = false\n\t    , barColor = null // adding the ability to set the color for each rather than the whole group\n\t    , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled\n\t    , delay = 1200\n\t    , xDomain\n\t    , yDomain\n\t    , xRange\n\t    , yRange\n\t    , groupSpacing = 0.1\n\t    , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout')\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var x0, y0 //used to store previous scales\n\t      ;\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var availableWidth = width - margin.left - margin.right,\n\t          availableHeight = height - margin.top - margin.bottom,\n\t          container = d3.select(this);\n\t\n\t      if(hideable && data.length) hideable = [{\n\t        values: data[0].values.map(function(d) {\n\t        return {\n\t          x: d.x,\n\t          y: 0,\n\t          series: d.series,\n\t          size: 0.01\n\t        };}\n\t      )}];\n\t\n\t      if (stacked)\n\t        data = d3.layout.stack()\n\t                 .offset(stackOffset)\n\t                 .values(function(d){ return d.values })\n\t                 .y(getY)\n\t                 (!data.length && hideable ? hideable : data);\n\t\n\t\n\t      //add series index to each data point for reference\n\t      data.forEach(function(series, i) {\n\t        series.values.forEach(function(point) {\n\t          point.series = i;\n\t        });\n\t      });\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // HACK for negative value stacking\n\t      if (stacked)\n\t        data[0].values.map(function(d,i) {\n\t          var posBase = 0, negBase = 0;\n\t          data.map(function(d) {\n\t            var f = d.values[i]\n\t            f.size = Math.abs(f.y);\n\t            if (f.y<0)  {\n\t              f.y1 = negBase;\n\t              negBase = negBase - f.size;\n\t            } else\n\t            {\n\t              f.y1 = f.size + posBase;\n\t              posBase = posBase + f.size;\n\t            }\n\t          });\n\t        });\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      // remap and flatten the data for use in calculating the scales' domains\n\t      var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n\t            data.map(function(d) {\n\t              return d.values.map(function(d,i) {\n\t                return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1 }\n\t              })\n\t            });\n\t\n\t      x   .domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n\t          .rangeBands(xRange || [0, availableWidth], groupSpacing);\n\t\n\t      //y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return d.y + (stacked ? d.y1 : 0) }).concat(forceY)))\n\t      y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return stacked ? (d.y > 0 ? d.y1 : d.y1 + d.y ) : d.y }).concat(forceY)))\n\t          .range(yRange || [availableHeight, 0]);\n\t\n\t      // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n\t      if (x.domain()[0] === x.domain()[1])\n\t        x.domain()[0] ?\n\t            x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n\t          : x.domain([-1,1]);\n\t\n\t      if (y.domain()[0] === y.domain()[1])\n\t        y.domain()[0] ?\n\t            y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n\t          : y.domain([-1,1]);\n\t\n\t\n\t      x0 = x0 || x;\n\t      y0 = y0 || y;\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-multibar').data([data]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibar');\n\t      var defsEnter = wrapEnter.append('defs');\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g')\n\t\n\t      gEnter.append('g').attr('class', 'nv-groups');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t\n\t      defsEnter.append('clipPath')\n\t          .attr('id', 'nv-edge-clip-' + id)\n\t        .append('rect');\n\t      wrap.select('#nv-edge-clip-' + id + ' rect')\n\t          .attr('width', availableWidth)\n\t          .attr('height', availableHeight);\n\t\n\t      g   .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\t\n\t\n\t\n\t      var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n\t          .data(function(d) { return d }, function(d,i) { return i });\n\t      groups.enter().append('g')\n\t          .style('stroke-opacity', 1e-6)\n\t          .style('fill-opacity', 1e-6);\n\t      groups.exit()\n\t        .selectAll('rect.nv-bar')\n\t          .attr('y', function(d) { return stacked ? y0(d.y0) : y0(0) })\n\t          .attr('height', 0)\n\t          .remove();\n\t      groups\n\t          .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n\t          .classed('hover', function(d) { return d.hover })\n\t          .style('fill', function(d,i){ return color(d, i) })\n\t          .style('stroke', function(d,i){ return color(d, i) });\n\t      groups\n\t          .style('stroke-opacity', 1)\n\t          .style('fill-opacity', .75);\n\t\n\t\n\t      var bars = groups.selectAll('rect.nv-bar')\n\t          .data(function(d) { return (hideable && !data.length) ? hideable.values : d.values });\n\t\n\t      bars.exit().remove();\n\t\n\t\n\t      var barsEnter = bars.enter().append('rect')\n\t          .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n\t          .attr('x', function(d,i,j) {\n\t              return stacked ? 0 : (j * x.rangeBand() / data.length )\n\t          })\n\t          .attr('y', function(d) { return y0(stacked ? d.y0 : 0) })\n\t          .attr('height', 0)\n\t          .attr('width', x.rangeBand() / (stacked ? 1 : data.length) )\n\t          .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })\n\t          ;\n\t      bars\n\t          .style('fill', function(d,i,j){ return color(d, j, i);  })\n\t          .style('stroke', function(d,i,j){ return color(d, j, i); })\n\t          .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n\t            d3.select(this).classed('hover', true);\n\t            dispatch.elementMouseover({\n\t              value: getY(d,i),\n\t              point: d,\n\t              series: data[d.series],\n\t              pos: [x(getX(d,i)) + (x.rangeBand() * (stacked ? data.length / 2 : d.series + .5) / data.length), y(getY(d,i) + (stacked ? d.y0 : 0))],  // TODO: Figure out why the value appears to be shifted\n\t              pointIndex: i,\n\t              seriesIndex: d.series,\n\t              e: d3.event\n\t            });\n\t          })\n\t          .on('mouseout', function(d,i) {\n\t            d3.select(this).classed('hover', false);\n\t            dispatch.elementMouseout({\n\t              value: getY(d,i),\n\t              point: d,\n\t              series: data[d.series],\n\t              pointIndex: i,\n\t              seriesIndex: d.series,\n\t              e: d3.event\n\t            });\n\t          })\n\t          .on('click', function(d,i) {\n\t            dispatch.elementClick({\n\t              value: getY(d,i),\n\t              point: d,\n\t              series: data[d.series],\n\t              pos: [x(getX(d,i)) + (x.rangeBand() * (stacked ? data.length / 2 : d.series + .5) / data.length), y(getY(d,i) + (stacked ? d.y0 : 0))],  // TODO: Figure out why the value appears to be shifted\n\t              pointIndex: i,\n\t              seriesIndex: d.series,\n\t              e: d3.event\n\t            });\n\t            d3.event.stopPropagation();\n\t          })\n\t          .on('dblclick', function(d,i) {\n\t            dispatch.elementDblClick({\n\t              value: getY(d,i),\n\t              point: d,\n\t              series: data[d.series],\n\t              pos: [x(getX(d,i)) + (x.rangeBand() * (stacked ? data.length / 2 : d.series + .5) / data.length), y(getY(d,i) + (stacked ? d.y0 : 0))],  // TODO: Figure out why the value appears to be shifted\n\t              pointIndex: i,\n\t              seriesIndex: d.series,\n\t              e: d3.event\n\t            });\n\t            d3.event.stopPropagation();\n\t          });\n\t      bars\n\t          .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n\t          \n\t          .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })\n\t\n\t      if (barColor) {\n\t        if (!disabled) disabled = data.map(function() { return true });\n\t        bars\n\t          .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })\n\t          .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });\n\t      }\n\t\n\t\n\t      if (stacked)\n\t          bars\n\t            .attr('y', function(d,i) {\n\t\n\t              return y((stacked ? d.y1 : 0));\n\t            })\n\t            .attr('height', function(d,i) {\n\t              return Math.max(Math.abs(y(d.y + (stacked ? d.y0 : 0)) - y((stacked ? d.y0 : 0))),1);\n\t            })\n\t            .attr('x', function(d,i) {\n\t                  return stacked ? 0 : (d.series * x.rangeBand() / data.length )\n\t            })\n\t            .attr('width', x.rangeBand() / (stacked ? 1 : data.length) );\n\t      else\n\t          bars\n\t            .attr('x', function(d,i) {\n\t              return d.series * x.rangeBand() / data.length\n\t            })\n\t            .attr('width', x.rangeBand() / data.length)\n\t            .attr('y', function(d,i) {\n\t                return getY(d,i) < 0 ?\n\t                        y(0) :\n\t                        y(0) - y(getY(d,i)) < 1 ?\n\t                          y(0) - 1 :\n\t                        y(getY(d,i)) || 0;\n\t            })\n\t            .attr('height', function(d,i) {\n\t                return Math.max(Math.abs(y(getY(d,i)) - y(0)),1) || 0;\n\t            });\n\t\n\t\n\t\n\t      //store old scales for use in transitions on update\n\t      x0 = x.copy();\n\t      y0 = y.copy();\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  chart.dispatch = dispatch;\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.x = function(_) {\n\t    if (!arguments.length) return getX;\n\t    getX = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.y = function(_) {\n\t    if (!arguments.length) return getY;\n\t    getY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xScale = function(_) {\n\t    if (!arguments.length) return x;\n\t    x = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yScale = function(_) {\n\t    if (!arguments.length) return y;\n\t    y = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xDomain = function(_) {\n\t    if (!arguments.length) return xDomain;\n\t    xDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yDomain = function(_) {\n\t    if (!arguments.length) return yDomain;\n\t    yDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xRange = function(_) {\n\t    if (!arguments.length) return xRange;\n\t    xRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yRange = function(_) {\n\t    if (!arguments.length) return yRange;\n\t    yRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.forceY = function(_) {\n\t    if (!arguments.length) return forceY;\n\t    forceY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.stacked = function(_) {\n\t    if (!arguments.length) return stacked;\n\t    stacked = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.stackOffset = function(_) {\n\t    if (!arguments.length) return stackOffset;\n\t    stackOffset = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.clipEdge = function(_) {\n\t    if (!arguments.length) return clipEdge;\n\t    clipEdge = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.barColor = function(_) {\n\t    if (!arguments.length) return barColor;\n\t    barColor = nv.utils.getColor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.disabled = function(_) {\n\t    if (!arguments.length) return disabled;\n\t    disabled = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.id = function(_) {\n\t    if (!arguments.length) return id;\n\t    id = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.hideable = function(_) {\n\t    if (!arguments.length) return hideable;\n\t    hideable = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.delay = function(_) {\n\t    if (!arguments.length) return delay;\n\t    delay = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.groupSpacing = function(_) {\n\t    if (!arguments.length) return groupSpacing;\n\t    groupSpacing = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.multiBarChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var multibar = nv.models.multiBar()\n\t    , xAxis = nv.models.axis()\n\t    , yAxis = nv.models.axis()\n\t    , legend = nv.models.legend()\n\t    , controls = nv.models.legend()\n\t    ;\n\t\n\t  var margin = {top: 30, right: 20, bottom: 50, left: 60}\n\t    , width = null\n\t    , height = null\n\t    , color = nv.utils.defaultColor()\n\t    , showControls = true\n\t    , showLegend = true\n\t    , showXAxis = true\n\t    , showYAxis = true\n\t    , rightAlignYAxis = false\n\t    , reduceXTicks = true // if false a tick will show for every data point\n\t    , staggerLabels = false\n\t    , rotateLabels = 0\n\t    , tooltips = true\n\t    , tooltip = function(key, x, y, e, graph) {\n\t        return '<h3>' + key + '</h3>' +\n\t               '<p>' +  y + ' on ' + x + '</p>'\n\t      }\n\t    , x //can be accessed via chart.xScale()\n\t    , y //can be accessed via chart.yScale()\n\t    , state = { stacked: false }\n\t    , defaultState = null\n\t    , noData = \"No Data Available.\"\n\t    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n\t    , controlWidth = function() { return showControls ? 180 : 0 }\n\t    , transitionDuration = 0\n\t    ;\n\t\n\t  multibar\n\t    .stacked(false)\n\t    ;\n\t  xAxis\n\t    .orient('bottom')\n\t    .tickPadding(7)\n\t    .highlightZero(true)\n\t    .showMaxMin(false)\n\t    .tickFormat(function(d) { return d })\n\t    ;\n\t  yAxis\n\t    .orient((rightAlignYAxis) ? 'right' : 'left')\n\t    .tickFormat(d3.format(',.1f'))\n\t    ;\n\t\n\t  controls.updateState(false);\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t        x = xAxis.tickFormat()(multibar.x()(e.point, e.pointIndex)),\n\t        y = yAxis.tickFormat()(multibar.y()(e.point, e.pointIndex)),\n\t        content = tooltip(e.series.key, x, y, e, chart);\n\t\n\t    nv.tooltip.show([left, top], content, e.value < 0 ? 'n' : 's', null, offsetElement);\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this),\n\t          that = this;\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t\n\t      chart.update = function() { container.call(chart) };\n\t      chart.container = this;\n\t\n\t      //set state.disabled\n\t      state.disabled = data.map(function(d) { return !!d.disabled });\n\t\n\t      if (!defaultState) {\n\t        var key;\n\t        defaultState = {};\n\t        for (key in state) {\n\t          if (state[key] instanceof Array)\n\t            defaultState[key] = state[key].slice(0);\n\t          else\n\t            defaultState[key] = state[key];\n\t        }\n\t      }\n\t      //------------------------------------------------------------\n\t      // Display noData message if there's nothing to show.\n\t\n\t      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', margin.top + availableHeight / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x = multibar.xScale();\n\t      y = multibar.yScale();\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-multiBarWithLegend').data([data]);\n\t      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarWithLegend').append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-x nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-y nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-barsWrap');\n\t      gEnter.append('g').attr('class', 'nv-legendWrap');\n\t      gEnter.append('g').attr('class', 'nv-controlsWrap');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Legend\n\t\n\t      if (showLegend) {\n\t        legend.width(availableWidth - controlWidth());\n\t\n\t        if (multibar.barColor())\n\t          data.forEach(function(series,i) {\n\t            series.color = d3.rgb('#ccc').darker(i * 1.5).toString();\n\t          })\n\t\n\t        g.select('.nv-legendWrap')\n\t            .datum(data)\n\t            .call(legend);\n\t\n\t        if ( margin.top != legend.height()) {\n\t          margin.top = legend.height();\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t        }\n\t\n\t        g.select('.nv-legendWrap')\n\t            .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Controls\n\t\n\t      if (showControls) {\n\t        var controlsData = [\n\t          { key: 'Grouped', disabled: multibar.stacked() },\n\t          { key: 'Stacked', disabled: !multibar.stacked() }\n\t        ];\n\t\n\t        controls.width(controlWidth()).color(['#444', '#444', '#444']);\n\t        g.select('.nv-controlsWrap')\n\t            .datum(controlsData)\n\t            .attr('transform', 'translate(0,' + (-margin.top) +')')\n\t            .call(controls);\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      if (rightAlignYAxis) {\n\t          g.select(\".nv-y.nv-axis\")\n\t              .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t      // Main Chart Component(s)\n\t\n\t      multibar\n\t        .disabled(data.map(function(series) { return series.disabled }))\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color(d, i);\n\t        }).filter(function(d,i) { return !data[i].disabled }))\n\t\n\t\n\t      var barsWrap = g.select('.nv-barsWrap')\n\t          .datum(data.filter(function(d) { return !d.disabled }))\n\t\n\t      barsWrap.call(multibar);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Axes\n\t\n\t      if (showXAxis) {\n\t          xAxis\n\t            .scale(x)\n\t            .ticks( availableWidth / 100 )\n\t            .tickSize(-availableHeight, 0);\n\t\n\t          g.select('.nv-x.nv-axis')\n\t              .attr('transform', 'translate(0,' + y.range()[0] + ')');\n\t          g.select('.nv-x.nv-axis')\n\t              .call(xAxis);\n\t\n\t          var xTicks = g.select('.nv-x.nv-axis > g').selectAll('g');\n\t\n\t          xTicks\n\t              .selectAll('line, text')\n\t              .style('opacity', 1)\n\t\n\t          if (staggerLabels) {\n\t              var getTranslate = function(x,y) {\n\t                  return \"translate(\" + x + \",\" + y + \")\";\n\t              };\n\t\n\t              var staggerUp = 5, staggerDown = 17;  //pixels to stagger by\n\t              // Issue #140\n\t              xTicks\n\t                .selectAll(\"text\")\n\t                .attr('transform', function(d,i,j) { \n\t                    return  getTranslate(0, (j % 2 == 0 ? staggerUp : staggerDown));\n\t                  });\n\t\n\t              var totalInBetweenTicks = d3.selectAll(\".nv-x.nv-axis .nv-wrap g g text\")[0].length;\n\t              g.selectAll(\".nv-x.nv-axis .nv-axisMaxMin text\")\n\t                .attr(\"transform\", function(d,i) {\n\t                    return getTranslate(0, (i === 0 || totalInBetweenTicks % 2 !== 0) ? staggerDown : staggerUp);\n\t                });\n\t          }\n\t\n\t          if (reduceXTicks)\n\t            xTicks\n\t              .filter(function(d,i) {\n\t                  return i % Math.ceil(data[0].values.length / (availableWidth / 100)) !== 0;\n\t                })\n\t              .selectAll('text, line')\n\t              .style('opacity', 0);\n\t\n\t          if(rotateLabels)\n\t            xTicks\n\t              .selectAll('.tick text')\n\t              .attr('transform', 'rotate(' + rotateLabels + ' 0,0)')\n\t              .style('text-anchor', rotateLabels > 0 ? 'start' : 'end');\n\t          \n\t          g.select('.nv-x.nv-axis').selectAll('g.nv-axisMaxMin text')\n\t              .style('opacity', 1);\n\t      }\n\t\n\t\n\t      if (showYAxis) {      \n\t          yAxis\n\t            .scale(y)\n\t            .ticks( availableHeight / 36 )\n\t            .tickSize( -availableWidth, 0);\n\t\n\t          g.select('.nv-y.nv-axis')\n\t              .call(yAxis);\n\t      }\n\t\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t      legend.dispatch.on('stateChange', function(newState) { \n\t        state = newState;\n\t        dispatch.stateChange(state);\n\t        chart.update();\n\t      });\n\t\n\t      controls.dispatch.on('legendClick', function(d,i) {\n\t        if (!d.disabled) return;\n\t        controlsData = controlsData.map(function(s) {\n\t          s.disabled = true;\n\t          return s;\n\t        });\n\t        d.disabled = false;\n\t\n\t        switch (d.key) {\n\t          case 'Grouped':\n\t            multibar.stacked(false);\n\t            break;\n\t          case 'Stacked':\n\t            multibar.stacked(true);\n\t            break;\n\t        }\n\t\n\t        state.stacked = multibar.stacked();\n\t        dispatch.stateChange(state);\n\t\n\t        chart.update();\n\t      });\n\t\n\t      dispatch.on('tooltipShow', function(e) {\n\t        if (tooltips) showTooltip(e, that.parentNode)\n\t      });\n\t\n\t      // Update chart from a state object passed to event handler\n\t      dispatch.on('changeState', function(e) {\n\t\n\t        if (typeof e.disabled !== 'undefined') {\n\t          data.forEach(function(series,i) {\n\t            series.disabled = e.disabled[i];\n\t          });\n\t\n\t          state.disabled = e.disabled;\n\t        }\n\t\n\t        if (typeof e.stacked !== 'undefined') {\n\t          multibar.stacked(e.stacked);\n\t          state.stacked = e.stacked;\n\t        }\n\t\n\t        chart.update();\n\t      });\n\t\n\t      //============================================================\n\t\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  multibar.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  multibar.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.dispatch = dispatch;\n\t  chart.multibar = multibar;\n\t  chart.legend = legend;\n\t  chart.xAxis = xAxis;\n\t  chart.yAxis = yAxis;\n\t\n\t  d3.rebind(chart, multibar, 'x', 'y', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'clipEdge',\n\t   'id', 'stacked', 'stackOffset', 'delay', 'barColor','groupSpacing');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    legend.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.showControls = function(_) {\n\t    if (!arguments.length) return showControls;\n\t    showControls = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showLegend = function(_) {\n\t    if (!arguments.length) return showLegend;\n\t    showLegend = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showXAxis = function(_) {\n\t    if (!arguments.length) return showXAxis;\n\t    showXAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showYAxis = function(_) {\n\t    if (!arguments.length) return showYAxis;\n\t    showYAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.rightAlignYAxis = function(_) {\n\t    if(!arguments.length) return rightAlignYAxis;\n\t    rightAlignYAxis = _;\n\t    yAxis.orient( (_) ? 'right' : 'left');\n\t    return chart;\n\t  };\n\t\n\t  chart.reduceXTicks= function(_) {\n\t    if (!arguments.length) return reduceXTicks;\n\t    reduceXTicks = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.rotateLabels = function(_) {\n\t    if (!arguments.length) return rotateLabels;\n\t    rotateLabels = _;\n\t    return chart;\n\t  }\n\t\n\t  chart.staggerLabels = function(_) {\n\t    if (!arguments.length) return staggerLabels;\n\t    staggerLabels = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltip = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.state = function(_) {\n\t    if (!arguments.length) return state;\n\t    state = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.defaultState = function(_) {\n\t    if (!arguments.length) return defaultState;\n\t    defaultState = _;\n\t    return chart;\n\t  };\n\t  \n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.transitionDuration = function(_) {\n\t    if (!arguments.length) return transitionDuration;\n\t    transitionDuration = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.multiBarHorizontal = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t    , width = 960\n\t    , height = 500\n\t    , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n\t    , x = d3.scale.ordinal()\n\t    , y = d3.scale.linear()\n\t    , getX = function(d) { return d.x }\n\t    , getY = function(d) { return d.y }\n\t    , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n\t    , color = nv.utils.defaultColor()\n\t    , barColor = null // adding the ability to set the color for each rather than the whole group\n\t    , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled\n\t    , stacked = false\n\t    , showValues = false\n\t    , showBarLabels = false\n\t    , valuePadding = 60\n\t    , valueFormat = d3.format(',.2f')\n\t    , delay = 1200\n\t    , xDomain\n\t    , yDomain\n\t    , xRange\n\t    , yRange\n\t    , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout')\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var x0, y0 //used to store previous scales\n\t      ;\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var availableWidth = width - margin.left - margin.right,\n\t          availableHeight = height - margin.top - margin.bottom,\n\t          container = d3.select(this);\n\t\n\t\n\t      if (stacked)\n\t        data = d3.layout.stack()\n\t                 .offset('zero')\n\t                 .values(function(d){ return d.values })\n\t                 .y(getY)\n\t                 (data);\n\t\n\t\n\t      //add series index to each data point for reference\n\t      data.forEach(function(series, i) {\n\t        series.values.forEach(function(point) {\n\t          point.series = i;\n\t        });\n\t      });\n\t\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // HACK for negative value stacking\n\t      if (stacked)\n\t        data[0].values.map(function(d,i) {\n\t          var posBase = 0, negBase = 0;\n\t          data.map(function(d) {\n\t            var f = d.values[i]\n\t            f.size = Math.abs(f.y);\n\t            if (f.y<0)  {\n\t              f.y1 = negBase - f.size;\n\t              negBase = negBase - f.size;\n\t            } else\n\t            {\n\t              f.y1 = posBase;\n\t              posBase = posBase + f.size;\n\t            }\n\t          });\n\t        });\n\t\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      // remap and flatten the data for use in calculating the scales' domains\n\t      var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n\t            data.map(function(d) {\n\t              return d.values.map(function(d,i) {\n\t                return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1 }\n\t              })\n\t            });\n\t\n\t      x   .domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n\t          .rangeBands(xRange || [0, availableHeight], .1);\n\t\n\t      //y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return d.y + (stacked ? d.y0 : 0) }).concat(forceY)))\n\t      y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return stacked ? (d.y > 0 ? d.y1 + d.y : d.y1 ) : d.y }).concat(forceY)))\n\t\n\t      if (showValues && !stacked)\n\t        y.range(yRange || [(y.domain()[0] < 0 ? valuePadding : 0), availableWidth - (y.domain()[1] > 0 ? valuePadding : 0) ]);\n\t      else\n\t        y.range(yRange || [0, availableWidth]);\n\t\n\t      x0 = x0 || x;\n\t      y0 = y0 || d3.scale.linear().domain(y.domain()).range([y(0),y(0)]);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = d3.select(this).selectAll('g.nv-wrap.nv-multibarHorizontal').data([data]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibarHorizontal');\n\t      var defsEnter = wrapEnter.append('defs');\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-groups');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t\n\t      var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n\t          .data(function(d) { return d }, function(d,i) { return i });\n\t      groups.enter().append('g')\n\t          .style('stroke-opacity', 1e-6)\n\t          .style('fill-opacity', 1e-6);\n\t      groups.exit()\n\t          .style('stroke-opacity', 1e-6)\n\t          .style('fill-opacity', 1e-6)\n\t          .remove();\n\t      groups\n\t          .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n\t          .classed('hover', function(d) { return d.hover })\n\t          .style('fill', function(d,i){ return color(d, i) })\n\t          .style('stroke', function(d,i){ return color(d, i) });\n\t      groups\n\t          .style('stroke-opacity', 1)\n\t          .style('fill-opacity', .75);\n\t\n\t\n\t      var bars = groups.selectAll('g.nv-bar')\n\t          .data(function(d) { return d.values });\n\t\n\t      bars.exit().remove();\n\t\n\t\n\t      var barsEnter = bars.enter().append('g')\n\t          .attr('transform', function(d,i,j) {\n\t              return 'translate(' + y0(stacked ? d.y0 : 0) + ',' + (stacked ? 0 : (j * x.rangeBand() / data.length ) + x(getX(d,i))) + ')'\n\t          });\n\t\n\t      barsEnter.append('rect')\n\t          .attr('width', 0)\n\t          .attr('height', x.rangeBand() / (stacked ? 1 : data.length) )\n\t\n\t      bars\n\t          .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n\t            d3.select(this).classed('hover', true);\n\t            dispatch.elementMouseover({\n\t              value: getY(d,i),\n\t              point: d,\n\t              series: data[d.series],\n\t              pos: [ y(getY(d,i) + (stacked ? d.y0 : 0)), x(getX(d,i)) + (x.rangeBand() * (stacked ? data.length / 2 : d.series + .5) / data.length) ],\n\t              pointIndex: i,\n\t              seriesIndex: d.series,\n\t              e: d3.event\n\t            });\n\t          })\n\t          .on('mouseout', function(d,i) {\n\t            d3.select(this).classed('hover', false);\n\t            dispatch.elementMouseout({\n\t              value: getY(d,i),\n\t              point: d,\n\t              series: data[d.series],\n\t              pointIndex: i,\n\t              seriesIndex: d.series,\n\t              e: d3.event\n\t            });\n\t          })\n\t          .on('click', function(d,i) {\n\t            dispatch.elementClick({\n\t              value: getY(d,i),\n\t              point: d,\n\t              series: data[d.series],\n\t              pos: [x(getX(d,i)) + (x.rangeBand() * (stacked ? data.length / 2 : d.series + .5) / data.length), y(getY(d,i) + (stacked ? d.y0 : 0))],  // TODO: Figure out why the value appears to be shifted\n\t              pointIndex: i,\n\t              seriesIndex: d.series,\n\t              e: d3.event\n\t            });\n\t            d3.event.stopPropagation();\n\t          })\n\t          .on('dblclick', function(d,i) {\n\t            dispatch.elementDblClick({\n\t              value: getY(d,i),\n\t              point: d,\n\t              series: data[d.series],\n\t              pos: [x(getX(d,i)) + (x.rangeBand() * (stacked ? data.length / 2 : d.series + .5) / data.length), y(getY(d,i) + (stacked ? d.y0 : 0))],  // TODO: Figure out why the value appears to be shifted\n\t              pointIndex: i,\n\t              seriesIndex: d.series,\n\t              e: d3.event\n\t            });\n\t            d3.event.stopPropagation();\n\t          });\n\t\n\t\n\t      barsEnter.append('text');\n\t\n\t      if (showValues && !stacked) {\n\t        bars.select('text')\n\t            .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'end' : 'start' })\n\t            .attr('y', x.rangeBand() / (data.length * 2))\n\t            .attr('dy', '.32em')\n\t            .text(function(d,i) { return valueFormat(getY(d,i)) })\n\t        bars\n\t          .select('text')\n\t            .attr('x', function(d,i) { return getY(d,i) < 0 ? -4 : y(getY(d,i)) - y(0) + 4 })\n\t      } else {\n\t        bars.selectAll('text').text('');\n\t      }\n\t\n\t      if (showBarLabels && !stacked) {\n\t        barsEnter.append('text').classed('nv-bar-label',true);\n\t        bars.select('text.nv-bar-label')\n\t            .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'start' : 'end' })\n\t            .attr('y', x.rangeBand() / (data.length * 2))\n\t            .attr('dy', '.32em')\n\t            .text(function(d,i) { return getX(d,i) });\n\t        bars\n\t          .select('text.nv-bar-label')\n\t            .attr('x', function(d,i) { return getY(d,i) < 0 ? y(0) - y(getY(d,i)) + 4 : -4 });\n\t      }\n\t      else {\n\t        bars.selectAll('text.nv-bar-label').text('');\n\t      }\n\t\n\t      bars\n\t          .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n\t\n\t      if (barColor) {\n\t        if (!disabled) disabled = data.map(function() { return true });\n\t        bars\n\t          .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })\n\t          .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });\n\t      }\n\t\n\t      if (stacked)\n\t        bars\n\t            .attr('transform', function(d,i) {\n\t              return 'translate(' + y(d.y1) + ',' + x(getX(d,i)) + ')'\n\t            })\n\t          .select('rect')\n\t            .attr('width', function(d,i) {\n\t              return Math.abs(y(getY(d,i) + d.y0) - y(d.y0))\n\t            })\n\t            .attr('height', x.rangeBand() );\n\t      else\n\t        bars\n\t            .attr('transform', function(d,i) {\n\t              //TODO: stacked must be all positive or all negative, not both?\n\t              return 'translate(' +\n\t              (getY(d,i) < 0 ? y(getY(d,i)) : y(0))\n\t              + ',' +\n\t              (d.series * x.rangeBand() / data.length\n\t              +\n\t              x(getX(d,i)) )\n\t              + ')'\n\t            })\n\t          .select('rect')\n\t            .attr('height', x.rangeBand() / data.length )\n\t            .attr('width', function(d,i) {\n\t              return Math.max(Math.abs(y(getY(d,i)) - y(0)),1)\n\t            });\n\t\n\t\n\t      //store old scales for use in transitions on update\n\t      x0 = x.copy();\n\t      y0 = y.copy();\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  chart.dispatch = dispatch;\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.x = function(_) {\n\t    if (!arguments.length) return getX;\n\t    getX = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.y = function(_) {\n\t    if (!arguments.length) return getY;\n\t    getY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xScale = function(_) {\n\t    if (!arguments.length) return x;\n\t    x = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yScale = function(_) {\n\t    if (!arguments.length) return y;\n\t    y = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xDomain = function(_) {\n\t    if (!arguments.length) return xDomain;\n\t    xDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yDomain = function(_) {\n\t    if (!arguments.length) return yDomain;\n\t    yDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xRange = function(_) {\n\t    if (!arguments.length) return xRange;\n\t    xRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yRange = function(_) {\n\t    if (!arguments.length) return yRange;\n\t    yRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.forceY = function(_) {\n\t    if (!arguments.length) return forceY;\n\t    forceY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.stacked = function(_) {\n\t    if (!arguments.length) return stacked;\n\t    stacked = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.barColor = function(_) {\n\t    if (!arguments.length) return barColor;\n\t    barColor = nv.utils.getColor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.disabled = function(_) {\n\t    if (!arguments.length) return disabled;\n\t    disabled = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.id = function(_) {\n\t    if (!arguments.length) return id;\n\t    id = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.delay = function(_) {\n\t    if (!arguments.length) return delay;\n\t    delay = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showValues = function(_) {\n\t    if (!arguments.length) return showValues;\n\t    showValues = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showBarLabels = function(_) {\n\t    if (!arguments.length) return showBarLabels;\n\t    showBarLabels = _;\n\t    return chart;\n\t  };\n\t\n\t\n\t  chart.valueFormat= function(_) {\n\t    if (!arguments.length) return valueFormat;\n\t    valueFormat = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.valuePadding = function(_) {\n\t    if (!arguments.length) return valuePadding;\n\t    valuePadding = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.multiBarHorizontalChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var multibar = nv.models.multiBarHorizontal()\n\t    , xAxis = nv.models.axis()\n\t    , yAxis = nv.models.axis()\n\t    , legend = nv.models.legend().height(30)\n\t    , controls = nv.models.legend().height(30)\n\t    ;\n\t\n\t  var margin = {top: 30, right: 20, bottom: 50, left: 60}\n\t    , width = null\n\t    , height = null\n\t    , color = nv.utils.defaultColor()\n\t    , showControls = true\n\t    , showLegend = true\n\t    , showXAxis = true\n\t    , showYAxis = true\n\t    , stacked = false\n\t    , tooltips = true\n\t    , tooltip = function(key, x, y, e, graph) {\n\t        return '<h3>' + key + ' - ' + x + '</h3>' +\n\t               '<p>' +  y + '</p>'\n\t      }\n\t    , x //can be accessed via chart.xScale()\n\t    , y //can be accessed via chart.yScale()\n\t    , state = { stacked: stacked }\n\t    , defaultState = null\n\t    , noData = 'No Data Available.'\n\t    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n\t    , controlWidth = function() { return showControls ? 180 : 0 }\n\t    , transitionDuration = 0\n\t    ;\n\t\n\t  multibar\n\t    .stacked(stacked)\n\t    ;\n\t  xAxis\n\t    .orient('left')\n\t    .tickPadding(5)\n\t    .highlightZero(false)\n\t    .showMaxMin(false)\n\t    .tickFormat(function(d) { return d })\n\t    ;\n\t  yAxis\n\t    .orient('bottom')\n\t    .tickFormat(d3.format(',.1f'))\n\t    ;\n\t\n\t  controls.updateState(false);\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t        x = xAxis.tickFormat()(multibar.x()(e.point, e.pointIndex)),\n\t        y = yAxis.tickFormat()(multibar.y()(e.point, e.pointIndex)),\n\t        content = tooltip(e.series.key, x, y, e, chart);\n\t\n\t    nv.tooltip.show([left, top], content, e.value < 0 ? 'e' : 'w', null, offsetElement);\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this),\n\t          that = this;\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t\n\t      chart.update = function() { container.call(chart) };\n\t      chart.container = this;\n\t\n\t      //set state.disabled\n\t      state.disabled = data.map(function(d) { return !!d.disabled });\n\t\n\t      if (!defaultState) {\n\t        var key;\n\t        defaultState = {};\n\t        for (key in state) {\n\t          if (state[key] instanceof Array)\n\t            defaultState[key] = state[key].slice(0);\n\t          else\n\t            defaultState[key] = state[key];\n\t        }\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t      // Display No Data message if there's nothing to show.\n\t\n\t      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', margin.top + availableHeight / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x = multibar.xScale();\n\t      y = multibar.yScale();\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-multiBarHorizontalChart').data([data]);\n\t      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarHorizontalChart').append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-x nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-y nv-axis')\n\t            .append('g').attr('class', 'nv-zeroLine')\n\t            .append('line');\n\t      gEnter.append('g').attr('class', 'nv-barsWrap');\n\t      gEnter.append('g').attr('class', 'nv-legendWrap');\n\t      gEnter.append('g').attr('class', 'nv-controlsWrap');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Legend\n\t\n\t      if (showLegend) {\n\t        legend.width(availableWidth - controlWidth());\n\t\n\t        if (multibar.barColor())\n\t          data.forEach(function(series,i) {\n\t            series.color = d3.rgb('#ccc').darker(i * 1.5).toString();\n\t          })\n\t\n\t        g.select('.nv-legendWrap')\n\t            .datum(data)\n\t            .call(legend);\n\t\n\t        if ( margin.top != legend.height()) {\n\t          margin.top = legend.height();\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t        }\n\t\n\t        g.select('.nv-legendWrap')\n\t            .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Controls\n\t\n\t      if (showControls) {\n\t        var controlsData = [\n\t          { key: 'Grouped', disabled: multibar.stacked() },\n\t          { key: 'Stacked', disabled: !multibar.stacked() }\n\t        ];\n\t\n\t        controls.width(controlWidth()).color(['#444', '#444', '#444']);\n\t        g.select('.nv-controlsWrap')\n\t            .datum(controlsData)\n\t            .attr('transform', 'translate(0,' + (-margin.top) +')')\n\t            .call(controls);\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Main Chart Component(s)\n\t\n\t      multibar\n\t        .disabled(data.map(function(series) { return series.disabled }))\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color(d, i);\n\t        }).filter(function(d,i) { return !data[i].disabled }))\n\t\n\t\n\t      var barsWrap = g.select('.nv-barsWrap')\n\t          .datum(data.filter(function(d) { return !d.disabled }))\n\t\n\t      barsWrap.call(multibar);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Axes\n\t\n\t      if (showXAxis) {\n\t          xAxis\n\t            .scale(x)\n\t            .ticks( availableHeight / 24 )\n\t            .tickSize(-availableWidth, 0);\n\t\n\t          g.select('.nv-x.nv-axis')\n\t              .call(xAxis);\n\t\n\t          var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n\t\n\t          xTicks\n\t              .selectAll('line, text');\n\t      }\n\t\n\t      if (showYAxis) {\n\t          yAxis\n\t            .scale(y)\n\t            .ticks( availableWidth / 100 )\n\t            .tickSize( -availableHeight, 0);\n\t\n\t          g.select('.nv-y.nv-axis')\n\t              .attr('transform', 'translate(0,' + availableHeight + ')');\n\t          g.select('.nv-y.nv-axis')\n\t              .call(yAxis);\n\t      }\n\t\n\t      // Zero line\n\t      g.select(\".nv-zeroLine line\")\n\t        .attr(\"x1\", y(0))\n\t        .attr(\"x2\", y(0))\n\t        .attr(\"y1\", 0)\n\t        .attr(\"y2\", -availableHeight)\n\t        ;\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t      legend.dispatch.on('stateChange', function(newState) {\n\t        state = newState;\n\t        dispatch.stateChange(state);\n\t        chart.update();\n\t      });\n\t\n\t      controls.dispatch.on('legendClick', function(d,i) {\n\t        if (!d.disabled) return;\n\t        controlsData = controlsData.map(function(s) {\n\t          s.disabled = true;\n\t          return s;\n\t        });\n\t        d.disabled = false;\n\t\n\t        switch (d.key) {\n\t          case 'Grouped':\n\t            multibar.stacked(false);\n\t            break;\n\t          case 'Stacked':\n\t            multibar.stacked(true);\n\t            break;\n\t        }\n\t\n\t        state.stacked = multibar.stacked();\n\t        dispatch.stateChange(state);\n\t\n\t        chart.update();\n\t      });\n\t\n\t      dispatch.on('tooltipShow', function(e) {\n\t        if (tooltips) showTooltip(e, that.parentNode);\n\t      });\n\t\n\t      // Update chart from a state object passed to event handler\n\t      dispatch.on('changeState', function(e) {\n\t\n\t        if (typeof e.disabled !== 'undefined') {\n\t          data.forEach(function(series,i) {\n\t            series.disabled = e.disabled[i];\n\t          });\n\t\n\t          state.disabled = e.disabled;\n\t        }\n\t\n\t        if (typeof e.stacked !== 'undefined') {\n\t          multibar.stacked(e.stacked);\n\t          state.stacked = e.stacked;\n\t        }\n\t\n\t        chart.update();\n\t      });\n\t      //============================================================\n\t\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  multibar.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  multibar.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.dispatch = dispatch;\n\t  chart.multibar = multibar;\n\t  chart.legend = legend;\n\t  chart.xAxis = xAxis;\n\t  chart.yAxis = yAxis;\n\t\n\t  d3.rebind(chart, multibar, 'x', 'y', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY',\n\t    'clipEdge', 'id', 'delay', 'showValues','showBarLabels', 'valueFormat', 'stacked', 'barColor');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    legend.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.showControls = function(_) {\n\t    if (!arguments.length) return showControls;\n\t    showControls = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showLegend = function(_) {\n\t    if (!arguments.length) return showLegend;\n\t    showLegend = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showXAxis = function(_) {\n\t    if (!arguments.length) return showXAxis;\n\t    showXAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showYAxis = function(_) {\n\t    if (!arguments.length) return showYAxis;\n\t    showYAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltip = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.state = function(_) {\n\t    if (!arguments.length) return state;\n\t    state = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.defaultState = function(_) {\n\t    if (!arguments.length) return defaultState;\n\t    defaultState = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.transitionDuration = function(_) {\n\t    if (!arguments.length) return transitionDuration;\n\t    transitionDuration = _;\n\t    return chart;\n\t  };\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\tnv.models.multiChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var margin = {top: 30, right: 20, bottom: 50, left: 60},\n\t      color = d3.scale.category20().range(),\n\t      width = null, \n\t      height = null,\n\t      showLegend = true,\n\t      tooltips = true,\n\t      tooltip = function(key, x, y, e, graph) {\n\t        return '<h3>' + key + '</h3>' +\n\t               '<p>' +  y + ' at ' + x + '</p>'\n\t      },\n\t      x,\n\t      y,\n\t      yDomain1,\n\t      yDomain2\n\t      ; //can be accessed via chart.lines.[x/y]Scale()\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var x = d3.scale.linear(),\n\t      yScale1 = d3.scale.linear(),\n\t      yScale2 = d3.scale.linear(),\n\t\n\t      lines1 = nv.models.line().yScale(yScale1),\n\t      lines2 = nv.models.line().yScale(yScale2),\n\t\n\t      bars1 = nv.models.multiBar().stacked(false).yScale(yScale1),\n\t      bars2 = nv.models.multiBar().stacked(false).yScale(yScale2),\n\t\n\t      stack1 = nv.models.stackedArea().yScale(yScale1),\n\t      stack2 = nv.models.stackedArea().yScale(yScale2),\n\t\n\t      xAxis = nv.models.axis().scale(x).orient('bottom').tickPadding(5),\n\t      yAxis1 = nv.models.axis().scale(yScale1).orient('left'),\n\t      yAxis2 = nv.models.axis().scale(yScale2).orient('right'),\n\t\n\t      legend = nv.models.legend().height(30),\n\t      dispatch = d3.dispatch('tooltipShow', 'tooltipHide');\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t        x = xAxis.tickFormat()(lines1.x()(e.point, e.pointIndex)),\n\t        y = ((e.series.yAxis == 2) ? yAxis2 : yAxis1).tickFormat()(lines1.y()(e.point, e.pointIndex)),\n\t        content = tooltip(e.series.key, x, y, e, chart);\n\t\n\t    nv.tooltip.show([left, top], content, undefined, undefined, offsetElement.offsetParent);\n\t  };\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this),\n\t          that = this;\n\t\n\t      chart.update = function() { container.call(chart); };\n\t      chart.container = this;\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t\n\t      var dataLines1 = data.filter(function(d) {return !d.disabled && d.type == 'line' && d.yAxis == 1})\n\t      var dataLines2 = data.filter(function(d) {return !d.disabled && d.type == 'line' && d.yAxis == 2})\n\t      var dataBars1 = data.filter(function(d) {return !d.disabled && d.type == 'bar' && d.yAxis == 1})\n\t      var dataBars2 = data.filter(function(d) {return !d.disabled && d.type == 'bar' && d.yAxis == 2})\n\t      var dataStack1 = data.filter(function(d) {return !d.disabled && d.type == 'area' && d.yAxis == 1})\n\t      var dataStack2 = data.filter(function(d) {return !d.disabled && d.type == 'area' && d.yAxis == 2})\n\t\n\t      var series1 = data.filter(function(d) {return !d.disabled && d.yAxis == 1})\n\t            .map(function(d) {\n\t              return d.values.map(function(d,i) {\n\t                return { x: d.x, y: d.y }\n\t              })\n\t            })\n\t\n\t      var series2 = data.filter(function(d) {return !d.disabled && d.yAxis == 2})\n\t            .map(function(d) {\n\t              return d.values.map(function(d,i) {\n\t                return { x: d.x, y: d.y }\n\t              })\n\t            })\n\t\n\t      x   .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x } ))\n\t          .range([0, availableWidth]);\n\t\n\t      var wrap = container.selectAll('g.wrap.multiChart').data([data]);\n\t      var gEnter = wrap.enter().append('g').attr('class', 'wrap nvd3 multiChart').append('g');\n\t\n\t      gEnter.append('g').attr('class', 'x axis');\n\t      gEnter.append('g').attr('class', 'y1 axis');\n\t      gEnter.append('g').attr('class', 'y2 axis');\n\t      gEnter.append('g').attr('class', 'lines1Wrap');\n\t      gEnter.append('g').attr('class', 'lines2Wrap');\n\t      gEnter.append('g').attr('class', 'bars1Wrap');\n\t      gEnter.append('g').attr('class', 'bars2Wrap');\n\t      gEnter.append('g').attr('class', 'stack1Wrap');\n\t      gEnter.append('g').attr('class', 'stack2Wrap');\n\t      gEnter.append('g').attr('class', 'legendWrap');\n\t\n\t      var g = wrap.select('g');\n\t\n\t      if (showLegend) {\n\t        legend.width( availableWidth / 2 );\n\t\n\t        g.select('.legendWrap')\n\t            .datum(data.map(function(series) { \n\t              series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n\t              series.key = series.originalKey + (series.yAxis == 1 ? '' : ' (right axis)');\n\t              return series;\n\t            }))\n\t          .call(legend);\n\t\n\t        if ( margin.top != legend.height()) {\n\t          margin.top = legend.height();\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t        }\n\t\n\t        g.select('.legendWrap')\n\t            .attr('transform', 'translate(' + ( availableWidth / 2 ) + ',' + (-margin.top) +')');\n\t      }\n\t\n\t\n\t      lines1\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t        .interpolate(\"monotone\")\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color[i % color.length];\n\t        }).filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'line'}));\n\t\n\t      lines2\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t        .interpolate(\"monotone\")\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color[i % color.length];\n\t        }).filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'line'}));\n\t\n\t      bars1\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color[i % color.length];\n\t        }).filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'bar'}));\n\t\n\t      bars2\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color[i % color.length];\n\t        }).filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'bar'}));\n\t\n\t      stack1\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color[i % color.length];\n\t        }).filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'area'}));\n\t\n\t      stack2\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color[i % color.length];\n\t        }).filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'area'}));\n\t\n\t      g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t\n\t      var lines1Wrap = g.select('.lines1Wrap')\n\t          .datum(dataLines1)\n\t      var bars1Wrap = g.select('.bars1Wrap')\n\t          .datum(dataBars1)\n\t      var stack1Wrap = g.select('.stack1Wrap')\n\t          .datum(dataStack1)\n\t\n\t      var lines2Wrap = g.select('.lines2Wrap')\n\t          .datum(dataLines2)\n\t      var bars2Wrap = g.select('.bars2Wrap')\n\t          .datum(dataBars2)\n\t      var stack2Wrap = g.select('.stack2Wrap')\n\t          .datum(dataStack2)\n\t\n\t      var extraValue1 = dataStack1.length ? dataStack1.map(function(a){return a.values}).reduce(function(a,b){\n\t        return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})\n\t      }).concat([{x:0, y:0}]) : []\n\t      var extraValue2 = dataStack2.length ? dataStack2.map(function(a){return a.values}).reduce(function(a,b){\n\t        return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})\n\t      }).concat([{x:0, y:0}]) : []\n\t\n\t      yScale1 .domain(yDomain1 || d3.extent(d3.merge(series1).concat(extraValue1), function(d) { return d.y } ))\n\t              .range([0, availableHeight])\n\t\n\t      yScale2 .domain(yDomain2 || d3.extent(d3.merge(series2).concat(extraValue2), function(d) { return d.y } ))\n\t              .range([0, availableHeight])\n\t\n\t      lines1.yDomain(yScale1.domain())\n\t      bars1.yDomain(yScale1.domain())\n\t      stack1.yDomain(yScale1.domain())\n\t\n\t      lines2.yDomain(yScale2.domain())\n\t      bars2.yDomain(yScale2.domain())\n\t      stack2.yDomain(yScale2.domain())\n\t\n\t      if(dataStack1.length){d3.transition(stack1Wrap).call(stack1);}\n\t      if(dataStack2.length){d3.transition(stack2Wrap).call(stack2);}\n\t\n\t      if(dataBars1.length){d3.transition(bars1Wrap).call(bars1);}\n\t      if(dataBars2.length){d3.transition(bars2Wrap).call(bars2);}\n\t\n\t      if(dataLines1.length){d3.transition(lines1Wrap).call(lines1);}\n\t      if(dataLines2.length){d3.transition(lines2Wrap).call(lines2);}\n\t      \n\t\n\t\n\t      xAxis\n\t        .ticks( availableWidth / 100 )\n\t        .tickSize(-availableHeight, 0);\n\t\n\t      g.select('.x.axis')\n\t          .attr('transform', 'translate(0,' + availableHeight + ')');\n\t      d3.transition(g.select('.x.axis'))\n\t          .call(xAxis);\n\t\n\t      yAxis1\n\t        .ticks( availableHeight / 36 )\n\t        .tickSize( -availableWidth, 0);\n\t\n\t\n\t      d3.transition(g.select('.y1.axis'))\n\t          .call(yAxis1);\n\t\n\t      yAxis2\n\t        .ticks( availableHeight / 36 )\n\t        .tickSize( -availableWidth, 0);\n\t\n\t      d3.transition(g.select('.y2.axis'))\n\t          .call(yAxis2);\n\t\n\t      g.select('.y2.axis')\n\t          .style('opacity', series2.length ? 1 : 0)\n\t          .attr('transform', 'translate(' + x.range()[1] + ',0)');\n\t\n\t      legend.dispatch.on('stateChange', function(newState) { \n\t        chart.update();\n\t      });\n\t     \n\t      dispatch.on('tooltipShow', function(e) {\n\t        if (tooltips) showTooltip(e, that.parentNode);\n\t      });\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  lines1.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  lines1.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  lines2.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  lines2.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  bars1.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  bars1.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  bars2.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  bars2.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  stack1.dispatch.on('tooltipShow', function(e) {\n\t    //disable tooltips when value ~= 0\n\t    //// TODO: consider removing points from voronoi that have 0 value instead of this hack\n\t    if (!Math.round(stack1.y()(e.point) * 100)) {  // 100 will not be good for very small numbers... will have to think about making this valu dynamic, based on data range\n\t      setTimeout(function() { d3.selectAll('.point.hover').classed('hover', false) }, 0);\n\t      return false;\n\t    }\n\t\n\t    e.pos = [e.pos[0] + margin.left, e.pos[1] + margin.top],\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  stack1.dispatch.on('tooltipHide', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  stack2.dispatch.on('tooltipShow', function(e) {\n\t    //disable tooltips when value ~= 0\n\t    //// TODO: consider removing points from voronoi that have 0 value instead of this hack\n\t    if (!Math.round(stack2.y()(e.point) * 100)) {  // 100 will not be good for very small numbers... will have to think about making this valu dynamic, based on data range\n\t      setTimeout(function() { d3.selectAll('.point.hover').classed('hover', false) }, 0);\n\t      return false;\n\t    }\n\t\n\t    e.pos = [e.pos[0] + margin.left, e.pos[1] + margin.top],\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  stack2.dispatch.on('tooltipHide', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t    lines1.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  lines1.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  lines2.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  lines2.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t\n\t\n\t  //============================================================\n\t  // Global getters and setters\n\t  //------------------------------------------------------------\n\t\n\t  chart.dispatch = dispatch;\n\t  chart.lines1 = lines1;\n\t  chart.lines2 = lines2;\n\t  chart.bars1 = bars1;\n\t  chart.bars2 = bars2;\n\t  chart.stack1 = stack1;\n\t  chart.stack2 = stack2;\n\t  chart.xAxis = xAxis;\n\t  chart.yAxis1 = yAxis1;\n\t  chart.yAxis2 = yAxis2;\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.x = function(_) {\n\t    if (!arguments.length) return getX;\n\t    getX = _;\n\t    lines1.x(_);\n\t    bars1.x(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.y = function(_) {\n\t    if (!arguments.length) return getY;\n\t    getY = _;\n\t    lines1.y(_);\n\t    bars1.y(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.yDomain1 = function(_) {\n\t    if (!arguments.length) return yDomain1;\n\t    yDomain1 = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yDomain2 = function(_) {\n\t    if (!arguments.length) return yDomain2;\n\t    yDomain2 = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = _;\n\t    legend.color(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.showLegend = function(_) {\n\t    if (!arguments.length) return showLegend;\n\t    showLegend = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  return chart;\n\t}\n\t\n\t\n\tnv.models.ohlcBar = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t    , width = 960\n\t    , height = 500\n\t    , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n\t    , x = d3.scale.linear()\n\t    , y = d3.scale.linear()\n\t    , getX = function(d) { return d.x }\n\t    , getY = function(d) { return d.y }\n\t    , getOpen = function(d) { return d.open }\n\t    , getClose = function(d) { return d.close }\n\t    , getHigh = function(d) { return d.high }\n\t    , getLow = function(d) { return d.low }\n\t    , forceX = []\n\t    , forceY = []\n\t    , padData     = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n\t    , clipEdge = true\n\t    , color = nv.utils.defaultColor()\n\t    , xDomain\n\t    , yDomain\n\t    , xRange\n\t    , yRange\n\t    , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout')\n\t    ;\n\t\n\t  //============================================================\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  //TODO: store old scales for transitions\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var availableWidth = width - margin.left - margin.right,\n\t          availableHeight = height - margin.top - margin.bottom,\n\t          container = d3.select(this);\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x   .domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\t\n\t      if (padData)\n\t        x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n\t      else\n\t        x.range(xRange || [0, availableWidth]);\n\t\n\t      y   .domain(yDomain || [\n\t            d3.min(data[0].values.map(getLow).concat(forceY)),\n\t            d3.max(data[0].values.map(getHigh).concat(forceY))\n\t          ])\n\t          .range(yRange || [availableHeight, 0]);\n\t\n\t      // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n\t      if (x.domain()[0] === x.domain()[1])\n\t        x.domain()[0] ?\n\t            x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n\t          : x.domain([-1,1]);\n\t\n\t      if (y.domain()[0] === y.domain()[1])\n\t        y.domain()[0] ?\n\t            y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n\t          : y.domain([-1,1]);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = d3.select(this).selectAll('g.nv-wrap.nv-ohlcBar').data([data[0].values]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-ohlcBar');\n\t      var defsEnter = wrapEnter.append('defs');\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-ticks');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      container\n\t          .on('click', function(d,i) {\n\t            dispatch.chartClick({\n\t                data: d,\n\t                index: i,\n\t                pos: d3.event,\n\t                id: id\n\t            });\n\t          });\n\t\n\t\n\t      defsEnter.append('clipPath')\n\t          .attr('id', 'nv-chart-clip-path-' + id)\n\t        .append('rect');\n\t\n\t      wrap.select('#nv-chart-clip-path-' + id + ' rect')\n\t          .attr('width', availableWidth)\n\t          .attr('height', availableHeight);\n\t\n\t      g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\t\n\t\n\t\n\t      var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick')\n\t          .data(function(d) { return d });\n\t\n\t      ticks.exit().remove();\n\t\n\t\n\t      var ticksEnter = ticks.enter().append('path')\n\t          .attr('class', function(d,i,j) { return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i })\n\t          .attr('d', function(d,i) {\n\t            var w = (availableWidth / data[0].values.length) * .9;\n\t            return 'm0,0l0,'\n\t                 + (y(getOpen(d,i))\n\t                 - y(getHigh(d,i)))\n\t                 + 'l'\n\t                 + (-w/2)\n\t                 + ',0l'\n\t                 + (w/2)\n\t                 + ',0l0,'\n\t                 + (y(getLow(d,i)) - y(getOpen(d,i)))\n\t                 + 'l0,'\n\t                 + (y(getClose(d,i))\n\t                 - y(getLow(d,i)))\n\t                 + 'l'\n\t                 + (w/2)\n\t                 + ',0l'\n\t                 + (-w/2)\n\t                 + ',0z';\n\t          })\n\t          .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })\n\t          //.attr('fill', function(d,i) { return color[0]; })\n\t          //.attr('stroke', function(d,i) { return color[0]; })\n\t          //.attr('x', 0 )\n\t          //.attr('y', function(d,i) {  return y(Math.max(0, getY(d,i))) })\n\t          //.attr('height', function(d,i) { return Math.abs(y(getY(d,i)) - y(0)) })\n\t          .on('mouseover', function(d,i) {\n\t            d3.select(this).classed('hover', true);\n\t            dispatch.elementMouseover({\n\t                point: d,\n\t                series: data[0],\n\t                pos: [x(getX(d,i)), y(getY(d,i))],  // TODO: Figure out why the value appears to be shifted\n\t                pointIndex: i,\n\t                seriesIndex: 0,\n\t                e: d3.event\n\t            });\n\t\n\t          })\n\t          .on('mouseout', function(d,i) {\n\t                d3.select(this).classed('hover', false);\n\t                dispatch.elementMouseout({\n\t                    point: d,\n\t                    series: data[0],\n\t                    pointIndex: i,\n\t                    seriesIndex: 0,\n\t                    e: d3.event\n\t                });\n\t          })\n\t          .on('click', function(d,i) {\n\t                dispatch.elementClick({\n\t                    //label: d[label],\n\t                    value: getY(d,i),\n\t                    data: d,\n\t                    index: i,\n\t                    pos: [x(getX(d,i)), y(getY(d,i))],\n\t                    e: d3.event,\n\t                    id: id\n\t                });\n\t              d3.event.stopPropagation();\n\t          })\n\t          .on('dblclick', function(d,i) {\n\t              dispatch.elementDblClick({\n\t                  //label: d[label],\n\t                  value: getY(d,i),\n\t                  data: d,\n\t                  index: i,\n\t                  pos: [x(getX(d,i)), y(getY(d,i))],\n\t                  e: d3.event,\n\t                  id: id\n\t              });\n\t              d3.event.stopPropagation();\n\t          });\n\t\n\t      ticks\n\t          .attr('class', function(d,i,j) { return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i })\n\t      d3.transition(ticks)\n\t          .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })\n\t          .attr('d', function(d,i) {\n\t            var w = (availableWidth / data[0].values.length) * .9;\n\t            return 'm0,0l0,'\n\t                 + (y(getOpen(d,i))\n\t                 - y(getHigh(d,i)))\n\t                 + 'l'\n\t                 + (-w/2)\n\t                 + ',0l'\n\t                 + (w/2)\n\t                 + ',0l0,'\n\t                 + (y(getLow(d,i))\n\t                 - y(getOpen(d,i)))\n\t                 + 'l0,'\n\t                 + (y(getClose(d,i))\n\t                 - y(getLow(d,i)))\n\t                 + 'l'\n\t                 + (w/2)\n\t                 + ',0l'\n\t                 + (-w/2)\n\t                 + ',0z';\n\t          })\n\t          //.attr('width', (availableWidth / data[0].values.length) * .9 )\n\t\n\t\n\t      //d3.transition(ticks)\n\t          //.attr('y', function(d,i) {  return y(Math.max(0, getY(d,i))) })\n\t          //.attr('height', function(d,i) { return Math.abs(y(getY(d,i)) - y(0)) });\n\t          //.order();  // not sure if this makes any sense for this model\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  chart.dispatch = dispatch;\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.x = function(_) {\n\t    if (!arguments.length) return getX;\n\t    getX = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.y = function(_) {\n\t    if (!arguments.length) return getY;\n\t    getY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.open = function(_) {\n\t    if (!arguments.length) return getOpen;\n\t    getOpen = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.close = function(_) {\n\t    if (!arguments.length) return getClose;\n\t    getClose = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.high = function(_) {\n\t    if (!arguments.length) return getHigh;\n\t    getHigh = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.low = function(_) {\n\t    if (!arguments.length) return getLow;\n\t    getLow = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xScale = function(_) {\n\t    if (!arguments.length) return x;\n\t    x = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yScale = function(_) {\n\t    if (!arguments.length) return y;\n\t    y = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xDomain = function(_) {\n\t    if (!arguments.length) return xDomain;\n\t    xDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yDomain = function(_) {\n\t    if (!arguments.length) return yDomain;\n\t    yDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xRange = function(_) {\n\t    if (!arguments.length) return xRange;\n\t    xRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yRange = function(_) {\n\t    if (!arguments.length) return yRange;\n\t    yRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.forceX = function(_) {\n\t    if (!arguments.length) return forceX;\n\t    forceX = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.forceY = function(_) {\n\t    if (!arguments.length) return forceY;\n\t    forceY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.padData = function(_) {\n\t    if (!arguments.length) return padData;\n\t    padData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.clipEdge = function(_) {\n\t    if (!arguments.length) return clipEdge;\n\t    clipEdge = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.id = function(_) {\n\t    if (!arguments.length) return id;\n\t    id = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\tnv.models.pie = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t    , width = 500\n\t    , height = 500\n\t    , getX = function(d) { return d.x }\n\t    , getY = function(d) { return d.y }\n\t    , getDescription = function(d) { return d.description }\n\t    , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n\t    , color = nv.utils.defaultColor()\n\t    , valueFormat = d3.format(',.2f')\n\t    , showLabels = true\n\t    , pieLabelsOutside = true\n\t    , donutLabelsOutside = false\n\t    , labelType = \"key\"\n\t    , labelThreshold = .02 //if slice percentage is under this, don't show label\n\t    , donut = false\n\t    , labelSunbeamLayout = false\n\t    , startAngle = false\n\t    , endAngle = false\n\t    , donutRatio = 0.5\n\t    , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout')\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var availableWidth = width - margin.left - margin.right,\n\t          availableHeight = height - margin.top - margin.bottom,\n\t          radius = Math.min(availableWidth, availableHeight) / 2,\n\t          arcRadius = radius-(radius / 5),\n\t          container = d3.select(this);\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      //var wrap = container.selectAll('.nv-wrap.nv-pie').data([data]);\n\t      var wrap = container.selectAll('.nv-wrap.nv-pie').data(data);\n\t      var wrapEnter = wrap.enter().append('g').attr('class','nvd3 nv-wrap nv-pie nv-chart-' + id);\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-pie');\n\t      gEnter.append('g').attr('class', 'nv-pieLabels');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t      g.select('.nv-pie').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');\n\t      g.select('.nv-pieLabels').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      container\n\t          .on('click', function(d,i) {\n\t              dispatch.chartClick({\n\t                  data: d,\n\t                  index: i,\n\t                  pos: d3.event,\n\t                  id: id\n\t              });\n\t          });\n\t\n\t\n\t      var arc = d3.svg.arc()\n\t                  .outerRadius(arcRadius);\n\t\n\t      if (startAngle) arc.startAngle(startAngle)\n\t      if (endAngle) arc.endAngle(endAngle);\n\t      if (donut) arc.innerRadius(radius * donutRatio);\n\t\n\t      // Setup the Pie chart and choose the data element\n\t      var pie = d3.layout.pie()\n\t          .sort(null)\n\t          .value(function(d) { return d.disabled ? 0 : getY(d) });\n\t\n\t      var slices = wrap.select('.nv-pie').selectAll('.nv-slice')\n\t          .data(pie);\n\t\n\t      var pieLabels = wrap.select('.nv-pieLabels').selectAll('.nv-label')\n\t          .data(pie);\n\t\n\t      slices.exit().remove();\n\t      pieLabels.exit().remove();\n\t\n\t      var ae = slices.enter().append('g')\n\t              .attr('class', 'nv-slice')\n\t              .on('mouseover', function(d,i){\n\t                d3.select(this).classed('hover', true);\n\t                dispatch.elementMouseover({\n\t                    label: getX(d.data),\n\t                    value: getY(d.data),\n\t                    point: d.data,\n\t                    pointIndex: i,\n\t                    pos: [d3.event.pageX, d3.event.pageY],\n\t                    id: id\n\t                });\n\t              })\n\t              .on('mouseout', function(d,i){\n\t                d3.select(this).classed('hover', false);\n\t                dispatch.elementMouseout({\n\t                    label: getX(d.data),\n\t                    value: getY(d.data),\n\t                    point: d.data,\n\t                    index: i,\n\t                    id: id\n\t                });\n\t              })\n\t              .on('click', function(d,i) {\n\t                dispatch.elementClick({\n\t                    label: getX(d.data),\n\t                    value: getY(d.data),\n\t                    point: d.data,\n\t                    index: i,\n\t                    pos: d3.event,\n\t                    id: id\n\t                });\n\t                d3.event.stopPropagation();\n\t              })\n\t              .on('dblclick', function(d,i) {\n\t                dispatch.elementDblClick({\n\t                    label: getX(d.data),\n\t                    value: getY(d.data),\n\t                    point: d.data,\n\t                    index: i,\n\t                    pos: d3.event,\n\t                    id: id\n\t                });\n\t                d3.event.stopPropagation();\n\t              });\n\t\n\t        slices.attr('fill', function(d,i) { return color(d, i); })\n\t            .attr('stroke', function(d,i) { return color(d, i); });\n\t\n\t        var paths = ae.append('path')\n\t            .each(function(d) { this._current = d; });\n\t            //.attr('d', arc);\n\t\n\t        slices.select('path')\n\t            .attr('d', arc);\n\t            \n\t        if (showLabels) {\n\t          // This does the normal label\n\t          var labelsArc = d3.svg.arc().innerRadius(0);\n\t\n\t          if (pieLabelsOutside){ labelsArc = arc; }\n\t\n\t          if (donutLabelsOutside) { labelsArc = d3.svg.arc().outerRadius(arc.outerRadius()); }\n\t\n\t          pieLabels.enter().append(\"g\").classed(\"nv-label\",true)\n\t            .each(function(d,i) {\n\t                var group = d3.select(this);\n\t\n\t                group\n\t                  .attr('transform', function(d) {\n\t                       if (labelSunbeamLayout) {\n\t                         d.outerRadius = arcRadius + 10; // Set Outer Coordinate\n\t                         d.innerRadius = arcRadius + 15; // Set Inner Coordinate\n\t                         var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);\n\t                         if ((d.startAngle+d.endAngle)/2 < Math.PI) {\n\t                           rotateAngle -= 90;\n\t                         } else {\n\t                           rotateAngle += 90;\n\t                         }\n\t                         return 'translate(' + labelsArc.centroid(d) + ') rotate(' + rotateAngle + ')';\n\t                       } else {\n\t                         d.outerRadius = radius + 10; // Set Outer Coordinate\n\t                         d.innerRadius = radius + 15; // Set Inner Coordinate\n\t                         return 'translate(' + labelsArc.centroid(d) + ')'\n\t                       }\n\t                  });\n\t\n\t                group.append('rect')\n\t                    .style('stroke', '#fff')\n\t                    .style('fill', '#fff')\n\t                    .attr(\"rx\", 3)\n\t                    .attr(\"ry\", 3);\n\t\n\t                group.append('text')\n\t                    .style('text-anchor', labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle') //center the text on it's origin or begin/end if orthogonal aligned\n\t                    .style('fill', '#000')\n\t\n\t            });\n\t\n\t          var labelLocationHash = {};\n\t          var avgHeight = 14;\n\t          var avgWidth = 140;\n\t          var createHashKey = function(coordinates) {\n\t\n\t              return Math.floor(coordinates[0]/avgWidth) * avgWidth + ',' + Math.floor(coordinates[1]/avgHeight) * avgHeight;\n\t          };\n\t          pieLabels\n\t                .attr('transform', function(d) {\n\t                  if (labelSunbeamLayout) {\n\t                      d.outerRadius = arcRadius + 10; // Set Outer Coordinate\n\t                      d.innerRadius = arcRadius + 15; // Set Inner Coordinate\n\t                      var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);\n\t                      if ((d.startAngle+d.endAngle)/2 < Math.PI) {\n\t                        rotateAngle -= 90;\n\t                      } else {\n\t                        rotateAngle += 90;\n\t                      }\n\t                      return 'translate(' + labelsArc.centroid(d) + ') rotate(' + rotateAngle + ')';\n\t                    } else {\n\t                      d.outerRadius = radius + 10; // Set Outer Coordinate\n\t                      d.innerRadius = radius + 15; // Set Inner Coordinate\n\t\n\t                      /*\n\t                      Overlapping pie labels are not good. What this attempts to do is, prevent overlapping.\n\t                      Each label location is hashed, and if a hash collision occurs, we assume an overlap.\n\t                      Adjust the label's y-position to remove the overlap.\n\t                      */\n\t                      var center = labelsArc.centroid(d);\n\t                      var hashKey = createHashKey(center);\n\t                      if (labelLocationHash[hashKey]) {\n\t                        center[1] -= avgHeight;\n\t                      }\n\t                      labelLocationHash[createHashKey(center)] = true;\n\t                      return 'translate(' + center + ')'\n\t                    }\n\t                });\n\t          pieLabels.select(\".nv-label text\")\n\t                .style('text-anchor', labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle') //center the text on it's origin or begin/end if orthogonal aligned\n\t                .text(function(d, i) {\n\t                  var percent = (d.endAngle - d.startAngle) / (2 * Math.PI);\n\t                  var labelTypes = {\n\t                    \"key\" : getX(d.data),\n\t                    \"value\": getY(d.data),\n\t                    \"percent\": d3.format('%')(percent)\n\t                  };\n\t                  return (d.value && percent > labelThreshold) ? labelTypes[labelType] : '';\n\t                });\n\t        }\n\t\n\t\n\t        // Computes the angle of an arc, converting from radians to degrees.\n\t        function angle(d) {\n\t          var a = (d.startAngle + d.endAngle) * 90 / Math.PI - 90;\n\t          return a > 90 ? a - 180 : a;\n\t        }\n\t\n\t        function arcTween(a) {\n\t          a.endAngle = isNaN(a.endAngle) ? 0 : a.endAngle;\n\t          a.startAngle = isNaN(a.startAngle) ? 0 : a.startAngle;\n\t          if (!donut) a.innerRadius = 0;\n\t          var i = d3.interpolate(this._current, a);\n\t          this._current = i(0);\n\t          return function(t) {\n\t            return arc(i(t));\n\t          };\n\t        }\n\t\n\t        function tweenPie(b) {\n\t          b.innerRadius = 0;\n\t          var i = d3.interpolate({startAngle: 0, endAngle: 0}, b);\n\t          return function(t) {\n\t              return arc(i(t));\n\t          };\n\t        }\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  chart.dispatch = dispatch;\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.values = function(_) {\n\t    nv.log(\"pie.values() is no longer supported.\");\n\t    return chart;\n\t  };\n\t\n\t  chart.x = function(_) {\n\t    if (!arguments.length) return getX;\n\t    getX = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.y = function(_) {\n\t    if (!arguments.length) return getY;\n\t    getY = d3.functor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.description = function(_) {\n\t    if (!arguments.length) return getDescription;\n\t    getDescription = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showLabels = function(_) {\n\t    if (!arguments.length) return showLabels;\n\t    showLabels = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.labelSunbeamLayout = function(_) {\n\t    if (!arguments.length) return labelSunbeamLayout;\n\t    labelSunbeamLayout = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.donutLabelsOutside = function(_) {\n\t    if (!arguments.length) return donutLabelsOutside;\n\t    donutLabelsOutside = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.pieLabelsOutside = function(_) {\n\t    if (!arguments.length) return pieLabelsOutside;\n\t    pieLabelsOutside = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.labelType = function(_) {\n\t    if (!arguments.length) return labelType;\n\t    labelType = _;\n\t    labelType = labelType || \"key\";\n\t    return chart;\n\t  };\n\t\n\t  chart.donut = function(_) {\n\t    if (!arguments.length) return donut;\n\t    donut = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.donutRatio = function(_) {\n\t    if (!arguments.length) return donutRatio;\n\t    donutRatio = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.startAngle = function(_) {\n\t    if (!arguments.length) return startAngle;\n\t    startAngle = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.endAngle = function(_) {\n\t    if (!arguments.length) return endAngle;\n\t    endAngle = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.id = function(_) {\n\t    if (!arguments.length) return id;\n\t    id = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.valueFormat = function(_) {\n\t    if (!arguments.length) return valueFormat;\n\t    valueFormat = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.labelThreshold = function(_) {\n\t    if (!arguments.length) return labelThreshold;\n\t    labelThreshold = _;\n\t    return chart;\n\t  };\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\tnv.models.pieChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var pie = nv.models.pie()\n\t    , legend = nv.models.legend()\n\t    ;\n\t\n\t  var margin = {top: 30, right: 20, bottom: 20, left: 20}\n\t    , width = null\n\t    , height = null\n\t    , showLegend = true\n\t    , color = nv.utils.defaultColor()\n\t    , tooltips = true\n\t    , tooltip = function(key, y, e, graph) {\n\t        return '<h3>' + key + '</h3>' +\n\t               '<p>' +  y + '</p>'\n\t      }\n\t    , state = {}\n\t    , defaultState = null\n\t    , noData = \"No Data Available.\"\n\t    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t    var tooltipLabel = pie.description()(e.point) || pie.x()(e.point)\n\t    var left = e.pos[0] + ( (offsetElement && offsetElement.offsetLeft) || 0 ),\n\t        top = e.pos[1] + ( (offsetElement && offsetElement.offsetTop) || 0),\n\t        y = pie.valueFormat()(pie.y()(e.point)),\n\t        content = tooltip(tooltipLabel, y, e, chart);\n\t\n\t    nv.tooltip.show([left, top], content, e.value < 0 ? 'n' : 's', null, offsetElement);\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this),\n\t          that = this;\n\t\n\t      var availableWidth = (width || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t\n\t      chart.update = function() { container.call(chart); };\n\t      chart.container = this;\n\t\n\t      //set state.disabled\n\t      state.disabled = data.map(function(d) { return !!d.disabled });\n\t\n\t      if (!defaultState) {\n\t        var key;\n\t        defaultState = {};\n\t        for (key in state) {\n\t          if (state[key] instanceof Array)\n\t            defaultState[key] = state[key].slice(0);\n\t          else\n\t            defaultState[key] = state[key];\n\t        }\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t      // Display No Data message if there's nothing to show.\n\t\n\t      if (!data || !data.length) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', margin.top + availableHeight / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-pieChart').data([data]);\n\t      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-pieChart').append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-pieWrap');\n\t      gEnter.append('g').attr('class', 'nv-legendWrap');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Legend\n\t\n\t      if (showLegend) {\n\t        legend\n\t          .width( availableWidth )\n\t          .key(pie.x());\n\t\n\t        wrap.select('.nv-legendWrap')\n\t            .datum(data)\n\t            .call(legend);\n\t\n\t        if ( margin.top != legend.height()) {\n\t          margin.top = legend.height();\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t        }\n\t\n\t        wrap.select('.nv-legendWrap')\n\t            .attr('transform', 'translate(0,' + (-margin.top) +')');\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Main Chart Component(s)\n\t\n\t      pie\n\t        .width(availableWidth)\n\t        .height(availableHeight);\n\t\n\t\n\t      var pieWrap = g.select('.nv-pieWrap')\n\t          .datum([data]);\n\t\n\t      d3.transition(pieWrap).call(pie);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t      legend.dispatch.on('stateChange', function(newState) {\n\t        state = newState;\n\t        dispatch.stateChange(state);\n\t        chart.update();\n\t      });\n\t\n\t      pie.dispatch.on('elementMouseout.tooltip', function(e) {\n\t        dispatch.tooltipHide(e);\n\t      });\n\t\n\t      // Update chart from a state object passed to event handler\n\t      dispatch.on('changeState', function(e) {\n\t\n\t        if (typeof e.disabled !== 'undefined') {\n\t          data.forEach(function(series,i) {\n\t            series.disabled = e.disabled[i];\n\t          });\n\t\n\t          state.disabled = e.disabled;\n\t        }\n\t\n\t        chart.update();\n\t      });\n\t\n\t      //============================================================\n\t\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  pie.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  dispatch.on('tooltipShow', function(e) {\n\t    if (tooltips) showTooltip(e);\n\t  });\n\t\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.legend = legend;\n\t  chart.dispatch = dispatch;\n\t  chart.pie = pie;\n\t\n\t  d3.rebind(chart, pie, 'valueFormat', 'values', 'x', 'y', 'description', 'id', 'showLabels', 'donutLabelsOutside', 'pieLabelsOutside', 'labelType', 'donut', 'donutRatio', 'labelThreshold');\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    legend.color(color);\n\t    pie.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.showLegend = function(_) {\n\t    if (!arguments.length) return showLegend;\n\t    showLegend = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.state = function(_) {\n\t    if (!arguments.length) return state;\n\t    state = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.defaultState = function(_) {\n\t    if (!arguments.length) return defaultState;\n\t    defaultState = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.scatter = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var margin       = {top: 0, right: 0, bottom: 0, left: 0}\n\t    , width        = 960\n\t    , height       = 500\n\t    , color        = nv.utils.defaultColor() // chooses color\n\t    , id           = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't select one\n\t    , x            = d3.scale.linear()\n\t    , y            = d3.scale.linear()\n\t    , z            = d3.scale.linear() //linear because d3.svg.shape.size is treated as area\n\t    , getX         = function(d) { return d.x } // accessor to get the x value\n\t    , getY         = function(d) { return d.y } // accessor to get the y value\n\t    , getSize      = function(d) { return d.size || 1} // accessor to get the point size\n\t    , getShape     = function(d) { return d.shape || 'circle' } // accessor to get point shape\n\t    , onlyCircles  = true // Set to false to use shapes\n\t    , forceX       = [] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)\n\t    , forceY       = [] // List of numbers to Force into the Y scale\n\t    , forceSize    = [] // List of numbers to Force into the Size scale\n\t    , interactive  = true // If true, plots a voronoi overlay for advanced point intersection\n\t    , pointKey     = null\n\t    , pointActive  = function(d) { return !d.notActive } // any points that return false will be filtered out\n\t    , padData      = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n\t    , padDataOuter = .1 //outerPadding to imitate ordinal scale outer padding\n\t    , clipEdge     = false // if true, masks points within x and y scale\n\t    , clipVoronoi  = true // if true, masks each point with a circle... can turn off to slightly increase performance\n\t    , clipRadius   = function() { return 25 } // function to get the radius for voronoi point clips\n\t    , xDomain      = null // Override x domain (skips the calculation from data)\n\t    , yDomain      = null // Override y domain\n\t    , xRange       = null // Override x range\n\t    , yRange       = null // Override y range\n\t    , sizeDomain   = null // Override point size domain\n\t    , sizeRange    = null\n\t    , singlePoint  = false\n\t    , dispatch     = d3.dispatch('elementClick', 'elementMouseover', 'elementMouseout')\n\t    , useVoronoi   = true\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var x0, y0, z0 // used to store previous scales\n\t    , timeoutID\n\t    , needsUpdate = false // Flag for when the points are visually updating, but the interactive layer is behind, to disable tooltips\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var availableWidth = width - margin.left - margin.right,\n\t          availableHeight = height - margin.top - margin.bottom,\n\t          container = d3.select(this);\n\t\n\t      //add series index to each data point for reference\n\t      data.forEach(function(series, i) {\n\t        series.values.forEach(function(point) {\n\t          point.series = i;\n\t        });\n\t      });\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      // remap and flatten the data for use in calculating the scales' domains\n\t      var seriesData = (xDomain && yDomain && sizeDomain) ? [] : // if we know xDomain and yDomain and sizeDomain, no need to calculate.... if Size is constant remember to set sizeDomain to speed up performance\n\t            d3.merge(\n\t              data.map(function(d) {\n\t                return d.values.map(function(d,i) {\n\t                  return { x: getX(d,i), y: getY(d,i), size: getSize(d,i) }\n\t                })\n\t              })\n\t            );\n\t\n\t      x   .domain(xDomain || d3.extent(seriesData.map(function(d) { return d.x; }).concat(forceX)))\n\t\n\t      if (padData && data[0])\n\t        x.range(xRange || [(availableWidth * padDataOuter +  availableWidth) / (2 *data[0].values.length), availableWidth - availableWidth * (1 + padDataOuter) / (2 * data[0].values.length)  ]);\n\t        //x.range([availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n\t      else\n\t        x.range(xRange || [0, availableWidth]);\n\t\n\t      y   .domain(yDomain || d3.extent(seriesData.map(function(d) { return d.y }).concat(forceY)))\n\t          .range(yRange || [availableHeight, 0]);\n\t\n\t      z   .domain(sizeDomain || d3.extent(seriesData.map(function(d) { return d.size }).concat(forceSize)))\n\t          .range(sizeRange || [16, 256]);\n\t\n\t      // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n\t      if (x.domain()[0] === x.domain()[1] || y.domain()[0] === y.domain()[1]) singlePoint = true;\n\t      if (x.domain()[0] === x.domain()[1])\n\t        x.domain()[0] ?\n\t            x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n\t          : x.domain([-1,1]);\n\t\n\t      if (y.domain()[0] === y.domain()[1])\n\t        y.domain()[0] ?\n\t            y.domain([y.domain()[0] - y.domain()[0] * 0.01, y.domain()[1] + y.domain()[1] * 0.01])\n\t          : y.domain([-1,1]);\n\t\n\t      if ( isNaN(x.domain()[0])) {\n\t          x.domain([-1,1]);\n\t      }\n\t\n\t      if ( isNaN(y.domain()[0])) {\n\t          y.domain([-1,1]);\n\t      }\n\t\n\t\n\t      x0 = x0 || x;\n\t      y0 = y0 || y;\n\t      z0 = z0 || z;\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-scatter').data([data]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatter nv-chart-' + id + (singlePoint ? ' nv-single-point' : ''));\n\t      var defsEnter = wrapEnter.append('defs');\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-groups');\n\t      gEnter.append('g').attr('class', 'nv-point-paths');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      defsEnter.append('clipPath')\n\t          .attr('id', 'nv-edge-clip-' + id)\n\t        .append('rect');\n\t\n\t      wrap.select('#nv-edge-clip-' + id + ' rect')\n\t          .attr('width', availableWidth)\n\t          .attr('height', (availableHeight > 0) ? availableHeight : 0);\n\t\n\t      g   .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\t\n\t\n\t      function updateInteractiveLayer() {\n\t\n\t        if (!interactive) return false;\n\t\n\t        var eventElements;\n\t\n\t        var vertices = d3.merge(data.map(function(group, groupIndex) {\n\t            return group.values\n\t              .map(function(point, pointIndex) {\n\t                // *Adding noise to make duplicates very unlikely\n\t                // *Injecting series and point index for reference\n\t                /* *Adding a 'jitter' to the points, because there's an issue in d3.geom.voronoi.\n\t                */\n\t                var pX = getX(point,pointIndex);\n\t                var pY = getY(point,pointIndex);\n\t\n\t                return [x(pX),\n\t                        y(pY),\n\t                        groupIndex,\n\t                        pointIndex, point];\n\t              })\n\t              .filter(function(pointArray, pointIndex) {\n\t                return pointActive(pointArray[4], pointIndex); // Issue #237.. move filter to after map, so pointIndex is correct!\n\t              })\n\t          })\n\t        );\n\t\n\t\n\t\n\t        //inject series and point index for reference into voronoi\n\t        if (useVoronoi === true) {\n\t\n\t          if (clipVoronoi) {\n\t            var pointClipsEnter = wrap.select('defs').selectAll('.nv-point-clips')\n\t                .data([id])\n\t              .enter();\n\t\n\t            pointClipsEnter.append('clipPath')\n\t                  .attr('class', 'nv-point-clips')\n\t                  .attr('id', 'nv-points-clip-' + id);\n\t\n\t            var pointClips = wrap.select('#nv-points-clip-' + id).selectAll('circle')\n\t                .data(vertices);\n\t            pointClips.enter().append('circle')\n\t                .attr('r', clipRadius);\n\t            pointClips.exit().remove();\n\t            pointClips\n\t                .attr('cx', function(d) { return d[0] })\n\t                .attr('cy', function(d) { return d[1] });\n\t\n\t            wrap.select('.nv-point-paths')\n\t                .attr('clip-path', 'url(#nv-points-clip-' + id + ')');\n\t          }\n\t\n\t\n\t          if(vertices.length) {\n\t            // Issue #283 - Adding 2 dummy points to the voronoi b/c voronoi requires min 3 points to work\n\t            vertices.push([x.range()[0] - 20, y.range()[0] - 20, null, null]);\n\t            vertices.push([x.range()[1] + 20, y.range()[1] + 20, null, null]);\n\t            vertices.push([x.range()[0] - 20, y.range()[0] + 20, null, null]);\n\t            vertices.push([x.range()[1] + 20, y.range()[1] - 20, null, null]);\n\t          }\n\t\n\t          var bounds = d3.geom.polygon([\n\t              [-10,-10],\n\t              [-10,height + 10],\n\t              [width + 10,height + 10],\n\t              [width + 10,-10]\n\t          ]);\n\t\n\t          // delete duplicates from vertices - essential assumption for d3.geom.voronoi\n\t          var epsilon = 1e-6; // d3 uses 1e-6 to determine equivalence.\n\t          vertices = vertices.sort(function(a,b){return ((a[0] - b[0]) || (a[1] - b[1]))});\n\t          for (var i = 0; i < vertices.length - 1; ) {\n\t              if ((Math.abs(vertices[i][0] - vertices[i+1][0]) < epsilon) &&\n\t                  (Math.abs(vertices[i][1] - vertices[i+1][1]) < epsilon)) {\n\t                      vertices.splice(i+1, 1);\n\t              } else {\n\t                  i++;\n\t              }\n\t          }\n\t \n\t          var voronoi = d3.geom.voronoi(vertices).map(function(d, i) {\n\t              return {\n\t                'data': bounds.clip(d),\n\t                'series': vertices[i][2],\n\t                'point': vertices[i][3]\n\t              }\n\t            });\n\t\n\t\n\t          var pointPaths = wrap.select('.nv-point-paths').selectAll('path')\n\t              .data(voronoi);\n\t          pointPaths.enter().append('path')\n\t              .attr('class', function(d,i) { return 'nv-path-'+i; });\n\t          pointPaths.exit().remove();\n\t          pointPaths\n\t              .attr('d', function(d) {\n\t                if (!d || !d.data || d.data.length === 0)\n\t                    return 'M 0 0';\n\t                else\n\t                    return 'M' + d.data.join('L') + 'Z';\n\t              });\n\t\n\t          var mouseEventCallback = function(d,mDispatch) {\n\t                if (needsUpdate) return 0;\n\t                var series = data[d.series];\n\t                if (typeof series === 'undefined') return;\n\t\n\t                var point  = series.values[d.point];\n\t\n\t                mDispatch({\n\t                  point: point,\n\t                  series: series,\n\t                  pos: [x(getX(point, d.point)) + margin.left, y(getY(point, d.point)) + margin.top],\n\t                  seriesIndex: d.series,\n\t                  pointIndex: d.point\n\t                });\n\t          };\n\t\n\t          pointPaths\n\t              .on('click', function(d) {\n\t                mouseEventCallback(d, dispatch.elementClick);\n\t              })\n\t              .on('mouseover', function(d) {\n\t                mouseEventCallback(d, dispatch.elementMouseover);\n\t              })\n\t              .on('mouseout', function(d, i) {\n\t                mouseEventCallback(d, dispatch.elementMouseout);\n\t              });\n\t\n\t\n\t        } else {\n\t          /*\n\t          // bring data in form needed for click handlers\n\t          var dataWithPoints = vertices.map(function(d, i) {\n\t              return {\n\t                'data': d,\n\t                'series': vertices[i][2],\n\t                'point': vertices[i][3]\n\t              }\n\t            });\n\t           */\n\t\n\t          // add event handlers to points instead voronoi paths\n\t          wrap.select('.nv-groups').selectAll('.nv-group')\n\t            .selectAll('.nv-point')\n\t              //.data(dataWithPoints)\n\t              //.style('pointer-events', 'auto') // recativate events, disabled by css\n\t              .on('click', function(d,i) {\n\t                //nv.log('test', d, i);\n\t                if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n\t                var series = data[d.series],\n\t                    point  = series.values[i];\n\t\n\t                dispatch.elementClick({\n\t                  point: point,\n\t                  series: series,\n\t                  pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n\t                  seriesIndex: d.series,\n\t                  pointIndex: i\n\t                });\n\t              })\n\t              .on('mouseover', function(d,i) {\n\t                if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n\t                var series = data[d.series],\n\t                    point  = series.values[i];\n\t\n\t                dispatch.elementMouseover({\n\t                  point: point,\n\t                  series: series,\n\t                  pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n\t                  seriesIndex: d.series,\n\t                  pointIndex: i\n\t                });\n\t              })\n\t              .on('mouseout', function(d,i) {\n\t                if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n\t                var series = data[d.series],\n\t                    point  = series.values[i];\n\t\n\t                dispatch.elementMouseout({\n\t                  point: point,\n\t                  series: series,\n\t                  seriesIndex: d.series,\n\t                  pointIndex: i\n\t                });\n\t              });\n\t          }\n\t\n\t          needsUpdate = false;\n\t      }\n\t\n\t      needsUpdate = true;\n\t\n\t      var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n\t          .data(function(d) { return d }, function(d) { return d.key });\n\t      groups.enter().append('g')\n\t          .style('stroke-opacity', 1e-6)\n\t          .style('fill-opacity', 1e-6);\n\t      groups.exit()\n\t          .remove();\n\t      groups\n\t          .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n\t          .classed('hover', function(d) { return d.hover });\n\t      groups\n\t          \n\t          .style('fill', function(d,i) { return color(d, i) })\n\t          .style('stroke', function(d,i) { return color(d, i) })\n\t          .style('stroke-opacity', 1)\n\t          .style('fill-opacity', .5);\n\t\n\t\n\t      if (onlyCircles) {\n\t\n\t        var points = groups.selectAll('circle.nv-point')\n\t            .data(function(d) { return d.values }, pointKey);\n\t        points.enter().append('circle')\n\t            .style('fill', function (d,i) { return d.color })\n\t            .style('stroke', function (d,i) { return d.color })\n\t            .attr('cx', function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n\t            .attr('cy', function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n\t            .attr('r', function(d,i) { return Math.sqrt(z(getSize(d,i))/Math.PI) });\n\t        points.exit().remove();\n\t        groups.exit().selectAll('path.nv-point')\n\t            .attr('cx', function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n\t            .attr('cy', function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n\t            .remove();\n\t        points.each(function(d,i) {\n\t          d3.select(this)\n\t            .classed('nv-point', true)\n\t            .classed('nv-point-' + i, true)\n\t            .classed('hover',false)\n\t            ;\n\t        });\n\t        points\n\t            .attr('cx', function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n\t            .attr('cy', function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n\t            .attr('r', function(d,i) { return Math.sqrt(z(getSize(d,i))/Math.PI) });\n\t\n\t      } else {\n\t\n\t        var points = groups.selectAll('path.nv-point')\n\t            .data(function(d) { return d.values });\n\t        points.enter().append('path')\n\t            .style('fill', function (d,i) { return d.color })\n\t            .style('stroke', function (d,i) { return d.color })\n\t            .attr('transform', function(d,i) {\n\t              return 'translate(' + x0(getX(d,i)) + ',' + y0(getY(d,i)) + ')'\n\t            })\n\t            .attr('d',\n\t              d3.svg.symbol()\n\t                .type(getShape)\n\t                .size(function(d,i) { return z(getSize(d,i)) })\n\t            );\n\t        points.exit().remove();\n\t        groups.exit().selectAll('path.nv-point')\n\t            \n\t            .attr('transform', function(d,i) {\n\t              return 'translate(' + x(getX(d,i)) + ',' + y(getY(d,i)) + ')'\n\t            })\n\t            .remove();\n\t        points.each(function(d,i) {\n\t          d3.select(this)\n\t            .classed('nv-point', true)\n\t            .classed('nv-point-' + i, true)\n\t            .classed('hover',false)\n\t            ;\n\t        });\n\t        points\n\t            .attr('transform', function(d,i) {\n\t              //nv.log(d,i,getX(d,i), x(getX(d,i)));\n\t              return 'translate(' + x(getX(d,i)) + ',' + y(getY(d,i)) + ')'\n\t            })\n\t            .attr('d',\n\t              d3.svg.symbol()\n\t                .type(getShape)\n\t                .size(function(d,i) { return z(getSize(d,i)) })\n\t            );\n\t      }\n\t\n\t\n\t      // Delay updating the invisible interactive layer for smoother animation\n\t      clearTimeout(timeoutID); // stop repeat calls to updateInteractiveLayer\n\t      timeoutID = setTimeout(updateInteractiveLayer, 300);\n\t      //updateInteractiveLayer();\n\t\n\t      //store old scales for use in transitions on update\n\t      x0 = x.copy();\n\t      y0 = y.copy();\n\t      z0 = z.copy();\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t  chart.clearHighlights = function() {\n\t      //Remove the 'hover' class from all highlighted points.\n\t      d3.selectAll(\".nv-chart-\" + id + \" .nv-point.hover\").classed(\"hover\",false);\n\t  };\n\t\n\t  chart.highlightPoint = function(seriesIndex,pointIndex,isHoverOver) {\n\t      d3.select(\".nv-chart-\" + id + \" .nv-series-\" + seriesIndex + \" .nv-point-\" + pointIndex)\n\t          .classed(\"hover\",isHoverOver);\n\t  };\n\t\n\t\n\t  dispatch.on('elementMouseover.point', function(d) {\n\t     if (interactive) chart.highlightPoint(d.seriesIndex,d.pointIndex,true);\n\t  });\n\t\n\t  dispatch.on('elementMouseout.point', function(d) {\n\t     if (interactive) chart.highlightPoint(d.seriesIndex,d.pointIndex,false);\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  chart.dispatch = dispatch;\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.x = function(_) {\n\t    if (!arguments.length) return getX;\n\t    getX = d3.functor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.y = function(_) {\n\t    if (!arguments.length) return getY;\n\t    getY = d3.functor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.size = function(_) {\n\t    if (!arguments.length) return getSize;\n\t    getSize = d3.functor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xScale = function(_) {\n\t    if (!arguments.length) return x;\n\t    x = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yScale = function(_) {\n\t    if (!arguments.length) return y;\n\t    y = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.zScale = function(_) {\n\t    if (!arguments.length) return z;\n\t    z = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xDomain = function(_) {\n\t    if (!arguments.length) return xDomain;\n\t    xDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yDomain = function(_) {\n\t    if (!arguments.length) return yDomain;\n\t    yDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.sizeDomain = function(_) {\n\t    if (!arguments.length) return sizeDomain;\n\t    sizeDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xRange = function(_) {\n\t    if (!arguments.length) return xRange;\n\t    xRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yRange = function(_) {\n\t    if (!arguments.length) return yRange;\n\t    yRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.sizeRange = function(_) {\n\t    if (!arguments.length) return sizeRange;\n\t    sizeRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.forceX = function(_) {\n\t    if (!arguments.length) return forceX;\n\t    forceX = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.forceY = function(_) {\n\t    if (!arguments.length) return forceY;\n\t    forceY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.forceSize = function(_) {\n\t    if (!arguments.length) return forceSize;\n\t    forceSize = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.interactive = function(_) {\n\t    if (!arguments.length) return interactive;\n\t    interactive = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.pointKey = function(_) {\n\t    if (!arguments.length) return pointKey;\n\t    pointKey = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.pointActive = function(_) {\n\t    if (!arguments.length) return pointActive;\n\t    pointActive = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.padData = function(_) {\n\t    if (!arguments.length) return padData;\n\t    padData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.padDataOuter = function(_) {\n\t    if (!arguments.length) return padDataOuter;\n\t    padDataOuter = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.clipEdge = function(_) {\n\t    if (!arguments.length) return clipEdge;\n\t    clipEdge = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.clipVoronoi= function(_) {\n\t    if (!arguments.length) return clipVoronoi;\n\t    clipVoronoi = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.useVoronoi= function(_) {\n\t    if (!arguments.length) return useVoronoi;\n\t    useVoronoi = _;\n\t    if (useVoronoi === false) {\n\t        clipVoronoi = false;\n\t    }\n\t    return chart;\n\t  };\n\t\n\t  chart.clipRadius = function(_) {\n\t    if (!arguments.length) return clipRadius;\n\t    clipRadius = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.shape = function(_) {\n\t    if (!arguments.length) return getShape;\n\t    getShape = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.onlyCircles = function(_) {\n\t    if (!arguments.length) return onlyCircles;\n\t    onlyCircles = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.id = function(_) {\n\t    if (!arguments.length) return id;\n\t    id = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.singlePoint = function(_) {\n\t    if (!arguments.length) return singlePoint;\n\t    singlePoint = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\tnv.models.scatterChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var scatter      = nv.models.scatter()\n\t    , xAxis        = nv.models.axis()\n\t    , yAxis        = nv.models.axis()\n\t    , legend       = nv.models.legend()\n\t    , controls     = nv.models.legend()\n\t    , distX        = nv.models.distribution()\n\t    , distY        = nv.models.distribution()\n\t    ;\n\t\n\t  var margin       = {top: 30, right: 20, bottom: 50, left: 75}\n\t    , width        = null\n\t    , height       = null\n\t    , color        = nv.utils.defaultColor()\n\t    , x            = d3.fisheye ? d3.fisheye.scale(d3.scale.linear).distortion(0) : scatter.xScale()\n\t    , y            = d3.fisheye ? d3.fisheye.scale(d3.scale.linear).distortion(0) : scatter.yScale()\n\t    , xPadding     = 0\n\t    , yPadding     = 0\n\t    , showDistX    = false\n\t    , showDistY    = false\n\t    , showLegend   = true\n\t    , showXAxis    = true\n\t    , showYAxis    = true\n\t    , rightAlignYAxis = false\n\t    , showControls = !!d3.fisheye\n\t    , fisheye      = 0\n\t    , pauseFisheye = false\n\t    , tooltips     = true\n\t    , tooltipX     = function(key, x, y) { return '<strong>' + x + '</strong>' }\n\t    , tooltipY     = function(key, x, y) { return '<strong>' + y + '</strong>' }\n\t    , tooltip      = null\n\t    , state = {}\n\t    , defaultState = null\n\t    , dispatch     = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n\t    , noData       = \"No Data Available.\"\n\t    , transitionDuration = 0\n\t    ;\n\t\n\t  scatter\n\t    .xScale(x)\n\t    .yScale(y)\n\t    ;\n\t  xAxis\n\t    .orient('bottom')\n\t    .tickPadding(10)\n\t    ;\n\t  yAxis\n\t    .orient((rightAlignYAxis) ? 'right' : 'left')\n\t    .tickPadding(10)\n\t    ;\n\t  distX\n\t    .axis('x')\n\t    ;\n\t  distY\n\t    .axis('y')\n\t    ;\n\t\n\t  controls.updateState(false);\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var x0, y0;\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t    //TODO: make tooltip style an option between single or dual on axes (maybe on all charts with axes?)\n\t\n\t    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t        leftX = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t        topX = y.range()[0] + margin.top + ( offsetElement.offsetTop || 0),\n\t        leftY = x.range()[0] + margin.left + ( offsetElement.offsetLeft || 0 ),\n\t        topY = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t        xVal = xAxis.tickFormat()(scatter.x()(e.point, e.pointIndex)),\n\t        yVal = yAxis.tickFormat()(scatter.y()(e.point, e.pointIndex));\n\t\n\t      if( tooltipX != null )\n\t          nv.tooltip.show([leftX, topX], tooltipX(e.series.key, xVal, yVal, e, chart), 'n', 1, offsetElement, 'x-nvtooltip');\n\t      if( tooltipY != null )\n\t          nv.tooltip.show([leftY, topY], tooltipY(e.series.key, xVal, yVal, e, chart), 'e', 1, offsetElement, 'y-nvtooltip');\n\t      if( tooltip != null )\n\t          nv.tooltip.show([left, top], tooltip(e.series.key, xVal, yVal, e, chart), e.value < 0 ? 'n' : 's', null, offsetElement);\n\t  };\n\t\n\t  var controlsData = [\n\t    { key: 'Magnify', disabled: true }\n\t  ];\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this),\n\t          that = this;\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t\n\t      chart.update = function() { container.call(chart); };\n\t      chart.container = this;\n\t\n\t      //set state.disabled\n\t      state.disabled = data.map(function(d) { return !!d.disabled });\n\t\n\t      if (!defaultState) {\n\t        var key;\n\t        defaultState = {};\n\t        for (key in state) {\n\t          if (state[key] instanceof Array)\n\t            defaultState[key] = state[key].slice(0);\n\t          else\n\t            defaultState[key] = state[key];\n\t        }\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t      // Display noData message if there's nothing to show.\n\t\n\t      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', margin.top + availableHeight / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x0 = x0 || x;\n\t      y0 = y0 || y;\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-scatterChart').data([data]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatterChart nv-chart-' + scatter.id());\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g');\n\t\n\t      // background for pointer events\n\t      gEnter.append('rect').attr('class', 'nvd3 nv-background');\n\t\n\t      gEnter.append('g').attr('class', 'nv-x nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-y nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-scatterWrap');\n\t      gEnter.append('g').attr('class', 'nv-distWrap');\n\t      gEnter.append('g').attr('class', 'nv-legendWrap');\n\t      gEnter.append('g').attr('class', 'nv-controlsWrap');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Legend\n\t\n\t      if (showLegend) {\n\t        var legendWidth = (showControls) ? availableWidth / 2 : availableWidth;\n\t        legend.width(legendWidth);\n\t\n\t        wrap.select('.nv-legendWrap')\n\t            .datum(data)\n\t            .call(legend);\n\t\n\t        if ( margin.top != legend.height()) {\n\t          margin.top = legend.height();\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t        }\n\t\n\t        wrap.select('.nv-legendWrap')\n\t            .attr('transform', 'translate(' + (availableWidth - legendWidth) + ',' + (-margin.top) +')');\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Controls\n\t\n\t      if (showControls) {\n\t        controls.width(180).color(['#444']);\n\t        g.select('.nv-controlsWrap')\n\t            .datum(controlsData)\n\t            .attr('transform', 'translate(0,' + (-margin.top) +')')\n\t            .call(controls);\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      if (rightAlignYAxis) {\n\t          g.select(\".nv-y.nv-axis\")\n\t              .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t      // Main Chart Component(s)\n\t\n\t      scatter\n\t          .width(availableWidth)\n\t          .height(availableHeight)\n\t          .color(data.map(function(d,i) {\n\t            return d.color || color(d, i);\n\t          }).filter(function(d,i) { return !data[i].disabled }));\n\t\n\t      if (xPadding !== 0)\n\t        scatter.xDomain(null);\n\t\n\t      if (yPadding !== 0)\n\t        scatter.yDomain(null);\n\t\n\t      wrap.select('.nv-scatterWrap')\n\t          .datum(data.filter(function(d) { return !d.disabled }))\n\t          .call(scatter);\n\t\n\t      //Adjust for x and y padding\n\t      if (xPadding !== 0) {\n\t        var xRange = x.domain()[1] - x.domain()[0];\n\t        scatter.xDomain([x.domain()[0] - (xPadding * xRange), x.domain()[1] + (xPadding * xRange)]);\n\t      }\n\t\n\t      if (yPadding !== 0) {\n\t        var yRange = y.domain()[1] - y.domain()[0];\n\t        scatter.yDomain([y.domain()[0] - (yPadding * yRange), y.domain()[1] + (yPadding * yRange)]);\n\t      }\n\t\n\t      //Only need to update the scatter again if x/yPadding changed the domain.\n\t      if (yPadding !== 0 || xPadding !== 0) {\n\t        wrap.select('.nv-scatterWrap')\n\t            .datum(data.filter(function(d) { return !d.disabled }))\n\t            .call(scatter);\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Axes\n\t      if (showXAxis) {\n\t        xAxis\n\t            .scale(x)\n\t            .ticks( xAxis.ticks() && xAxis.ticks().length ? xAxis.ticks() : availableWidth / 100 )\n\t            .tickSize( -availableHeight , 0);\n\t\n\t        g.select('.nv-x.nv-axis')\n\t            .attr('transform', 'translate(0,' + y.range()[0] + ')')\n\t            .call(xAxis);\n\t\n\t      }\n\t\n\t      if (showYAxis) {\n\t        yAxis\n\t            .scale(y)\n\t            .ticks( yAxis.ticks() && yAxis.ticks().length ? yAxis.ticks() : availableHeight / 36 )\n\t            .tickSize( -availableWidth, 0);\n\t\n\t        g.select('.nv-y.nv-axis')\n\t            .call(yAxis);\n\t      }\n\t\n\t\n\t      if (showDistX) {\n\t        distX\n\t            .getData(scatter.x())\n\t            .scale(x)\n\t            .width(availableWidth)\n\t            .color(data.map(function(d,i) {\n\t              return d.color || color(d, i);\n\t            }).filter(function(d,i) { return !data[i].disabled }));\n\t        gEnter.select('.nv-distWrap').append('g')\n\t            .attr('class', 'nv-distributionX');\n\t        g.select('.nv-distributionX')\n\t            .attr('transform', 'translate(0,' + y.range()[0] + ')')\n\t            .datum(data.filter(function(d) { return !d.disabled }))\n\t            .call(distX);\n\t      }\n\t\n\t      if (showDistY) {\n\t        distY\n\t            .getData(scatter.y())\n\t            .scale(y)\n\t            .width(availableHeight)\n\t            .color(data.map(function(d,i) {\n\t              return d.color || color(d, i);\n\t            }).filter(function(d,i) { return !data[i].disabled }));\n\t        gEnter.select('.nv-distWrap').append('g')\n\t            .attr('class', 'nv-distributionY');\n\t        g.select('.nv-distributionY')\n\t            .attr('transform', \n\t              'translate(' + (rightAlignYAxis ? availableWidth : -distY.size() ) + ',0)')\n\t            .datum(data.filter(function(d) { return !d.disabled }))\n\t            .call(distY);\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t\n\t\n\t      if (d3.fisheye) {\n\t        g.select('.nv-background')\n\t            .attr('width', availableWidth)\n\t            .attr('height', availableHeight);\n\t\n\t        g.select('.nv-background').on('mousemove', updateFisheye);\n\t        g.select('.nv-background').on('click', function() { pauseFisheye = !pauseFisheye;});\n\t        scatter.dispatch.on('elementClick.freezeFisheye', function() {\n\t          pauseFisheye = !pauseFisheye;\n\t        });\n\t      }\n\t\n\t\n\t      function updateFisheye() {\n\t        if (pauseFisheye) {\n\t          g.select('.nv-point-paths').style('pointer-events', 'all');\n\t          return false;\n\t        }\n\t\n\t        g.select('.nv-point-paths').style('pointer-events', 'none' );\n\t\n\t        var mouse = d3.mouse(this);\n\t        x.distortion(fisheye).focus(mouse[0]);\n\t        y.distortion(fisheye).focus(mouse[1]);\n\t\n\t        g.select('.nv-scatterWrap')\n\t            .call(scatter);\n\t\n\t        if (showXAxis)\n\t          g.select('.nv-x.nv-axis').call(xAxis);\n\t        \n\t        if (showYAxis)\n\t          g.select('.nv-y.nv-axis').call(yAxis);\n\t        \n\t        g.select('.nv-distributionX')\n\t            .datum(data.filter(function(d) { return !d.disabled }))\n\t            .call(distX);\n\t        g.select('.nv-distributionY')\n\t            .datum(data.filter(function(d) { return !d.disabled }))\n\t            .call(distY);\n\t      }\n\t\n\t\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t      controls.dispatch.on('legendClick', function(d,i) {\n\t        d.disabled = !d.disabled;\n\t\n\t        fisheye = d.disabled ? 0 : 2.5;\n\t        g.select('.nv-background') .style('pointer-events', d.disabled ? 'none' : 'all');\n\t        g.select('.nv-point-paths').style('pointer-events', d.disabled ? 'all' : 'none' );\n\t\n\t        if (d.disabled) {\n\t          x.distortion(fisheye).focus(0);\n\t          y.distortion(fisheye).focus(0);\n\t\n\t          g.select('.nv-scatterWrap').call(scatter);\n\t          g.select('.nv-x.nv-axis').call(xAxis);\n\t          g.select('.nv-y.nv-axis').call(yAxis);\n\t        } else {\n\t          pauseFisheye = false;\n\t        }\n\t\n\t        chart.update();\n\t      });\n\t\n\t      legend.dispatch.on('stateChange', function(newState) {\n\t        state.disabled = newState.disabled;\n\t        dispatch.stateChange(state);\n\t        chart.update();\n\t      });\n\t\n\t      scatter.dispatch.on('elementMouseover.tooltip', function(e) {\n\t        d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-distx-' + e.pointIndex)\n\t            .attr('y1', function(d,i) { return e.pos[1] - availableHeight;});\n\t        d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-disty-' + e.pointIndex)\n\t            .attr('x2', e.pos[0] + distX.size());\n\t\n\t        e.pos = [e.pos[0] + margin.left, e.pos[1] + margin.top];\n\t        dispatch.tooltipShow(e);\n\t      });\n\t\n\t      dispatch.on('tooltipShow', function(e) {\n\t        if (tooltips) showTooltip(e, that.parentNode);\n\t      });\n\t\n\t      // Update chart from a state object passed to event handler\n\t      dispatch.on('changeState', function(e) {\n\t\n\t        if (typeof e.disabled !== 'undefined') {\n\t          data.forEach(function(series,i) {\n\t            series.disabled = e.disabled[i];\n\t          });\n\t\n\t          state.disabled = e.disabled;\n\t        }\n\t\n\t        chart.update();\n\t      });\n\t\n\t      //============================================================\n\t\n\t\n\t      //store old scales for use in transitions on update\n\t      x0 = x.copy();\n\t      y0 = y.copy();\n\t\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  scatter.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t\n\t    d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-distx-' + e.pointIndex)\n\t        .attr('y1', 0);\n\t    d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-disty-' + e.pointIndex)\n\t        .attr('x2', distY.size());\n\t  });\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.dispatch = dispatch;\n\t  chart.scatter = scatter;\n\t  chart.legend = legend;\n\t  chart.controls = controls;\n\t  chart.xAxis = xAxis;\n\t  chart.yAxis = yAxis;\n\t  chart.distX = distX;\n\t  chart.distY = distY;\n\t\n\t  d3.rebind(chart, scatter, 'id', 'interactive', 'pointActive', 'x', 'y', 'shape', 'size', 'xScale', 'yScale', 'zScale', 'xDomain', 'yDomain', 'xRange', 'yRange', 'sizeDomain', 'sizeRange', 'forceX', 'forceY', 'forceSize', 'clipVoronoi', 'clipRadius', 'useVoronoi');\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    legend.color(color);\n\t    distX.color(color);\n\t    distY.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.showDistX = function(_) {\n\t    if (!arguments.length) return showDistX;\n\t    showDistX = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showDistY = function(_) {\n\t    if (!arguments.length) return showDistY;\n\t    showDistY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showControls = function(_) {\n\t    if (!arguments.length) return showControls;\n\t    showControls = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showLegend = function(_) {\n\t    if (!arguments.length) return showLegend;\n\t    showLegend = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showXAxis = function(_) {\n\t    if (!arguments.length) return showXAxis;\n\t    showXAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showYAxis = function(_) {\n\t    if (!arguments.length) return showYAxis;\n\t    showYAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.rightAlignYAxis = function(_) {\n\t    if(!arguments.length) return rightAlignYAxis;\n\t    rightAlignYAxis = _;\n\t    yAxis.orient( (_) ? 'right' : 'left');\n\t    return chart;\n\t  };\n\t\n\t\n\t  chart.fisheye = function(_) {\n\t    if (!arguments.length) return fisheye;\n\t    fisheye = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xPadding = function(_) {\n\t    if (!arguments.length) return xPadding;\n\t    xPadding = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yPadding = function(_) {\n\t    if (!arguments.length) return yPadding;\n\t    yPadding = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipXContent = function(_) {\n\t    if (!arguments.length) return tooltipX;\n\t    tooltipX = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipYContent = function(_) {\n\t    if (!arguments.length) return tooltipY;\n\t    tooltipY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.state = function(_) {\n\t    if (!arguments.length) return state;\n\t    state = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.defaultState = function(_) {\n\t    if (!arguments.length) return defaultState;\n\t    defaultState = _;\n\t    return chart;\n\t  };\n\t  \n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.transitionDuration = function(_) {\n\t    if (!arguments.length) return transitionDuration;\n\t    transitionDuration = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.scatterPlusLineChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var scatter      = nv.models.scatter()\n\t    , xAxis        = nv.models.axis()\n\t    , yAxis        = nv.models.axis()\n\t    , legend       = nv.models.legend()\n\t    , controls     = nv.models.legend()\n\t    , distX        = nv.models.distribution()\n\t    , distY        = nv.models.distribution()\n\t    ;\n\t\n\t  var margin       = {top: 30, right: 20, bottom: 50, left: 75}\n\t    , width        = null\n\t    , height       = null\n\t    , color        = nv.utils.defaultColor()\n\t    , x            = d3.fisheye ? d3.fisheye.scale(d3.scale.linear).distortion(0) : scatter.xScale()\n\t    , y            = d3.fisheye ? d3.fisheye.scale(d3.scale.linear).distortion(0) : scatter.yScale()\n\t    , showDistX    = false\n\t    , showDistY    = false\n\t    , showLegend   = true\n\t    , showXAxis    = true\n\t    , showYAxis    = true\n\t    , rightAlignYAxis = false\n\t    , showControls = !!d3.fisheye\n\t    , fisheye      = 0\n\t    , pauseFisheye = false\n\t    , tooltips     = true\n\t    , tooltipX     = function(key, x, y) { return '<strong>' + x + '</strong>' }\n\t    , tooltipY     = function(key, x, y) { return '<strong>' + y + '</strong>' }\n\t    , tooltip      = function(key, x, y, date) { return '<h3>' + key + '</h3>' \n\t                                                      + '<p>' + date + '</p>' }\n\t    , state = {}\n\t    , defaultState = null\n\t    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n\t    , noData       = \"No Data Available.\"\n\t    , transitionDuration = 0\n\t    ;\n\t\n\t  scatter\n\t    .xScale(x)\n\t    .yScale(y)\n\t    ;\n\t  xAxis\n\t    .orient('bottom')\n\t    .tickPadding(10)\n\t    ;\n\t  yAxis\n\t    .orient((rightAlignYAxis) ? 'right' : 'left')\n\t    .tickPadding(10)\n\t    ;\n\t  distX\n\t    .axis('x')\n\t    ;\n\t  distY\n\t    .axis('y')\n\t    ;\n\t  \n\t  controls.updateState(false);\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var x0, y0;\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t    //TODO: make tooltip style an option between single or dual on axes (maybe on all charts with axes?)\n\t\n\t    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t        leftX = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t        topX = y.range()[0] + margin.top + ( offsetElement.offsetTop || 0),\n\t        leftY = x.range()[0] + margin.left + ( offsetElement.offsetLeft || 0 ),\n\t        topY = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t        xVal = xAxis.tickFormat()(scatter.x()(e.point, e.pointIndex)),\n\t        yVal = yAxis.tickFormat()(scatter.y()(e.point, e.pointIndex));\n\t\n\t      if( tooltipX != null )\n\t          nv.tooltip.show([leftX, topX], tooltipX(e.series.key, xVal, yVal, e, chart), 'n', 1, offsetElement, 'x-nvtooltip');\n\t      if( tooltipY != null )\n\t          nv.tooltip.show([leftY, topY], tooltipY(e.series.key, xVal, yVal, e, chart), 'e', 1, offsetElement, 'y-nvtooltip');\n\t      if( tooltip != null )\n\t          nv.tooltip.show([left, top], tooltip(e.series.key, xVal, yVal, e.point.tooltip, e, chart), e.value < 0 ? 'n' : 's', null, offsetElement);\n\t  };\n\t\n\t  var controlsData = [\n\t    { key: 'Magnify', disabled: true }\n\t  ];\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this),\n\t          that = this;\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t\n\t      chart.update = function() { container.call(chart); };\n\t      chart.container = this;\n\t\n\t      //set state.disabled\n\t      state.disabled = data.map(function(d) { return !!d.disabled });\n\t\n\t      if (!defaultState) {\n\t        var key;\n\t        defaultState = {};\n\t        for (key in state) {\n\t          if (state[key] instanceof Array)\n\t            defaultState[key] = state[key].slice(0);\n\t          else\n\t            defaultState[key] = state[key];\n\t        }\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t      // Display noData message if there's nothing to show.\n\t\n\t      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', margin.top + availableHeight / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x = scatter.xScale();\n\t      y = scatter.yScale();\n\t\n\t      x0 = x0 || x;\n\t      y0 = y0 || y;\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-scatterChart').data([data]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatterChart nv-chart-' + scatter.id());\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g')\n\t\n\t      // background for pointer events\n\t      gEnter.append('rect').attr('class', 'nvd3 nv-background').style(\"pointer-events\",\"none\");\n\t\n\t      gEnter.append('g').attr('class', 'nv-x nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-y nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-scatterWrap');\n\t      gEnter.append('g').attr('class', 'nv-regressionLinesWrap');\n\t      gEnter.append('g').attr('class', 'nv-distWrap');\n\t      gEnter.append('g').attr('class', 'nv-legendWrap');\n\t      gEnter.append('g').attr('class', 'nv-controlsWrap');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      if (rightAlignYAxis) {\n\t          g.select(\".nv-y.nv-axis\")\n\t              .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Legend\n\t\n\t      if (showLegend) {\n\t        legend.width( availableWidth / 2 );\n\t\n\t        wrap.select('.nv-legendWrap')\n\t            .datum(data)\n\t            .call(legend);\n\t\n\t        if ( margin.top != legend.height()) {\n\t          margin.top = legend.height();\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t        }\n\t\n\t        wrap.select('.nv-legendWrap')\n\t            .attr('transform', 'translate(' + (availableWidth / 2) + ',' + (-margin.top) +')');\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Controls\n\t\n\t      if (showControls) {\n\t        controls.width(180).color(['#444']);\n\t        g.select('.nv-controlsWrap')\n\t            .datum(controlsData)\n\t            .attr('transform', 'translate(0,' + (-margin.top) +')')\n\t            .call(controls);\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Main Chart Component(s)\n\t\n\t      scatter\n\t          .width(availableWidth)\n\t          .height(availableHeight)\n\t          .color(data.map(function(d,i) {\n\t            return d.color || color(d, i);\n\t          }).filter(function(d,i) { return !data[i].disabled }))\n\t\n\t      wrap.select('.nv-scatterWrap')\n\t          .datum(data.filter(function(d) { return !d.disabled }))\n\t          .call(scatter);\n\t\n\t      wrap.select('.nv-regressionLinesWrap')\n\t          .attr('clip-path', 'url(#nv-edge-clip-' + scatter.id() + ')');\n\t\n\t      var regWrap = wrap.select('.nv-regressionLinesWrap').selectAll('.nv-regLines')\n\t                      .data(function(d) {return d });\n\t      \n\t      regWrap.enter().append('g').attr('class', 'nv-regLines');\n\t\n\t      var regLine = regWrap.selectAll('.nv-regLine').data(function(d){return [d]});\n\t      var regLineEnter = regLine.enter()\n\t                       .append('line').attr('class', 'nv-regLine')\n\t                       .style('stroke-opacity', 0);\n\t\n\t      regLine\n\t          \n\t          .attr('x1', x.range()[0])\n\t          .attr('x2', x.range()[1])\n\t          .attr('y1', function(d,i) {return y(x.domain()[0] * d.slope + d.intercept) })\n\t          .attr('y2', function(d,i) { return y(x.domain()[1] * d.slope + d.intercept) })\n\t          .style('stroke', function(d,i,j) { return color(d,j) })\n\t          .style('stroke-opacity', function(d,i) {\n\t            return (d.disabled || typeof d.slope === 'undefined' || typeof d.intercept === 'undefined') ? 0 : 1 \n\t          });\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Axes\n\t\n\t      if (showXAxis) {\n\t        xAxis\n\t            .scale(x)\n\t            .ticks( xAxis.ticks() ? xAxis.ticks() : availableWidth / 100 )\n\t            .tickSize( -availableHeight , 0);\n\t\n\t        g.select('.nv-x.nv-axis')\n\t            .attr('transform', 'translate(0,' + y.range()[0] + ')')\n\t            .call(xAxis);\n\t      }\n\t\n\t      if (showYAxis) {\n\t        yAxis\n\t            .scale(y)\n\t            .ticks( yAxis.ticks() ? yAxis.ticks() : availableHeight / 36 )\n\t            .tickSize( -availableWidth, 0);\n\t\n\t        g.select('.nv-y.nv-axis')\n\t            .call(yAxis);\n\t      }\n\t\n\t\n\t      if (showDistX) {\n\t        distX\n\t            .getData(scatter.x())\n\t            .scale(x)\n\t            .width(availableWidth)\n\t            .color(data.map(function(d,i) {\n\t              return d.color || color(d, i);\n\t            }).filter(function(d,i) { return !data[i].disabled }));\n\t        gEnter.select('.nv-distWrap').append('g')\n\t            .attr('class', 'nv-distributionX');\n\t        g.select('.nv-distributionX')\n\t            .attr('transform', 'translate(0,' + y.range()[0] + ')')\n\t            .datum(data.filter(function(d) { return !d.disabled }))\n\t            .call(distX);\n\t      }\n\t\n\t      if (showDistY) {\n\t        distY\n\t            .getData(scatter.y())\n\t            .scale(y)\n\t            .width(availableHeight)\n\t            .color(data.map(function(d,i) {\n\t              return d.color || color(d, i);\n\t            }).filter(function(d,i) { return !data[i].disabled }));\n\t        gEnter.select('.nv-distWrap').append('g')\n\t            .attr('class', 'nv-distributionY');\n\t        g.select('.nv-distributionY')\n\t            .attr('transform', 'translate(' + (rightAlignYAxis ? availableWidth : -distY.size() ) + ',0)')\n\t            .datum(data.filter(function(d) { return !d.disabled }))\n\t            .call(distY);\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t\n\t\n\t      if (d3.fisheye) {\n\t        g.select('.nv-background')\n\t            .attr('width', availableWidth)\n\t            .attr('height', availableHeight)\n\t            ;\n\t\n\t        g.select('.nv-background').on('mousemove', updateFisheye);\n\t        g.select('.nv-background').on('click', function() { pauseFisheye = !pauseFisheye;});\n\t        scatter.dispatch.on('elementClick.freezeFisheye', function() {\n\t          pauseFisheye = !pauseFisheye;\n\t        });\n\t      }\n\t\n\t\n\t      function updateFisheye() {\n\t        if (pauseFisheye) {\n\t          g.select('.nv-point-paths').style('pointer-events', 'all');\n\t          return false;\n\t        }\n\t\n\t        g.select('.nv-point-paths').style('pointer-events', 'none' );\n\t\n\t        var mouse = d3.mouse(this);\n\t        x.distortion(fisheye).focus(mouse[0]);\n\t        y.distortion(fisheye).focus(mouse[1]);\n\t\n\t        g.select('.nv-scatterWrap')\n\t            .datum(data.filter(function(d) { return !d.disabled }))\n\t            .call(scatter);\n\t\n\t        if (showXAxis)\n\t          g.select('.nv-x.nv-axis').call(xAxis);\n\t\n\t        if (showYAxis)\n\t          g.select('.nv-y.nv-axis').call(yAxis);\n\t        \n\t        g.select('.nv-distributionX')\n\t            .datum(data.filter(function(d) { return !d.disabled }))\n\t            .call(distX);\n\t        g.select('.nv-distributionY')\n\t            .datum(data.filter(function(d) { return !d.disabled }))\n\t            .call(distY);\n\t      }\n\t\n\t\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t      controls.dispatch.on('legendClick', function(d,i) {\n\t        d.disabled = !d.disabled;\n\t\n\t        fisheye = d.disabled ? 0 : 2.5;\n\t        g.select('.nv-background') .style('pointer-events', d.disabled ? 'none' : 'all');\n\t        g.select('.nv-point-paths').style('pointer-events', d.disabled ? 'all' : 'none' );\n\t\n\t        if (d.disabled) {\n\t          x.distortion(fisheye).focus(0);\n\t          y.distortion(fisheye).focus(0);\n\t\n\t          g.select('.nv-scatterWrap').call(scatter);\n\t          g.select('.nv-x.nv-axis').call(xAxis);\n\t          g.select('.nv-y.nv-axis').call(yAxis);\n\t        } else {\n\t          pauseFisheye = false;\n\t        }\n\t\n\t        chart.update();\n\t      });\n\t\n\t      legend.dispatch.on('stateChange', function(newState) { \n\t        state = newState;\n\t        dispatch.stateChange(state);\n\t        chart.update();\n\t      });\n\t\n\t\n\t      scatter.dispatch.on('elementMouseover.tooltip', function(e) {\n\t        d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-distx-' + e.pointIndex)\n\t            .attr('y1', e.pos[1] - availableHeight);\n\t        d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-disty-' + e.pointIndex)\n\t            .attr('x2', e.pos[0] + distX.size());\n\t\n\t        e.pos = [e.pos[0] + margin.left, e.pos[1] + margin.top];\n\t        dispatch.tooltipShow(e);\n\t      });\n\t\n\t      dispatch.on('tooltipShow', function(e) {\n\t        if (tooltips) showTooltip(e, that.parentNode);\n\t      });\n\t\n\t      // Update chart from a state object passed to event handler\n\t      dispatch.on('changeState', function(e) {\n\t\n\t        if (typeof e.disabled !== 'undefined') {\n\t          data.forEach(function(series,i) {\n\t            series.disabled = e.disabled[i];\n\t          });\n\t\n\t          state.disabled = e.disabled;\n\t        }\n\t\n\t        chart.update();\n\t      });\n\t\n\t      //============================================================\n\t\n\t\n\t      //store old scales for use in transitions on update\n\t      x0 = x.copy();\n\t      y0 = y.copy();\n\t\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  scatter.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t\n\t    d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-distx-' + e.pointIndex)\n\t        .attr('y1', 0);\n\t    d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-disty-' + e.pointIndex)\n\t        .attr('x2', distY.size());\n\t  });\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.dispatch = dispatch;\n\t  chart.scatter = scatter;\n\t  chart.legend = legend;\n\t  chart.controls = controls;\n\t  chart.xAxis = xAxis;\n\t  chart.yAxis = yAxis;\n\t  chart.distX = distX;\n\t  chart.distY = distY;\n\t\n\t  d3.rebind(chart, scatter, 'id', 'interactive', 'pointActive', 'x', 'y', 'shape', 'size', 'xScale', 'yScale', 'zScale', 'xDomain', 'yDomain', 'xRange', 'yRange', 'sizeDomain', 'sizeRange', 'forceX', 'forceY', 'forceSize', 'clipVoronoi', 'clipRadius', 'useVoronoi');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    legend.color(color);\n\t    distX.color(color);\n\t    distY.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.showDistX = function(_) {\n\t    if (!arguments.length) return showDistX;\n\t    showDistX = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showDistY = function(_) {\n\t    if (!arguments.length) return showDistY;\n\t    showDistY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showControls = function(_) {\n\t    if (!arguments.length) return showControls;\n\t    showControls = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showLegend = function(_) {\n\t    if (!arguments.length) return showLegend;\n\t    showLegend = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showXAxis = function(_) {\n\t    if (!arguments.length) return showXAxis;\n\t    showXAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showYAxis = function(_) {\n\t    if (!arguments.length) return showYAxis;\n\t    showYAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.rightAlignYAxis = function(_) {\n\t    if(!arguments.length) return rightAlignYAxis;\n\t    rightAlignYAxis = _;\n\t    yAxis.orient( (_) ? 'right' : 'left');\n\t    return chart;\n\t  };\n\t\n\t  chart.fisheye = function(_) {\n\t    if (!arguments.length) return fisheye;\n\t    fisheye = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipXContent = function(_) {\n\t    if (!arguments.length) return tooltipX;\n\t    tooltipX = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipYContent = function(_) {\n\t    if (!arguments.length) return tooltipY;\n\t    tooltipY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.state = function(_) {\n\t    if (!arguments.length) return state;\n\t    state = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.defaultState = function(_) {\n\t    if (!arguments.length) return defaultState;\n\t    defaultState = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.transitionDuration = function(_) {\n\t    if (!arguments.length) return transitionDuration;\n\t    transitionDuration = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.sparkline = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var margin = {top: 2, right: 0, bottom: 2, left: 0}\n\t    , width = 400\n\t    , height = 32\n\t    , animate = true\n\t    , x = d3.scale.linear()\n\t    , y = d3.scale.linear()\n\t    , getX = function(d) { return d.x }\n\t    , getY = function(d) { return d.y }\n\t    , color = nv.utils.getColor(['#000'])\n\t    , xDomain\n\t    , yDomain\n\t    , xRange\n\t    , yRange\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var availableWidth = width - margin.left - margin.right,\n\t          availableHeight = height - margin.top - margin.bottom,\n\t          container = d3.select(this);\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x   .domain(xDomain || d3.extent(data, getX ))\n\t          .range(xRange || [0, availableWidth]);\n\t\n\t      y   .domain(yDomain || d3.extent(data, getY ))\n\t          .range(yRange || [availableHeight, 0]);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-sparkline').data([data]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparkline');\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      var paths = wrap.selectAll('path')\n\t          .data(function(d) { return [d] });\n\t      paths.enter().append('path');\n\t      paths.exit().remove();\n\t      paths\n\t          .style('stroke', function(d,i) { return d.color || color(d, i) })\n\t          .attr('d', d3.svg.line()\n\t            .x(function(d,i) { return x(getX(d,i)) })\n\t            .y(function(d,i) { return y(getY(d,i)) })\n\t          );\n\t\n\t\n\t      // TODO: Add CURRENT data point (Need Min, Mac, Current / Most recent)\n\t      var points = wrap.selectAll('circle.nv-point')\n\t          .data(function(data) {\n\t              var yValues = data.map(function(d, i) { return getY(d,i); });\n\t              function pointIndex(index) {\n\t                  if (index != -1) {\n\t\t              var result = data[index];\n\t                      result.pointIndex = index;\n\t                      return result;\n\t                  } else {\n\t                      return null;\n\t                  }\n\t              }\n\t              var maxPoint = pointIndex(yValues.lastIndexOf(y.domain()[1])),\n\t                  minPoint = pointIndex(yValues.indexOf(y.domain()[0])),\n\t                  currentPoint = pointIndex(yValues.length - 1);\n\t              return [minPoint, maxPoint, currentPoint].filter(function (d) {return d != null;});\n\t          });\n\t      points.enter().append('circle');\n\t      points.exit().remove();\n\t      points\n\t          .attr('cx', function(d,i) { return x(getX(d,d.pointIndex)) })\n\t          .attr('cy', function(d,i) { return y(getY(d,d.pointIndex)) })\n\t          .attr('r', 2)\n\t          .attr('class', function(d,i) {\n\t            return getX(d, d.pointIndex) == x.domain()[1] ? 'nv-point nv-currentValue' :\n\t                   getY(d, d.pointIndex) == y.domain()[0] ? 'nv-point nv-minValue' : 'nv-point nv-maxValue'\n\t          });\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.x = function(_) {\n\t    if (!arguments.length) return getX;\n\t    getX = d3.functor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.y = function(_) {\n\t    if (!arguments.length) return getY;\n\t    getY = d3.functor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.xScale = function(_) {\n\t    if (!arguments.length) return x;\n\t    x = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yScale = function(_) {\n\t    if (!arguments.length) return y;\n\t    y = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xDomain = function(_) {\n\t    if (!arguments.length) return xDomain;\n\t    xDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yDomain = function(_) {\n\t    if (!arguments.length) return yDomain;\n\t    yDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xRange = function(_) {\n\t    if (!arguments.length) return xRange;\n\t    xRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yRange = function(_) {\n\t    if (!arguments.length) return yRange;\n\t    yRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.animate = function(_) {\n\t    if (!arguments.length) return animate;\n\t    animate = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.sparklinePlus = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var sparkline = nv.models.sparkline();\n\t\n\t  var margin = {top: 15, right: 100, bottom: 10, left: 50}\n\t    , width = null\n\t    , height = null\n\t    , x\n\t    , y\n\t    , index = []\n\t    , paused = false\n\t    , xTickFormat = d3.format(',r')\n\t    , yTickFormat = d3.format(',.2f')\n\t    , showValue = true\n\t    , alignValue = true\n\t    , rightAlignValue = false\n\t    , noData = \"No Data Available.\"\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this);\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t\n\t      \n\t\n\t      chart.update = function() { chart(selection) };\n\t      chart.container = this;\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Display No Data message if there's nothing to show.\n\t\n\t      if (!data || !data.length) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', margin.top + availableHeight / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      var currentValue = sparkline.y()(data[data.length-1], data.length-1);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x = sparkline.xScale();\n\t      y = sparkline.yScale();\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-sparklineplus').data([data]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparklineplus');\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-sparklineWrap');\n\t      gEnter.append('g').attr('class', 'nv-valueWrap');\n\t      gEnter.append('g').attr('class', 'nv-hoverArea');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Main Chart Component(s)\n\t\n\t      var sparklineWrap = g.select('.nv-sparklineWrap');\n\t\n\t      sparkline\n\t        .width(availableWidth)\n\t        .height(availableHeight);\n\t\n\t      sparklineWrap\n\t          .call(sparkline);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      var valueWrap = g.select('.nv-valueWrap');\n\t      \n\t      var value = valueWrap.selectAll('.nv-currentValue')\n\t          .data([currentValue]);\n\t\n\t      value.enter().append('text').attr('class', 'nv-currentValue')\n\t          .attr('dx', rightAlignValue ? -8 : 8)\n\t          .attr('dy', '.9em')\n\t          .style('text-anchor', rightAlignValue ? 'end' : 'start');\n\t\n\t      value\n\t          .attr('x', availableWidth + (rightAlignValue ? margin.right : 0))\n\t          .attr('y', alignValue ? function(d) { return y(d) } : 0)\n\t          .style('fill', sparkline.color()(data[data.length-1], data.length-1))\n\t          .text(yTickFormat(currentValue));\n\t\n\t\n\t\n\t      gEnter.select('.nv-hoverArea').append('rect')\n\t          .on('mousemove', sparklineHover)\n\t          .on('click', function() { paused = !paused })\n\t          .on('mouseout', function() { index = []; updateValueLine(); });\n\t          //.on('mouseout', function() { index = null; updateValueLine(); });\n\t\n\t      g.select('.nv-hoverArea rect')\n\t          .attr('transform', function(d) { return 'translate(' + -margin.left + ',' + -margin.top + ')' })\n\t          .attr('width', availableWidth + margin.left + margin.right)\n\t          .attr('height', availableHeight + margin.top);\n\t\n\t\n\t\n\t      function updateValueLine() { //index is currently global (within the chart), may or may not keep it that way\n\t        if (paused) return;\n\t\n\t        var hoverValue = g.selectAll('.nv-hoverValue').data(index)\n\t\n\t        var hoverEnter = hoverValue.enter()\n\t          .append('g').attr('class', 'nv-hoverValue')\n\t            .style('stroke-opacity', 0)\n\t            .style('fill-opacity', 0);\n\t\n\t        hoverValue.exit()\n\t          \n\t            .style('stroke-opacity', 0)\n\t            .style('fill-opacity', 0)\n\t            .remove();\n\t\n\t        hoverValue\n\t            .attr('transform', function(d) { return 'translate(' + x(sparkline.x()(data[d],d)) + ',0)' })\n\t          \n\t            .style('stroke-opacity', 1)\n\t            .style('fill-opacity', 1);\n\t\n\t        if (!index.length) return;\n\t\n\t        hoverEnter.append('line')\n\t            .attr('x1', 0)\n\t            .attr('y1', -margin.top)\n\t            .attr('x2', 0)\n\t            .attr('y2', availableHeight);\n\t\n\t\n\t        hoverEnter.append('text').attr('class', 'nv-xValue')\n\t            .attr('x', -6)\n\t            .attr('y', -margin.top)\n\t            .attr('text-anchor', 'end')\n\t            .attr('dy', '.9em')\n\t\n\t\n\t        g.select('.nv-hoverValue .nv-xValue')\n\t            .text(xTickFormat(sparkline.x()(data[index[0]], index[0])));\n\t\n\t        hoverEnter.append('text').attr('class', 'nv-yValue')\n\t            .attr('x', 6)\n\t            .attr('y', -margin.top)\n\t            .attr('text-anchor', 'start')\n\t            .attr('dy', '.9em')\n\t\n\t        g.select('.nv-hoverValue .nv-yValue')\n\t            .text(yTickFormat(sparkline.y()(data[index[0]], index[0])));\n\t\n\t      }\n\t\n\t\n\t      function sparklineHover() {\n\t        if (paused) return;\n\t\n\t        var pos = d3.mouse(this)[0] - margin.left;\n\t\n\t        function getClosestIndex(data, x) {\n\t          var distance = Math.abs(sparkline.x()(data[0], 0) - x);\n\t          var closestIndex = 0;\n\t          for (var i = 0; i < data.length; i++){\n\t            if (Math.abs(sparkline.x()(data[i], i) - x) < distance) {\n\t              distance = Math.abs(sparkline.x()(data[i], i) - x);\n\t              closestIndex = i;\n\t            }\n\t          }\n\t          return closestIndex;\n\t        }\n\t\n\t        index = [getClosestIndex(data, Math.round(x.invert(pos)))];\n\t\n\t        updateValueLine();\n\t      }\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.sparkline = sparkline;\n\t\n\t  d3.rebind(chart, sparkline, 'x', 'y', 'xScale', 'yScale', 'color');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xTickFormat = function(_) {\n\t    if (!arguments.length) return xTickFormat;\n\t    xTickFormat = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yTickFormat = function(_) {\n\t    if (!arguments.length) return yTickFormat;\n\t    yTickFormat = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showValue = function(_) {\n\t    if (!arguments.length) return showValue;\n\t    showValue = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.alignValue = function(_) {\n\t    if (!arguments.length) return alignValue;\n\t    alignValue = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.rightAlignValue = function(_) {\n\t    if (!arguments.length) return rightAlignValue;\n\t    rightAlignValue = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.stackedArea = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t    , width = 960\n\t    , height = 500\n\t    , color = nv.utils.defaultColor() // a function that computes the color\n\t    , id = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't selet one\n\t    , getX = function(d) { return d.x } // accessor to get the x value from a data point\n\t    , getY = function(d) { return d.y } // accessor to get the y value from a data point\n\t    , style = 'stack'\n\t    , offset = 'zero'\n\t    , order = 'default'\n\t    , interpolate = 'linear'  // controls the line interpolation\n\t    , clipEdge = false // if true, masks lines within x and y scale\n\t    , x //can be accessed via chart.xScale()\n\t    , y //can be accessed via chart.yScale()\n\t    , scatter = nv.models.scatter()\n\t    , dispatch =  d3.dispatch('tooltipShow', 'tooltipHide', 'areaClick', 'areaMouseover', 'areaMouseout')\n\t    ;\n\t\n\t  scatter\n\t    .size(2.2) // default size\n\t    .sizeDomain([2.2,2.2]) // all the same size by default\n\t    ;\n\t\n\t  /************************************\n\t   * offset:\n\t   *   'wiggle' (stream)\n\t   *   'zero' (stacked)\n\t   *   'expand' (normalize to 100%)\n\t   *   'silhouette' (simple centered)\n\t   *\n\t   * order:\n\t   *   'inside-out' (stream)\n\t   *   'default' (input order)\n\t   ************************************/\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var availableWidth = width - margin.left - margin.right,\n\t          availableHeight = height - margin.top - margin.bottom,\n\t          container = d3.select(this);\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x = scatter.xScale();\n\t      y = scatter.yScale();\n\t\n\t      //------------------------------------------------------------\n\t\n\t      var dataRaw = data;\n\t      // Injecting point index into each point because d3.layout.stack().out does not give index\n\t      data.forEach(function(aseries, i) {\n\t        aseries.seriesIndex = i;\n\t        aseries.values = aseries.values.map(function(d, j) {\n\t          d.index = j;\n\t          d.seriesIndex = i;\n\t          return d;\n\t        });\n\t      });\n\t\n\t      var dataFiltered = data.filter(function(series) {\n\t            return !series.disabled;\n\t      });\n\t\n\t      data = d3.layout.stack()\n\t               .order(order)\n\t               .offset(offset)\n\t               .values(function(d) { return d.values })  //TODO: make values customizeable in EVERY model in this fashion\n\t               .x(getX)\n\t               .y(getY)\n\t               .out(function(d, y0, y) {\n\t                    var yHeight = (getY(d) === 0) ? 0 : y;\n\t                    d.display = {\n\t                      y: yHeight,\n\t                     y0: y0\n\t                    };\n\t                })\n\t              (dataFiltered);\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-stackedarea').data([data]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedarea');\n\t      var defsEnter = wrapEnter.append('defs');\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-areaWrap');\n\t      gEnter.append('g').attr('class', 'nv-scatterWrap');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      scatter\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t        .x(getX)\n\t        .y(function(d) { return d.display.y + d.display.y0 })\n\t        .forceY([0])\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color(d, d.seriesIndex);\n\t        }));\n\t\n\t\n\t      var scatterWrap = g.select('.nv-scatterWrap')\n\t          .datum(data);\n\t\n\t      scatterWrap.call(scatter);\n\t\n\t      defsEnter.append('clipPath')\n\t          .attr('id', 'nv-edge-clip-' + id)\n\t        .append('rect');\n\t\n\t      wrap.select('#nv-edge-clip-' + id + ' rect')\n\t          .attr('width', availableWidth)\n\t          .attr('height', availableHeight);\n\t\n\t      g   .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\t\n\t      var area = d3.svg.area()\n\t          .x(function(d,i)  { return x(getX(d,i)) })\n\t          .y0(function(d) {\n\t              return y(d.display.y0)\n\t          })\n\t          .y1(function(d) {\n\t              return y(d.display.y + d.display.y0)\n\t          })\n\t          .interpolate(interpolate);\n\t\n\t      var zeroArea = d3.svg.area()\n\t          .x(function(d,i)  { return x(getX(d,i)) })\n\t          .y0(function(d) { return y(d.display.y0) })\n\t          .y1(function(d) { return y(d.display.y0) });\n\t\n\t\n\t      var path = g.select('.nv-areaWrap').selectAll('path.nv-area')\n\t          .data(function(d) { return d });\n\t\n\t      path.enter().append('path').attr('class', function(d,i) { return 'nv-area nv-area-' + i })\n\t          .attr('d', function(d,i){\n\t            return zeroArea(d.values, d.seriesIndex);\n\t          })\n\t          .on('mouseover', function(d,i) {\n\t            d3.select(this).classed('hover', true);\n\t            dispatch.areaMouseover({\n\t              point: d,\n\t              series: d.key,\n\t              pos: [d3.event.pageX, d3.event.pageY],\n\t              seriesIndex: d.seriesIndex\n\t            });\n\t          })\n\t          .on('mouseout', function(d,i) {\n\t            d3.select(this).classed('hover', false);\n\t            dispatch.areaMouseout({\n\t              point: d,\n\t              series: d.key,\n\t              pos: [d3.event.pageX, d3.event.pageY],\n\t              seriesIndex: d.seriesIndex\n\t            });\n\t          })\n\t          .on('click', function(d,i) {\n\t            d3.select(this).classed('hover', false);\n\t            dispatch.areaClick({\n\t              point: d,\n\t              series: d.key,\n\t              pos: [d3.event.pageX, d3.event.pageY],\n\t              seriesIndex: d.seriesIndex\n\t            });\n\t          })\n\t\n\t      path.exit().remove();\n\t\n\t      path\n\t          .style('fill', function(d,i){\n\t            return d.color || color(d, d.seriesIndex)\n\t          })\n\t          .style('stroke', function(d,i){ return d.color || color(d, d.seriesIndex) });\n\t      path\n\t          .attr('d', function(d,i) {\n\t            return area(d.values,i)\n\t          });\n\t\n\t\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t      scatter.dispatch.on('elementMouseover.area', function(e) {\n\t        g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', true);\n\t      });\n\t      scatter.dispatch.on('elementMouseout.area', function(e) {\n\t        g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', false);\n\t      });\n\t\n\t      //============================================================\n\t      //Special offset functions\n\t      chart.d3_stackedOffset_stackPercent = function(stackData) {\n\t          var n = stackData.length,    //How many series\n\t          m = stackData[0].length,     //how many points per series\n\t          k = 1 / n,\n\t           i,\n\t           j,\n\t           o,\n\t           y0 = [];\n\t\n\t          for (j = 0; j < m; ++j) { //Looping through all points\n\t            for (i = 0, o = 0; i < dataRaw.length; i++)  //looping through series'\n\t                o += getY(dataRaw[i].values[j])   //total value of all points at a certian point in time.\n\t\n\t            if (o) for (i = 0; i < n; i++)\n\t               stackData[i][j][1] /= o;\n\t            else\n\t              for (i = 0; i < n; i++)\n\t               stackData[i][j][1] = k;\n\t          }\n\t          for (j = 0; j < m; ++j) y0[j] = 0;\n\t          return y0;\n\t      };\n\t\n\t    });\n\t\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  scatter.dispatch.on('elementClick.area', function(e) {\n\t    dispatch.areaClick(e);\n\t  })\n\t  scatter.dispatch.on('elementMouseover.tooltip', function(e) {\n\t        e.pos = [e.pos[0] + margin.left, e.pos[1] + margin.top],\n\t        dispatch.tooltipShow(e);\n\t  });\n\t  scatter.dispatch.on('elementMouseout.tooltip', function(e) {\n\t        dispatch.tooltipHide(e);\n\t  });\n\t\n\t  //============================================================\n\t\n\t  //============================================================\n\t  // Global getters and setters\n\t  //------------------------------------------------------------\n\t\n\t  chart.dispatch = dispatch;\n\t  chart.scatter = scatter;\n\t\n\t  d3.rebind(chart, scatter, 'interactive', 'size', 'xScale', 'yScale', 'zScale', 'xDomain', 'yDomain', 'xRange', 'yRange',\n\t    'sizeDomain', 'forceX', 'forceY', 'forceSize', 'clipVoronoi', 'useVoronoi','clipRadius','highlightPoint','clearHighlights');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.x = function(_) {\n\t    if (!arguments.length) return getX;\n\t    getX = d3.functor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.y = function(_) {\n\t    if (!arguments.length) return getY;\n\t    getY = d3.functor(_);\n\t    return chart;\n\t  }\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.clipEdge = function(_) {\n\t    if (!arguments.length) return clipEdge;\n\t    clipEdge = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.offset = function(_) {\n\t    if (!arguments.length) return offset;\n\t    offset = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.order = function(_) {\n\t    if (!arguments.length) return order;\n\t    order = _;\n\t    return chart;\n\t  };\n\t\n\t  //shortcut for offset + order\n\t  chart.style = function(_) {\n\t    if (!arguments.length) return style;\n\t    style = _;\n\t\n\t    switch (style) {\n\t      case 'stack':\n\t        chart.offset('zero');\n\t        chart.order('default');\n\t        break;\n\t      case 'stream':\n\t        chart.offset('wiggle');\n\t        chart.order('inside-out');\n\t        break;\n\t      case 'stream-center':\n\t          chart.offset('silhouette');\n\t          chart.order('inside-out');\n\t          break;\n\t      case 'expand':\n\t        chart.offset('expand');\n\t        chart.order('default');\n\t        break;\n\t      case 'stack_percent':\n\t        chart.offset(chart.d3_stackedOffset_stackPercent);\n\t        chart.order('default');\n\t        break;\n\t    }\n\t\n\t    return chart;\n\t  };\n\t\n\t  chart.interpolate = function(_) {\n\t\t    if (!arguments.length) return interpolate;\n\t\t    interpolate = _;\n\t\t    return chart;\n\t  };\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.stackedAreaChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var stacked = nv.models.stackedArea()\n\t    , xAxis = nv.models.axis()\n\t    , yAxis = nv.models.axis()\n\t    , legend = nv.models.legend()\n\t    , controls = nv.models.legend()\n\t    , interactiveLayer = nv.interactiveGuideline()\n\t    ;\n\t\n\t  var margin = {top: 30, right: 25, bottom: 50, left: 60}\n\t    , width = null\n\t    , height = null\n\t    , color = nv.utils.defaultColor() // a function that takes in d, i and returns color\n\t    , showControls = true\n\t    , showLegend = true\n\t    , showXAxis = true\n\t    , showYAxis = true\n\t    , rightAlignYAxis = false\n\t    , useInteractiveGuideline = false\n\t    , tooltips = true\n\t    , tooltip = function(key, x, y, e, graph) {\n\t        return '<h3>' + key + '</h3>' +\n\t               '<p>' +  y + ' on ' + x + '</p>'\n\t      }\n\t    , x //can be accessed via chart.xScale()\n\t    , y //can be accessed via chart.yScale()\n\t    , yAxisTickFormat = d3.format(',.2f')\n\t    , state = { style: stacked.style() }\n\t    , defaultState = null\n\t    , noData = 'No Data Available.'\n\t    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n\t    , controlWidth = 250\n\t    , cData = ['Stacked','Stream','Expanded']\n\t    , controlLabels = {}\n\t    , transitionDuration = 0\n\t    ;\n\t\n\t  xAxis\n\t    .orient('bottom')\n\t    .tickPadding(7)\n\t    ;\n\t  yAxis\n\t    .orient((rightAlignYAxis) ? 'right' : 'left')\n\t    ;\n\t\n\t  controls.updateState(false);\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t        x = xAxis.tickFormat()(stacked.x()(e.point, e.pointIndex)),\n\t        y = yAxis.tickFormat()(stacked.y()(e.point, e.pointIndex)),\n\t        content = tooltip(e.series.key, x, y, e, chart);\n\t\n\t    nv.tooltip.show([left, top], content, e.value < 0 ? 'n' : 's', null, offsetElement);\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this),\n\t          that = this;\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t\n\t      chart.update = function() { container.call(chart); };\n\t      chart.container = this;\n\t\n\t      //set state.disabled\n\t      state.disabled = data.map(function(d) { return !!d.disabled });\n\t\n\t      if (!defaultState) {\n\t        var key;\n\t        defaultState = {};\n\t        for (key in state) {\n\t          if (state[key] instanceof Array)\n\t            defaultState[key] = state[key].slice(0);\n\t          else\n\t            defaultState[key] = state[key];\n\t        }\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t      // Display No Data message if there's nothing to show.\n\t\n\t      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', margin.top + availableHeight / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x = stacked.xScale();\n\t      y = stacked.yScale();\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-stackedAreaChart').data([data]);\n\t      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedAreaChart').append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append(\"rect\").style(\"opacity\",0);\n\t      gEnter.append('g').attr('class', 'nv-x nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-y nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-stackedWrap');\n\t      gEnter.append('g').attr('class', 'nv-legendWrap');\n\t      gEnter.append('g').attr('class', 'nv-controlsWrap');\n\t      gEnter.append('g').attr('class', 'nv-interactive');\n\t\n\t      g.select(\"rect\").attr(\"width\",availableWidth).attr(\"height\",availableHeight);\n\t      //------------------------------------------------------------\n\t      // Legend\n\t\n\t      if (showLegend) {\n\t        var legendWidth = (showControls) ? availableWidth - controlWidth : availableWidth;\n\t        legend\n\t          .width(legendWidth);\n\t\n\t        g.select('.nv-legendWrap')\n\t            .datum(data)\n\t            .call(legend);\n\t\n\t        if ( margin.top != legend.height()) {\n\t          margin.top = legend.height();\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t        }\n\t\n\t        g.select('.nv-legendWrap')\n\t            .attr('transform', 'translate(' + (availableWidth-legendWidth) + ',' + (-margin.top) +')');\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Controls\n\t\n\t      if (showControls) {\n\t        var controlsData = [\n\t          {\n\t            key: controlLabels.stacked || 'Stacked',\n\t            metaKey: 'Stacked',\n\t            disabled: stacked.style() != 'stack',\n\t            style: 'stack'\n\t          },\n\t          {\n\t            key: controlLabels.stream || 'Stream',\n\t            metaKey: 'Stream',\n\t            disabled: stacked.style() != 'stream',\n\t            style: 'stream'\n\t          },\n\t          {\n\t            key: controlLabels.expanded || 'Expanded',\n\t            metaKey: 'Expanded',\n\t            disabled: stacked.style() != 'expand',\n\t            style: 'expand'\n\t          },\n\t          {\n\t            key: controlLabels.stack_percent || 'Stack %',\n\t            metaKey: 'Stack_Percent',\n\t            disabled: stacked.style() != 'stack_percent',\n\t            style: 'stack_percent'\n\t          }\n\t        ];\n\t\n\t        controlWidth = (cData.length/3) * 260;\n\t\n\t        controlsData = controlsData.filter(function(d) {\n\t          return cData.indexOf(d.metaKey) !== -1;\n\t        })\n\t\n\t        controls\n\t          .width( controlWidth )\n\t          .color(['#444', '#444', '#444']);\n\t\n\t        g.select('.nv-controlsWrap')\n\t            .datum(controlsData)\n\t            .call(controls);\n\t\n\t\n\t        if ( margin.top != Math.max(controls.height(), legend.height()) ) {\n\t          margin.top = Math.max(controls.height(), legend.height());\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t        }\n\t\n\t\n\t        g.select('.nv-controlsWrap')\n\t            .attr('transform', 'translate(0,' + (-margin.top) +')');\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      if (rightAlignYAxis) {\n\t          g.select(\".nv-y.nv-axis\")\n\t              .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t      // Main Chart Component(s)\n\t\n\t      //------------------------------------------------------------\n\t      //Set up interactive layer\n\t      if (useInteractiveGuideline) {\n\t        interactiveLayer\n\t           .width(availableWidth)\n\t           .height(availableHeight)\n\t           .margin({left: margin.left, top: margin.top})\n\t           .svgContainer(container)\n\t           .xScale(x);\n\t        wrap.select(\".nv-interactive\").call(interactiveLayer);\n\t      }\n\t\n\t      stacked\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t\n\t      var stackedWrap = g.select('.nv-stackedWrap')\n\t          .datum(data);\n\t\n\t      stackedWrap.call(stacked);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Axes\n\t\n\t      if (showXAxis) {\n\t        xAxis\n\t          .scale(x)\n\t          .ticks( availableWidth / 100 )\n\t          .tickSize( -availableHeight, 0);\n\t\n\t        g.select('.nv-x.nv-axis')\n\t            .attr('transform', 'translate(0,' + availableHeight + ')');\n\t\n\t        g.select('.nv-x.nv-axis')\n\t          \n\t            .call(xAxis);\n\t      }\n\t\n\t      if (showYAxis) {\n\t        yAxis\n\t          .scale(y)\n\t          .ticks(stacked.offset() == 'wiggle' ? 0 : availableHeight / 36)\n\t          .tickSize(-availableWidth, 0)\n\t          .setTickFormat( (stacked.style() == 'expand' || stacked.style() == 'stack_percent')\n\t                ? d3.format('%') : yAxisTickFormat);\n\t\n\t        g.select('.nv-y.nv-axis')\n\t          \n\t            .call(yAxis);\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t      stacked.dispatch.on('areaClick.toggle', function(e) {\n\t        if (data.filter(function(d) { return !d.disabled }).length === 1)\n\t          data.forEach(function(d) {\n\t            d.disabled = false;\n\t          });\n\t        else\n\t          data.forEach(function(d,i) {\n\t            d.disabled = (i != e.seriesIndex);\n\t          });\n\t\n\t        state.disabled = data.map(function(d) { return !!d.disabled });\n\t        dispatch.stateChange(state);\n\t\n\t        chart.update();\n\t      });\n\t\n\t      legend.dispatch.on('stateChange', function(newState) {\n\t        state.disabled = newState.disabled;\n\t        dispatch.stateChange(state);\n\t        chart.update();\n\t      });\n\t\n\t      controls.dispatch.on('legendClick', function(d,i) {\n\t        if (!d.disabled) return;\n\t\n\t        controlsData = controlsData.map(function(s) {\n\t          s.disabled = true;\n\t          return s;\n\t        });\n\t        d.disabled = false;\n\t\n\t        stacked.style(d.style);\n\t\n\t\n\t        state.style = stacked.style();\n\t        dispatch.stateChange(state);\n\t\n\t        chart.update();\n\t      });\n\t\n\t\n\t      interactiveLayer.dispatch.on('elementMousemove', function(e) {\n\t          stacked.clearHighlights();\n\t          var singlePoint, pointIndex, pointXLocation, allData = [];\n\t          data\n\t          .filter(function(series, i) {\n\t            series.seriesIndex = i;\n\t            return !series.disabled;\n\t          })\n\t          .forEach(function(series,i) {\n\t              pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n\t              stacked.highlightPoint(i, pointIndex, true);\n\t              var point = series.values[pointIndex];\n\t              if (typeof point === 'undefined') return;\n\t              if (typeof singlePoint === 'undefined') singlePoint = point;\n\t              if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n\t\n\t              //If we are in 'expand' mode, use the stacked percent value instead of raw value.\n\t              var tooltipValue = (stacked.style() == 'expand') ? point.display.y : chart.y()(point,pointIndex);\n\t              allData.push({\n\t                  key: series.key,\n\t                  value: tooltipValue,\n\t                  color: color(series,series.seriesIndex),\n\t                  stackedValue: point.display\n\t              });\n\t          });\n\t\n\t          allData.reverse();\n\t\n\t          //Highlight the tooltip entry based on which stack the mouse is closest to.\n\t          if (allData.length > 2) {\n\t            var yValue = chart.yScale().invert(e.mouseY);\n\t            var yDistMax = Infinity, indexToHighlight = null;\n\t            allData.forEach(function(series,i) {\n\t\n\t               //To handle situation where the stacked area chart is negative, we need to use absolute values\n\t               //when checking if the mouse Y value is within the stack area.\n\t               yValue = Math.abs(yValue);\n\t               var stackedY0 = Math.abs(series.stackedValue.y0);\n\t               var stackedY = Math.abs(series.stackedValue.y);\n\t               if ( yValue >= stackedY0 && yValue <= (stackedY + stackedY0))\n\t               {\n\t                  indexToHighlight = i;\n\t                  return;\n\t               }\n\t            });\n\t            if (indexToHighlight != null)\n\t               allData[indexToHighlight].highlight = true;\n\t          }\n\t\n\t          var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex));\n\t\n\t          //If we are in 'expand' mode, force the format to be a percentage.\n\t          var valueFormatter = (stacked.style() == 'expand') ?\n\t               function(d,i) {return d3.format(\".1%\")(d);} :\n\t               function(d,i) {return yAxis.tickFormat()(d); };\n\t          interactiveLayer.tooltip\n\t                  .position({left: pointXLocation + margin.left, top: e.mouseY + margin.top})\n\t                  .chartContainer(that.parentNode)\n\t                  .enabled(tooltips)\n\t                  .valueFormatter(valueFormatter)\n\t                  .data(\n\t                      {\n\t                        value: xValue,\n\t                        series: allData\n\t                      }\n\t                  )();\n\t\n\t          interactiveLayer.renderGuideLine(pointXLocation);\n\t\n\t      });\n\t\n\t      interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n\t          dispatch.tooltipHide();\n\t          stacked.clearHighlights();\n\t      });\n\t\n\t\n\t      dispatch.on('tooltipShow', function(e) {\n\t        if (tooltips) showTooltip(e, that.parentNode);\n\t      });\n\t\n\t      // Update chart from a state object passed to event handler\n\t      dispatch.on('changeState', function(e) {\n\t\n\t        if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {\n\t          data.forEach(function(series,i) {\n\t            series.disabled = e.disabled[i];\n\t          });\n\t\n\t          state.disabled = e.disabled;\n\t        }\n\t\n\t        if (typeof e.style !== 'undefined') {\n\t          stacked.style(e.style);\n\t        }\n\t\n\t        chart.update();\n\t      });\n\t\n\t    });\n\t\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  stacked.dispatch.on('tooltipShow', function(e) {\n\t    //disable tooltips when value ~= 0\n\t    //// TODO: consider removing points from voronoi that have 0 value instead of this hack\n\t    /*\n\t    if (!Math.round(stacked.y()(e.point) * 100)) {  // 100 will not be good for very small numbers... will have to think about making this valu dynamic, based on data range\n\t      setTimeout(function() { d3.selectAll('.point.hover').classed('hover', false) }, 0);\n\t      return false;\n\t    }\n\t   */\n\t\n\t    e.pos = [e.pos[0] + margin.left, e.pos[1] + margin.top],\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  stacked.dispatch.on('tooltipHide', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.dispatch = dispatch;\n\t  chart.stacked = stacked;\n\t  chart.legend = legend;\n\t  chart.controls = controls;\n\t  chart.xAxis = xAxis;\n\t  chart.yAxis = yAxis;\n\t  chart.interactiveLayer = interactiveLayer;\n\t\n\t  d3.rebind(chart, stacked, 'x', 'y', 'size', 'xScale', 'yScale', 'xDomain', 'yDomain', 'xRange', 'yRange', 'sizeDomain', 'interactive', 'useVoronoi', 'offset', 'order', 'style', 'clipEdge', 'forceX', 'forceY', 'forceSize', 'interpolate');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    legend.color(color);\n\t    stacked.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.showControls = function(_) {\n\t    if (!arguments.length) return showControls;\n\t    showControls = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showLegend = function(_) {\n\t    if (!arguments.length) return showLegend;\n\t    showLegend = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showXAxis = function(_) {\n\t    if (!arguments.length) return showXAxis;\n\t    showXAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showYAxis = function(_) {\n\t    if (!arguments.length) return showYAxis;\n\t    showYAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.rightAlignYAxis = function(_) {\n\t    if(!arguments.length) return rightAlignYAxis;\n\t    rightAlignYAxis = _;\n\t    yAxis.orient( (_) ? 'right' : 'left');\n\t    return chart;\n\t  };\n\t\n\t  chart.useInteractiveGuideline = function(_) {\n\t    if(!arguments.length) return useInteractiveGuideline;\n\t    useInteractiveGuideline = _;\n\t    if (_ === true) {\n\t       chart.interactive(false);\n\t       chart.useVoronoi(false);\n\t    }\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltip = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.state = function(_) {\n\t    if (!arguments.length) return state;\n\t    state = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.defaultState = function(_) {\n\t    if (!arguments.length) return defaultState;\n\t    defaultState = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.transitionDuration = function(_) {\n\t    if (!arguments.length) return transitionDuration;\n\t    transitionDuration = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.controlsData = function(_) {\n\t    if (!arguments.length) return cData;\n\t    cData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.controlLabels = function(_) {\n\t    if (!arguments.length) return controlLabels;\n\t    if (typeof _ !== 'object') return controlLabels;\n\t    controlLabels = _;\n\t    return chart;\n\t  };\n\t\n\t  yAxis.setTickFormat = yAxis.tickFormat;\n\t\n\t  yAxis.tickFormat = function(_) {\n\t    if (!arguments.length) return yAxisTickFormat;\n\t    yAxisTickFormat = _;\n\t    return yAxis;\n\t  };\n\t\n\t\n\t  //============================================================\n\t\n\t  return chart;\n\t}\n\t})();\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/** This is the common wrapper for nvd3 based visualizations. */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(4), __webpack_require__(10), __webpack_require__(9) ], __WEBPACK_AMD_DEFINE_RESULT__ = function( Utilities ) {\n\t    return Backbone.View.extend({\n\t        initialize: function( options ) {\n\t            var self = this;\n\t            this.options = options;\n\t            options.render = function( canvas_id, groups ) {\n\t                return self.render( canvas_id, groups )\n\t            };\n\t            Utilities.panelHelper( options );\n\t        },\n\t\n\t        render: function( canvas_id, groups ) {\n\t            var self = this;\n\t            var chart       = this.options.chart;\n\t            var type        = this.options.type;\n\t            var makeConfig  = this.options.makeConfig;\n\t            var d3chart = nv.models[ type ]();\n\t            nv.addGraph( function() {\n\t                try {\n\t                    d3chart.xAxis.axisLabel( chart.settings.get( 'x_axis_label' ) );\n\t                    d3chart.yAxis.axisLabel( chart.settings.get( 'y_axis_label' ) ).axisLabelDistance( 30 );\n\t                    d3chart.options( { showControls: false } );\n\t                    d3chart.showLegend && d3chart.showLegend(chart.settings.get('show_legend') == 'true');\n\t                    self._makeAxes( d3chart, groups, chart.settings );\n\t                    makeConfig && makeConfig( d3chart );\n\t                    chart.settings.get( '__use_panels' ) === 'true' && d3chart.options( { showControls: false } );\n\t                    d3chart.xAxis.showMaxMin( false );\n\t                    d3chart.yAxis.showMaxMin( chart.definition.showmaxmin );\n\t                    d3chart.tooltipContent( function( key, x, y, graph ) {\n\t                        return '<h3>' + ( graph.point.tooltip || key ) + '</h3>';\n\t                    });\n\t                    if ( $( '#' + canvas_id ).length > 0 ) {\n\t                        var canvas = d3.select( '#' + canvas_id );\n\t                        canvas.datum( groups ).call( d3chart );\n\t                        if ( chart.definition.zoomable && chart.definition.zoomable != 'native' ) {\n\t                            d3chart.clipEdge && d3chart.clipEdge( true );\n\t                            Utilities.addZoom({\n\t                                xAxis  : d3chart.xAxis,\n\t                                yAxis  : d3chart.yAxis,\n\t                                yDomain: d3chart.yDomain,\n\t                                xDomain: d3chart.xDomain,\n\t                                redraw : function() { d3chart.update() },\n\t                                svg    : canvas\n\t                            });\n\t                        }\n\t                        nv.utils.windowResize( d3chart.update );\n\t                    }\n\t                } catch ( err ) {\n\t                    chart.state( 'failed', err );\n\t                }\n\t            });\n\t            return true;\n\t        },\n\t\n\t        /** Format axes ticks */\n\t        _makeAxes: function( d3chart, groups, settings ) {\n\t            var categories = Utilities.makeCategories( groups, [ 'x', 'y' ] );\n\t            function makeTickFormat( id ) {\n\t                Utilities.makeTickFormat({\n\t                    categories  : categories.array[ id ],\n\t                    type        : settings.get( id + '_axis_type|type' ),\n\t                    precision   : settings.get( id + '_axis_type|precision' ),\n\t                    formatter   : function( formatter ) {\n\t                        formatter && d3chart[ id + 'Axis' ].tickFormat( function( value ) {\n\t                            return formatter( value );\n\t                        });\n\t                    }\n\t                });\n\t            };\n\t            makeTickFormat( 'x' );\n\t            makeTickFormat( 'y' );\n\t        }\n\t    });\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }\n/******/ ])});;\n\n\n/** WEBPACK FOOTER **\n ** nvd3_bar_horizontal.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap e3622d0033a89edad914\n **/","define( [ 'visualizations/nvd3/common/wrapper' ], function( NVD3 ) {\n    return Backbone.Model.extend({\n        initialize: function( options ) {\n            options.type = 'multiBarHorizontalChart';\n            new NVD3( options );\n        }\n    });\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./static/repository/visualizations/nvd3/bar_horizontal/wrapper.js\n ** module id = 0\n ** module chunks = 17\n **/","/** Useful helper functions */\ndefine( [], function() {\n\n    /** Clone */\n    function clone( obj ) {\n        return JSON.parse( JSON.stringify( obj ) || null );\n    };\n\n    /**\n     * Check if a string is a json string\n     * @param{String}   text - Content to be validated\n     */\n    function isJSON(text) {\n        return /^[\\],:{}\\s]*$/.test(text.replace(/\\\\[\"\\\\\\/bfnrtu]/g, '@').\n            replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']').\n            replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''));\n    };\n\n    /**\n     * Request handler for GET\n     * @param{String}   url     - Url request is made to\n     * @param{Function} success - Callback on success\n     * @param{Function} error   - Callback on error\n     * @param{Boolean}  cache   - Use cached data if available\n     */\n    function get (options) {\n        top.__utils__get__ = top.__utils__get__ || {};\n        var cache_key = JSON.stringify( options );\n        if (options.cache && top.__utils__get__[cache_key]) {\n            options.success && options.success(top.__utils__get__[cache_key]);\n            window.console.debug('utils.js::get() - Fetching from cache [' + options.url + '].');\n        } else {\n            request({\n                url     : options.url,\n                data    : options.data,\n                success : function(response) {\n                    top.__utils__get__[cache_key] = response;\n                    options.success && options.success(response);\n                },\n                error : function(response) {\n                    options.error && options.error(response);\n                }\n            });\n        }\n    };\n\n    /**\n     * Request handler\n     * @param{String}   method  - Request method ['GET', 'POST', 'DELETE', 'PUT']\n     * @param{String}   url     - Url request is made to\n     * @param{Object}   data    - Data send to url\n     * @param{Function} success - Callback on success\n     * @param{Function} error   - Callback on error\n     */\n    function request (options) {\n        var ajaxConfig = {\n            contentType : 'application/json',\n            type        : options.type || 'GET',\n            data        : options.data || {},\n            url         : options.url\n        }\n        if ( ajaxConfig.type == 'GET' || ajaxConfig.type == 'DELETE' ) {\n            if ( !$.isEmptyObject(ajaxConfig.data) ) {\n                ajaxConfig.url += ajaxConfig.url.indexOf('?') == -1 ? '?' : '&';\n                ajaxConfig.url += $.param(ajaxConfig.data, true);\n            }\n            ajaxConfig.data = null;\n        } else {\n            ajaxConfig.dataType = 'json';\n            ajaxConfig.url      = ajaxConfig.url;\n            ajaxConfig.data     = JSON.stringify( ajaxConfig.data );\n        }\n        $.ajax( ajaxConfig ).done( function( response ) {\n            if ( typeof response === 'string' && isJSON( response ) ) {\n                try {\n                    response = response.replace( 'Infinity,', '\"Infinity\",' );\n                    response = jQuery.parseJSON( response );\n                } catch ( e ) {\n                    console.debug( e );\n                }\n            }\n            options.success && options.success( response );\n        }).fail( function( response ) {\n            var response_text = null;\n            try {\n                response_text = jQuery.parseJSON( response.responseText );\n            } catch (e) {\n                response_text = response.responseText;\n            }\n            options.error && options.error( response_text, response );\n        }).always( function() {\n            options.complete && options.complete();\n        });\n    };\n\n    /**\n     * Safely merge to dictionaries\n     * @param{Object}   options         - Target dictionary\n     * @param{Object}   optionsDefault  - Source dictionary\n     */\n    function merge (options, optionsDefault) {\n        if (options) {\n            return _.defaults(options, optionsDefault);\n        } else {\n            return optionsDefault;\n        }\n    };\n\n    /** Create a unique id */\n    function uid(){\n        top.__utils__uid__ = top.__utils__uid__ || 0;\n        return 'uid-' + top.__utils__uid__++;\n    };\n\n    return {\n        get     : get,\n        merge   : merge,\n        uid     : uid,\n        request : request,\n        clone   : clone,\n        isJSON  : isJSON\n    };\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./static/repository/utilities/utils.js\n ** module id = 1\n ** module chunks = 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n **/","define( [ 'utilities/utils', 'visualizations/utilities/tabular-datasets' ], function( Utils, Datasets ) {\n    /** build job dictionary */\n    function buildJobDictionary( chart, module ) {\n        var settings_string = '';\n        var columns_string = '';\n        var group_index = 0;\n        for ( key in chart.settings.attributes ) {\n            var settings_value = chart.settings.get( key );\n            _.each( [ [ ' ', '&#32;' ], [ ',', '&#44;' ], [ ':', '&#58;' ] ], function( pair ) {\n                settings_value = settings_value.replace( new RegExp( pair[ 0 ], 'g' ), pair[ 1 ] );\n            });\n            settings_string += key + ':' + settings_value + ', ';\n        };\n        settings_string = settings_string.substring( 0, settings_string.length - 2 )\n        chart.groups.each( function( group ) {\n            group_index++;\n            _.each( group.get( '__data_columns' ), function( data_columns, name ) {\n                columns_string += name + '_' + group_index + ':' + ( parseInt( group.get( name ) ) + 1 ) + ', ';\n            });\n        });\n        columns_string = columns_string.substring( 0, columns_string.length - 2 );\n        return {\n                    'tool_id'       : 'charts',\n                    'inputs'        : {\n                        'input'     : {\n                            'id'    : chart.get( 'dataset_id' ),\n                            'src'   : 'hda'\n                        },\n                        'module'    : module,\n                        'columns'   : columns_string,\n                        'settings'  : settings_string\n                    }\n                }\n    };\n\n    /** Assists in assigning the viewport panels */\n    function panelHelper( options ) {\n        var self = this;\n        var process             = options.process;\n        var chart               = options.chart;\n        var render              = options.render;\n        var targets             = options.targets;\n        var dataset_id          = options.dataset_id || options.chart.get( 'dataset_id' );\n        var dataset_groups      = options.dataset_groups || options.chart.groups;\n        Datasets.request({\n            chart           : chart,\n            dataset_id      : dataset_id,\n            dataset_groups  : dataset_groups,\n            success         : function( result ) {\n                try {\n                    if ( targets.length == result.length ) {\n                        var valid = true;\n                        for ( var group_index in result ) {\n                            var group = result[ group_index ];\n                            if ( !render( targets[ group_index ], [ group ] ) ) {\n                                valid = false;\n                                break;\n                            }\n                        }\n                        if ( valid ) {\n                            chart.state( 'ok', 'Multi-panel chart drawn.' );\n                        }\n                    } else if ( targets.length == 1 ) {\n                        if ( render( targets[ 0 ], result ) ) {\n                            chart.state( 'ok', 'Chart drawn.' );\n                        }\n                    } else {\n                        chart.state( 'failed', 'Invalid panel count.' );\n                    }\n                    process.resolve();\n                } catch ( err ) {\n                    console.debug( 'FAILED: tabular-utilities::panelHelper() - ' + err );\n                    chart.state( 'failed', err );\n                    process.reject();\n                }\n            }\n        });\n    };\n\n    /** Get domain boundaries value */\n    function getDomains( groups, keys ) {\n        function _apply( operator, key ) {\n            var value = undefined;\n            for ( var group_index in groups ) {\n                var value_sub = d3[ operator ]( groups[ group_index ].values, function( d ) { return d[ key ] } );\n                value = value === undefined ? value_sub : Math[ operator ]( value, value_sub );\n            }\n            return value;\n        };\n        var result = {};\n        for( var index in keys ) {\n            var key = keys[ index ];\n            result[ key ] = {\n                min : _apply( 'min', key ),\n                max : _apply( 'max', key ),\n            };\n           \n        }\n        return result;\n    };\n\n    /** Default series maker */\n    function makeSeries( groups, keys ) {\n        var plot_data = [];\n        for ( var group_index in groups ) {\n            var group = groups[ group_index ];\n            var data = [];\n            for ( var value_index in group.values ) {\n                var point = [];\n                if ( keys ) {\n                    for ( var key_index in keys ) {\n                        var column_index = keys[ key_index ];\n                        point.push( group.values[ value_index ][ column_index ] );\n                    }\n                } else {\n                    for ( var column_index in group.values[ value_index ] ) {\n                        point.push( group.values[ value_index ][ column_index ] );\n                    }\n                }\n                data.push( point );\n            }\n            plot_data.push( data );\n        }\n        return plot_data;\n    };\n\n    /** Default category maker */\n    function makeCategories( groups, column_keys ) {\n        var array = {};\n        var data_columns = groups[ 0 ].__data_columns;\n        _.each( column_keys, function( key ) {\n            if ( data_columns[ key ].is_label ) {\n                array[ key ] = [];\n            }\n        });\n        if ( groups && groups[ 0 ] ) {\n            _.each( groups[ 0 ].values, function( value_dict ) {\n                for ( var key in array ) {\n                    array[ key ].push( String( value_dict[ key ] ) );\n                }\n            });\n        }\n        mapCategories( array, groups );\n        return { array : array }\n    };\n\n    /** Apply default mapping index all values contained in label columns (for all groups) */\n    function mapCategories( array, groups ) {\n        _.each( groups, function( group ) {\n            _.each( group.values, function( value_dict, i ) {\n                for ( var key in array ) {\n                    value_dict[ key ] = parseInt( i )\n                }\n            });\n        });\n    };\n\n    /** Category make for unique category labels */\n    function makeUniqueCategories( groups, with_index ) {\n        var categories  = {};\n        var array       = {};\n        var counter     = {};\n        var data_columns = groups[ 0 ].__data_columns;\n        _.each( data_columns, function( column_def, key ) {\n            if ( column_def.is_label ) {\n                categories[ key ] = {};\n                array[ key ]      = [];\n                counter[ key ]    = 0;\n            }\n        });\n        // index all values contained in label columns (for all groups)\n        for ( var i in groups ) {\n            var group = groups[ i ];\n            for ( var j in group.values ) {\n                var value_dict = group.values[ j ];\n                for ( var key in categories ) {\n                    var value = String( value_dict[ key ] );\n                    if ( categories[ key ][ value ] === undefined ) {\n                        categories[ key ][ value ] = counter[ key ];\n                        array[ key ].push( with_index ? [counter[key], value] : value );\n                        counter[ key ]++;\n                    }\n                }\n            }\n        }\n        // convert group values into category indeces\n        for ( var i in groups ) {\n            var group = groups[ i ];\n            for ( var j in group.values ) {\n                var value_dict = group.values[ j ];\n                for ( var key in categories ) {\n                    var value = String( value_dict[ key ] );\n                    value_dict[ key ] = categories[ key ][ value ];\n                }\n            }\n        }\n        return {\n            categories  : categories,\n            array       : array,\n            counter     : counter\n        }\n    };\n\n    /** Make axis */\n    function makeTickFormat ( options ) {\n        var type        = options.type;\n        var precision   = options.precision;\n        var categories  = options.categories;\n        var formatter   = options.formatter;\n        if ( type == 'hide' ) {\n            formatter( function() { return '' } );\n        } else if ( type == 'auto' ) {\n            if ( categories ) {\n                formatter( function( value ) { return categories[ value ] || '' } );\n            }\n        } else {\n            var d3format = function( d ) {\n                switch ( type ) {\n                    case 's':\n                        var prefix = d3.formatPrefix( d );\n                        return prefix.scale( d ).toFixed() + prefix.symbol;\n                    default :\n                        return d3.format( '.' + precision + type )( d );\n                }\n            };\n            if ( categories ) {\n                formatter( function( value ) {\n                    var label = categories[ value ];\n                    if ( label ) {\n                        if ( isNaN( label ) ) {\n                            return label;\n                        } else {\n                            try {\n                                return d3format( label );\n                            } catch ( err ) {\n                                return label;\n                            }\n                        }\n                    } else {\n                        return '';\n                    }\n                });\n            } else {\n                formatter( function( value ) { return d3format( value ) } );\n            }\n        }\n    };\n\n    /** Add zoom handler */\n    function addZoom( options ) {\n        var scaleExtent = 100;\n        var yAxis       = options.yAxis;\n        var xAxis       = options.xAxis;\n        var xDomain     = options.xDomain || xAxis.scale().domain;\n        var yDomain     = options.yDomain || yAxis.scale().domain;\n        var redraw      = options.redraw;\n        var svg         = options.svg;\n        var xScale      = xAxis.scale();\n        var yScale      = yAxis.scale();\n        var x_boundary  = xScale.domain().slice();\n        var y_boundary  = yScale.domain().slice();\n        var d3zoom      = d3.behavior.zoom();\n        xScale.nice();\n        yScale.nice();\n        function fixDomain( domain, boundary ) {\n            domain[ 0 ] = Math.min( Math.max( domain[ 0 ], boundary[ 0 ] ), boundary[ 1 ] - boundary[ 1 ]/scaleExtent );\n            domain[ 1 ] = Math.max( boundary[ 0 ] + boundary[ 1 ] / scaleExtent, Math.min( domain[ 1 ], boundary[ 1 ] ) );\n            return domain;\n        };\n        function zoomed() {\n            yDomain( fixDomain( yScale.domain(), y_boundary ) );\n            xDomain( fixDomain( xScale.domain(), x_boundary ) );\n            redraw();\n        };\n        function unzoomed() {\n            xDomain( x_boundary );\n            yDomain( y_boundary );\n            redraw();\n            d3zoom.scale( 1 );\n            d3zoom.translate( [ 0 , 0 ] );\n        };\n        d3zoom.x( xScale )\n              .y( yScale )\n              .scaleExtent( [ 1, scaleExtent ] )\n              .on( 'zoom', zoomed );\n        svg.call( d3zoom ).on( 'dblclick.zoom', unzoomed );\n        return d3zoom;\n    };\n\n    return {\n        buildJobDictionary      : buildJobDictionary,\n        panelHelper             : panelHelper,\n        makeCategories          : makeCategories,\n        makeUniqueCategories    : makeUniqueCategories,\n        makeSeries              : makeSeries,\n        getDomains              : getDomains,\n        mapCategories           : mapCategories,\n        makeTickFormat          : makeTickFormat,\n        addZoom                 : addZoom\n    }\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./static/repository/visualizations/utilities/tabular-utilities.js\n ** module id = 4\n ** module chunks = 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 21 22 24\n **/","/** This class handles, formats and caches datasets. */\ndefine( [ 'utilities/utils' ], function( Utils ) {\n    /** Fills request dictionary with data from cache/response */\n    var _cache = {};\n    var request = function( options ) {\n        var groups      = options.dataset_groups;\n        var dataset_id  = options.dataset_id;\n        // identify columns needed to fulfill request\n        var column_list = [];\n        groups.each( function( group ) {\n            _.each( group.get( '__data_columns' ), function( column_def, column_name ) {\n                var column = group.get( column_name );\n                var block_id = _block_id( dataset_id, column );\n                if ( column_list.indexOf( column ) === -1 && !_cache[ block_id ] && column != 'auto' && column != 'zero' && column !== undefined ) {\n                    column_list.push( column );\n                }\n            });\n        });\n        if ( column_list.length == 0 ) {\n            _fillFromCache( options );\n            return;\n        }\n        // Fetch data columns into dataset object\n        Utils.get({\n            url     : Galaxy.root + 'api/datasets/' + dataset_id,\n            data    : {\n                data_type   : 'raw_data',\n                provider    : 'dataset-column',\n                indeces     : column_list.toString()\n            },\n            success : function( response ) {\n                var results = new Array( column_list.length );\n                for ( var i = 0; i < results.length; i++ ) {\n                    results[ i ] = [];\n                }\n                for ( var i in response.data ) {\n                    var row = response.data[ i ];\n                    for ( var j in row ) {\n                        var v = row[ j ];\n                        if ( v !== undefined && v != 2147483647 ) {\n                            results[ j ].push( v );\n                        }\n                    }\n                }\n                console.debug( 'tabular-datasets::_fetch() - Fetching complete.' );\n                for ( var i in results ) {\n                    var column = column_list[ i ];\n                    var block_id = _block_id( dataset_id, column );\n                    _cache[ block_id ] = results[ i ];\n                }\n                _fillFromCache( options );\n            }\n        });\n    };\n\n    /** Fill data from cache */\n    var _fillFromCache = function( options ) {\n        var groups      = options.dataset_groups;\n        var dataset_id  = options.dataset_id;\n        console.debug( 'tabular-datasets::_fillFromCache() - Filling request from cache.' );\n        var limit = 0;\n        groups.each( function( group ) {\n            _.each( group.get( '__data_columns' ), function( column_def, column_name ) {\n                var column = group.get( column_name );\n                var block_id = _block_id( dataset_id, column );\n                var column_data = _cache[ block_id ];\n                if ( column_data ) {\n                    limit = Math.max( limit, column_data.length );\n                }\n            });\n        });\n        if ( limit == 0 ) {\n            console.debug( 'tabular-datasets::_fillFromCache() - No data available.' );\n        }\n        var results = [];\n        groups.each( function( group, group_index ) {\n            var dict = Utils.merge( { key: ( group_index ) + ':' + group.get( 'key' ), values: [] }, group.attributes );\n            for ( var j = 0; j < limit; j++ ) {\n                dict.values[ j ] = { x : parseInt( j ) };\n            }\n            results.push( dict );\n        });\n        groups.each( function( group, group_index ) {\n            var values = results[ group_index ].values;\n            _.each( group.get( '__data_columns' ), function( column_def, column_name ) {\n                var column = group.get( column_name );\n                switch ( column ) {\n                    case 'auto':\n                        for ( var j = 0; j < limit; j++ ) {\n                            values[ j ][ column_name ] = parseInt( j );\n                        }\n                        break;\n                    case 'zero':\n                        for ( var j = 0; j < limit; j++ ) {\n                            values[ j ][ column_name ] = 0;\n                        }\n                        break;\n                    default:\n                        var block_id = _block_id( dataset_id, column );\n                        var column_data = _cache[ block_id ];\n                        for ( var j = 0; j < limit; j++ ) {\n                            var value = values[ j ];\n                            var v = column_data[ j ];\n                            if ( isNaN( v ) && !column_def.is_label ) {\n                                v = 0;\n                            }\n                            value[ column_name ] = v;\n                        }\n                }\n            });\n        });\n        options.success( results );\n    };\n\n    /** Get block id */\n    var _block_id = function ( dataset_id, column ) {\n        return dataset_id + '_' + '_' + column;\n    };\n\n    return { request: request };\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./static/repository/visualizations/utilities/tabular-datasets.js\n ** module id = 5\n ** module chunks = 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 24\n **/","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-loader/lib/css-base.js\n ** module id = 6\n ** module chunks = 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n **/","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nvar stylesInDom = {},\r\n\tmemoize = function(fn) {\r\n\t\tvar memo;\r\n\t\treturn function () {\r\n\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\treturn memo;\r\n\t\t};\r\n\t},\r\n\tisOldIE = memoize(function() {\r\n\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t}),\r\n\tgetHeadElement = memoize(function () {\r\n\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t}),\r\n\tsingletonElement = null,\r\n\tsingletonCounter = 0,\r\n\tstyleElementsInsertedAtTop = [];\r\n\r\nmodule.exports = function(list, options) {\r\n\tif(typeof DEBUG !== \"undefined\" && DEBUG) {\r\n\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t}\r\n\r\n\toptions = options || {};\r\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t// tags it will allow on a page\r\n\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\r\n\t// By default, add <style> tags to the bottom of <head>.\r\n\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\r\n\r\n\tvar styles = listToStyles(list);\r\n\taddStylesToDom(styles, options);\r\n\r\n\treturn function update(newList) {\r\n\t\tvar mayRemove = [];\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tdomStyle.refs--;\r\n\t\t\tmayRemove.push(domStyle);\r\n\t\t}\r\n\t\tif(newList) {\r\n\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\taddStylesToDom(newStyles, options);\r\n\t\t}\r\n\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction addStylesToDom(styles, options) {\r\n\tfor(var i = 0; i < styles.length; i++) {\r\n\t\tvar item = styles[i];\r\n\t\tvar domStyle = stylesInDom[item.id];\r\n\t\tif(domStyle) {\r\n\t\t\tdomStyle.refs++;\r\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t}\r\n\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvar parts = [];\r\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction listToStyles(list) {\r\n\tvar styles = [];\r\n\tvar newStyles = {};\r\n\tfor(var i = 0; i < list.length; i++) {\r\n\t\tvar item = list[i];\r\n\t\tvar id = item[0];\r\n\t\tvar css = item[1];\r\n\t\tvar media = item[2];\r\n\t\tvar sourceMap = item[3];\r\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\tif(!newStyles[id])\r\n\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\telse\r\n\t\t\tnewStyles[id].parts.push(part);\r\n\t}\r\n\treturn styles;\r\n}\r\n\r\nfunction insertStyleElement(options, styleElement) {\r\n\tvar head = getHeadElement();\r\n\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\r\n\tif (options.insertAt === \"top\") {\r\n\t\tif(!lastStyleElementInsertedAtTop) {\r\n\t\t\thead.insertBefore(styleElement, head.firstChild);\r\n\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\r\n\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\r\n\t\t} else {\r\n\t\t\thead.appendChild(styleElement);\r\n\t\t}\r\n\t\tstyleElementsInsertedAtTop.push(styleElement);\r\n\t} else if (options.insertAt === \"bottom\") {\r\n\t\thead.appendChild(styleElement);\r\n\t} else {\r\n\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\r\n\t}\r\n}\r\n\r\nfunction removeStyleElement(styleElement) {\r\n\tstyleElement.parentNode.removeChild(styleElement);\r\n\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\r\n\tif(idx >= 0) {\r\n\t\tstyleElementsInsertedAtTop.splice(idx, 1);\r\n\t}\r\n}\r\n\r\nfunction createStyleElement(options) {\r\n\tvar styleElement = document.createElement(\"style\");\r\n\tstyleElement.type = \"text/css\";\r\n\tinsertStyleElement(options, styleElement);\r\n\treturn styleElement;\r\n}\r\n\r\nfunction createLinkElement(options) {\r\n\tvar linkElement = document.createElement(\"link\");\r\n\tlinkElement.rel = \"stylesheet\";\r\n\tinsertStyleElement(options, linkElement);\r\n\treturn linkElement;\r\n}\r\n\r\nfunction addStyle(obj, options) {\r\n\tvar styleElement, update, remove;\r\n\r\n\tif (options.singleton) {\r\n\t\tvar styleIndex = singletonCounter++;\r\n\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\r\n\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t} else if(obj.sourceMap &&\r\n\t\ttypeof URL === \"function\" &&\r\n\t\ttypeof URL.createObjectURL === \"function\" &&\r\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\r\n\t\ttypeof Blob === \"function\" &&\r\n\t\ttypeof btoa === \"function\") {\r\n\t\tstyleElement = createLinkElement(options);\r\n\t\tupdate = updateLink.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tremoveStyleElement(styleElement);\r\n\t\t\tif(styleElement.href)\r\n\t\t\t\tURL.revokeObjectURL(styleElement.href);\r\n\t\t};\r\n\t} else {\r\n\t\tstyleElement = createStyleElement(options);\r\n\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tremoveStyleElement(styleElement);\r\n\t\t};\r\n\t}\r\n\r\n\tupdate(obj);\r\n\r\n\treturn function updateStyle(newObj) {\r\n\t\tif(newObj) {\r\n\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\treturn;\r\n\t\t\tupdate(obj = newObj);\r\n\t\t} else {\r\n\t\t\tremove();\r\n\t\t}\r\n\t};\r\n}\r\n\r\nvar replaceText = (function () {\r\n\tvar textStore = [];\r\n\r\n\treturn function (index, replacement) {\r\n\t\ttextStore[index] = replacement;\r\n\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t};\r\n})();\r\n\r\nfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\tvar css = remove ? \"\" : obj.css;\r\n\r\n\tif (styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t} else {\r\n\t\tvar cssNode = document.createTextNode(css);\r\n\t\tvar childNodes = styleElement.childNodes;\r\n\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\tif (childNodes.length) {\r\n\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t} else {\r\n\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction applyToTag(styleElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar media = obj.media;\r\n\r\n\tif(media) {\r\n\t\tstyleElement.setAttribute(\"media\", media)\r\n\t}\r\n\r\n\tif(styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = css;\r\n\t} else {\r\n\t\twhile(styleElement.firstChild) {\r\n\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t}\r\n\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t}\r\n}\r\n\r\nfunction updateLink(linkElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar sourceMap = obj.sourceMap;\r\n\r\n\tif(sourceMap) {\r\n\t\t// http://stackoverflow.com/a/26603875\r\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t}\r\n\r\n\tvar blob = new Blob([css], { type: \"text/css\" });\r\n\r\n\tvar oldSrc = linkElement.href;\r\n\r\n\tlinkElement.href = URL.createObjectURL(blob);\r\n\r\n\tif(oldSrc)\r\n\t\tURL.revokeObjectURL(oldSrc);\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/style-loader/addStyles.js\n ** module id = 7\n ** module chunks = 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n **/","exports = module.exports = require(\"./../../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".chartWrap{margin:0;padding:0;overflow:hidden}.nvtooltip.with-3d-shadow,.with-3d-shadow .nvtooltip{box-shadow:0 5px 10px rgba(0,0,0,.2);border-radius:6px}.nvtooltip{position:absolute;background-color:#fff;padding:1px;border:1px solid rgba(0,0,0,.2);z-index:10000;font-family:Arial;font-size:13px;text-align:left;pointer-events:none;white-space:nowrap;-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.nvtooltip.with-transitions,.with-transitions .nvtooltip{transition:opacity .25s linear;-moz-transition:opacity .25s linear;-webkit-transition:opacity .25s linear;transition-delay:.25s;-moz-transition-delay:.25s;-webkit-transition-delay:.25s}.nvtooltip.x-nvtooltip,.nvtooltip.y-nvtooltip{padding:8px}.nvtooltip h3{margin:0;padding:4px 14px;line-height:18px;font-weight:400;background-color:hsla(0,0%,97%,.75);text-align:center;border-bottom:1px solid #ebebeb;border-radius:5px 5px 0 0}.nvtooltip p{margin:0;padding:5px 14px;text-align:center}.nvtooltip span{display:inline-block;margin:2px 0}.nvtooltip table{margin:6px;border-spacing:0}.nvtooltip table td{padding:2px 9px 2px 0;vertical-align:middle}.nvtooltip table td.key{font-weight:400}.nvtooltip table td.value{text-align:right;font-weight:700}.nvtooltip table tr.highlight td{padding:1px 9px 1px 0;border-bottom-style:solid;border-bottom-width:1px;border-top-style:solid;border-top-width:1px}.nvtooltip table td.legend-color-guide div{width:8px;height:8px;vertical-align:middle}.nvtooltip .footer{padding:3px;text-align:center}.nvtooltip-pending-removal{position:absolute;pointer-events:none}svg{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:block;width:100%;height:100%}svg text{font:400 12px Arial}svg .title{font:700 14px Arial}.nvd3 .nv-background{fill:#fff;fill-opacity:0}.nvd3.nv-noData{font-size:18px;font-weight:700}.nv-brush .extent{fill-opacity:.125;shape-rendering:crispEdges}.nvd3 .nv-legend .nv-series{cursor:pointer}.nvd3 .nv-legend .disabled circle{fill-opacity:0}.nvd3 .nv-axis{pointer-events:none}.nvd3 .nv-axis path{fill:none;stroke:#000;stroke-opacity:.75;shape-rendering:crispEdges}.nvd3 .nv-axis path.domain{stroke-opacity:.75}.nvd3 .nv-axis.nv-x path.domain{stroke-opacity:0}.nvd3 .nv-axis text{font-size:11px}.nv-axis line{fill:none;stroke:#e5e5e5;shape-rendering:crispEdges}.nvd3 .nv-axis .zero line,.nvd3 .nv-axis line.zero{stroke-opacity:.75}.nvd3 .nv-axis .nv-axisMaxMin text{font-weight:700}.nvd3 .x2 .nv-axis .nv-axisMaxMin text,.nvd3 .x3 .nv-axis .nv-axisMaxMin text,.nvd3 .x .nv-axis .nv-axisMaxMin text{text-anchor:middle}.nv-brush .resize path{fill:#eee;stroke:#666}.nvd3 .nv-bars .negative rect{zfill:brown}.nvd3 .nv-bars rect{zfill:#4682b4;fill-opacity:.75;transition:fill-opacity .25s linear;-moz-transition:fill-opacity .25s linear;-webkit-transition:fill-opacity .25s linear}.nvd3 .nv-bars rect.hover{fill-opacity:1}.nvd3 .nv-bars .hover rect{fill:#add8e6}.nvd3 .nv-bars text{fill:transparent}.nvd3 .nv-bars .hover text{fill:#000}.nvd3 .nv-discretebar .nv-groups rect,.nvd3 .nv-multibar .nv-groups rect,.nvd3 .nv-multibarHorizontal .nv-groups rect{stroke-opacity:0;transition:fill-opacity .25s linear;-moz-transition:fill-opacity .25s linear;-webkit-transition:fill-opacity .25s linear}.nvd3 .nv-discretebar .nv-groups rect:hover,.nvd3 .nv-multibar .nv-groups rect:hover,.nvd3 .nv-multibarHorizontal .nv-groups rect:hover{fill-opacity:1}.nvd3 .nv-discretebar .nv-groups text,.nvd3 .nv-multibarHorizontal .nv-groups text{font-weight:700;fill:#000;stroke:transparent}.nvd3.nv-pie path{stroke-opacity:0;transition:fill-opacity .25s linear,stroke-width .25s linear,stroke-opacity .25s linear;-moz-transition:fill-opacity .25s linear,stroke-width .25s linear,stroke-opacity .25s linear;-webkit-transition:fill-opacity .25s linear,stroke-width .25s linear,stroke-opacity .25s linear}.nvd3.nv-pie .nv-slice text{stroke:#000;stroke-width:0}.nvd3.nv-pie path{stroke:#fff;stroke-width:1px;stroke-opacity:1}.nvd3.nv-pie .hover path{fill-opacity:.7}.nvd3.nv-pie .nv-label{pointer-events:none}.nvd3.nv-pie .nv-label rect{fill-opacity:0;stroke-opacity:0}.nvd3 .nv-groups path.nv-line{fill:none;stroke-width:1.5px}.nvd3 .nv-groups path.nv-line.nv-thin-line{stroke-width:1px}.nvd3 .nv-groups path.nv-area{stroke:none}.nvd3 .nv-line.hover path{stroke-width:6px}.nvd3.nv-line .nvd3.nv-scatter .nv-groups .nv-point{fill-opacity:0;stroke-opacity:0}.nvd3.nv-scatter.nv-single-point .nv-groups .nv-point{fill-opacity:.5!important;stroke-opacity:.5!important}.with-transitions .nvd3 .nv-groups .nv-point{transition:stroke-width .25s linear,stroke-opacity .25s linear;-moz-transition:stroke-width .25s linear,stroke-opacity .25s linear;-webkit-transition:stroke-width .25s linear,stroke-opacity .25s linear}.nvd3 .nv-groups .nv-point.hover,.nvd3.nv-scatter .nv-groups .nv-point.hover{stroke-width:7px;fill-opacity:.95!important;stroke-opacity:.95!important}.nvd3 .nv-point-paths path{stroke:#aaa;stroke-opacity:0;fill:#eee;fill-opacity:0}.nvd3 .nv-indexLine{cursor:ew-resize}.nvd3 .nv-distribution{pointer-events:none}.nvd3 .nv-groups .nv-point.hover{stroke-width:20px;stroke-opacity:.5}.nvd3 .nv-scatter .nv-point.hover{fill-opacity:1}.nvd3.nv-stackedarea path.nv-area{fill-opacity:.7;stroke-opacity:0;transition:fill-opacity .25s linear,stroke-opacity .25s linear;-moz-transition:fill-opacity .25s linear,stroke-opacity .25s linear;-webkit-transition:fill-opacity .25s linear,stroke-opacity .25s linear}.nvd3.nv-stackedarea path.nv-area.hover{fill-opacity:.9}.nvd3.nv-stackedarea .nv-groups .nv-point{stroke-opacity:0;fill-opacity:0}.nvd3.nv-linePlusBar .nv-bar rect{fill-opacity:.75}.nvd3.nv-linePlusBar .nv-bar rect:hover{fill-opacity:1}.nvd3.nv-bullet{font:10px sans-serif}.nvd3.nv-bullet .nv-measure{fill-opacity:.8}.nvd3.nv-bullet .nv-measure:hover{fill-opacity:1}.nvd3.nv-bullet .nv-marker{stroke:#000;stroke-width:2px}.nvd3.nv-bullet .nv-markerTriangle{stroke:#000;fill:#fff;stroke-width:1.5px}.nvd3.nv-bullet .nv-tick line{stroke:#666;stroke-width:.5px}.nvd3.nv-bullet .nv-range.nv-s0{fill:#eee}.nvd3.nv-bullet .nv-range.nv-s1{fill:#ddd}.nvd3.nv-bullet .nv-range.nv-s2{fill:#ccc}.nvd3.nv-bullet .nv-title{font-size:14px;font-weight:700}.nvd3.nv-bullet .nv-subtitle{fill:#999}.nvd3.nv-bullet .nv-range{fill:#bababa;fill-opacity:.4}.nvd3.nv-bullet .nv-range:hover{fill-opacity:.7}.nvd3.nv-sparkline path{fill:none}.nvd3.nv-sparklineplus g.nv-hoverValue{pointer-events:none}.nvd3.nv-sparklineplus .nv-hoverValue line{stroke:#333;stroke-width:1.5px}.nvd3.nv-sparklineplus,.nvd3.nv-sparklineplus g{pointer-events:all}.nvd3 .nv-hoverArea{fill-opacity:0;stroke-opacity:0}.nvd3.nv-sparklineplus .nv-xValue,.nvd3.nv-sparklineplus .nv-yValue{stroke-width:0;font-size:.9em;font-weight:400}.nvd3.nv-sparklineplus .nv-yValue{stroke:#f66}.nvd3.nv-sparklineplus .nv-maxValue{stroke:#2ca02c;fill:#2ca02c}.nvd3.nv-sparklineplus .nv-minValue{stroke:#d62728;fill:#d62728}.nvd3.nv-sparklineplus .nv-currentValue{font-weight:700;font-size:1.1em}.nvd3.nv-ohlcBar .nv-ticks .nv-tick{stroke-width:2px}.nvd3.nv-ohlcBar .nv-ticks .nv-tick.hover{stroke-width:4px}.nvd3.nv-ohlcBar .nv-ticks .nv-tick.positive{stroke:#2ca02c}.nvd3.nv-ohlcBar .nv-ticks .nv-tick.negative{stroke:#d62728}.nvd3.nv-historicalStockChart .nv-axis .nv-axislabel{font-weight:700}.nvd3.nv-historicalStockChart .nv-dragTarget{fill-opacity:0;stroke:none;cursor:move}.nvd3 .nv-brush .extent{fill-opacity:0!important}.nvd3 .nv-brushBackground rect{stroke:#000;stroke-width:.4;fill:#fff;fill-opacity:.7}.nvd3.nv-indentedtree .name{margin-left:5px}.nvd3.nv-indentedtree .clickable{color:#08c;cursor:pointer}.nvd3.nv-indentedtree span.clickable:hover{color:#005580;text-decoration:underline}.nvd3.nv-indentedtree .nv-childrenCount{display:inline-block;margin-left:5px}.nvd3.nv-indentedtree .nv-treeicon,.nvd3.nv-indentedtree .nv-treeicon.nv-folded{cursor:pointer}.nvd3 .background path{fill:none;stroke:#ccc;stroke-opacity:.4;shape-rendering:crispEdges}.nvd3 .foreground path{fill:none;stroke:#4682b4;stroke-opacity:.7}.nvd3 .brush .extent{fill-opacity:.3;stroke:#fff;shape-rendering:crispEdges}.axis path,.nvd3 .axis line{fill:none;stroke:#000;shape-rendering:crispEdges}.nvd3 .axis text{text-shadow:0 1px 0 #fff}.nvd3 .nv-interactiveGuideLine{pointer-events:none}.nvd3 line.nv-guideline{stroke:#ccc}\", \"\"]);\n\n// exports\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-loader!./static/repository/plugins/nvd3/nv.d3.css\n ** module id = 8\n ** module chunks = 7 8 9 10 11 12 13 14 15 16 17 18 19\n **/","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./../../../../node_modules/css-loader/index.js!./nv.d3.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../../../../node_modules/css-loader/index.js!./nv.d3.css\", function() {\n\t\t\tvar newContent = require(\"!!./../../../../node_modules/css-loader/index.js!./nv.d3.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/style-loader!./~/css-loader!./static/repository/plugins/nvd3/nv.d3.css\n ** module id = 9\n ** module chunks = 7 8 9 10 11 12 13 14 15 16 17 18 19\n **/","(function(){\n\nvar nv = window.nv || {};\n\n\nnv.version = '1.1.15b';\nnv.dev = true //set false when in production\n\nwindow.nv = nv;\n\nnv.tooltip = nv.tooltip || {}; // For the tooltip system\nnv.utils = nv.utils || {}; // Utility subsystem\nnv.models = nv.models || {}; //stores all the possible models/components\nnv.charts = {}; //stores all the ready to use charts\nnv.graphs = []; //stores all the graphs currently on the page\nnv.logs = {}; //stores some statistics and potential error messages\n\nnv.dispatch = d3.dispatch('render_start', 'render_end');\n\n// *************************************************************************\n//  Development render timers - disabled if dev = false\n\nif (nv.dev) {\n  nv.dispatch.on('render_start', function(e) {\n    nv.logs.startTime = +new Date();\n  });\n\n  nv.dispatch.on('render_end', function(e) {\n    nv.logs.endTime = +new Date();\n    nv.logs.totalTime = nv.logs.endTime - nv.logs.startTime;\n    nv.log('total', nv.logs.totalTime); // used for development, to keep track of graph generation times\n  });\n}\n\n// ********************************************\n//  Public Core NV functions\n\n// Logs all arguments, and returns the last so you can test things in place\n// Note: in IE8 console.log is an object not a function, and if modernizr is used\n// then calling Function.prototype.bind with with anything other than a function\n// causes a TypeError to be thrown.\nnv.log = function() {\n  if (nv.dev && console.log && console.log.apply)\n    console.log.apply(console, arguments)\n  else if (nv.dev && typeof console.log == \"function\" && Function.prototype.bind) {\n    var log = Function.prototype.bind.call(console.log, console);\n    log.apply(console, arguments);\n  }\n  return arguments[arguments.length - 1];\n};\n\n\nnv.render = function render(step) {\n  step = step || 1; // number of graphs to generate in each timeout loop\n\n  nv.render.active = true;\n  nv.dispatch.render_start();\n\n  setTimeout(function() {\n    var chart, graph;\n\n    for (var i = 0; i < step && (graph = nv.render.queue[i]); i++) {\n      chart = graph.generate();\n      if (typeof graph.callback == typeof(Function)) graph.callback(chart);\n      nv.graphs.push(chart);\n    }\n\n    nv.render.queue.splice(0, i);\n\n    if (nv.render.queue.length) setTimeout(arguments.callee, 0);\n    else {\n      nv.dispatch.render_end();\n      nv.render.active = false;\n    }\n  }, 0);\n};\n\nnv.render.active = false;\nnv.render.queue = [];\n\nnv.addGraph = function(obj) {\n  if (typeof arguments[0] === typeof(Function))\n    obj = {generate: arguments[0], callback: arguments[1]};\n\n  nv.render.queue.push(obj);\n\n  if (!nv.render.active) nv.render();\n};\n\nnv.identity = function(d) { return d; };\n\nnv.strip = function(s) { return s.replace(/(\\s|&)/g,''); };\n\nfunction daysInMonth(month,year) {\n  return (new Date(year, month+1, 0)).getDate();\n}\n\nfunction d3_time_range(floor, step, number) {\n  return function(t0, t1, dt) {\n    var time = floor(t0), times = [];\n    if (time < t0) step(time);\n    if (dt > 1) {\n      while (time < t1) {\n        var date = new Date(+time);\n        if ((number(date) % dt === 0)) times.push(date);\n        step(time);\n      }\n    } else {\n      while (time < t1) { times.push(new Date(+time)); step(time); }\n    }\n    return times;\n  };\n}\n\nd3.time.monthEnd = function(date) {\n  return new Date(date.getFullYear(), date.getMonth(), 0);\n};\n\nd3.time.monthEnds = d3_time_range(d3.time.monthEnd, function(date) {\n    date.setUTCDate(date.getUTCDate() + 1);\n    date.setDate(daysInMonth(date.getMonth() + 1, date.getFullYear()));\n  }, function(date) {\n    return date.getMonth();\n  }\n);\n\n/* Utility class to handle creation of an interactive layer.\nThis places a rectangle on top of the chart. When you mouse move over it, it sends a dispatch\ncontaining the X-coordinate. It can also render a vertical line where the mouse is located.\n\ndispatch.elementMousemove is the important event to latch onto.  It is fired whenever the mouse moves over\nthe rectangle. The dispatch is given one object which contains the mouseX/Y location.\nIt also has 'pointXValue', which is the conversion of mouseX to the x-axis scale.\n*/\nnv.interactiveGuideline = function() {\n\t\"use strict\";\n\tvar tooltip = nv.models.tooltip();\n\t//Public settings\n\tvar width = null\n\t, height = null\n    //Please pass in the bounding chart's top and left margins\n    //This is important for calculating the correct mouseX/Y positions.\n\t, margin = {left: 0, top: 0}\n\t, xScale = d3.scale.linear()\n\t, yScale = d3.scale.linear()\n\t, dispatch = d3.dispatch('elementMousemove', 'elementMouseout','elementDblclick')\n\t, showGuideLine = true\n\t, svgContainer = null  \n    //Must pass in the bounding chart's <svg> container.\n    //The mousemove event is attached to this container.\n\t;\n\n\t//Private variables\n\tvar isMSIE = navigator.userAgent.indexOf(\"MSIE\") !== -1  //Check user-agent for Microsoft Internet Explorer.\n\t;\n\n\n\tfunction layer(selection) {\n\t\tselection.each(function(data) {\n\t\t\t\tvar container = d3.select(this);\n\t\t\t\t\n\t\t\t\tvar availableWidth = (width || 960), availableHeight = (height || 400);\n\n\t\t\t\tvar wrap = container.selectAll(\"g.nv-wrap.nv-interactiveLineLayer\").data([data]);\n\t\t\t\tvar wrapEnter = wrap.enter()\n\t\t\t\t\t\t\t\t.append(\"g\").attr(\"class\", \" nv-wrap nv-interactiveLineLayer\");\n\t\t\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\twrapEnter.append(\"g\").attr(\"class\",\"nv-interactiveGuideLine\");\n\t\t\t\t\n\t\t\t\tif (!svgContainer) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n                function mouseHandler() {\n                      var d3mouse = d3.mouse(this);\n                      var mouseX = d3mouse[0];\n                      var mouseY = d3mouse[1];\n                      var subtractMargin = true;\n                      var mouseOutAnyReason = false;\n                      if (isMSIE) {\n                         /*\n                            D3.js (or maybe SVG.getScreenCTM) has a nasty bug in Internet Explorer 10.\n                            d3.mouse() returns incorrect X,Y mouse coordinates when mouse moving\n                            over a rect in IE 10.\n                            However, d3.event.offsetX/Y also returns the mouse coordinates\n                            relative to the triggering <rect>. So we use offsetX/Y on IE.  \n                         */\n                         mouseX = d3.event.offsetX;\n                         mouseY = d3.event.offsetY;\n\n                         /*\n                            On IE, if you attach a mouse event listener to the <svg> container,\n                            it will actually trigger it for all the child elements (like <path>, <circle>, etc).\n                            When this happens on IE, the offsetX/Y is set to where ever the child element\n                            is located.\n                            As a result, we do NOT need to subtract margins to figure out the mouse X/Y\n                            position under this scenario. Removing the line below *will* cause \n                            the interactive layer to not work right on IE.\n                         */\n                         if(d3.event.target.tagName !== \"svg\")\n                            subtractMargin = false;\n\n                         if (d3.event.target.className.baseVal.match(\"nv-legend\"))\n                         \tmouseOutAnyReason = true;\n                          \n                      }\n\n                      if(subtractMargin) {\n                         mouseX -= margin.left;\n                         mouseY -= margin.top;\n                      }\n\n                      /* If mouseX/Y is outside of the chart's bounds,\n                      trigger a mouseOut event.\n                      */\n                      if (mouseX < 0 || mouseY < 0 \n                        || mouseX > availableWidth || mouseY > availableHeight\n                        || (d3.event.relatedTarget && d3.event.relatedTarget.ownerSVGElement === undefined)\n                        || mouseOutAnyReason\n                        ) \n                      {\n                      \t\tif (isMSIE) {\n                      \t\t\tif (d3.event.relatedTarget \n                      \t\t\t\t&& d3.event.relatedTarget.ownerSVGElement === undefined\n                      \t\t\t\t&& d3.event.relatedTarget.className.match(tooltip.nvPointerEventsClass)) {\n                      \t\t\t\treturn;\n                      \t\t\t}\n                      \t\t}\n                            dispatch.elementMouseout({\n                               mouseX: mouseX,\n                               mouseY: mouseY\n                            });\n                            layer.renderGuideLine(null); //hide the guideline\n                            return;\n                      }\n                      \n                      var pointXValue = xScale.invert(mouseX);\n                      dispatch.elementMousemove({\n                            mouseX: mouseX,\n                            mouseY: mouseY,\n                            pointXValue: pointXValue\n                      });\n\n                      //If user double clicks the layer, fire a elementDblclick dispatch.\n                      if (d3.event.type === \"dblclick\") {\n                        dispatch.elementDblclick({\n                            mouseX: mouseX,\n                            mouseY: mouseY,\n                            pointXValue: pointXValue\n                        });\n                      }\n                }\n\n\t\t\t\tsvgContainer\n\t\t\t\t      .on(\"mousemove\",mouseHandler, true)\n\t\t\t\t      .on(\"mouseout\" ,mouseHandler,true)\n                      .on(\"dblclick\" ,mouseHandler)\n\t\t\t\t      ;\n\n\t\t\t\t //Draws a vertical guideline at the given X postion.\n\t\t\t\tlayer.renderGuideLine = function(x) {\n\t\t\t\t \tif (!showGuideLine) return;\n\t\t\t\t \tvar line = wrap.select(\".nv-interactiveGuideLine\")\n\t\t\t\t \t      .selectAll(\"line\")\n\t\t\t\t \t      .data((x != null) ? [nv.utils.NaNtoZero(x)] : [], String);\n\n\t\t\t\t \tline.enter()\n\t\t\t\t \t\t.append(\"line\")\n\t\t\t\t \t\t.attr(\"class\", \"nv-guideline\")\n\t\t\t\t \t\t.attr(\"x1\", function(d) { return d;})\n\t\t\t\t \t\t.attr(\"x2\", function(d) { return d;})\n\t\t\t\t \t\t.attr(\"y1\", availableHeight)\n\t\t\t\t \t\t.attr(\"y2\",0)\n\t\t\t\t \t\t;\n\t\t\t\t \tline.exit().remove();\n\n\t\t\t\t}\n\t\t});\n\t}\n\n\tlayer.dispatch = dispatch;\n\tlayer.tooltip = tooltip;\n\n\tlayer.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return layer;\n    };\n\n\tlayer.width = function(_) {\n\t\tif (!arguments.length) return width;\n\t\twidth = _;\n\t\treturn layer;\n\t};\n\n\tlayer.height = function(_) {\n\t\tif (!arguments.length) return height;\n\t\theight = _;\n\t\treturn layer;\n\t};\n\n\tlayer.xScale = function(_) {\n\t\tif (!arguments.length) return xScale;\n\t\txScale = _;\n\t\treturn layer;\n\t};\n\n\tlayer.showGuideLine = function(_) {\n\t\tif (!arguments.length) return showGuideLine;\n\t\tshowGuideLine = _;\n\t\treturn layer;\n\t};\n\n\tlayer.svgContainer = function(_) {\n\t\tif (!arguments.length) return svgContainer;\n\t\tsvgContainer = _;\n\t\treturn layer;\n\t};\n\n\n\treturn layer;\n};\n\n/* Utility class that uses d3.bisect to find the index in a given array, where a search value can be inserted.\nThis is different from normal bisectLeft; this function finds the nearest index to insert the search value.\n\nFor instance, lets say your array is [1,2,3,5,10,30], and you search for 28. \nNormal d3.bisectLeft will return 4, because 28 is inserted after the number 10.  But interactiveBisect will return 5\nbecause 28 is closer to 30 than 10.\n\nUnit tests can be found in: interactiveBisectTest.html\n\nHas the following known issues:\n   * Will not work if the data points move backwards (ie, 10,9,8,7, etc) or if the data points are in random order.\n   * Won't work if there are duplicate x coordinate values.\n*/\nnv.interactiveBisect = function (values, searchVal, xAccessor) {\n\t  \"use strict\";\n      if (! values instanceof Array) return null;\n      if (typeof xAccessor !== 'function') xAccessor = function(d,i) { return d.x;}\n\n      var bisect = d3.bisector(xAccessor).left;\n      var index = d3.max([0, bisect(values,searchVal) - 1]);\n      var currentValue = xAccessor(values[index], index);\n      if (typeof currentValue === 'undefined') currentValue = index;\n\n      if (currentValue === searchVal) return index;  //found exact match\n\n      var nextIndex = d3.min([index+1, values.length - 1]);\n      var nextValue = xAccessor(values[nextIndex], nextIndex);\n      if (typeof nextValue === 'undefined') nextValue = nextIndex;\n\n      if (Math.abs(nextValue - searchVal) >= Math.abs(currentValue - searchVal))\n          return index;\n      else\n          return nextIndex\n};\n\n/*\nReturns the index in the array \"values\" that is closest to searchVal.\nOnly returns an index if searchVal is within some \"threshold\".\nOtherwise, returns null.\n*/\nnv.nearestValueIndex = function (values, searchVal, threshold) {\n      \"use strict\";\n      var yDistMax = Infinity, indexToHighlight = null;\n      values.forEach(function(d,i) {\n         var delta = Math.abs(searchVal - d);\n         if ( delta <= yDistMax && delta < threshold) {\n            yDistMax = delta;\n            indexToHighlight = i;\n         }\n      });\n      return indexToHighlight;\n};/* Tooltip rendering model for nvd3 charts.\nwindow.nv.models.tooltip is the updated,new way to render tooltips.\n\nwindow.nv.tooltip.show is the old tooltip code.\nwindow.nv.tooltip.* also has various helper methods.\n*/\n(function() {\n  \"use strict\";\n  window.nv.tooltip = {};\n\n  /* Model which can be instantiated to handle tooltip rendering.\n    Example usage: \n    var tip = nv.models.tooltip().gravity('w').distance(23)\n                .data(myDataObject);\n\n        tip();    //just invoke the returned function to render tooltip.\n  */\n  window.nv.models.tooltip = function() {\n        var content = null    //HTML contents of the tooltip.  If null, the content is generated via the data variable.\n        ,   data = null     /* Tooltip data. If data is given in the proper format, a consistent tooltip is generated.\n        Format of data:\n        {\n            key: \"Date\",\n            value: \"August 2009\", \n            series: [\n                    {\n                        key: \"Series 1\",\n                        value: \"Value 1\",\n                        color: \"#000\"\n                    },\n                    {\n                        key: \"Series 2\",\n                        value: \"Value 2\",\n                        color: \"#00f\"\n                    }\n            ]\n\n        }\n\n        */\n        ,   gravity = 'w'   //Can be 'n','s','e','w'. Determines how tooltip is positioned.\n        ,   distance = 50   //Distance to offset tooltip from the mouse location.\n        ,   snapDistance = 25   //Tolerance allowed before tooltip is moved from its current position (creates 'snapping' effect)\n        ,   fixedTop = null //If not null, this fixes the top position of the tooltip.\n        ,   classes = null  //Attaches additional CSS classes to the tooltip DIV that is created.\n        ,   chartContainer = null   //Parent DIV, of the SVG Container that holds the chart.\n        ,   tooltipElem = null  //actual DOM element representing the tooltip.\n        ,   position = {left: null, top: null}      //Relative position of the tooltip inside chartContainer.\n        ,   enabled = true  //True -> tooltips are rendered. False -> don't render tooltips.\n        //Generates a unique id when you create a new tooltip() object\n        ,   id = \"nvtooltip-\" + Math.floor(Math.random() * 100000)\n        ;\n\n        //CSS class to specify whether element should not have mouse events.\n        var  nvPointerEventsClass = \"nv-pointer-events-none\";\n\n        //Format function for the tooltip values column\n        var valueFormatter = function(d,i) {\n            return d;\n        };\n\n        //Format function for the tooltip header value.\n        var headerFormatter = function(d) {\n            return d;\n        };\n\n        //By default, the tooltip model renders a beautiful table inside a DIV.\n        //You can override this function if a custom tooltip is desired.\n        var contentGenerator = function(d) {\n            if (content != null) return content;\n\n            if (d == null) return '';\n\n            var table = d3.select(document.createElement(\"table\"));\n            var theadEnter = table.selectAll(\"thead\")\n                .data([d])\n                .enter().append(\"thead\");\n            theadEnter.append(\"tr\")\n                .append(\"td\")\n                .attr(\"colspan\",3)\n                .append(\"strong\")\n                    .classed(\"x-value\",true)\n                    .html(headerFormatter(d.value));\n\n            var tbodyEnter = table.selectAll(\"tbody\")\n                .data([d])\n                .enter().append(\"tbody\");\n            var trowEnter = tbodyEnter.selectAll(\"tr\")\n                .data(function(p) { return p.series})\n                .enter()\n                .append(\"tr\")\n                .classed(\"highlight\", function(p) { return p.highlight})\n                ;\n\n            trowEnter.append(\"td\")\n                .classed(\"legend-color-guide\",true)\n                .append(\"div\")\n                    .style(\"background-color\", function(p) { return p.color});\n            trowEnter.append(\"td\")\n                .classed(\"key\",true)\n                .html(function(p) {return p.key});\n            trowEnter.append(\"td\")\n                .classed(\"value\",true)\n                .html(function(p,i) { return valueFormatter(p.value,i) });\n\n\n            trowEnter.selectAll(\"td\").each(function(p) {\n                if (p.highlight) {\n                    var opacityScale = d3.scale.linear().domain([0,1]).range([\"#fff\",p.color]);\n                    var opacity = 0.6;\n                    d3.select(this)\n                        .style(\"border-bottom-color\", opacityScale(opacity))\n                        .style(\"border-top-color\", opacityScale(opacity))\n                        ;\n                }\n            });\n\n            var html = table.node().outerHTML;\n            if (d.footer !== undefined)\n                html += \"<div class='footer'>\" + d.footer + \"</div>\";\n            return html;\n\n        };\n\n        var dataSeriesExists = function(d) {\n            if (d && d.series && d.series.length > 0) return true;\n\n            return false;\n        };\n\n        //In situations where the chart is in a 'viewBox', re-position the tooltip based on how far chart is zoomed.\n        function convertViewBoxRatio() {\n            if (chartContainer) {\n              var svg = d3.select(chartContainer);\n              if (svg.node().tagName !== \"svg\") {\n                 svg = svg.select(\"svg\");\n              }\n              var viewBox = (svg.node()) ? svg.attr('viewBox') : null;\n              if (viewBox) {\n                viewBox = viewBox.split(' ');\n                var ratio = parseInt(svg.style('width')) / viewBox[2];\n                \n                position.left = position.left * ratio;\n                position.top  = position.top * ratio;\n              }\n            }\n        }\n\n        //Creates new tooltip container, or uses existing one on DOM.\n        function getTooltipContainer(newContent) {\n            var body;\n            if (chartContainer)\n                body = d3.select(chartContainer);\n            else\n                body = d3.select(\"body\");\n\n            var container = body.select(\".nvtooltip\");\n            if (container.node() === null) {\n                //Create new tooltip div if it doesn't exist on DOM.\n                container = body.append(\"div\")\n                    .attr(\"class\", \"nvtooltip \" + (classes? classes: \"xy-tooltip\"))\n                    .attr(\"id\",id)\n                    ;\n            }\n        \n\n            container.node().innerHTML = newContent;\n            container.style(\"top\",0).style(\"left\",0).style(\"opacity\",0);\n            container.selectAll(\"div, table, td, tr\").classed(nvPointerEventsClass,true)\n            container.classed(nvPointerEventsClass,true);\n            return container.node();\n        }\n\n        \n\n        //Draw the tooltip onto the DOM.\n        function nvtooltip() {\n            if (!enabled) return;\n            if (!dataSeriesExists(data)) return;\n\n            convertViewBoxRatio();\n\n            var left = position.left;\n            var top = (fixedTop != null) ? fixedTop : position.top;\n            var container = getTooltipContainer(contentGenerator(data));\n            tooltipElem = container;\n            if (chartContainer) {\n                var svgComp = chartContainer.getElementsByTagName(\"svg\")[0];\n                var boundRect = (svgComp) ? svgComp.getBoundingClientRect() : chartContainer.getBoundingClientRect();\n                var svgOffset = {left:0,top:0};\n                if (svgComp) {\n                    var svgBound = svgComp.getBoundingClientRect();\n                    var chartBound = chartContainer.getBoundingClientRect();\n                    var svgBoundTop = svgBound.top;\n                    \n                    //Defensive code. Sometimes, svgBoundTop can be a really negative\n                    //  number, like -134254. That's a bug. \n                    //  If such a number is found, use zero instead. FireFox bug only\n                    if (svgBoundTop < 0) {\n                        var containerBound = chartContainer.getBoundingClientRect();\n                        svgBoundTop = (Math.abs(svgBoundTop) > containerBound.height) ? 0 : svgBoundTop;\n                    } \n                    svgOffset.top = Math.abs(svgBoundTop - chartBound.top);\n                    svgOffset.left = Math.abs(svgBound.left - chartBound.left);\n                }\n                //If the parent container is an overflow <div> with scrollbars, subtract the scroll offsets.\n                //You need to also add any offset between the <svg> element and its containing <div>\n                //Finally, add any offset of the containing <div> on the whole page.\n                left += chartContainer.offsetLeft + svgOffset.left - 2*chartContainer.scrollLeft;\n                top += chartContainer.offsetTop + svgOffset.top - 2*chartContainer.scrollTop;\n            }\n\n            if (snapDistance && snapDistance > 0) {\n                top = Math.floor(top/snapDistance) * snapDistance;\n            }\n\n            nv.tooltip.calcTooltipPosition([left,top], gravity, distance, container);\n            return nvtooltip;\n        };\n\n        nvtooltip.nvPointerEventsClass = nvPointerEventsClass;\n        \n        nvtooltip.content = function(_) {\n            if (!arguments.length) return content;\n            content = _;\n            return nvtooltip;\n        };\n\n        //Returns tooltipElem...not able to set it.\n        nvtooltip.tooltipElem = function() {\n            return tooltipElem;\n        };\n\n        nvtooltip.contentGenerator = function(_) {\n            if (!arguments.length) return contentGenerator;\n            if (typeof _ === 'function') {\n                contentGenerator = _;\n            }\n            return nvtooltip;\n        };\n\n        nvtooltip.data = function(_) {\n            if (!arguments.length) return data;\n            data = _;\n            return nvtooltip;\n        };\n\n        nvtooltip.gravity = function(_) {\n            if (!arguments.length) return gravity;\n            gravity = _;\n            return nvtooltip;\n        };\n\n        nvtooltip.distance = function(_) {\n            if (!arguments.length) return distance;\n            distance = _;\n            return nvtooltip;\n        };\n\n        nvtooltip.snapDistance = function(_) {\n            if (!arguments.length) return snapDistance;\n            snapDistance = _;\n            return nvtooltip;\n        };\n\n        nvtooltip.classes = function(_) {\n            if (!arguments.length) return classes;\n            classes = _;\n            return nvtooltip;\n        };\n\n        nvtooltip.chartContainer = function(_) {\n            if (!arguments.length) return chartContainer;\n            chartContainer = _;\n            return nvtooltip;\n        };\n\n        nvtooltip.position = function(_) {\n            if (!arguments.length) return position;\n            position.left = (typeof _.left !== 'undefined') ? _.left : position.left;\n            position.top = (typeof _.top !== 'undefined') ? _.top : position.top;\n            return nvtooltip;\n        };\n\n        nvtooltip.fixedTop = function(_) {\n            if (!arguments.length) return fixedTop;\n            fixedTop = _;\n            return nvtooltip;\n        };\n\n        nvtooltip.enabled = function(_) {\n            if (!arguments.length) return enabled;\n            enabled = _;\n            return nvtooltip;\n        };\n\n        nvtooltip.valueFormatter = function(_) {\n            if (!arguments.length) return valueFormatter;\n            if (typeof _ === 'function') {\n                valueFormatter = _;\n            }\n            return nvtooltip;\n        };\n\n        nvtooltip.headerFormatter = function(_) {\n            if (!arguments.length) return headerFormatter;\n            if (typeof _ === 'function') {\n                headerFormatter = _;\n            }\n            return nvtooltip;\n        };\n\n        //id() is a read-only function. You can't use it to set the id.\n        nvtooltip.id = function() {\n            return id;\n        };\n\n\n        return nvtooltip;\n  };\n\n\n  //Original tooltip.show function. Kept for backward compatibility.\n  // pos = [left,top]\n  nv.tooltip.show = function(pos, content, gravity, dist, parentContainer, classes) {\n      \n        //Create new tooltip div if it doesn't exist on DOM.\n        var   container = document.createElement('div');\n        container.className = 'nvtooltip ' + (classes ? classes : 'xy-tooltip');\n\n        var body = parentContainer;\n        if ( !parentContainer || parentContainer.tagName.match(/g|svg/i)) {\n            //If the parent element is an SVG element, place tooltip in the <body> element.\n            body = document.getElementsByTagName('body')[0];\n        }\n   \n        container.style.left = 0;\n        container.style.top = 0;\n        container.style.opacity = 0;\n        container.innerHTML = content;\n        body.appendChild(container);\n        \n        //If the parent container is an overflow <div> with scrollbars, subtract the scroll offsets.\n        if (parentContainer) {\n           pos[0] = pos[0] - parentContainer.scrollLeft;\n           pos[1] = pos[1] - parentContainer.scrollTop;\n        }\n        nv.tooltip.calcTooltipPosition(pos, gravity, dist, container);\n  };\n\n  //Looks up the ancestry of a DOM element, and returns the first NON-svg node.\n  nv.tooltip.findFirstNonSVGParent = function(Elem) {\n            while(Elem.tagName.match(/^g|svg$/i) !== null) {\n                Elem = Elem.parentNode;\n            }\n            return Elem;\n  };\n\n  //Finds the total offsetTop of a given DOM element.\n  //Looks up the entire ancestry of an element, up to the first relatively positioned element.\n  nv.tooltip.findTotalOffsetTop = function ( Elem, initialTop ) {\n                var offsetTop = initialTop;\n                \n                do {\n                    if( !isNaN( Elem.offsetTop ) ) {\n                        offsetTop += (Elem.offsetTop);\n                    }\n                } while( Elem = Elem.offsetParent );\n                return offsetTop;\n  };\n\n  //Finds the total offsetLeft of a given DOM element.\n  //Looks up the entire ancestry of an element, up to the first relatively positioned element.\n  nv.tooltip.findTotalOffsetLeft = function ( Elem, initialLeft) {\n                var offsetLeft = initialLeft;\n                \n                do {\n                    if( !isNaN( Elem.offsetLeft ) ) {\n                        offsetLeft += (Elem.offsetLeft);\n                    }\n                } while( Elem = Elem.offsetParent );\n                return offsetLeft;\n  };\n\n  //Global utility function to render a tooltip on the DOM.\n  //pos = [left,top] coordinates of where to place the tooltip, relative to the SVG chart container.\n  //gravity = how to orient the tooltip\n  //dist = how far away from the mouse to place tooltip\n  //container = tooltip DIV\n  nv.tooltip.calcTooltipPosition = function(pos, gravity, dist, container) {\n\n            var height = parseInt(container.offsetHeight),\n                width = parseInt(container.offsetWidth),\n                windowWidth = nv.utils.windowSize().width,\n                windowHeight = nv.utils.windowSize().height,\n                scrollTop = window.pageYOffset,\n                scrollLeft = window.pageXOffset,\n                left, top;\n\n            windowHeight = window.innerWidth >= document.body.scrollWidth ? windowHeight : windowHeight - 16;\n            windowWidth = window.innerHeight >= document.body.scrollHeight ? windowWidth : windowWidth - 16;\n\n            gravity = gravity || 's';\n            dist = dist || 20;\n\n            var tooltipTop = function ( Elem ) {\n                return nv.tooltip.findTotalOffsetTop(Elem, top);\n            };\n\n            var tooltipLeft = function ( Elem ) {\n                return nv.tooltip.findTotalOffsetLeft(Elem,left);\n            };\n\n            switch (gravity) {\n              case 'e':\n                left = pos[0] - width - dist;\n                top = pos[1] - (height / 2);\n                var tLeft = tooltipLeft(container);\n                var tTop = tooltipTop(container);\n                if (tLeft < scrollLeft) left = pos[0] + dist > scrollLeft ? pos[0] + dist : scrollLeft - tLeft + left;\n                if (tTop < scrollTop) top = scrollTop - tTop + top;\n                if (tTop + height > scrollTop + windowHeight) top = scrollTop + windowHeight - tTop + top - height;\n                break;\n              case 'w':\n                left = pos[0] + dist;\n                top = pos[1] - (height / 2);\n                var tLeft = tooltipLeft(container);\n                var tTop = tooltipTop(container);\n                if (tLeft + width > windowWidth) left = pos[0] - width - dist;\n                if (tTop < scrollTop) top = scrollTop + 5;\n                if (tTop + height > scrollTop + windowHeight) top = scrollTop + windowHeight - tTop + top - height;\n                break;\n              case 'n':\n                left = pos[0] - (width / 2) - 5;\n                top = pos[1] + dist;\n                var tLeft = tooltipLeft(container);\n                var tTop = tooltipTop(container);\n                if (tLeft < scrollLeft) left = scrollLeft + 5;\n                if (tLeft + width > windowWidth) left = left - width/2 + 5;\n                if (tTop + height > scrollTop + windowHeight) top = scrollTop + windowHeight - tTop + top - height;\n                break;\n              case 's':\n                left = pos[0] - (width / 2);\n                top = pos[1] - height - dist;\n                var tLeft = tooltipLeft(container);\n                var tTop = tooltipTop(container);\n                if (tLeft < scrollLeft) left = scrollLeft + 5;\n                if (tLeft + width > windowWidth) left = left - width/2 + 5;\n                if (scrollTop > tTop) top = scrollTop;\n                break;\n              case 'none':\n                left = pos[0];\n                top = pos[1] - dist;\n                var tLeft = tooltipLeft(container);\n                var tTop = tooltipTop(container);\n                break;\n            }\n\n\n            container.style.left = left+'px';\n            container.style.top = top+'px';\n            container.style.opacity = 1;\n            container.style.position = 'absolute'; \n\n            return container;\n    };\n\n    //Global utility function to remove tooltips from the DOM.\n    nv.tooltip.cleanup = function() {\n\n              // Find the tooltips, mark them for removal by this class (so others cleanups won't find it)\n              var tooltips = document.getElementsByClassName('nvtooltip');\n              var purging = [];\n              while(tooltips.length) {\n                purging.push(tooltips[0]);\n                tooltips[0].style.transitionDelay = '0 !important';\n                tooltips[0].style.opacity = 0;\n                tooltips[0].className = 'nvtooltip-pending-removal';\n              }\n\n              setTimeout(function() {\n\n                  while (purging.length) {\n                     var removeMe = purging.pop();\n                      removeMe.parentNode.removeChild(removeMe);\n                  }\n            }, 500);\n    };\n\n})();\n\nnv.utils.windowSize = function() {\n    // Sane defaults\n    var size = {width: 640, height: 480};\n\n    // Earlier IE uses Doc.body\n    if (document.body && document.body.offsetWidth) {\n        size.width = document.body.offsetWidth;\n        size.height = document.body.offsetHeight;\n    }\n\n    // IE can use depending on mode it is in\n    if (document.compatMode=='CSS1Compat' &&\n        document.documentElement &&\n        document.documentElement.offsetWidth ) {\n        size.width = document.documentElement.offsetWidth;\n        size.height = document.documentElement.offsetHeight;\n    }\n\n    // Most recent browsers use\n    if (window.innerWidth && window.innerHeight) {\n        size.width = window.innerWidth;\n        size.height = window.innerHeight;\n    }\n    return (size);\n};\n\n\n\n// Easy way to bind multiple functions to window.onresize\n// TODO: give a way to remove a function after its bound, other than removing all of them\nnv.utils.windowResize = function(fun){\n  if (fun === undefined) return;\n  var oldresize = window.onresize;\n\n  window.onresize = function(e) {\n    if (typeof oldresize == 'function') oldresize(e);\n    fun(e);\n  }\n}\n\n// Backwards compatible way to implement more d3-like coloring of graphs.\n// If passed an array, wrap it in a function which implements the old default\n// behavior\nnv.utils.getColor = function(color) {\n    if (!arguments.length) return nv.utils.defaultColor(); //if you pass in nothing, get default colors back\n\n    if( Object.prototype.toString.call( color ) === '[object Array]' )\n        return function(d, i) { return d.color || color[i % color.length]; };\n    else\n        return color;\n        //can't really help it if someone passes rubbish as color\n}\n\n// Default color chooser uses the index of an object as before.\nnv.utils.defaultColor = function() {\n    var colors = d3.scale.category20().range();\n    return function(d, i) { return d.color || colors[i % colors.length] };\n}\n\n\n// Returns a color function that takes the result of 'getKey' for each series and\n// looks for a corresponding color from the dictionary,\nnv.utils.customTheme = function(dictionary, getKey, defaultColors) {\n  getKey = getKey || function(series) { return series.key }; // use default series.key if getKey is undefined\n  defaultColors = defaultColors || d3.scale.category20().range(); //default color function\n\n  var defIndex = defaultColors.length; //current default color (going in reverse)\n\n  return function(series, index) {\n    var key = getKey(series);\n\n    if (!defIndex) defIndex = defaultColors.length; //used all the default colors, start over\n\n    if (typeof dictionary[key] !== \"undefined\")\n      return (typeof dictionary[key] === \"function\") ? dictionary[key]() : dictionary[key];\n    else\n      return defaultColors[--defIndex]; // no match in dictionary, use default color\n  }\n}\n\n\n\n// From the PJAX example on d3js.org, while this is not really directly needed\n// it's a very cool method for doing pjax, I may expand upon it a little bit,\n// open to suggestions on anything that may be useful\nnv.utils.pjax = function(links, content) {\n  d3.selectAll(links).on(\"click\", function() {\n    history.pushState(this.href, this.textContent, this.href);\n    load(this.href);\n    d3.event.preventDefault();\n  });\n\n  function load(href) {\n    d3.html(href, function(fragment) {\n      var target = d3.select(content).node();\n      target.parentNode.replaceChild(d3.select(fragment).select(content).node(), target);\n      nv.utils.pjax(links, content);\n    });\n  }\n\n  d3.select(window).on(\"popstate\", function() {\n    if (d3.event.state) load(d3.event.state);\n  });\n}\n\n/* For situations where we want to approximate the width in pixels for an SVG:text element.\nMost common instance is when the element is in a display:none; container.\nForumla is : text.length * font-size * constant_factor\n*/\nnv.utils.calcApproxTextWidth = function (svgTextElem) {\n    if (typeof svgTextElem.style === 'function'\n        && typeof svgTextElem.text === 'function') {\n        var fontSize = parseInt(svgTextElem.style(\"font-size\").replace(\"px\",\"\"));\n        var textLength = svgTextElem.text().length;\n\n        return textLength * fontSize * 0.5;\n    }\n    return 0;\n};\n\n/* Numbers that are undefined, null or NaN, convert them to zeros.\n*/\nnv.utils.NaNtoZero = function(n) {\n    if (typeof n !== 'number'\n        || isNaN(n)\n        || n === null\n        || n === Infinity) return 0;\n\n    return n;\n};\n\n/*\nSnippet of code you can insert into each nv.models.* to give you the ability to\ndo things like:\nchart.options({\n  showXAxis: true,\n  tooltips: true\n});\n\nTo enable in the chart:\nchart.options = nv.utils.optionsFunc.bind(chart);\n*/\nnv.utils.optionsFunc = function(args) {\n    if (args) {\n      d3.map(args).forEach((function(key,value) {\n        if (typeof this[key] === \"function\") {\n           this[key](value);\n        }\n      }).bind(this));\n    }\n    return this;\n};nv.models.axis = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var axis = d3.svg.axis()\n    ;\n\n  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n    , width = 75 //only used for tickLabel currently\n    , height = 60 //only used for tickLabel currently\n    , scale = d3.scale.linear()\n    , axisLabelText = null\n    , showMaxMin = true //TODO: showMaxMin should be disabled on all ordinal scaled axes\n    , highlightZero = true\n    , rotateLabels = 0\n    , rotateYLabel = true\n    , staggerLabels = false\n    , isOrdinal = false\n    , ticks = null\n    , axisLabelDistance = 12 //The larger this number is, the closer the axis label is to the axis.\n    ;\n\n  axis\n    .scale(scale)\n    .orient('bottom')\n    .tickFormat(function(d) { return d })\n    ;\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var scale0;\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this);\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-axis').data([data]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-axis');\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g')\n\n      //------------------------------------------------------------\n\n\n      if (ticks !== null)\n        axis.ticks(ticks);\n      else if (axis.orient() == 'top' || axis.orient() == 'bottom')\n        axis.ticks(Math.abs(scale.range()[1] - scale.range()[0]) / 100);\n\n\n      //TODO: consider calculating width/height based on whether or not label is added, for reference in charts using this component\n\n\n      g.call(axis);\n\n      scale0 = scale0 || axis.scale();\n\n      var fmt = axis.tickFormat();\n      if (fmt == null) {\n        fmt = scale0.tickFormat();\n      }\n\n      var axisLabel = g.selectAll('text.nv-axislabel')\n          .data([axisLabelText || null]);\n      axisLabel.exit().remove();\n      switch (axis.orient()) {\n        case 'top':\n          axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n          var w = (scale.range().length==2) ? scale.range()[1] : (scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]));\n          axisLabel\n              .attr('text-anchor', 'middle')\n              .attr('y', 0)\n              .attr('x', w/2);\n          if (showMaxMin) {\n            var axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                           .data(scale.domain());\n            axisMaxMin.enter().append('g').attr('class', 'nv-axisMaxMin').append('text');\n            axisMaxMin.exit().remove();\n            axisMaxMin\n                .attr('transform', function(d,i) {\n                  return 'translate(' + scale(d) + ',0)'\n                })\n              .select('text')\n                .attr('dy', '-0.5em')\n                .attr('y', -axis.tickPadding())\n                .attr('text-anchor', 'middle')\n                .text(function(d,i) {\n                  var v = fmt(d);\n                  return ('' + v).match('NaN') ? '' : v;\n                });\n            axisMaxMin\n                .attr('transform', function(d,i) {\n                  return 'translate(' + scale.range()[i] + ',0)'\n                });\n          }\n          break;\n        case 'bottom':\n          var xLabelMargin = 36;\n          var maxTextWidth = 30;\n          var xTicks = g.selectAll('g').select(\"text\");\n          if (rotateLabels%360) {\n            //Calculate the longest xTick width\n            xTicks.each(function(d,i){\n              var width = this.getBBox().width;\n              if(width > maxTextWidth) maxTextWidth = width;\n            });\n            //Convert to radians before calculating sin. Add 30 to margin for healthy padding.\n            var sin = Math.abs(Math.sin(rotateLabels*Math.PI/180));\n            var xLabelMargin = (sin ? sin*maxTextWidth : maxTextWidth)+30;\n            //Rotate all xTicks\n            xTicks\n              .attr('transform', function(d,i,j) { return 'rotate(' + rotateLabels + ' 0,0)' })\n              .style('text-anchor', rotateLabels%360 > 0 ? 'start' : 'end');\n          }\n          axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n          var w = (scale.range().length==2) ? scale.range()[1] : (scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]));\n          axisLabel\n              .attr('text-anchor', 'middle')\n              .attr('y', xLabelMargin)\n              .attr('x', w/2);\n          if (showMaxMin) {\n          //if (showMaxMin && !isOrdinal) {\n            var axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                           //.data(scale.domain())\n                           .data([scale.domain()[0], scale.domain()[scale.domain().length - 1]]);\n            axisMaxMin.enter().append('g').attr('class', 'nv-axisMaxMin').append('text');\n            axisMaxMin.exit().remove();\n            axisMaxMin\n                .attr('transform', function(d,i) {\n                  return 'translate(' + (scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0)) + ',0)'\n                })\n              .select('text')\n                .attr('dy', '.71em')\n                .attr('y', axis.tickPadding())\n                .attr('transform', function(d,i,j) { return 'rotate(' + rotateLabels + ' 0,0)' })\n                .style('text-anchor', rotateLabels ? (rotateLabels%360 > 0 ? 'start' : 'end') : 'middle')\n                .text(function(d,i) {\n                  var v = fmt(d);\n                  return ('' + v).match('NaN') ? '' : v;\n                });\n            axisMaxMin\n                .attr('transform', function(d,i) {\n                  //return 'translate(' + scale.range()[i] + ',0)'\n                  //return 'translate(' + scale(d) + ',0)'\n                  return 'translate(' + (scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0)) + ',0)'\n                });\n          }\n          if (staggerLabels)\n            xTicks\n                .attr('transform', function(d,i) { return 'translate(0,' + (i % 2 == 0 ? '0' : '12') + ')' });\n\n          break;\n        case 'right':\n          axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n          axisLabel\n              .style('text-anchor', rotateYLabel ? 'middle' : 'begin')\n              .attr('transform', rotateYLabel ? 'rotate(90)' : '')\n              .attr('y', rotateYLabel ? (-Math.max(margin.right,width) + 12) : -10) //TODO: consider calculating this based on largest tick width... OR at least expose this on chart\n              .attr('x', rotateYLabel ? (scale.range()[0] / 2) : axis.tickPadding());\n          if (showMaxMin) {\n            var axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                           .data(scale.domain());\n            axisMaxMin.enter().append('g').attr('class', 'nv-axisMaxMin').append('text')\n                .style('opacity', 0);\n            axisMaxMin.exit().remove();\n            axisMaxMin\n                .attr('transform', function(d,i) {\n                  return 'translate(0,' + scale(d) + ')'\n                })\n              .select('text')\n                .attr('dy', '.32em')\n                .attr('y', 0)\n                .attr('x', axis.tickPadding())\n                .style('text-anchor', 'start')\n                .text(function(d,i) {\n                  var v = fmt(d);\n                  return ('' + v).match('NaN') ? '' : v;\n                });\n            axisMaxMin\n                .attr('transform', function(d,i) {\n                  return 'translate(0,' + scale.range()[i] + ')'\n                })\n              .select('text')\n                .style('opacity', 1);\n          }\n          break;\n        case 'left':\n          /*\n          //For dynamically placing the label. Can be used with dynamically-sized chart axis margins\n          var yTicks = g.selectAll('g').select(\"text\");\n          yTicks.each(function(d,i){\n            var labelPadding = this.getBBox().width + axis.tickPadding() + 16;\n            if(labelPadding > width) width = labelPadding;\n          });\n          */\n          axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n          axisLabel\n              .style('text-anchor', rotateYLabel ? 'middle' : 'end')\n              .attr('transform', rotateYLabel ? 'rotate(-90)' : '')\n              .attr('y', rotateYLabel ? (-Math.max(margin.left,width) + axisLabelDistance) : -10) //TODO: consider calculating this based on largest tick width... OR at least expose this on chart\n              .attr('x', rotateYLabel ? (-scale.range()[0] / 2) : -axis.tickPadding());\n          if (showMaxMin) {\n            var axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                           .data(scale.domain());\n            axisMaxMin.enter().append('g').attr('class', 'nv-axisMaxMin').append('text')\n                .style('opacity', 0);\n            axisMaxMin.exit().remove();\n            axisMaxMin\n                .attr('transform', function(d,i) {\n                  return 'translate(0,' + scale0(d) + ')'\n                })\n              .select('text')\n                .attr('dy', '.32em')\n                .attr('y', 0)\n                .attr('x', -axis.tickPadding())\n                .attr('text-anchor', 'end')\n                .text(function(d,i) {\n                  var v = fmt(d);\n                  return ('' + v).match('NaN') ? '' : v;\n                });\n            axisMaxMin\n                .attr('transform', function(d,i) {\n                  return 'translate(0,' + scale.range()[i] + ')'\n                })\n              .select('text')\n                .style('opacity', 1);\n          }\n          break;\n      }\n      axisLabel\n          .text(function(d) { return d });\n\n\n      if (showMaxMin && (axis.orient() === 'left' || axis.orient() === 'right')) {\n        //check if max and min overlap other values, if so, hide the values that overlap\n        g.selectAll('g') // the g's wrapping each tick\n            .each(function(d,i) {\n              d3.select(this).select('text').attr('opacity', 1);\n              if (scale(d) < scale.range()[1] + 10 || scale(d) > scale.range()[0] - 10) { // 10 is assuming text height is 16... if d is 0, leave it!\n                if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL\n                  d3.select(this).attr('opacity', 0);\n\n                d3.select(this).select('text').attr('opacity', 0); // Don't remove the ZERO line!!\n              }\n            });\n\n        //if Max and Min = 0 only show min, Issue #281\n        if (scale.domain()[0] == scale.domain()[1] && scale.domain()[0] == 0)\n          wrap.selectAll('g.nv-axisMaxMin')\n            .style('opacity', function(d,i) { return !i ? 1 : 0 });\n\n      }\n\n      if (showMaxMin && (axis.orient() === 'top' || axis.orient() === 'bottom')) {\n        var maxMinRange = [];\n        wrap.selectAll('g.nv-axisMaxMin')\n            .each(function(d,i) {\n              try {\n                  if (i) // i== 1, max position\n                      maxMinRange.push(scale(d) - this.getBBox().width - 4)  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)\n                  else // i==0, min position\n                      maxMinRange.push(scale(d) + this.getBBox().width + 4)\n              }catch (err) {\n                  if (i) // i== 1, max position\n                      maxMinRange.push(scale(d) - 4)  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)\n                  else // i==0, min position\n                      maxMinRange.push(scale(d) + 4)\n              }\n            });\n        g.selectAll('g') // the g's wrapping each tick\n            .each(function(d,i) {\n              if (scale(d) < maxMinRange[0] || scale(d) > maxMinRange[1]) {\n                if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL\n                  d3.select(this).remove();\n                else\n                  d3.select(this).select('text').remove(); // Don't remove the ZERO line!!\n              }\n            });\n      }\n\n\n      //highlight zero line ... Maybe should not be an option and should just be in CSS?\n      if (highlightZero)\n        g.selectAll('.tick')\n          .filter(function(d) { return !parseFloat(Math.round(d.__data__*100000)/1000000) && (d.__data__ !== undefined) }) //this is because sometimes the 0 tick is a very small fraction, TODO: think of cleaner technique\n            .classed('zero', true);\n\n      //store old scales for use in transitions on update\n      scale0 = scale.copy();\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.axis = axis;\n\n  d3.rebind(chart, axis, 'orient', 'tickValues', 'tickSubdivide', 'tickSize', 'tickPadding', 'tickFormat');\n  d3.rebind(chart, scale, 'domain', 'range', 'rangeBand', 'rangeBands'); //these are also accessible by chart.scale(), but added common ones directly for ease of use\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.margin = function(_) {\n    if(!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  }\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.ticks = function(_) {\n    if (!arguments.length) return ticks;\n    ticks = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.axisLabel = function(_) {\n    if (!arguments.length) return axisLabelText;\n    axisLabelText = _;\n    return chart;\n  }\n\n  chart.showMaxMin = function(_) {\n    if (!arguments.length) return showMaxMin;\n    showMaxMin = _;\n    return chart;\n  }\n\n  chart.highlightZero = function(_) {\n    if (!arguments.length) return highlightZero;\n    highlightZero = _;\n    return chart;\n  }\n\n  chart.scale = function(_) {\n    if (!arguments.length) return scale;\n    scale = _;\n    axis.scale(scale);\n    isOrdinal = typeof scale.rangeBands === 'function';\n    d3.rebind(chart, scale, 'domain', 'range', 'rangeBand', 'rangeBands');\n    return chart;\n  }\n\n  chart.rotateYLabel = function(_) {\n    if(!arguments.length) return rotateYLabel;\n    rotateYLabel = _;\n    return chart;\n  }\n\n  chart.rotateLabels = function(_) {\n    if(!arguments.length) return rotateLabels;\n    rotateLabels = _;\n    return chart;\n  }\n\n  chart.staggerLabels = function(_) {\n    if (!arguments.length) return staggerLabels;\n    staggerLabels = _;\n    return chart;\n  };\n\n  chart.axisLabelDistance = function(_) {\n    if (!arguments.length) return axisLabelDistance;\n    axisLabelDistance = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n//TODO: consider deprecating and using multibar with single series for this\nnv.models.historicalBar = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n    , width = 960\n    , height = 500\n    , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n    , x = d3.scale.linear()\n    , y = d3.scale.linear()\n    , getX = function(d) { return d.x }\n    , getY = function(d) { return d.y }\n    , forceX = []\n    , forceY = [0]\n    , padData = false\n    , clipEdge = true\n    , color = nv.utils.defaultColor()\n    , xDomain\n    , yDomain\n    , xRange\n    , yRange\n    , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout')\n    , interactive = true\n    ;\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var availableWidth = width - margin.left - margin.right,\n          availableHeight = height - margin.top - margin.bottom,\n          container = d3.select(this);\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x   .domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ))\n\n      if (padData)\n        x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n      else\n        x.range(xRange || [0, availableWidth]);\n\n      y   .domain(yDomain || d3.extent(data[0].values.map(getY).concat(forceY) ))\n          .range(yRange || [availableHeight, 0]);\n\n      // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n\n      if (x.domain()[0] === x.domain()[1])\n        x.domain()[0] ?\n            x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n          : x.domain([-1,1]);\n\n      if (y.domain()[0] === y.domain()[1])\n        y.domain()[0] ?\n            y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n          : y.domain([-1,1]);\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-historicalBar-' + id).data([data[0].values]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBar-' + id);\n      var defsEnter = wrapEnter.append('defs');\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-bars');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      //------------------------------------------------------------\n\n\n      container\n          .on('click', function(d,i) {\n            dispatch.chartClick({\n                data: d,\n                index: i,\n                pos: d3.event,\n                id: id\n            });\n          });\n\n\n      defsEnter.append('clipPath')\n          .attr('id', 'nv-chart-clip-path-' + id)\n        .append('rect');\n\n      wrap.select('#nv-chart-clip-path-' + id + ' rect')\n          .attr('width', availableWidth)\n          .attr('height', availableHeight);\n\n      g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\n\n\n      var bars = wrap.select('.nv-bars').selectAll('.nv-bar')\n          .data(function(d) { return d }, function(d,i) {return getX(d,i)});\n\n      bars.exit().remove();\n\n\n      var barsEnter = bars.enter().append('rect')\n          //.attr('class', function(d,i,j) { return (getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive') + ' nv-bar-' + j + '-' + i })\n          .attr('x', 0 )\n          .attr('y', function(d,i) {  return nv.utils.NaNtoZero(y(Math.max(0, getY(d,i)))) })\n          .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.abs(y(getY(d,i)) - y(0))) })\n          .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; }) \n          .on('mouseover', function(d,i) {\n            if (!interactive) return;\n            d3.select(this).classed('hover', true);\n            dispatch.elementMouseover({\n                point: d,\n                series: data[0],\n                pos: [x(getX(d,i)), y(getY(d,i))],  // TODO: Figure out why the value appears to be shifted\n                pointIndex: i,\n                seriesIndex: 0,\n                e: d3.event\n            });\n\n          })\n          .on('mouseout', function(d,i) {\n                if (!interactive) return;\n                d3.select(this).classed('hover', false);\n                dispatch.elementMouseout({\n                    point: d,\n                    series: data[0],\n                    pointIndex: i,\n                    seriesIndex: 0,\n                    e: d3.event\n                });\n          })\n          .on('click', function(d,i) {\n                if (!interactive) return;\n                dispatch.elementClick({\n                    //label: d[label],\n                    value: getY(d,i),\n                    data: d,\n                    index: i,\n                    pos: [x(getX(d,i)), y(getY(d,i))],\n                    e: d3.event,\n                    id: id\n                });\n              d3.event.stopPropagation();\n          })\n          .on('dblclick', function(d,i) {\n              if (!interactive) return;\n              dispatch.elementDblClick({\n                  //label: d[label],\n                  value: getY(d,i),\n                  data: d,\n                  index: i,\n                  pos: [x(getX(d,i)), y(getY(d,i))],\n                  e: d3.event,\n                  id: id\n              });\n              d3.event.stopPropagation();\n          });\n\n      bars\n          .attr('fill', function(d,i) { return color(d, i); })\n          .attr('class', function(d,i,j) { return (getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive') + ' nv-bar-' + j + '-' + i })\n          \n          .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; }) \n           //TODO: better width calculations that don't assume always uniform data spacing;w\n          .attr('width', (availableWidth / data[0].values.length) * .9 );\n\n\n      bars\n          .attr('y', function(d,i) {\n            var rval = getY(d,i) < 0 ?\n                    y(0) :\n                    y(0) - y(getY(d,i)) < 1 ?\n                      y(0) - 1 :\n                      y(getY(d,i));\n            return nv.utils.NaNtoZero(rval);\n          })\n          .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.max(Math.abs(y(getY(d,i)) - y(0)),1)) });\n\n    });\n\n    return chart;\n  }\n\n  //Create methods to allow outside functions to highlight a specific bar.\n  chart.highlightPoint = function(pointIndex, isHoverOver) {\n      d3.select(\".nv-historicalBar-\" + id)\n        .select(\".nv-bars .nv-bar-0-\" + pointIndex)\n              .classed(\"hover\", isHoverOver)\n               ;\n  };\n\n  chart.clearHighlights = function() {\n      d3.select(\".nv-historicalBar-\" + id)\n        .select(\".nv-bars .nv-bar.hover\")\n              .classed(\"hover\", false)\n               ;\n  };\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  chart.dispatch = dispatch;\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  chart.x = function(_) {\n    if (!arguments.length) return getX;\n    getX = _;\n    return chart;\n  };\n\n  chart.y = function(_) {\n    if (!arguments.length) return getY;\n    getY = _;\n    return chart;\n  };\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.xScale = function(_) {\n    if (!arguments.length) return x;\n    x = _;\n    return chart;\n  };\n\n  chart.yScale = function(_) {\n    if (!arguments.length) return y;\n    y = _;\n    return chart;\n  };\n\n  chart.xDomain = function(_) {\n    if (!arguments.length) return xDomain;\n    xDomain = _;\n    return chart;\n  };\n\n  chart.yDomain = function(_) {\n    if (!arguments.length) return yDomain;\n    yDomain = _;\n    return chart;\n  };\n\n  chart.xRange = function(_) {\n    if (!arguments.length) return xRange;\n    xRange = _;\n    return chart;\n  };\n\n  chart.yRange = function(_) {\n    if (!arguments.length) return yRange;\n    yRange = _;\n    return chart;\n  };\n\n  chart.forceX = function(_) {\n    if (!arguments.length) return forceX;\n    forceX = _;\n    return chart;\n  };\n\n  chart.forceY = function(_) {\n    if (!arguments.length) return forceY;\n    forceY = _;\n    return chart;\n  };\n\n  chart.padData = function(_) {\n    if (!arguments.length) return padData;\n    padData = _;\n    return chart;\n  };\n\n  chart.clipEdge = function(_) {\n    if (!arguments.length) return clipEdge;\n    clipEdge = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    return chart;\n  };\n\n  chart.id = function(_) {\n    if (!arguments.length) return id;\n    id = _;\n    return chart;\n  };\n\n  chart.interactive = function(_) {\n    if(!arguments.length) return interactive;\n    interactive = false;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n\n// Chart design based on the recommendations of Stephen Few. Implementation\n// based on the work of Clint Ivy, Jamie Love, and Jason Davies.\n// http://projects.instantcognition.com/protovis/bulletchart/\n\nnv.models.bullet = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n    , orient = 'left' // TODO top & bottom\n    , reverse = false\n    , ranges = function(d) { return d.ranges }\n    , markers = function(d) { return d.markers }\n    , measures = function(d) { return d.measures }\n    , rangeLabels = function(d) { return d.rangeLabels ? d.rangeLabels : [] }\n    , markerLabels = function(d) { return d.markerLabels ? d.markerLabels : []  }\n    , measureLabels = function(d) { return d.measureLabels ? d.measureLabels : []  }\n    , forceX = [0] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)\n    , width = 380\n    , height = 30\n    , tickFormat = null\n    , color = nv.utils.getColor(['#1f77b4'])\n    , dispatch = d3.dispatch('elementMouseover', 'elementMouseout')\n    ;\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(d, i) {\n      var availableWidth = width - margin.left - margin.right,\n          availableHeight = height - margin.top - margin.bottom,\n          container = d3.select(this);\n\n      var rangez = ranges.call(this, d, i).slice().sort(d3.descending),\n          markerz = markers.call(this, d, i).slice().sort(d3.descending),\n          measurez = measures.call(this, d, i).slice().sort(d3.descending),\n          rangeLabelz = rangeLabels.call(this, d, i).slice(),\n          markerLabelz = markerLabels.call(this, d, i).slice(),\n          measureLabelz = measureLabels.call(this, d, i).slice();\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      // Compute the new x-scale.\n      var x1 = d3.scale.linear()\n          .domain( d3.extent(d3.merge([forceX, rangez])) )\n          .range(reverse ? [availableWidth, 0] : [0, availableWidth]);\n\n      // Retrieve the old x-scale, if this is an update.\n      var x0 = this.__chart__ || d3.scale.linear()\n          .domain([0, Infinity])\n          .range(x1.range());\n\n      // Stash the new scale.\n      this.__chart__ = x1;\n\n\n      var rangeMin = d3.min(rangez), //rangez[2]\n          rangeMax = d3.max(rangez), //rangez[0]\n          rangeAvg = rangez[1];\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-bullet').data([d]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bullet');\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('rect').attr('class', 'nv-range nv-rangeMax');\n      gEnter.append('rect').attr('class', 'nv-range nv-rangeAvg');\n      gEnter.append('rect').attr('class', 'nv-range nv-rangeMin');\n      gEnter.append('rect').attr('class', 'nv-measure');\n      gEnter.append('path').attr('class', 'nv-markerTriangle');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      //------------------------------------------------------------\n\n\n\n      var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)\n          w1 = function(d) { return Math.abs(x1(d) - x1(0)) };\n      var xp0 = function(d) { return d < 0 ? x0(d) : x0(0) },\n          xp1 = function(d) { return d < 0 ? x1(d) : x1(0) };\n\n\n      g.select('rect.nv-rangeMax')\n          .attr('height', availableHeight)\n          .attr('width', w1(rangeMax > 0 ? rangeMax : rangeMin))\n          .attr('x', xp1(rangeMax > 0 ? rangeMax : rangeMin))\n          .datum(rangeMax > 0 ? rangeMax : rangeMin)\n          /*\n          .attr('x', rangeMin < 0 ?\n                         rangeMax > 0 ?\n                             x1(rangeMin)\n                           : x1(rangeMax)\n                       : x1(0))\n                      */\n\n      g.select('rect.nv-rangeAvg')\n          .attr('height', availableHeight)\n          .attr('width', w1(rangeAvg))\n          .attr('x', xp1(rangeAvg))\n          .datum(rangeAvg)\n          /*\n          .attr('width', rangeMax <= 0 ?\n                             x1(rangeMax) - x1(rangeAvg)\n                           : x1(rangeAvg) - x1(rangeMin))\n          .attr('x', rangeMax <= 0 ?\n                         x1(rangeAvg)\n                       : x1(rangeMin))\n                      */\n\n      g.select('rect.nv-rangeMin')\n          .attr('height', availableHeight)\n          .attr('width', w1(rangeMax))\n          .attr('x', xp1(rangeMax))\n          .attr('width', w1(rangeMax > 0 ? rangeMin : rangeMax))\n          .attr('x', xp1(rangeMax > 0 ? rangeMin : rangeMax))\n          .datum(rangeMax > 0 ? rangeMin : rangeMax)\n          /*\n          .attr('width', rangeMax <= 0 ?\n                             x1(rangeAvg) - x1(rangeMin)\n                           : x1(rangeMax) - x1(rangeAvg))\n          .attr('x', rangeMax <= 0 ?\n                         x1(rangeMin)\n                       : x1(rangeAvg))\n                      */\n\n      g.select('rect.nv-measure')\n          .style('fill', color)\n          .attr('height', availableHeight / 3)\n          .attr('y', availableHeight / 3)\n          .attr('width', measurez < 0 ?\n                             x1(0) - x1(measurez[0])\n                           : x1(measurez[0]) - x1(0))\n          .attr('x', xp1(measurez))\n          .on('mouseover', function() {\n              dispatch.elementMouseover({\n                value: measurez[0],\n                label: measureLabelz[0] || 'Current',\n                pos: [x1(measurez[0]), availableHeight/2]\n              })\n          })\n          .on('mouseout', function() {\n              dispatch.elementMouseout({\n                value: measurez[0],\n                label: measureLabelz[0] || 'Current'\n              })\n          })\n\n      var h3 =  availableHeight / 6;\n      if (markerz[0]) {\n        g.selectAll('path.nv-markerTriangle')\n            .attr('transform', function(d) { return 'translate(' + x1(markerz[0]) + ',' + (availableHeight / 2) + ')' })\n            .attr('d', 'M0,' + h3 + 'L' + h3 + ',' + (-h3) + ' ' + (-h3) + ',' + (-h3) + 'Z')\n            .on('mouseover', function() {\n              dispatch.elementMouseover({\n                value: markerz[0],\n                label: markerLabelz[0] || 'Previous',\n                pos: [x1(markerz[0]), availableHeight/2]\n              })\n            })\n            .on('mouseout', function() {\n              dispatch.elementMouseout({\n                value: markerz[0],\n                label: markerLabelz[0] || 'Previous'\n              })\n            });\n      } else {\n        g.selectAll('path.nv-markerTriangle').remove();\n      }\n\n\n      wrap.selectAll('.nv-range')\n          .on('mouseover', function(d,i) {\n            var label = rangeLabelz[i] || (!i ? \"Maximum\" : i == 1 ? \"Mean\" : \"Minimum\");\n\n            dispatch.elementMouseover({\n              value: d,\n              label: label,\n              pos: [x1(d), availableHeight/2]\n            })\n          })\n          .on('mouseout', function(d,i) {\n            var label = rangeLabelz[i] || (!i ? \"Maximum\" : i == 1 ? \"Mean\" : \"Minimum\");\n\n            dispatch.elementMouseout({\n              value: d,\n              label: label\n            })\n          })\n\n/* // THIS IS THE PREVIOUS BULLET IMPLEMENTATION, WILL REMOVE SHORTLY\n      // Update the range rects.\n      var range = g.selectAll('rect.nv-range')\n          .data(rangez);\n\n      range.enter().append('rect')\n          .attr('class', function(d, i) { return 'nv-range nv-s' + i; })\n          .attr('width', w0)\n          .attr('height', availableHeight)\n          .attr('x', reverse ? x0 : 0)\n          .on('mouseover', function(d,i) { \n              dispatch.elementMouseover({\n                value: d,\n                label: (i <= 0) ? 'Maximum' : (i > 1) ? 'Minimum' : 'Mean', //TODO: make these labels a variable\n                pos: [x1(d), availableHeight/2]\n              })\n          })\n          .on('mouseout', function(d,i) { \n              dispatch.elementMouseout({\n                value: d,\n                label: (i <= 0) ? 'Minimum' : (i >=1) ? 'Maximum' : 'Mean' //TODO: make these labels a variable\n              })\n          })\n\n      d3.transition(range)\n          .attr('x', reverse ? x1 : 0)\n          .attr('width', w1)\n          .attr('height', availableHeight);\n\n\n      // Update the measure rects.\n      var measure = g.selectAll('rect.nv-measure')\n          .data(measurez);\n\n      measure.enter().append('rect')\n          .attr('class', function(d, i) { return 'nv-measure nv-s' + i; })\n          .style('fill', function(d,i) { return color(d,i ) })\n          .attr('width', w0)\n          .attr('height', availableHeight / 3)\n          .attr('x', reverse ? x0 : 0)\n          .attr('y', availableHeight / 3)\n          .on('mouseover', function(d) { \n              dispatch.elementMouseover({\n                value: d,\n                label: 'Current', //TODO: make these labels a variable\n                pos: [x1(d), availableHeight/2]\n              })\n          })\n          .on('mouseout', function(d) { \n              dispatch.elementMouseout({\n                value: d,\n                label: 'Current' //TODO: make these labels a variable\n              })\n          })\n\n      d3.transition(measure)\n          .attr('width', w1)\n          .attr('height', availableHeight / 3)\n          .attr('x', reverse ? x1 : 0)\n          .attr('y', availableHeight / 3);\n\n\n\n      // Update the marker lines.\n      var marker = g.selectAll('path.nv-markerTriangle')\n          .data(markerz);\n\n      var h3 =  availableHeight / 6;\n      marker.enter().append('path')\n          .attr('class', 'nv-markerTriangle')\n          .attr('transform', function(d) { return 'translate(' + x0(d) + ',' + (availableHeight / 2) + ')' })\n          .attr('d', 'M0,' + h3 + 'L' + h3 + ',' + (-h3) + ' ' + (-h3) + ',' + (-h3) + 'Z')\n          .on('mouseover', function(d,i) {\n              dispatch.elementMouseover({\n                value: d,\n                label: 'Previous',\n                pos: [x1(d), availableHeight/2]\n              })\n          })\n          .on('mouseout', function(d,i) {\n              dispatch.elementMouseout({\n                value: d,\n                label: 'Previous'\n              })\n          });\n\n      d3.transition(marker)\n          .attr('transform', function(d) { return 'translate(' + (x1(d) - x1(0)) + ',' + (availableHeight / 2) + ')' });\n\n      marker.exit().remove();\n*/\n\n    });\n\n    // d3.timer.flush();  // Not needed?\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  chart.dispatch = dispatch;\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  // left, right, top, bottom\n  chart.orient = function(_) {\n    if (!arguments.length) return orient;\n    orient = _;\n    reverse = orient == 'right' || orient == 'bottom';\n    return chart;\n  };\n\n  // ranges (bad, satisfactory, good)\n  chart.ranges = function(_) {\n    if (!arguments.length) return ranges;\n    ranges = _;\n    return chart;\n  };\n\n  // markers (previous, goal)\n  chart.markers = function(_) {\n    if (!arguments.length) return markers;\n    markers = _;\n    return chart;\n  };\n\n  // measures (actual, forecast)\n  chart.measures = function(_) {\n    if (!arguments.length) return measures;\n    measures = _;\n    return chart;\n  };\n\n  chart.forceX = function(_) {\n    if (!arguments.length) return forceX;\n    forceX = _;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.tickFormat = function(_) {\n    if (!arguments.length) return tickFormat;\n    tickFormat = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n};\n\n\n\n// Chart design based on the recommendations of Stephen Few. Implementation\n// based on the work of Clint Ivy, Jamie Love, and Jason Davies.\n// http://projects.instantcognition.com/protovis/bulletchart/\nnv.models.bulletChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var bullet = nv.models.bullet()\n    ;\n\n  var orient = 'left' // TODO top & bottom\n    , reverse = false\n    , margin = {top: 5, right: 40, bottom: 20, left: 120}\n    , ranges = function(d) { return d.ranges }\n    , markers = function(d) { return d.markers }\n    , measures = function(d) { return d.measures }\n    , width = null\n    , height = 55\n    , tickFormat = null\n    , tooltips = true\n    , tooltip = function(key, x, y, e, graph) {\n        return '<h3>' + x + '</h3>' +\n               '<p>' + y + '</p>'\n      }\n    , noData = 'No Data Available.'\n    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide')\n    ;\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var showTooltip = function(e, offsetElement) {\n    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ) + margin.left,\n        top = e.pos[1] + ( offsetElement.offsetTop || 0) + margin.top,\n        content = tooltip(e.key, e.label, e.value, e, chart);\n\n    nv.tooltip.show([left, top], content, e.value < 0 ? 'e' : 'w', null, offsetElement);\n  };\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(d, i) {\n      var container = d3.select(this);\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight = height - margin.top - margin.bottom,\n          that = this;\n\n\n      chart.update = function() { chart(selection) };\n      chart.container = this;\n\n      //------------------------------------------------------------\n      // Display No Data message if there's nothing to show.\n\n      if (!d || !ranges.call(this, d, i)) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', 18 + margin.top + availableHeight / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      //------------------------------------------------------------\n\n\n\n      var rangez = ranges.call(this, d, i).slice().sort(d3.descending),\n          markerz = markers.call(this, d, i).slice().sort(d3.descending),\n          measurez = measures.call(this, d, i).slice().sort(d3.descending);\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-bulletChart').data([d]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bulletChart');\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-bulletWrap');\n      gEnter.append('g').attr('class', 'nv-titles');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      //------------------------------------------------------------\n\n\n      // Compute the new x-scale.\n      var x1 = d3.scale.linear()\n          .domain([0, Math.max(rangez[0], markerz[0], measurez[0])])  // TODO: need to allow forceX and forceY, and xDomain, yDomain\n          .range(reverse ? [availableWidth, 0] : [0, availableWidth]);\n\n      // Retrieve the old x-scale, if this is an update.\n      var x0 = this.__chart__ || d3.scale.linear()\n          .domain([0, Infinity])\n          .range(x1.range());\n\n      // Stash the new scale.\n      this.__chart__ = x1;\n\n      /*\n      // Derive width-scales from the x-scales.\n      var w0 = bulletWidth(x0),\n          w1 = bulletWidth(x1);\n\n      function bulletWidth(x) {\n        var x0 = x(0);\n        return function(d) {\n          return Math.abs(x(d) - x(0));\n        };\n      }\n\n      function bulletTranslate(x) {\n        return function(d) {\n          return 'translate(' + x(d) + ',0)';\n        };\n      }\n      */\n\n      var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)\n          w1 = function(d) { return Math.abs(x1(d) - x1(0)) };\n\n\n      var title = gEnter.select('.nv-titles').append('g')\n          .attr('text-anchor', 'end')\n          .attr('transform', 'translate(-6,' + (height - margin.top - margin.bottom) / 2 + ')');\n      title.append('text')\n          .attr('class', 'nv-title')\n          .text(function(d) { return d.title; });\n\n      title.append('text')\n          .attr('class', 'nv-subtitle')\n          .attr('dy', '1em')\n          .text(function(d) { return d.subtitle; });\n\n\n\n      bullet\n        .width(availableWidth)\n        .height(availableHeight)\n\n      var bulletWrap = g.select('.nv-bulletWrap');\n\n      d3.transition(bulletWrap).call(bullet);\n\n\n\n      // Compute the tick format.\n      var format = tickFormat || x1.tickFormat( availableWidth / 100 );\n\n      // Update the tick groups.\n      var tick = g.selectAll('g.nv-tick')\n          .data(x1.ticks( availableWidth / 50 ), function(d) {\n            return this.textContent || format(d);\n          });\n\n      // Initialize the ticks with the old scale, x0.\n      var tickEnter = tick.enter().append('g')\n          .attr('class', 'nv-tick')\n          .attr('transform', function(d) { return 'translate(' + x0(d) + ',0)' })\n          .style('opacity', 1e-6);\n\n      tickEnter.append('line')\n          .attr('y1', availableHeight)\n          .attr('y2', availableHeight * 7 / 6);\n\n      tickEnter.append('text')\n          .attr('text-anchor', 'middle')\n          .attr('dy', '1em')\n          .attr('y', availableHeight * 7 / 6)\n          .text(format);\n\n\n      // Transition the updating ticks to the new scale, x1.\n      var tickUpdate = d3.transition(tick)\n          .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })\n          .style('opacity', 1);\n\n      tickUpdate.select('line')\n          .attr('y1', availableHeight)\n          .attr('y2', availableHeight * 7 / 6);\n\n      tickUpdate.select('text')\n          .attr('y', availableHeight * 7 / 6);\n\n      // Transition the exiting ticks to the new scale, x1.\n      d3.transition(tick.exit())\n          .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })\n          .style('opacity', 1e-6)\n          .remove();\n\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n      dispatch.on('tooltipShow', function(e) {\n        e.key = d.title;\n        if (tooltips) showTooltip(e, that.parentNode);\n      });\n\n      //============================================================\n\n    });\n\n    d3.timer.flush();\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  bullet.dispatch.on('elementMouseover.tooltip', function(e) {\n    dispatch.tooltipShow(e);\n  });\n\n  bullet.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  chart.dispatch = dispatch;\n  chart.bullet = bullet;\n\n  d3.rebind(chart, bullet, 'color');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  // left, right, top, bottom\n  chart.orient = function(x) {\n    if (!arguments.length) return orient;\n    orient = x;\n    reverse = orient == 'right' || orient == 'bottom';\n    return chart;\n  };\n\n  // ranges (bad, satisfactory, good)\n  chart.ranges = function(x) {\n    if (!arguments.length) return ranges;\n    ranges = x;\n    return chart;\n  };\n\n  // markers (previous, goal)\n  chart.markers = function(x) {\n    if (!arguments.length) return markers;\n    markers = x;\n    return chart;\n  };\n\n  // measures (actual, forecast)\n  chart.measures = function(x) {\n    if (!arguments.length) return measures;\n    measures = x;\n    return chart;\n  };\n\n  chart.width = function(x) {\n    if (!arguments.length) return width;\n    width = x;\n    return chart;\n  };\n\n  chart.height = function(x) {\n    if (!arguments.length) return height;\n    height = x;\n    return chart;\n  };\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.tickFormat = function(x) {\n    if (!arguments.length) return tickFormat;\n    tickFormat = x;\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n};\n\n\n\nnv.models.cumulativeLineChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var lines = nv.models.line()\n    , xAxis = nv.models.axis()\n    , yAxis = nv.models.axis()\n    , legend = nv.models.legend()\n    , controls = nv.models.legend()\n    , interactiveLayer = nv.interactiveGuideline()\n    ;\n\n  var margin = {top: 30, right: 30, bottom: 50, left: 60}\n    , color = nv.utils.defaultColor()\n    , width = null\n    , height = null\n    , showLegend = true\n    , showXAxis = true\n    , showYAxis = true\n    , rightAlignYAxis = false\n    , tooltips = true\n    , showControls = true\n    , useInteractiveGuideline = false\n    , rescaleY = true\n    , tooltip = function(key, x, y, e, graph) {\n        return '<h3>' + key + '</h3>' +\n               '<p>' +  y + ' at ' + x + '</p>'\n      }\n    , x //can be accessed via chart.xScale()\n    , y //can be accessed via chart.yScale()\n    , id = lines.id()\n    , state = { index: 0, rescaleY: rescaleY }\n    , defaultState = null\n    , noData = 'No Data Available.'\n    , average = function(d) { return d.average }\n    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n    , transitionDuration = 0\n    , noErrorCheck = false  //if set to TRUE, will bypass an error check in the indexify function.\n    ;\n\n  xAxis\n    .orient('bottom')\n    .tickPadding(7)\n    ;\n  yAxis\n    .orient((rightAlignYAxis) ? 'right' : 'left')\n    ;\n\n  //============================================================\n  controls.updateState(false);\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n   var dx = d3.scale.linear()\n     , index = {i: 0, x: 0}\n     ;\n\n  var showTooltip = function(e, offsetElement) {\n    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n        x = xAxis.tickFormat()(lines.x()(e.point, e.pointIndex)),\n        y = yAxis.tickFormat()(lines.y()(e.point, e.pointIndex)),\n        content = tooltip(e.series.key, x, y, e, chart);\n\n    nv.tooltip.show([left, top], content, null, null, offsetElement);\n  };\n\n  //============================================================\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this).classed('nv-chart-' + id, true),\n          that = this;\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n\n\n      chart.update = function() { container.call(chart) };\n      chart.container = this;\n\n      //set state.disabled\n      state.disabled = data.map(function(d) { return !!d.disabled });\n\n      if (!defaultState) {\n        var key;\n        defaultState = {};\n        for (key in state) {\n          if (state[key] instanceof Array)\n            defaultState[key] = state[key].slice(0);\n          else\n            defaultState[key] = state[key];\n        }\n      }\n\n      var indexDrag = d3.behavior.drag()\n                        .on('dragstart', dragStart)\n                        .on('drag', dragMove)\n                        .on('dragend', dragEnd);\n\n\n      function dragStart(d,i) {\n        d3.select(chart.container)\n            .style('cursor', 'ew-resize');\n      }\n\n      function dragMove(d,i) {\n        index.x = d3.event.x;\n        index.i = Math.round(dx.invert(index.x));\n        updateZero();\n      }\n\n      function dragEnd(d,i) {\n        d3.select(chart.container)\n            .style('cursor', 'auto');\n\n        // update state and send stateChange with new index\n        state.index = index.i;\n        dispatch.stateChange(state);\n      }\n\n      //------------------------------------------------------------\n      // Display No Data message if there's nothing to show.\n\n      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', margin.top + availableHeight / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x = lines.xScale();\n      y = lines.yScale();\n\n\n      if (!rescaleY) {\n        var seriesDomains = data\n          .filter(function(series) { return !series.disabled })\n          .map(function(series,i) {\n            var initialDomain = d3.extent(series.values, lines.y());\n\n            //account for series being disabled when losing 95% or more\n            if (initialDomain[0] < -.95) initialDomain[0] = -.95;\n\n            return [\n              (initialDomain[0] - initialDomain[1]) / (1 + initialDomain[1]),\n              (initialDomain[1] - initialDomain[0]) / (1 + initialDomain[0])\n            ];\n          });\n\n        var completeDomain = [\n          d3.min(seriesDomains, function(d) { return d[0] }),\n          d3.max(seriesDomains, function(d) { return d[1] })\n        ]\n\n        lines.yDomain(completeDomain);\n      } else {\n        lines.yDomain(null);\n      }\n\n\n      dx  .domain([0, data[0].values.length - 1]) //Assumes all series have same length\n          .range([0, availableWidth])\n          .clamp(true);\n\n      //------------------------------------------------------------\n\n\n      var data = indexify(index.i, data);\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n      var interactivePointerEvents = (useInteractiveGuideline) ? \"none\" : \"all\";\n      var wrap = container.selectAll('g.nv-wrap.nv-cumulativeLine').data([data]);\n      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-cumulativeLine').append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-interactive');\n      gEnter.append('g').attr('class', 'nv-x nv-axis').style(\"pointer-events\",\"none\");\n      gEnter.append('g').attr('class', 'nv-y nv-axis');\n      gEnter.append('g').attr('class', 'nv-background');\n      gEnter.append('g').attr('class', 'nv-linesWrap').style(\"pointer-events\",interactivePointerEvents);\n      gEnter.append('g').attr('class', 'nv-avgLinesWrap').style(\"pointer-events\",\"none\");\n      gEnter.append('g').attr('class', 'nv-legendWrap');\n      gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n\n      //------------------------------------------------------------\n      // Legend\n\n      if (showLegend) {\n        legend.width(availableWidth);\n\n        g.select('.nv-legendWrap')\n            .datum(data)\n            .call(legend);\n\n        if ( margin.top != legend.height()) {\n          margin.top = legend.height();\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n        }\n\n        g.select('.nv-legendWrap')\n            .attr('transform', 'translate(0,' + (-margin.top) +')')\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Controls\n\n      if (showControls) {\n        var controlsData = [\n          { key: 'Re-scale y-axis', disabled: !rescaleY }\n        ];\n\n        controls\n            .width(140)\n            .color(['#444', '#444', '#444'])\n            .rightAlign(false)\n            .margin({top: 5, right: 0, bottom: 5, left: 20})\n            ;\n\n        g.select('.nv-controlsWrap')\n            .datum(controlsData)\n            .attr('transform', 'translate(0,' + (-margin.top) +')')\n            .call(controls);\n      }\n\n      //------------------------------------------------------------\n\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      if (rightAlignYAxis) {\n          g.select(\".nv-y.nv-axis\")\n              .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n      }\n\n      // Show error if series goes below 100%\n      var tempDisabled = data.filter(function(d) { return d.tempDisabled });\n\n      wrap.select('.tempDisabled').remove(); //clean-up and prevent duplicates\n      if (tempDisabled.length) {\n        wrap.append('text').attr('class', 'tempDisabled')\n            .attr('x', availableWidth / 2)\n            .attr('y', '-.71em')\n            .style('text-anchor', 'end')\n            .text(tempDisabled.map(function(d) { return d.key }).join(', ') + ' values cannot be calculated for this time period.');\n      }\n\n      //------------------------------------------------------------\n      // Main Chart Component(s)\n\n      //------------------------------------------------------------\n      //Set up interactive layer\n      if (useInteractiveGuideline) {\n        interactiveLayer\n          .width(availableWidth)\n          .height(availableHeight)\n          .margin({left:margin.left,top:margin.top})\n          .svgContainer(container)\n          .xScale(x);\n        wrap.select(\".nv-interactive\").call(interactiveLayer);\n      }\n\n      gEnter.select('.nv-background')\n        .append('rect');\n\n      g.select('.nv-background rect')\n          .attr('width', availableWidth)\n          .attr('height', availableHeight);\n\n      lines\n        //.x(function(d) { return d.x })\n        .y(function(d) { return d.display.y })\n        .width(availableWidth)\n        .height(availableHeight)\n        .color(data.map(function(d,i) {\n          return d.color || color(d, i);\n        }).filter(function(d,i) { return !data[i].disabled && !data[i].tempDisabled; }));\n\n\n\n      var linesWrap = g.select('.nv-linesWrap')\n          .datum(data.filter(function(d) { return  !d.disabled && !d.tempDisabled }));\n\n      //d3.transition(linesWrap).call(lines);\n      linesWrap.call(lines);\n\n      /*Handle average lines [AN-612] ----------------------------*/\n\n      //Store a series index number in the data array.\n      data.forEach(function(d,i) {\n            d.seriesIndex = i;\n      });\n\n      var avgLineData = data.filter(function(d) {\n          return !d.disabled && !!average(d);\n      });\n\n      var avgLines = g.select(\".nv-avgLinesWrap\").selectAll(\"line\")\n              .data(avgLineData, function(d) { return d.key; });\n\n      var getAvgLineY = function(d) {\n          //If average lines go off the svg element, clamp them to the svg bounds.\n          var yVal = y(average(d));\n          if (yVal < 0) return 0;\n          if (yVal > availableHeight) return availableHeight;\n          return yVal;\n      };\n\n      avgLines.enter()\n              .append('line')\n              .style('stroke-width',2)\n              .style('stroke-dasharray','10,10')\n              .style('stroke',function (d,i) {\n                  return lines.color()(d,d.seriesIndex);\n              })\n              .attr('x1',0)\n              .attr('x2',availableWidth)\n              .attr('y1', getAvgLineY)\n              .attr('y2', getAvgLineY);\n\n      avgLines\n              .style('stroke-opacity',function(d){\n                  //If average lines go offscreen, make them transparent\n                  var yVal = y(average(d));\n                  if (yVal < 0 || yVal > availableHeight) return 0;\n                  return 1;\n              })\n              .attr('x1',0)\n              .attr('x2',availableWidth)\n              .attr('y1', getAvgLineY)\n              .attr('y2', getAvgLineY);\n\n      avgLines.exit().remove();\n\n      //Create index line -----------------------------------------\n\n      var indexLine = linesWrap.selectAll('.nv-indexLine')\n          .data([index]);\n      indexLine.enter().append('rect').attr('class', 'nv-indexLine')\n          .attr('width', 3)\n          .attr('x', -2)\n          .attr('fill', 'red')\n          .attr('fill-opacity', .5)\n          .style(\"pointer-events\",\"all\")\n          .call(indexDrag)\n\n      indexLine\n          .attr('transform', function(d) { return 'translate(' + dx(d.i) + ',0)' })\n          .attr('height', availableHeight)\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Axes\n\n      if (showXAxis) {\n        xAxis\n          .scale(x)\n          //Suggest how many ticks based on the chart width and D3 should listen (70 is the optimal number for MM/DD/YY dates)\n          .ticks( Math.min(data[0].values.length,availableWidth/70) )\n          .tickSize(-availableHeight, 0);\n\n        g.select('.nv-x.nv-axis')\n            .attr('transform', 'translate(0,' + y.range()[0] + ')');\n        d3.transition(g.select('.nv-x.nv-axis'))\n            .call(xAxis);\n      }\n\n\n      if (showYAxis) {\n        yAxis\n          .scale(y)\n          .ticks( availableHeight / 36 )\n          .tickSize( -availableWidth, 0);\n\n        d3.transition(g.select('.nv-y.nv-axis'))\n            .call(yAxis);\n      }\n      //------------------------------------------------------------\n\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n\n      function updateZero() {\n        indexLine\n          .data([index]);\n\n        //When dragging the index line, turn off line transitions.\n        // Then turn them back on when done dragging.\n        var oldDuration = chart.transitionDuration();\n        chart.transitionDuration(0);\n        chart.update();\n        chart.transitionDuration(oldDuration);\n      }\n\n      g.select('.nv-background rect')\n          .on('click', function() {\n            index.x = d3.mouse(this)[0];\n            index.i = Math.round(dx.invert(index.x));\n\n            // update state and send stateChange with new index\n            state.index = index.i;\n            dispatch.stateChange(state);\n\n            updateZero();\n          });\n\n      lines.dispatch.on('elementClick', function(e) {\n        index.i = e.pointIndex;\n        index.x = dx(index.i);\n\n        // update state and send stateChange with new index\n        state.index = index.i;\n        dispatch.stateChange(state);\n\n        updateZero();\n      });\n\n      controls.dispatch.on('legendClick', function(d,i) {\n        d.disabled = !d.disabled;\n        rescaleY = !d.disabled;\n\n        state.rescaleY = rescaleY;\n        dispatch.stateChange(state);\n        chart.update();\n      });\n\n\n      legend.dispatch.on('stateChange', function(newState) {\n        state.disabled = newState.disabled;\n        dispatch.stateChange(state);\n        chart.update();\n      });\n\n      interactiveLayer.dispatch.on('elementMousemove', function(e) {\n          lines.clearHighlights();\n          var singlePoint, pointIndex, pointXLocation, allData = [];\n\n\n          data\n          .filter(function(series, i) {\n            series.seriesIndex = i;\n            return !series.disabled;\n          })\n          .forEach(function(series,i) {\n              pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n              lines.highlightPoint(i, pointIndex, true);\n              var point = series.values[pointIndex];\n              if (typeof point === 'undefined') return;\n              if (typeof singlePoint === 'undefined') singlePoint = point;\n              if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n              allData.push({\n                  key: series.key,\n                  value: chart.y()(point, pointIndex),\n                  color: color(series,series.seriesIndex)\n              });\n          });\n\n          //Highlight the tooltip entry based on which point the mouse is closest to.\n          if (allData.length > 2) {\n            var yValue = chart.yScale().invert(e.mouseY);\n            var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);\n            var threshold = 0.03 * domainExtent;\n            var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value}),yValue,threshold);\n            if (indexToHighlight !== null)\n              allData[indexToHighlight].highlight = true;\n          }\n\n          var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex), pointIndex);\n          interactiveLayer.tooltip\n                  .position({left: pointXLocation + margin.left, top: e.mouseY + margin.top})\n                  .chartContainer(that.parentNode)\n                  .enabled(tooltips)\n                  .valueFormatter(function(d,i) {\n                     return yAxis.tickFormat()(d);\n                  })\n                  .data(\n                      {\n                        value: xValue,\n                        series: allData\n                      }\n                  )();\n\n          interactiveLayer.renderGuideLine(pointXLocation);\n\n      });\n\n      interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n          dispatch.tooltipHide();\n          lines.clearHighlights();\n      });\n\n      dispatch.on('tooltipShow', function(e) {\n        if (tooltips) showTooltip(e, that.parentNode);\n      });\n\n\n      // Update chart from a state object passed to event handler\n      dispatch.on('changeState', function(e) {\n\n        if (typeof e.disabled !== 'undefined') {\n          data.forEach(function(series,i) {\n            series.disabled = e.disabled[i];\n          });\n\n          state.disabled = e.disabled;\n        }\n\n\n        if (typeof e.index !== 'undefined') {\n          index.i = e.index;\n          index.x = dx(index.i);\n\n          state.index = e.index;\n\n          indexLine\n            .data([index]);\n        }\n\n\n        if (typeof e.rescaleY !== 'undefined') {\n          rescaleY = e.rescaleY;\n        }\n\n        chart.update();\n      });\n\n      //============================================================\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  lines.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  lines.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.dispatch = dispatch;\n  chart.lines = lines;\n  chart.legend = legend;\n  chart.xAxis = xAxis;\n  chart.yAxis = yAxis;\n  chart.interactiveLayer = interactiveLayer;\n\n  d3.rebind(chart, lines, 'defined', 'isArea', 'x', 'y', 'xScale','yScale', 'size', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi','useVoronoi',  'id');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    legend.color(color);\n    return chart;\n  };\n\n  chart.rescaleY = function(_) {\n    if (!arguments.length) return rescaleY;\n    rescaleY = _;\n    return chart;\n  };\n\n  chart.showControls = function(_) {\n    if (!arguments.length) return showControls;\n    showControls = _;\n    return chart;\n  };\n\n  chart.useInteractiveGuideline = function(_) {\n    if(!arguments.length) return useInteractiveGuideline;\n    useInteractiveGuideline = _;\n    if (_ === true) {\n       chart.interactive(false);\n       chart.useVoronoi(false);\n    }\n    return chart;\n  };\n\n  chart.showLegend = function(_) {\n    if (!arguments.length) return showLegend;\n    showLegend = _;\n    return chart;\n  };\n\n  chart.showXAxis = function(_) {\n    if (!arguments.length) return showXAxis;\n    showXAxis = _;\n    return chart;\n  };\n\n  chart.showYAxis = function(_) {\n    if (!arguments.length) return showYAxis;\n    showYAxis = _;\n    return chart;\n  };\n\n  chart.rightAlignYAxis = function(_) {\n    if(!arguments.length) return rightAlignYAxis;\n    rightAlignYAxis = _;\n    yAxis.orient( (_) ? 'right' : 'left');\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.state = function(_) {\n    if (!arguments.length) return state;\n    state = _;\n    return chart;\n  };\n\n  chart.defaultState = function(_) {\n    if (!arguments.length) return defaultState;\n    defaultState = _;\n    return chart;\n  };\n\n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  chart.average = function(_) {\n     if(!arguments.length) return average;\n     average = _;\n     return chart;\n  };\n\n  chart.transitionDuration = function(_) {\n    if (!arguments.length) return transitionDuration;\n    transitionDuration = _;\n    return chart;\n  };\n\n  chart.noErrorCheck = function(_) {\n    if (!arguments.length) return noErrorCheck;\n    noErrorCheck = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  //============================================================\n  // Functions\n  //------------------------------------------------------------\n\n  /* Normalize the data according to an index point. */\n  function indexify(idx, data) {\n    return data.map(function(line, i) {\n      if (!line.values) {\n         return line;\n      }\n      var indexValue = line.values[idx];\n      if (indexValue == null) {\n        return line;\n      }\n      var v = lines.y()(indexValue, idx);\n\n      //TODO: implement check below, and disable series if series loses 100% or more cause divide by 0 issue\n      if (v < -.95 && !noErrorCheck) {\n        //if a series loses more than 100%, calculations fail.. anything close can cause major distortion (but is mathematically correct till it hits 100)\n\n        line.tempDisabled = true;\n        return line;\n      }\n\n      line.tempDisabled = false;\n\n      line.values = line.values.map(function(point, pointIndex) {\n        point.display = {'y': (lines.y()(point, pointIndex) - v) / (1 + v) };\n        return point;\n      })\n\n      return line;\n    })\n  }\n\n  //============================================================\n\n\n  return chart;\n}\n//TODO: consider deprecating by adding necessary features to multiBar model\nnv.models.discreteBar = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n    , width = 960\n    , height = 500\n    , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n    , x = d3.scale.ordinal()\n    , y = d3.scale.linear()\n    , getX = function(d) { return d.x }\n    , getY = function(d) { return d.y }\n    , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n    , color = nv.utils.defaultColor()\n    , showValues = false\n    , valueFormat = d3.format(',.2f')\n    , xDomain\n    , yDomain\n    , xRange\n    , yRange\n    , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout')\n    , rectClass = 'discreteBar'\n    ;\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var x0, y0;\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var availableWidth = width - margin.left - margin.right,\n          availableHeight = height - margin.top - margin.bottom,\n          container = d3.select(this);\n\n\n      //add series index to each data point for reference\n      data.forEach(function(series, i) {\n        series.values.forEach(function(point) {\n          point.series = i;\n        });\n      });\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      // remap and flatten the data for use in calculating the scales' domains\n      var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n            data.map(function(d) {\n              return d.values.map(function(d,i) {\n                return { x: getX(d,i), y: getY(d,i), y0: d.y0 }\n              })\n            });\n\n      x   .domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n          .rangeBands(xRange || [0, availableWidth], .1);\n\n      y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return d.y }).concat(forceY)));\n\n\n      // If showValues, pad the Y axis range to account for label height\n      if (showValues) y.range(yRange || [availableHeight - (y.domain()[0] < 0 ? 12 : 0), y.domain()[1] > 0 ? 12 : 0]);\n      else y.range(yRange || [availableHeight, 0]);\n\n      //store old scales if they exist\n      x0 = x0 || x;\n      y0 = y0 || y.copy().range([y(0),y(0)]);\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-discretebar').data([data]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discretebar');\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-groups');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      //------------------------------------------------------------\n\n\n\n      //TODO: by definition, the discrete bar should not have multiple groups, will modify/remove later\n      var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n          .data(function(d) { return d }, function(d) { return d.key });\n      groups.enter().append('g')\n          .style('stroke-opacity', 1e-6)\n          .style('fill-opacity', 1e-6);\n      groups.exit()\n          \n          .style('stroke-opacity', 1e-6)\n          .style('fill-opacity', 1e-6)\n          .remove();\n      groups\n          .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n          .classed('hover', function(d) { return d.hover });\n      groups\n          \n          .style('stroke-opacity', 1)\n          .style('fill-opacity', .75);\n\n\n      var bars = groups.selectAll('g.nv-bar')\n          .data(function(d) { return d.values });\n\n      bars.exit().remove();\n\n\n      var barsEnter = bars.enter().append('g')\n          .attr('transform', function(d,i,j) {\n              return 'translate(' + (x(getX(d,i)) + x.rangeBand() * .05 ) + ', ' + y(0) + ')'\n          })\n          .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n            d3.select(this).classed('hover', true);\n            dispatch.elementMouseover({\n              value: getY(d,i),\n              point: d,\n              series: data[d.series],\n              pos: [x(getX(d,i)) + (x.rangeBand() * (d.series + .5) / data.length), y(getY(d,i))],  // TODO: Figure out why the value appears to be shifted\n              pointIndex: i,\n              seriesIndex: d.series,\n              e: d3.event\n            });\n          })\n          .on('mouseout', function(d,i) {\n            d3.select(this).classed('hover', false);\n            dispatch.elementMouseout({\n              value: getY(d,i),\n              point: d,\n              series: data[d.series],\n              pointIndex: i,\n              seriesIndex: d.series,\n              e: d3.event\n            });\n          })\n          .on('click', function(d,i) {\n            dispatch.elementClick({\n              value: getY(d,i),\n              point: d,\n              series: data[d.series],\n              pos: [x(getX(d,i)) + (x.rangeBand() * (d.series + .5) / data.length), y(getY(d,i))],  // TODO: Figure out why the value appears to be shifted\n              pointIndex: i,\n              seriesIndex: d.series,\n              e: d3.event\n            });\n            d3.event.stopPropagation();\n          })\n          .on('dblclick', function(d,i) {\n            dispatch.elementDblClick({\n              value: getY(d,i),\n              point: d,\n              series: data[d.series],\n              pos: [x(getX(d,i)) + (x.rangeBand() * (d.series + .5) / data.length), y(getY(d,i))],  // TODO: Figure out why the value appears to be shifted\n              pointIndex: i,\n              seriesIndex: d.series,\n              e: d3.event\n            });\n            d3.event.stopPropagation();\n          });\n\n      barsEnter.append('rect')\n          .attr('height', 0)\n          .attr('width', x.rangeBand() * .9 / data.length )\n\n      if (showValues) {\n        barsEnter.append('text')\n          .attr('text-anchor', 'middle')\n          ;\n\n        bars.select('text')\n          .text(function(d,i) { return valueFormat(getY(d,i)) })\n          \n          .attr('x', x.rangeBand() * .9 / 2)\n          .attr('y', function(d,i) { return getY(d,i) < 0 ? y(getY(d,i)) - y(0) + 12 : -4 })\n\n          ;\n      } else {\n        bars.selectAll('text').remove();\n      }\n\n      bars\n          .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive' })\n          .style('fill', function(d,i) { return d.color || color(d,i) })\n          .style('stroke', function(d,i) { return d.color || color(d,i) })\n        .select('rect')\n          .attr('class', rectClass)\n          \n          .attr('width', x.rangeBand() * .9 / data.length);\n      bars\n          .attr('transform', function(d,i) {\n            var left = x(getX(d,i)) + x.rangeBand() * .05,\n                top = getY(d,i) < 0 ?\n                        y(0) :\n                        y(0) - y(getY(d,i)) < 1 ?\n                          y(0) - 1 : //make 1 px positive bars show up above y=0\n                          y(getY(d,i));\n\n              return 'translate(' + left + ', ' + top + ')'\n          })\n        .select('rect')\n          .attr('height', function(d,i) {\n            return  Math.max(Math.abs(y(getY(d,i)) - y((yDomain && yDomain[0]) || 0)) || 1)\n          });\n\n\n      //store old scales for use in transitions on update\n      x0 = x.copy();\n      y0 = y.copy();\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  chart.dispatch = dispatch;\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.x = function(_) {\n    if (!arguments.length) return getX;\n    getX = _;\n    return chart;\n  };\n\n  chart.y = function(_) {\n    if (!arguments.length) return getY;\n    getY = _;\n    return chart;\n  };\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.xScale = function(_) {\n    if (!arguments.length) return x;\n    x = _;\n    return chart;\n  };\n\n  chart.yScale = function(_) {\n    if (!arguments.length) return y;\n    y = _;\n    return chart;\n  };\n\n  chart.xDomain = function(_) {\n    if (!arguments.length) return xDomain;\n    xDomain = _;\n    return chart;\n  };\n\n  chart.yDomain = function(_) {\n    if (!arguments.length) return yDomain;\n    yDomain = _;\n    return chart;\n  };\n\n  chart.xRange = function(_) {\n    if (!arguments.length) return xRange;\n    xRange = _;\n    return chart;\n  };\n\n  chart.yRange = function(_) {\n    if (!arguments.length) return yRange;\n    yRange = _;\n    return chart;\n  };\n\n  chart.forceY = function(_) {\n    if (!arguments.length) return forceY;\n    forceY = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    return chart;\n  };\n\n  chart.id = function(_) {\n    if (!arguments.length) return id;\n    id = _;\n    return chart;\n  };\n\n  chart.showValues = function(_) {\n    if (!arguments.length) return showValues;\n    showValues = _;\n    return chart;\n  };\n\n  chart.valueFormat= function(_) {\n    if (!arguments.length) return valueFormat;\n    valueFormat = _;\n    return chart;\n  };\n\n  chart.rectClass= function(_) {\n    if (!arguments.length) return rectClass;\n    rectClass = _;\n    return chart;\n  };\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.discreteBarChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var discretebar = nv.models.discreteBar()\n    , xAxis = nv.models.axis()\n    , yAxis = nv.models.axis()\n    ;\n\n  var margin = {top: 15, right: 10, bottom: 50, left: 60}\n    , width = null\n    , height = null\n    , color = nv.utils.getColor()\n    , showXAxis = true\n    , showYAxis = true\n    , rightAlignYAxis = false\n    , staggerLabels = false\n    , tooltips = true\n    , tooltip = function(key, x, y, e, graph) {\n        return '<h3>' + x + '</h3>' +\n               '<p>' +  y + '</p>'\n      }\n    , x\n    , y\n    , noData = \"No Data Available.\"\n    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'beforeUpdate')\n    , transitionDuration = 0\n    ;\n\n  xAxis\n    .orient('bottom')\n    .highlightZero(false)\n    .showMaxMin(false)\n    .tickFormat(function(d) { return d })\n    ;\n  yAxis\n    .orient((rightAlignYAxis) ? 'right' : 'left')\n    .tickFormat(d3.format(',.1f'))\n    ;\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var showTooltip = function(e, offsetElement) {\n    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n        x = xAxis.tickFormat()(discretebar.x()(e.point, e.pointIndex)),\n        y = yAxis.tickFormat()(discretebar.y()(e.point, e.pointIndex)),\n        content = tooltip(e.series.key, x, y, e, chart);\n\n    nv.tooltip.show([left, top], content, e.value < 0 ? 'n' : 's', null, offsetElement);\n  };\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this),\n          that = this;\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n\n\n      chart.update = function() { \n        dispatch.beforeUpdate(); \n        container.call(chart); \n      };\n      chart.container = this;\n\n\n      //------------------------------------------------------------\n      // Display No Data message if there's nothing to show.\n\n      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', margin.top + availableHeight / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x = discretebar.xScale();\n      y = discretebar.yScale().clamp(true);\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-discreteBarWithAxes').data([data]);\n      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discreteBarWithAxes').append('g');\n      var defsEnter = gEnter.append('defs');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-x nv-axis');\n      gEnter.append('g').attr('class', 'nv-y nv-axis')\n            .append('g').attr('class', 'nv-zeroLine')\n            .append('line');\n        \n      gEnter.append('g').attr('class', 'nv-barsWrap');\n\n      g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      if (rightAlignYAxis) {\n          g.select(\".nv-y.nv-axis\")\n              .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Main Chart Component(s)\n\n      discretebar\n        .width(availableWidth)\n        .height(availableHeight);\n\n\n      var barsWrap = g.select('.nv-barsWrap')\n          .datum(data.filter(function(d) { return !d.disabled }))\n\n      barsWrap.call(discretebar);\n\n      //------------------------------------------------------------\n\n\n\n      defsEnter.append('clipPath')\n          .attr('id', 'nv-x-label-clip-' + discretebar.id())\n        .append('rect');\n\n      g.select('#nv-x-label-clip-' + discretebar.id() + ' rect')\n          .attr('width', x.rangeBand() * (staggerLabels ? 2 : 1))\n          .attr('height', 16)\n          .attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2 ));\n\n\n      //------------------------------------------------------------\n      // Setup Axes\n\n      if (showXAxis) {\n          xAxis\n            .scale(x)\n            .ticks( availableWidth / 100 )\n            .tickSize(-availableHeight, 0);\n\n          g.select('.nv-x.nv-axis')\n              .attr('transform', 'translate(0,' + (y.range()[0] + ((discretebar.showValues() && y.domain()[0] < 0) ? 16 : 0)) + ')');\n          //d3.transition(g.select('.nv-x.nv-axis'))\n          g.select('.nv-x.nv-axis')\n              .call(xAxis);\n\n\n          var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n\n          if (staggerLabels) {\n            xTicks\n                .selectAll('text')\n                .attr('transform', function(d,i,j) { return 'translate(0,' + (j % 2 == 0 ? '5' : '17') + ')' })\n          }\n      }\n\n      if (showYAxis) {\n          yAxis\n            .scale(y)\n            .ticks( availableHeight / 36 )\n            .tickSize( -availableWidth, 0);\n\n          g.select('.nv-y.nv-axis')\n              .call(yAxis);\n      }\n\n      // Zero line\n      g.select(\".nv-zeroLine line\")\n        .attr(\"x1\",0)\n        .attr(\"x2\",availableWidth)\n        .attr(\"y1\", y(0))\n        .attr(\"y2\", y(0))\n        ;\n\n      //------------------------------------------------------------\n\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n      dispatch.on('tooltipShow', function(e) {\n        if (tooltips) showTooltip(e, that.parentNode);\n      });\n\n      //============================================================\n\n\n    });\n\n    return chart;\n  }\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  discretebar.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  discretebar.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.dispatch = dispatch;\n  chart.discretebar = discretebar;\n  chart.xAxis = xAxis;\n  chart.yAxis = yAxis;\n\n  d3.rebind(chart, discretebar, 'x', 'y', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'id', 'showValues', 'valueFormat');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    discretebar.color(color);\n    return chart;\n  };\n\n  chart.showXAxis = function(_) {\n    if (!arguments.length) return showXAxis;\n    showXAxis = _;\n    return chart;\n  };\n\n  chart.showYAxis = function(_) {\n    if (!arguments.length) return showYAxis;\n    showYAxis = _;\n    return chart;\n  };\n\n  chart.rightAlignYAxis = function(_) {\n    if(!arguments.length) return rightAlignYAxis;\n    rightAlignYAxis = _;\n    yAxis.orient( (_) ? 'right' : 'left');\n    return chart;\n  };\n\n  chart.staggerLabels = function(_) {\n    if (!arguments.length) return staggerLabels;\n    staggerLabels = _;\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  chart.transitionDuration = function(_) {\n    if (!arguments.length) return transitionDuration;\n    transitionDuration = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.distribution = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n    , width = 400 //technically width or height depending on x or y....\n    , size = 8\n    , axis = 'x' // 'x' or 'y'... horizontal or vertical\n    , getData = function(d) { return d[axis] }  // defaults d.x or d.y\n    , color = nv.utils.defaultColor()\n    , scale = d3.scale.linear()\n    , domain\n    ;\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var scale0;\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var availableLength = width - (axis === 'x' ? margin.left + margin.right : margin.top + margin.bottom),\n          naxis = axis == 'x' ? 'y' : 'x',\n          container = d3.select(this);\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      scale0 = scale0 || scale;\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-distribution').data([data]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-distribution');\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\n      //------------------------------------------------------------\n\n\n      var distWrap = g.selectAll('g.nv-dist')\n          .data(function(d) { return d }, function(d) { return d.key });\n\n      distWrap.enter().append('g');\n      distWrap\n          .attr('class', function(d,i) { return 'nv-dist nv-series-' + i })\n          .style('stroke', function(d,i) { return color(d, i) });\n\n      var dist = distWrap.selectAll('line.nv-dist' + axis)\n          .data(function(d) { return d.values })\n      dist.enter().append('line')\n          .attr(axis + '1', function(d,i) { return scale0(getData(d,i)) })\n          .attr(axis + '2', function(d,i) { return scale0(getData(d,i)) })\n      distWrap.exit().selectAll('line.nv-dist' + axis)\n          \n          .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })\n          .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })\n          .style('stroke-opacity', 0)\n          .remove();\n      dist\n          .attr('class', function(d,i) { return 'nv-dist' + axis + ' nv-dist' + axis + '-' + i })\n          .attr(naxis + '1', 0)\n          .attr(naxis + '2', size);\n      dist\n          \n          .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })\n          .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })\n\n\n      scale0 = scale.copy();\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.axis = function(_) {\n    if (!arguments.length) return axis;\n    axis = _;\n    return chart;\n  };\n\n  chart.size = function(_) {\n    if (!arguments.length) return size;\n    size = _;\n    return chart;\n  };\n\n  chart.getData = function(_) {\n    if (!arguments.length) return getData;\n    getData = d3.functor(_);\n    return chart;\n  };\n\n  chart.scale = function(_) {\n    if (!arguments.length) return scale;\n    scale = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    return chart;\n  };\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.historicalBarChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var bars = nv.models.historicalBar()\n    , xAxis = nv.models.axis()\n    , yAxis = nv.models.axis()\n    , legend = nv.models.legend()\n    ;\n\n\n  var margin = {top: 30, right: 90, bottom: 50, left: 90}\n    , color = nv.utils.defaultColor()\n    , width = null\n    , height = null\n    , showLegend = false\n    , showXAxis = true\n    , showYAxis = true\n    , rightAlignYAxis = false\n    , tooltips = true\n    , tooltip = function(key, x, y, e, graph) {\n        return '<h3>' + key + '</h3>' +\n               '<p>' +  y + ' at ' + x + '</p>'\n      }\n    , x\n    , y\n    , state = {}\n    , defaultState = null\n    , noData = 'No Data Available.'\n    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n    , transitionDuration = 0\n    ;\n\n  xAxis\n    .orient('bottom')\n    .tickPadding(7)\n    ;\n  yAxis\n    .orient( (rightAlignYAxis) ? 'right' : 'left')\n    ;\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var showTooltip = function(e, offsetElement) {\n\n    // New addition to calculate position if SVG is scaled with viewBox, may move TODO: consider implementing everywhere else\n    if (offsetElement) {\n      var svg = d3.select(offsetElement).select('svg');\n      var viewBox = (svg.node()) ? svg.attr('viewBox') : null;\n      if (viewBox) {\n        viewBox = viewBox.split(' ');\n        var ratio = parseInt(svg.style('width')) / viewBox[2];\n        e.pos[0] = e.pos[0] * ratio;\n        e.pos[1] = e.pos[1] * ratio;\n      }\n    }\n\n    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n        x = xAxis.tickFormat()(bars.x()(e.point, e.pointIndex)),\n        y = yAxis.tickFormat()(bars.y()(e.point, e.pointIndex)),\n        content = tooltip(e.series.key, x, y, e, chart);\n\n    nv.tooltip.show([left, top], content, null, null, offsetElement);\n  };\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this),\n          that = this;\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n\n\n      chart.update = function() { container.call(chart) };\n      chart.container = this;\n\n      //set state.disabled\n      state.disabled = data.map(function(d) { return !!d.disabled });\n\n      if (!defaultState) {\n        var key;\n        defaultState = {};\n        for (key in state) {\n          if (state[key] instanceof Array)\n            defaultState[key] = state[key].slice(0);\n          else\n            defaultState[key] = state[key];\n        }\n      }\n\n      //------------------------------------------------------------\n      // Display noData message if there's nothing to show.\n\n      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', margin.top + availableHeight / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x = bars.xScale();\n      y = bars.yScale();\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-historicalBarChart').data([data]);\n      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBarChart').append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-x nv-axis');\n      gEnter.append('g').attr('class', 'nv-y nv-axis');\n      gEnter.append('g').attr('class', 'nv-barsWrap');\n      gEnter.append('g').attr('class', 'nv-legendWrap');\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Legend\n\n      if (showLegend) {\n        legend.width(availableWidth);\n\n        g.select('.nv-legendWrap')\n            .datum(data)\n            .call(legend);\n\n        if ( margin.top != legend.height()) {\n          margin.top = legend.height();\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n        }\n\n        wrap.select('.nv-legendWrap')\n            .attr('transform', 'translate(0,' + (-margin.top) +')')\n      }\n\n      //------------------------------------------------------------\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      if (rightAlignYAxis) {\n        g.select(\".nv-y.nv-axis\")\n            .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n      }\n\n\n      //------------------------------------------------------------\n      // Main Chart Component(s)\n\n      bars\n        .width(availableWidth)\n        .height(availableHeight)\n        .color(data.map(function(d,i) {\n          return d.color || color(d, i);\n        }).filter(function(d,i) { return !data[i].disabled }));\n\n\n      var barsWrap = g.select('.nv-barsWrap')\n          .datum(data.filter(function(d) { return !d.disabled }))\n\n      barsWrap.call(bars);\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Axes\n\n      if (showXAxis) {\n        xAxis\n          .scale(x)\n          .tickSize(-availableHeight, 0);\n\n        g.select('.nv-x.nv-axis')\n            .attr('transform', 'translate(0,' + y.range()[0] + ')');\n        g.select('.nv-x.nv-axis')\n            \n            .call(xAxis);\n      }\n\n      if (showYAxis) {\n        yAxis\n          .scale(y)\n          .ticks( availableHeight / 36 )\n          .tickSize( -availableWidth, 0);\n\n        g.select('.nv-y.nv-axis')\n          \n            .call(yAxis);\n      }\n      //------------------------------------------------------------\n\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n      legend.dispatch.on('legendClick', function(d,i) {\n        d.disabled = !d.disabled;\n\n        if (!data.filter(function(d) { return !d.disabled }).length) {\n          data.map(function(d) {\n            d.disabled = false;\n            wrap.selectAll('.nv-series').classed('disabled', false);\n            return d;\n          });\n        }\n\n        state.disabled = data.map(function(d) { return !!d.disabled });\n        dispatch.stateChange(state);\n\n        selection.call(chart);\n      });\n\n      legend.dispatch.on('legendDblclick', function(d) {\n          //Double clicking should always enable current series, and disabled all others.\n          data.forEach(function(d) {\n             d.disabled = true;\n          });\n          d.disabled = false;\n\n          state.disabled = data.map(function(d) { return !!d.disabled });\n          dispatch.stateChange(state);\n          chart.update();\n      });\n\n      dispatch.on('tooltipShow', function(e) {\n        if (tooltips) showTooltip(e, that.parentNode);\n      });\n\n\n      dispatch.on('changeState', function(e) {\n\n        if (typeof e.disabled !== 'undefined') {\n          data.forEach(function(series,i) {\n            series.disabled = e.disabled[i];\n          });\n\n          state.disabled = e.disabled;\n        }\n\n        chart.update();\n      });\n\n      //============================================================\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  bars.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  bars.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.dispatch = dispatch;\n  chart.bars = bars;\n  chart.legend = legend;\n  chart.xAxis = xAxis;\n  chart.yAxis = yAxis;\n\n  d3.rebind(chart, bars, 'defined', 'isArea', 'x', 'y', 'size', 'xScale', 'yScale',\n    'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi', 'id', 'interpolate','highlightPoint','clearHighlights', 'interactive');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    legend.color(color);\n    return chart;\n  };\n\n  chart.showLegend = function(_) {\n    if (!arguments.length) return showLegend;\n    showLegend = _;\n    return chart;\n  };\n\n  chart.showXAxis = function(_) {\n    if (!arguments.length) return showXAxis;\n    showXAxis = _;\n    return chart;\n  };\n\n  chart.showYAxis = function(_) {\n    if (!arguments.length) return showYAxis;\n    showYAxis = _;\n    return chart;\n  };\n\n  chart.rightAlignYAxis = function(_) {\n    if(!arguments.length) return rightAlignYAxis;\n    rightAlignYAxis = _;\n    yAxis.orient( (_) ? 'right' : 'left');\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.state = function(_) {\n    if (!arguments.length) return state;\n    state = _;\n    return chart;\n  };\n\n  chart.defaultState = function(_) {\n    if (!arguments.length) return defaultState;\n    defaultState = _;\n    return chart;\n  };\n\n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  chart.transitionDuration = function(_) {\n    if (!arguments.length) return transitionDuration;\n    transitionDuration = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\nnv.models.indentedTree = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var margin = {top: 0, right: 0, bottom: 0, left: 0} //TODO: implement, maybe as margin on the containing div\n    , width = 960\n    , height = 500\n    , color = nv.utils.defaultColor()\n    , id = Math.floor(Math.random() * 10000)\n    , header = true\n    , filterZero = false\n    , noData = \"No Data Available.\"\n    , childIndent = 20\n    , columns = [{key:'key', label: 'Name', type:'text'}] //TODO: consider functions like chart.addColumn, chart.removeColumn, instead of a block like this\n    , tableClass = null\n    , iconOpen = 'images/grey-plus.png' //TODO: consider removing this and replacing with a '+' or '-' unless user defines images\n    , iconClose = 'images/grey-minus.png'\n    , dispatch = d3.dispatch('elementClick', 'elementDblclick', 'elementMouseover', 'elementMouseout')\n    , getUrl = function(d) { return d.url }\n    ;\n\n  //============================================================\n\n  var idx = 0;\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var depth = 1,\n          container = d3.select(this);\n\n      var tree = d3.layout.tree()\n          .children(function(d) { return d.values })\n          .size([height, childIndent]); //Not sure if this is needed now that the result is HTML\n\n      chart.update = function() { container.call(chart) };\n\n\n      //------------------------------------------------------------\n      // Display No Data message if there's nothing to show.\n      if (!data[0]) data[0] = {key: noData};\n\n      //------------------------------------------------------------\n\n\n      var nodes = tree.nodes(data[0]);\n\n      // nodes.map(function(d) {\n      //   d.id = i++;\n      // })\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = d3.select(this).selectAll('div').data([[nodes]]);\n      var wrapEnter = wrap.enter().append('div').attr('class', 'nvd3 nv-wrap nv-indentedtree');\n      var tableEnter = wrapEnter.append('table');\n      var table = wrap.select('table').attr('width', '100%').attr('class', tableClass);\n\n      //------------------------------------------------------------\n\n\n      if (header) {\n        var thead = tableEnter.append('thead');\n\n        var theadRow1 = thead.append('tr');\n\n        columns.forEach(function(column) {\n          theadRow1\n            .append('th')\n              .attr('width', column.width ? column.width : '10%')\n              .style('text-align', column.type == 'numeric' ? 'right' : 'left')\n            .append('span')\n              .text(column.label);\n        });\n      }\n\n\n      var tbody = table.selectAll('tbody')\n                    .data(function(d) { return d });\n      tbody.enter().append('tbody');\n\n\n\n      //compute max generations\n      depth = d3.max(nodes, function(node) { return node.depth });\n      tree.size([height, depth * childIndent]); //TODO: see if this is necessary at all\n\n\n      // Update the nodes…\n      var node = tbody.selectAll('tr')\n          // .data(function(d) { return d; }, function(d) { return d.id || (d.id == ++i)});\n          .data(function(d) { return d.filter(function(d) { return (filterZero && !d.children) ? filterZero(d) :  true; } )}, function(d,i) { return d.id || (d.id || ++idx)});\n          //.style('display', 'table-row'); //TODO: see if this does anything\n\n      node.exit().remove();\n\n      node.select('img.nv-treeicon')\n          .attr('src', icon)\n          .classed('folded', folded);\n\n      var nodeEnter = node.enter().append('tr');\n\n\n      columns.forEach(function(column, index) {\n\n        var nodeName = nodeEnter.append('td')\n            .style('padding-left', function(d) { return (index ? 0 : d.depth * childIndent + 12 + (icon(d) ? 0 : 16)) + 'px' }, 'important') //TODO: check why I did the ternary here\n            .style('text-align', column.type == 'numeric' ? 'right' : 'left');\n\n\n        if (index == 0) {\n          nodeName.append('img')\n              .classed('nv-treeicon', true)\n              .classed('nv-folded', folded)\n              .attr('src', icon)\n              .style('width', '14px')\n              .style('height', '14px')\n              .style('padding', '0 1px')\n              .style('display', function(d) { return icon(d) ? 'inline-block' : 'none'; })\n              .on('click', click);\n        }\n\n\n        nodeName.each(function(d) {\n          if (!index && getUrl(d))\n            d3.select(this)\n              .append('a')\n              .attr('href',getUrl)\n              .attr('class', d3.functor(column.classes))\n              .append('span')\n          else\n            d3.select(this)\n              .append('span')\n\n            d3.select(this).select('span')\n              .attr('class', d3.functor(column.classes) )\n              .text(function(d) { return column.format ? (d[column.key] ? column.format(d[column.key]) : '-') :  (d[column.key] || '-'); });\n          });\n\n        if  (column.showCount) {\n          nodeName.append('span')\n              .attr('class', 'nv-childrenCount');\n\n          node.selectAll('span.nv-childrenCount').text(function(d) {\n                return ((d.values && d.values.length) || (d._values && d._values.length)) ?                                   //If this is a parent\n                    '(' + ((d.values && (d.values.filter(function(d) { return filterZero ? filterZero(d) :  true; }).length)) //If children are in values check its children and filter\n                    || (d._values && d._values.filter(function(d) { return filterZero ? filterZero(d) :  true; }).length)     //Otherwise, do the same, but with the other name, _values...\n                    || 0) + ')'                                                                                               //This is the catch-all in case there are no children after a filter\n                    : ''                                                                                                     //If this is not a parent, just give an empty string\n            });\n        }\n\n        // if (column.click)\n        //   nodeName.select('span').on('click', column.click);\n\n      });\n\n      node\n        .order()\n        .on('click', function(d) { \n          dispatch.elementClick({\n            row: this, //TODO: decide whether or not this should be consistent with scatter/line events or should be an html link (a href)\n            data: d,\n            pos: [d.x, d.y]\n          });\n        })\n        .on('dblclick', function(d) { \n          dispatch.elementDblclick({\n            row: this,\n            data: d,\n            pos: [d.x, d.y]\n          });\n        })\n        .on('mouseover', function(d) { \n          dispatch.elementMouseover({\n            row: this,\n            data: d,\n            pos: [d.x, d.y]\n          });\n        })\n        .on('mouseout', function(d) { \n          dispatch.elementMouseout({\n            row: this,\n            data: d,\n            pos: [d.x, d.y]\n          });\n        });\n\n\n\n\n      // Toggle children on click.\n      function click(d, _, unshift) {\n        d3.event.stopPropagation();\n\n        if(d3.event.shiftKey && !unshift) {\n          //If you shift-click, it'll toggle fold all the children, instead of itself\n          d3.event.shiftKey = false;\n          d.values && d.values.forEach(function(node){\n            if (node.values || node._values) {\n              click(node, 0, true);\n            }\n          });\n          return true;\n        }\n        if(!hasChildren(d)) {\n          //download file\n          //window.location.href = d.url;\n          return true;\n        }\n        if (d.values) {\n          d._values = d.values;\n          d.values = null;\n        } else {\n          d.values = d._values;\n          d._values = null;\n        }\n        chart.update();\n      }\n\n\n      function icon(d) {\n        return (d._values && d._values.length) ? iconOpen : (d.values && d.values.length) ? iconClose : '';\n      }\n\n      function folded(d) {\n        return (d._values && d._values.length);\n      }\n\n      function hasChildren(d) {\n        var values = d.values || d._values;\n\n        return (values && values.length);\n      }\n\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    scatter.color(color);\n    return chart;\n  };\n\n  chart.id = function(_) {\n    if (!arguments.length) return id;\n    id = _;\n    return chart;\n  };\n\n  chart.header = function(_) {\n    if (!arguments.length) return header;\n    header = _;\n    return chart;\n  };\n\n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  chart.filterZero = function(_) {\n    if (!arguments.length) return filterZero;\n    filterZero = _;\n    return chart;\n  };\n\n  chart.columns = function(_) {\n    if (!arguments.length) return columns;\n    columns = _;\n    return chart;\n  };\n\n  chart.tableClass = function(_) {\n    if (!arguments.length) return tableClass;\n    tableClass = _;\n    return chart;\n  };\n\n  chart.iconOpen = function(_){\n     if (!arguments.length) return iconOpen;\n    iconOpen = _;\n    return chart;\n  }\n\n  chart.iconClose = function(_){\n     if (!arguments.length) return iconClose;\n    iconClose = _;\n    return chart;\n  }\n\n  chart.getUrl = function(_){\n     if (!arguments.length) return getUrl;\n    getUrl = _;\n    return chart;\n  }\n\n  //============================================================\n\n\n  return chart;\n};nv.models.legend = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var margin = {top: 5, right: 0, bottom: 5, left: 0}\n    , width = 400\n    , height = 20\n    , getKey = function(d) { return d.key }\n    , color = nv.utils.defaultColor()\n    , align = true\n    , rightAlign = true\n    , updateState = true   //If true, legend will update data.disabled and trigger a 'stateChange' dispatch.\n    , radioButtonMode = false   //If true, clicking legend items will cause it to behave like a radio button. (only one can be selected at a time)\n    , dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange')\n    ;\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var availableWidth = width - margin.left - margin.right,\n          container = d3.select(this);\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-legend').data([data]);\n      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');\n      var g = wrap.select('g');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      //------------------------------------------------------------\n\n\n      var series = g.selectAll('.nv-series')\n          .data(function(d) { return d });\n      var seriesEnter = series.enter().append('g').attr('class', 'nv-series')\n          .on('mouseover', function(d,i) {\n            dispatch.legendMouseover(d,i);  //TODO: Make consistent with other event objects\n          })\n          .on('mouseout', function(d,i) {\n            dispatch.legendMouseout(d,i);\n          })\n          .on('click', function(d,i) {\n            dispatch.legendClick(d,i);\n            if (updateState) {\n               if (radioButtonMode) {\n                   //Radio button mode: set every series to disabled,\n                   //  and enable the clicked series.\n                   data.forEach(function(series) { series.disabled = true});\n                   d.disabled = false;\n               }\n               else {\n                   d.disabled = !d.disabled;\n                   if (data.every(function(series) { return series.disabled})) {\n                       //the default behavior of NVD3 legends is, if every single series\n                       // is disabled, turn all series' back on.\n                       data.forEach(function(series) { series.disabled = false});\n                   }\n               }\n               dispatch.stateChange({\n                  disabled: data.map(function(d) { return !!d.disabled })\n               });\n            }\n          })\n          .on('dblclick', function(d,i) {\n            dispatch.legendDblclick(d,i);\n            if (updateState) {\n                //the default behavior of NVD3 legends, when double clicking one,\n                // is to set all other series' to false, and make the double clicked series enabled.\n                data.forEach(function(series) {\n                   series.disabled = true;\n                });\n                d.disabled = false;\n                dispatch.stateChange({\n                    disabled: data.map(function(d) { return !!d.disabled })\n                });\n            }\n          });\n      seriesEnter.append('circle')\n          .style('stroke-width', 2)\n          .attr('class','nv-legend-symbol')\n          .attr('r', 5);\n      seriesEnter.append('text')\n          .attr('text-anchor', 'start')\n          .attr('class','nv-legend-text')\n          .attr('dy', '.32em')\n          .attr('dx', '8');\n      series.classed('disabled', function(d) { return d.disabled });\n      series.exit().remove();\n      series.select('circle')\n          .style('fill', function(d,i) { return d.color || color(d,i)})\n          .style('stroke', function(d,i) { return d.color || color(d, i) });\n      series.select('text').text(getKey);\n\n\n      //TODO: implement fixed-width and max-width options (max-width is especially useful with the align option)\n\n      // NEW ALIGNING CODE, TODO: clean up\n      if (align) {\n\n        var seriesWidths = [];\n        series.each(function(d,i) {\n              var legendText = d3.select(this).select('text');\n              var nodeTextLength;\n              try {\n                nodeTextLength = legendText.getComputedTextLength();\n                // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead\n                if(nodeTextLength <= 0) throw Error();\n              }\n              catch(e) {\n                nodeTextLength = nv.utils.calcApproxTextWidth(legendText);\n              }\n\n              seriesWidths.push(nodeTextLength + 28); // 28 is ~ the width of the circle plus some padding\n            });\n\n        var seriesPerRow = 0;\n        var legendWidth = 0;\n        var columnWidths = [];\n\n        while ( legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {\n          columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];\n          legendWidth += seriesWidths[seriesPerRow++];\n        }\n        if (seriesPerRow === 0) seriesPerRow = 1; //minimum of one series per row\n\n\n        while ( legendWidth > availableWidth && seriesPerRow > 1 ) {\n          columnWidths = [];\n          seriesPerRow--;\n\n          for (var k = 0; k < seriesWidths.length; k++) {\n            if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0) )\n              columnWidths[k % seriesPerRow] = seriesWidths[k];\n          }\n\n          legendWidth = columnWidths.reduce(function(prev, cur, index, array) {\n                          return prev + cur;\n                        });\n        }\n\n        var xPositions = [];\n        for (var i = 0, curX = 0; i < seriesPerRow; i++) {\n            xPositions[i] = curX;\n            curX += columnWidths[i];\n        }\n\n        series\n            .attr('transform', function(d, i) {\n              return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * 20) + ')';\n            });\n\n        //position legend as far right as possible within the total width\n        if (rightAlign) {\n           g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')');\n        }\n        else {\n           g.attr('transform', 'translate(0' + ',' + margin.top + ')');\n        }\n\n        height = margin.top + margin.bottom + (Math.ceil(seriesWidths.length / seriesPerRow) * 20);\n\n      } else {\n\n        var ypos = 5,\n            newxpos = 5,\n            maxwidth = 0,\n            xpos;\n        series\n            .attr('transform', function(d, i) {\n              var length = d3.select(this).select('text').node().getComputedTextLength() + 28;\n              xpos = newxpos;\n\n              if (width < margin.left + margin.right + xpos + length) {\n                newxpos = xpos = 5;\n                ypos += 20;\n              }\n\n              newxpos += length;\n              if (newxpos > maxwidth) maxwidth = newxpos;\n\n              return 'translate(' + xpos + ',' + ypos + ')';\n            });\n\n        //position legend as far right as possible within the total width\n        g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');\n\n        height = margin.top + margin.bottom + ypos + 15;\n\n      }\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  chart.dispatch = dispatch;\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.key = function(_) {\n    if (!arguments.length) return getKey;\n    getKey = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    return chart;\n  };\n\n  chart.align = function(_) {\n    if (!arguments.length) return align;\n    align = _;\n    return chart;\n  };\n\n  chart.rightAlign = function(_) {\n    if (!arguments.length) return rightAlign;\n    rightAlign = _;\n    return chart;\n  };\n\n  chart.updateState = function(_) {\n    if (!arguments.length) return updateState;\n    updateState = _;\n    return chart;\n  };\n\n  chart.radioButtonMode = function(_) {\n    if (!arguments.length) return radioButtonMode;\n    radioButtonMode = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.line = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var  scatter = nv.models.scatter()\n    ;\n\n  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n    , width = 960\n    , height = 500\n    , color = nv.utils.defaultColor() // a function that returns a color\n    , getX = function(d) { return d.x } // accessor to get the x value from a data point\n    , getY = function(d) { return d.y } // accessor to get the y value from a data point\n    , defined = function(d,i) { return !isNaN(getY(d,i)) && getY(d,i) !== null } // allows a line to be not continuous when it is not defined\n    , isArea = function(d) { return d.area } // decides if a line is an area or just a line\n    , clipEdge = false // if true, masks lines within x and y scale\n    , x //can be accessed via chart.xScale()\n    , y //can be accessed via chart.yScale()\n    , interpolate = \"linear\" // controls the line interpolation\n    ;\n\n  scatter\n    .size(16) // default size\n    .sizeDomain([16,256]) //set to speed up calculation, needs to be unset if there is a custom size accessor\n    ;\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var x0, y0 //used to store previous scales\n      ;\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var availableWidth = width - margin.left - margin.right,\n          availableHeight = height - margin.top - margin.bottom,\n          container = d3.select(this);\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x = scatter.xScale();\n      y = scatter.yScale();\n\n      x0 = x0 || x;\n      y0 = y0 || y;\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-line').data([data]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-line');\n      var defsEnter = wrapEnter.append('defs');\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g')\n\n      gEnter.append('g').attr('class', 'nv-groups');\n      gEnter.append('g').attr('class', 'nv-scatterWrap');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      //------------------------------------------------------------\n\n\n\n\n      scatter\n        .width(availableWidth)\n        .height(availableHeight)\n\n      var scatterWrap = wrap.select('.nv-scatterWrap');\n          //.datum(data); // Data automatically trickles down from the wrap\n\n      scatterWrap.call(scatter);\n\n\n\n      defsEnter.append('clipPath')\n          .attr('id', 'nv-edge-clip-' + scatter.id())\n        .append('rect');\n\n      wrap.select('#nv-edge-clip-' + scatter.id() + ' rect')\n          .attr('width', availableWidth)\n          .attr('height', (availableHeight > 0) ? availableHeight : 0);\n\n      g   .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');\n      scatterWrap\n          .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');\n\n\n\n\n      var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n          .data(function(d) { return d }, function(d) { return d.key });\n      groups.enter().append('g')\n          .style('stroke-opacity', 1e-6)\n          .style('fill-opacity', 1e-6);\n\n      groups.exit().remove();\n\n      groups\n          .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n          .classed('hover', function(d) { return d.hover })\n          .style('fill', function(d,i){ return color(d, i) })\n          .style('stroke', function(d,i){ return color(d, i)});\n      groups\n          \n          .style('stroke-opacity', 1)\n          .style('fill-opacity', .5);\n\n\n\n      var areaPaths = groups.selectAll('path.nv-area')\n          .data(function(d) { return isArea(d) ? [d] : [] }); // this is done differently than lines because I need to check if series is an area\n      areaPaths.enter().append('path')\n          .attr('class', 'nv-area')\n          .attr('d', function(d) {\n            return d3.svg.area()\n                .interpolate(interpolate)\n                .defined(defined)\n                .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n                .y0(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n                .y1(function(d,i) { return y0( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })\n                //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this\n                .apply(this, [d.values])\n          });\n      groups.exit().selectAll('path.nv-area')\n           .remove();\n\n      areaPaths\n          \n          .attr('d', function(d) {\n            return d3.svg.area()\n                .interpolate(interpolate)\n                .defined(defined)\n                .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n                .y0(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n                .y1(function(d,i) { return y( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })\n                //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this\n                .apply(this, [d.values])\n          });\n\n\n\n      var linePaths = groups.selectAll('path.nv-line')\n          .data(function(d) { return [d.values] });\n      linePaths.enter().append('path')\n          .attr('class', 'nv-line')\n          .attr('d',\n            d3.svg.line()\n              .interpolate(interpolate)\n              .defined(defined)\n              .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n              .y(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n          );\n\n      linePaths\n          \n          .attr('d',\n            d3.svg.line()\n              .interpolate(interpolate)\n              .defined(defined)\n              .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n              .y(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n          );\n\n\n\n      //store old scales for use in transitions on update\n      x0 = x.copy();\n      y0 = y.copy();\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  chart.dispatch = scatter.dispatch;\n  chart.scatter = scatter;\n\n  d3.rebind(chart, scatter, 'id', 'interactive', 'size', 'xScale', 'yScale', 'zScale', 'xDomain', 'yDomain', 'xRange', 'yRange',\n    'sizeDomain', 'forceX', 'forceY', 'forceSize', 'clipVoronoi', 'useVoronoi', 'clipRadius', 'padData','highlightPoint','clearHighlights');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.x = function(_) {\n    if (!arguments.length) return getX;\n    getX = _;\n    scatter.x(_);\n    return chart;\n  };\n\n  chart.y = function(_) {\n    if (!arguments.length) return getY;\n    getY = _;\n    scatter.y(_);\n    return chart;\n  };\n\n  chart.clipEdge = function(_) {\n    if (!arguments.length) return clipEdge;\n    clipEdge = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    scatter.color(color);\n    return chart;\n  };\n\n  chart.interpolate = function(_) {\n    if (!arguments.length) return interpolate;\n    interpolate = _;\n    return chart;\n  };\n\n  chart.defined = function(_) {\n    if (!arguments.length) return defined;\n    defined = _;\n    return chart;\n  };\n\n  chart.isArea = function(_) {\n    if (!arguments.length) return isArea;\n    isArea = d3.functor(_);\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.lineChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var lines = nv.models.line()\n    , xAxis = nv.models.axis()\n    , yAxis = nv.models.axis()\n    , legend = nv.models.legend()\n    , interactiveLayer = nv.interactiveGuideline()\n    ;\n\n  var margin = {top: 30, right: 20, bottom: 50, left: 60}\n    , color = nv.utils.defaultColor()\n    , width = null\n    , height = null\n    , showLegend = true\n    , showXAxis = true\n    , showYAxis = true\n    , rightAlignYAxis = false\n    , useInteractiveGuideline = false\n    , tooltips = true\n    , tooltip = function(key, x, y, e, graph) {\n        return '<h3>' + key + '</h3>' +\n               '<p>' +  y + ' at ' + x + '</p>'\n      }\n    , x\n    , y\n    , state = {}\n    , defaultState = null\n    , noData = 'No Data Available.'\n    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n    , transitionDuration = 0\n    ;\n\n  xAxis\n    .orient('bottom')\n    .tickPadding(7)\n    ;\n  yAxis\n    .orient((rightAlignYAxis) ? 'right' : 'left')\n    ;\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var showTooltip = function(e, offsetElement) {\n    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n        x = xAxis.tickFormat()(lines.x()(e.point, e.pointIndex)),\n        y = yAxis.tickFormat()(lines.y()(e.point, e.pointIndex)),\n        content = tooltip(e.series.key, x, y, e, chart);\n\n    nv.tooltip.show([left, top], content, null, null, offsetElement);\n  };\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this),\n          that = this;\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n\n\n      chart.update = function() { container.call(chart) };\n      chart.container = this;\n\n      //set state.disabled\n      state.disabled = data.map(function(d) { return !!d.disabled });\n\n\n      if (!defaultState) {\n        var key;\n        defaultState = {};\n        for (key in state) {\n          if (state[key] instanceof Array)\n            defaultState[key] = state[key].slice(0);\n          else\n            defaultState[key] = state[key];\n        }\n      }\n\n      //------------------------------------------------------------\n      // Display noData message if there's nothing to show.\n\n      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', margin.top + availableHeight / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x = lines.xScale();\n      y = lines.yScale();\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-lineChart').data([data]);\n      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-lineChart').append('g');\n      var g = wrap.select('g');\n\n      gEnter.append(\"rect\").style(\"opacity\",0);\n      gEnter.append('g').attr('class', 'nv-x nv-axis');\n      gEnter.append('g').attr('class', 'nv-y nv-axis');\n      gEnter.append('g').attr('class', 'nv-linesWrap');\n      gEnter.append('g').attr('class', 'nv-legendWrap');\n      gEnter.append('g').attr('class', 'nv-interactive');\n\n      g.select(\"rect\")\n        .attr(\"width\",availableWidth)\n        .attr(\"height\",(availableHeight > 0) ? availableHeight : 0);\n      //------------------------------------------------------------\n      // Legend\n\n      if (showLegend) {\n        legend.width(availableWidth);\n\n        g.select('.nv-legendWrap')\n            .datum(data)\n            .call(legend);\n\n        if ( margin.top != legend.height()) {\n          margin.top = legend.height();\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n        }\n\n        wrap.select('.nv-legendWrap')\n            .attr('transform', 'translate(0,' + (-margin.top) +')')\n      }\n\n      //------------------------------------------------------------\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      if (rightAlignYAxis) {\n          g.select(\".nv-y.nv-axis\")\n              .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n      }\n\n      //------------------------------------------------------------\n      // Main Chart Component(s)\n\n\n      //------------------------------------------------------------\n      //Set up interactive layer\n      if (useInteractiveGuideline) {\n        interactiveLayer\n           .width(availableWidth)\n           .height(availableHeight)\n           .margin({left:margin.left, top:margin.top})\n           .svgContainer(container)\n           .xScale(x);\n        wrap.select(\".nv-interactive\").call(interactiveLayer);\n      }\n\n\n      lines\n        .width(availableWidth)\n        .height(availableHeight)\n        .color(data.map(function(d,i) {\n          return d.color || color(d, i);\n        }).filter(function(d,i) { return !data[i].disabled }));\n\n\n      var linesWrap = g.select('.nv-linesWrap')\n          .datum(data.filter(function(d) { return !d.disabled }))\n\n      linesWrap.call(lines);\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Axes\n\n      if (showXAxis) {\n        xAxis\n          .scale(x)\n          .ticks( availableWidth / 100 )\n          .tickSize(-availableHeight, 0);\n\n        g.select('.nv-x.nv-axis')\n            .attr('transform', 'translate(0,' + y.range()[0] + ')');\n        g.select('.nv-x.nv-axis')\n            \n            .call(xAxis);\n      }\n\n      if (showYAxis) {\n        yAxis\n          .scale(y)\n          .ticks( availableHeight / 36 )\n          .tickSize( -availableWidth, 0);\n\n        g.select('.nv-y.nv-axis')\n            \n            .call(yAxis);\n      }\n      //------------------------------------------------------------\n\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n      legend.dispatch.on('stateChange', function(newState) {\n          state = newState;\n          dispatch.stateChange(state);\n          chart.update();\n      });\n\n      interactiveLayer.dispatch.on('elementMousemove', function(e) {\n          lines.clearHighlights();\n          var singlePoint, pointIndex, pointXLocation, allData = [];\n          data\n          .filter(function(series, i) {\n            series.seriesIndex = i;\n            return !series.disabled;\n          })\n          .forEach(function(series,i) {\n              pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n              lines.highlightPoint(i, pointIndex, true);\n              var point = series.values[pointIndex];\n              if (typeof point === 'undefined') return;\n              if (typeof singlePoint === 'undefined') singlePoint = point;\n              if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n              allData.push({\n                  key: series.key,\n                  value: chart.y()(point, pointIndex),\n                  color: color(series,series.seriesIndex)\n              });\n          });\n          //Highlight the tooltip entry based on which point the mouse is closest to.\n          if (allData.length > 2) {\n            var yValue = chart.yScale().invert(e.mouseY);\n            var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);\n            var threshold = 0.03 * domainExtent;\n            var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value}),yValue,threshold);\n            if (indexToHighlight !== null)\n              allData[indexToHighlight].highlight = true;\n          }\n\n          var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex));\n          interactiveLayer.tooltip\n                  .position({left: pointXLocation + margin.left, top: e.mouseY + margin.top})\n                  .chartContainer(that.parentNode)\n                  .enabled(tooltips)\n                  .valueFormatter(function(d,i) {\n                     return yAxis.tickFormat()(d);\n                  })\n                  .data(\n                      {\n                        value: xValue,\n                        series: allData\n                      }\n                  )();\n\n          interactiveLayer.renderGuideLine(pointXLocation);\n\n      });\n\n      interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n          dispatch.tooltipHide();\n          lines.clearHighlights();\n      });\n\n      dispatch.on('tooltipShow', function(e) {\n        if (tooltips) showTooltip(e, that.parentNode);\n      });\n\n\n      dispatch.on('changeState', function(e) {\n\n        if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {\n          data.forEach(function(series,i) {\n            series.disabled = e.disabled[i];\n          });\n\n          state.disabled = e.disabled;\n        }\n\n        chart.update();\n      });\n\n      //============================================================\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  lines.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  lines.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.dispatch = dispatch;\n  chart.lines = lines;\n  chart.legend = legend;\n  chart.xAxis = xAxis;\n  chart.yAxis = yAxis;\n  chart.interactiveLayer = interactiveLayer;\n\n  d3.rebind(chart, lines, 'defined', 'isArea', 'x', 'y', 'size', 'xScale', 'yScale', 'xDomain', 'yDomain', 'xRange', 'yRange'\n    , 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi', 'useVoronoi','id', 'interpolate');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    legend.color(color);\n    return chart;\n  };\n\n  chart.showLegend = function(_) {\n    if (!arguments.length) return showLegend;\n    showLegend = _;\n    return chart;\n  };\n\n  chart.showXAxis = function(_) {\n    if (!arguments.length) return showXAxis;\n    showXAxis = _;\n    return chart;\n  };\n\n  chart.showYAxis = function(_) {\n    if (!arguments.length) return showYAxis;\n    showYAxis = _;\n    return chart;\n  };\n\n  chart.rightAlignYAxis = function(_) {\n    if(!arguments.length) return rightAlignYAxis;\n    rightAlignYAxis = _;\n    yAxis.orient( (_) ? 'right' : 'left');\n    return chart;\n  };\n\n  chart.useInteractiveGuideline = function(_) {\n    if(!arguments.length) return useInteractiveGuideline;\n    useInteractiveGuideline = _;\n    if (_ === true) {\n       chart.interactive(false);\n       chart.useVoronoi(false);\n    }\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.state = function(_) {\n    if (!arguments.length) return state;\n    state = _;\n    return chart;\n  };\n\n  chart.defaultState = function(_) {\n    if (!arguments.length) return defaultState;\n    defaultState = _;\n    return chart;\n  };\n\n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  chart.transitionDuration = function(_) {\n    if (!arguments.length) return transitionDuration;\n    transitionDuration = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.linePlusBarChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var lines = nv.models.line()\n    , bars = nv.models.historicalBar()\n    , xAxis = nv.models.axis()\n    , y1Axis = nv.models.axis()\n    , y2Axis = nv.models.axis()\n    , legend = nv.models.legend()\n    ;\n\n  var margin = {top: 30, right: 60, bottom: 50, left: 60}\n    , width = null\n    , height = null\n    , getX = function(d) { return d.x }\n    , getY = function(d) { return d.y }\n    , color = nv.utils.defaultColor()\n    , showLegend = true\n    , tooltips = true\n    , tooltip = function(key, x, y, e, graph) {\n        return '<h3>' + key + '</h3>' +\n               '<p>' +  y + ' at ' + x + '</p>';\n      }\n    , x\n    , y1\n    , y2\n    , state = {}\n    , defaultState = null\n    , noData = \"No Data Available.\"\n    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n    ;\n\n  bars\n    .padData(true)\n    ;\n  lines\n    .clipEdge(false)\n    .padData(true)\n    ;\n  xAxis\n    .orient('bottom')\n    .tickPadding(7)\n    .highlightZero(false)\n    ;\n  y1Axis\n    .orient('left')\n    ;\n  y2Axis\n    .orient('right')\n    ;\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var showTooltip = function(e, offsetElement) {\n      var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n          top = e.pos[1] + ( offsetElement.offsetTop || 0),\n          x = xAxis.tickFormat()(lines.x()(e.point, e.pointIndex)),\n          y = (e.series.bar ? y1Axis : y2Axis).tickFormat()(lines.y()(e.point, e.pointIndex)),\n          content = tooltip(e.series.key, x, y, e, chart);\n\n      nv.tooltip.show([left, top], content, e.value < 0 ? 'n' : 's', null, offsetElement);\n    }\n    ;\n\n  //------------------------------------------------------------\n\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this),\n          that = this;\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n\n      chart.update = function() { container.call(chart); };\n      // chart.container = this;\n\n      //set state.disabled\n      state.disabled = data.map(function(d) { return !!d.disabled });\n\n      if (!defaultState) {\n        var key;\n        defaultState = {};\n        for (key in state) {\n          if (state[key] instanceof Array)\n            defaultState[key] = state[key].slice(0);\n          else\n            defaultState[key] = state[key];\n        }\n      }\n\n      //------------------------------------------------------------\n      // Display No Data message if there's nothing to show.\n\n      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', margin.top + availableHeight / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      var dataBars = data.filter(function(d) { return !d.disabled && d.bar });\n      var dataLines = data.filter(function(d) { return !d.bar }); // removed the !d.disabled clause here to fix Issue #240\n\n      //x = xAxis.scale();\n       x = dataLines.filter(function(d) { return !d.disabled; }).length && dataLines.filter(function(d) { return !d.disabled; })[0].values.length ? lines.xScale() : bars.xScale();\n      //x = dataLines.filter(function(d) { return !d.disabled; }).length ? lines.xScale() : bars.xScale(); //old code before change above\n      y1 = bars.yScale();\n      y2 = lines.yScale();\n\n      //------------------------------------------------------------\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = d3.select(this).selectAll('g.nv-wrap.nv-linePlusBar').data([data]);\n      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-linePlusBar').append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-x nv-axis');\n      gEnter.append('g').attr('class', 'nv-y1 nv-axis');\n      gEnter.append('g').attr('class', 'nv-y2 nv-axis');\n      gEnter.append('g').attr('class', 'nv-barsWrap');\n      gEnter.append('g').attr('class', 'nv-linesWrap');\n      gEnter.append('g').attr('class', 'nv-legendWrap');\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Legend\n\n      if (showLegend) {\n        legend.width( availableWidth / 2 );\n\n        g.select('.nv-legendWrap')\n            .datum(data.map(function(series) {\n              series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n              series.key = series.originalKey + (series.bar ? ' (left axis)' : ' (right axis)');\n              return series;\n            }))\n          .call(legend);\n\n        if ( margin.top != legend.height()) {\n          margin.top = legend.height();\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n        }\n\n        g.select('.nv-legendWrap')\n            .attr('transform', 'translate(' + ( availableWidth / 2 ) + ',' + (-margin.top) +')');\n      }\n\n      //------------------------------------------------------------\n\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\n      //------------------------------------------------------------\n      // Main Chart Component(s)\n\n\n      lines\n        .width(availableWidth)\n        .height(availableHeight)\n        .color(data.map(function(d,i) {\n          return d.color || color(d, i);\n        }).filter(function(d,i) { return !data[i].disabled && !data[i].bar }))\n\n      bars\n        .width(availableWidth)\n        .height(availableHeight)\n        .color(data.map(function(d,i) {\n          return d.color || color(d, i);\n        }).filter(function(d,i) { return !data[i].disabled && data[i].bar }))\n\n\n\n      var barsWrap = g.select('.nv-barsWrap')\n          .datum(dataBars.length ? dataBars : [{values:[]}])\n\n      var linesWrap = g.select('.nv-linesWrap')\n          .datum(dataLines[0] && !dataLines[0].disabled ? dataLines : [{values:[]}] );\n          //.datum(!dataLines[0].disabled ? dataLines : [{values:dataLines[0].values.map(function(d) { return [d[0], null] }) }] );\n\n      d3.transition(barsWrap).call(bars);\n      d3.transition(linesWrap).call(lines);\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Axes\n\n      xAxis\n        .scale(x)\n        .ticks( availableWidth / 100 )\n        .tickSize(-availableHeight, 0);\n\n      g.select('.nv-x.nv-axis')\n          .attr('transform', 'translate(0,' + y1.range()[0] + ')');\n      d3.transition(g.select('.nv-x.nv-axis'))\n          .call(xAxis);\n\n\n      y1Axis\n        .scale(y1)\n        .ticks( availableHeight / 36 )\n        .tickSize(-availableWidth, 0);\n\n      d3.transition(g.select('.nv-y1.nv-axis'))\n          .style('opacity', dataBars.length ? 1 : 0)\n          .call(y1Axis);\n\n\n      y2Axis\n        .scale(y2)\n        .ticks( availableHeight / 36 )\n        .tickSize(dataBars.length ? 0 : -availableWidth, 0); // Show the y2 rules only if y1 has none\n\n      g.select('.nv-y2.nv-axis')\n          .style('opacity', dataLines.length ? 1 : 0)\n          .attr('transform', 'translate(' + availableWidth + ',0)');\n          //.attr('transform', 'translate(' + x.range()[1] + ',0)');\n\n      d3.transition(g.select('.nv-y2.nv-axis'))\n          .call(y2Axis);\n\n      //------------------------------------------------------------\n\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n      legend.dispatch.on('stateChange', function(newState) { \n        state = newState;\n        dispatch.stateChange(state);\n        chart.update();\n      });\n\n      dispatch.on('tooltipShow', function(e) {\n        if (tooltips) showTooltip(e, that.parentNode);\n      });\n\n\n      // Update chart from a state object passed to event handler\n      dispatch.on('changeState', function(e) {\n\n        if (typeof e.disabled !== 'undefined') {\n          data.forEach(function(series,i) {\n            series.disabled = e.disabled[i];\n          });\n\n          state.disabled = e.disabled;\n        }\n\n        chart.update();\n      });\n\n      //============================================================\n\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  lines.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  lines.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  bars.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  bars.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.dispatch = dispatch;\n  chart.legend = legend;\n  chart.lines = lines;\n  chart.bars = bars;\n  chart.xAxis = xAxis;\n  chart.y1Axis = y1Axis;\n  chart.y2Axis = y2Axis;\n\n  d3.rebind(chart, lines, 'defined', 'size', 'clipVoronoi', 'interpolate');\n  //TODO: consider rebinding x, y and some other stuff, and simply do soemthign lile bars.x(lines.x()), etc.\n  //d3.rebind(chart, lines, 'x', 'y', 'size', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi', 'id');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  chart.x = function(_) {\n    if (!arguments.length) return getX;\n    getX = _;\n    lines.x(_);\n    bars.x(_);\n    return chart;\n  };\n\n  chart.y = function(_) {\n    if (!arguments.length) return getY;\n    getY = _;\n    lines.y(_);\n    bars.y(_);\n    return chart;\n  };\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    legend.color(color);\n    return chart;\n  };\n\n  chart.showLegend = function(_) {\n    if (!arguments.length) return showLegend;\n    showLegend = _;\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.state = function(_) {\n    if (!arguments.length) return state;\n    state = _;\n    return chart;\n  };\n\n  chart.defaultState = function(_) {\n    if (!arguments.length) return defaultState;\n    defaultState = _;\n    return chart;\n  };\n\n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\nnv.models.lineWithFocusChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var lines = nv.models.line()\n    , lines2 = nv.models.line()\n    , xAxis = nv.models.axis()\n    , yAxis = nv.models.axis()\n    , x2Axis = nv.models.axis()\n    , y2Axis = nv.models.axis()\n    , legend = nv.models.legend()\n    , brush = d3.svg.brush()\n    ;\n\n  var margin = {top: 30, right: 30, bottom: 30, left: 60}\n    , margin2 = {top: 0, right: 30, bottom: 20, left: 60}\n    , color = nv.utils.defaultColor()\n    , width = null\n    , height = null\n    , height2 = 100\n    , x\n    , y\n    , x2\n    , y2\n    , showLegend = true\n    , brushExtent = null\n    , tooltips = true\n    , tooltip = function(key, x, y, e, graph) {\n        return '<h3>' + key + '</h3>' +\n               '<p>' +  y + ' at ' + x + '</p>'\n      }\n    , noData = \"No Data Available.\"\n    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'brush')\n    , transitionDuration = 0\n    ;\n\n  lines\n    .clipEdge(true)\n    ;\n  lines2\n    .interactive(false)\n    ;\n  xAxis\n    .orient('bottom')\n    .tickPadding(5)\n    ;\n  yAxis\n    .orient('left')\n    ;\n  x2Axis\n    .orient('bottom')\n    .tickPadding(5)\n    ;\n  y2Axis\n    .orient('left')\n    ;\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var showTooltip = function(e, offsetElement) {\n    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n        x = xAxis.tickFormat()(lines.x()(e.point, e.pointIndex)),\n        y = yAxis.tickFormat()(lines.y()(e.point, e.pointIndex)),\n        content = tooltip(e.series.key, x, y, e, chart);\n\n    nv.tooltip.show([left, top], content, null, null, offsetElement);\n  };\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this),\n          that = this;\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight1 = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom - height2,\n          availableHeight2 = height2 - margin2.top - margin2.bottom;\n\n      chart.update = function() { container.call(chart) };\n      chart.container = this;\n\n\n      //------------------------------------------------------------\n      // Display No Data message if there's nothing to show.\n\n      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', margin.top + availableHeight1 / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x = lines.xScale();\n      y = lines.yScale();\n      x2 = lines2.xScale();\n      y2 = lines2.yScale();\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-lineWithFocusChart').data([data]);\n      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-lineWithFocusChart').append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-legendWrap');\n\n      var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n      focusEnter.append('g').attr('class', 'nv-x nv-axis');\n      focusEnter.append('g').attr('class', 'nv-y nv-axis');\n      focusEnter.append('g').attr('class', 'nv-linesWrap');\n\n      var contextEnter = gEnter.append('g').attr('class', 'nv-context');\n      contextEnter.append('g').attr('class', 'nv-x nv-axis');\n      contextEnter.append('g').attr('class', 'nv-y nv-axis');\n      contextEnter.append('g').attr('class', 'nv-linesWrap');\n      contextEnter.append('g').attr('class', 'nv-brushBackground');\n      contextEnter.append('g').attr('class', 'nv-x nv-brush');\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Legend\n\n      if (showLegend) {\n        legend.width(availableWidth);\n\n        g.select('.nv-legendWrap')\n            .datum(data)\n            .call(legend);\n\n        if ( margin.top != legend.height()) {\n          margin.top = legend.height();\n          availableHeight1 = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom - height2;\n        }\n\n        g.select('.nv-legendWrap')\n            .attr('transform', 'translate(0,' + (-margin.top) +')')\n      }\n\n      //------------------------------------------------------------\n\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\n      //------------------------------------------------------------\n      // Main Chart Component(s)\n\n      lines\n        .width(availableWidth)\n        .height(availableHeight1)\n        .color(\n          data\n            .map(function(d,i) {\n              return d.color || color(d, i);\n            })\n            .filter(function(d,i) {\n              return !data[i].disabled;\n          })\n        );\n\n      lines2\n        .defined(lines.defined())\n        .width(availableWidth)\n        .height(availableHeight2)\n        .color(\n          data\n            .map(function(d,i) {\n              return d.color || color(d, i);\n            })\n            .filter(function(d,i) {\n              return !data[i].disabled;\n          })\n        );\n\n      g.select('.nv-context')\n          .attr('transform', 'translate(0,' + ( availableHeight1 + margin.bottom + margin2.top) + ')')\n\n      var contextLinesWrap = g.select('.nv-context .nv-linesWrap')\n          .datum(data.filter(function(d) { return !d.disabled }))\n\n      d3.transition(contextLinesWrap).call(lines2);\n\n      //------------------------------------------------------------\n\n\n      /*\n      var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n          .datum(data.filter(function(d) { return !d.disabled }))\n\n      d3.transition(focusLinesWrap).call(lines);\n     */\n\n\n      //------------------------------------------------------------\n      // Setup Main (Focus) Axes\n\n      xAxis\n        .scale(x)\n        .ticks( availableWidth / 100 )\n        .tickSize(-availableHeight1, 0);\n\n      yAxis\n        .scale(y)\n        .ticks( availableHeight1 / 36 )\n        .tickSize( -availableWidth, 0);\n\n      g.select('.nv-focus .nv-x.nv-axis')\n          .attr('transform', 'translate(0,' + availableHeight1 + ')');\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Brush\n\n      brush\n        .x(x2)\n        .on('brush', function() {\n            //When brushing, turn off transitions because chart needs to change immediately.\n            var oldTransition = chart.transitionDuration();\n            chart.transitionDuration(0); \n            onBrush();\n            chart.transitionDuration(oldTransition);\n        });\n\n      if (brushExtent) brush.extent(brushExtent);\n\n      var brushBG = g.select('.nv-brushBackground').selectAll('g')\n          .data([brushExtent || brush.extent()])\n\n      var brushBGenter = brushBG.enter()\n          .append('g');\n\n      brushBGenter.append('rect')\n          .attr('class', 'left')\n          .attr('x', 0)\n          .attr('y', 0)\n          .attr('height', availableHeight2);\n\n      brushBGenter.append('rect')\n          .attr('class', 'right')\n          .attr('x', 0)\n          .attr('y', 0)\n          .attr('height', availableHeight2);\n\n      var gBrush = g.select('.nv-x.nv-brush')\n          .call(brush);\n      gBrush.selectAll('rect')\n          //.attr('y', -5)\n          .attr('height', availableHeight2);\n      gBrush.selectAll('.resize').append('path').attr('d', resizePath);\n\n      onBrush();\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Secondary (Context) Axes\n\n      x2Axis\n        .scale(x2)\n        .ticks( availableWidth / 100 )\n        .tickSize(-availableHeight2, 0);\n\n      g.select('.nv-context .nv-x.nv-axis')\n          .attr('transform', 'translate(0,' + y2.range()[0] + ')');\n      d3.transition(g.select('.nv-context .nv-x.nv-axis'))\n          .call(x2Axis);\n\n\n      y2Axis\n        .scale(y2)\n        .ticks( availableHeight2 / 36 )\n        .tickSize( -availableWidth, 0);\n\n      d3.transition(g.select('.nv-context .nv-y.nv-axis'))\n          .call(y2Axis);\n\n      g.select('.nv-context .nv-x.nv-axis')\n          .attr('transform', 'translate(0,' + y2.range()[0] + ')');\n\n      //------------------------------------------------------------\n\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n      legend.dispatch.on('stateChange', function(newState) { \n        chart.update();\n      });\n\n      dispatch.on('tooltipShow', function(e) {\n        if (tooltips) showTooltip(e, that.parentNode);\n      });\n\n      //============================================================\n\n\n      //============================================================\n      // Functions\n      //------------------------------------------------------------\n\n      // Taken from crossfilter (http://square.github.com/crossfilter/)\n      function resizePath(d) {\n        var e = +(d == 'e'),\n            x = e ? 1 : -1,\n            y = availableHeight2 / 3;\n        return 'M' + (.5 * x) + ',' + y\n            + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n            + 'V' + (2 * y - 6)\n            + 'A6,6 0 0 ' + e + ' ' + (.5 * x) + ',' + (2 * y)\n            + 'Z'\n            + 'M' + (2.5 * x) + ',' + (y + 8)\n            + 'V' + (2 * y - 8)\n            + 'M' + (4.5 * x) + ',' + (y + 8)\n            + 'V' + (2 * y - 8);\n      }\n\n\n      function updateBrushBG() {\n        if (!brush.empty()) brush.extent(brushExtent);\n        brushBG\n            .data([brush.empty() ? x2.domain() : brushExtent])\n            .each(function(d,i) {\n              var leftWidth = x2(d[0]) - x.range()[0],\n                  rightWidth = x.range()[1] - x2(d[1]);\n              d3.select(this).select('.left')\n                .attr('width',  leftWidth < 0 ? 0 : leftWidth);\n\n              d3.select(this).select('.right')\n                .attr('x', x2(d[1]))\n                .attr('width', rightWidth < 0 ? 0 : rightWidth);\n            });\n      }\n\n\n      function onBrush() {\n        brushExtent = brush.empty() ? null : brush.extent();\n        var extent = brush.empty() ? x2.domain() : brush.extent();\n\n        //The brush extent cannot be less than one.  If it is, don't update the line chart.\n        if (Math.abs(extent[0] - extent[1]) <= 1) {\n          return;\n        }\n\n        dispatch.brush({extent: extent, brush: brush});\n\n\n        updateBrushBG();\n\n        // Update Main (Focus)\n        var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n            .datum(\n              data\n                .filter(function(d) { return !d.disabled })\n                .map(function(d,i) {\n                  return {\n                    key: d.key,\n                    values: d.values.filter(function(d,i) {\n                      return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n                    })\n                  }\n                })\n            );\n        focusLinesWrap.call(lines);\n\n\n        // Update Main (Focus) Axes\n        g.select('.nv-focus .nv-x.nv-axis')\n            .call(xAxis);\n        g.select('.nv-focus .nv-y.nv-axis')\n            .call(yAxis);\n      }\n\n      //============================================================\n\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  lines.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  lines.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.dispatch = dispatch;\n  chart.legend = legend;\n  chart.lines = lines;\n  chart.lines2 = lines2;\n  chart.xAxis = xAxis;\n  chart.yAxis = yAxis;\n  chart.x2Axis = x2Axis;\n  chart.y2Axis = y2Axis;\n\n  d3.rebind(chart, lines, 'defined', 'isArea', 'size', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi', 'id');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  chart.x = function(_) {\n    if (!arguments.length) return lines.x;\n    lines.x(_);\n    lines2.x(_);\n    return chart;\n  };\n\n  chart.y = function(_) {\n    if (!arguments.length) return lines.y;\n    lines.y(_);\n    lines2.y(_);\n    return chart;\n  };\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.margin2 = function(_) {\n    if (!arguments.length) return margin2;\n    margin2 = _;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.height2 = function(_) {\n    if (!arguments.length) return height2;\n    height2 = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color =nv.utils.getColor(_);\n    legend.color(color);\n    return chart;\n  };\n\n  chart.showLegend = function(_) {\n    if (!arguments.length) return showLegend;\n    showLegend = _;\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.interpolate = function(_) {\n    if (!arguments.length) return lines.interpolate();\n    lines.interpolate(_);\n    lines2.interpolate(_);\n    return chart;\n  };\n\n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  // Chart has multiple similar Axes, to prevent code duplication, probably need to link all axis functions manually like below\n  chart.xTickFormat = function(_) {\n    if (!arguments.length) return xAxis.tickFormat();\n    xAxis.tickFormat(_);\n    x2Axis.tickFormat(_);\n    return chart;\n  };\n\n  chart.yTickFormat = function(_) {\n    if (!arguments.length) return yAxis.tickFormat();\n    yAxis.tickFormat(_);\n    y2Axis.tickFormat(_);\n    return chart;\n  };\n  \n  chart.brushExtent = function(_) {\n    if (!arguments.length) return brushExtent;\n    brushExtent = _;\n    return chart;\n  };\n\n  chart.transitionDuration = function(_) {\n    if (!arguments.length) return transitionDuration;\n    transitionDuration = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.linePlusBarWithFocusChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var lines = nv.models.line()\n    , lines2 = nv.models.line()\n    , bars = nv.models.historicalBar()\n    , bars2 = nv.models.historicalBar()\n    , xAxis = nv.models.axis()\n    , x2Axis = nv.models.axis()\n    , y1Axis = nv.models.axis()\n    , y2Axis = nv.models.axis()\n    , y3Axis = nv.models.axis()\n    , y4Axis = nv.models.axis()\n    , legend = nv.models.legend()\n    , brush = d3.svg.brush()\n    ;\n\n  var margin = {top: 30, right: 30, bottom: 30, left: 60}\n    , margin2 = {top: 0, right: 30, bottom: 20, left: 60}\n    , width = null\n    , height = null\n    , height2 = 100\n    , getX = function(d) { return d.x }\n    , getY = function(d) { return d.y }\n    , color = nv.utils.defaultColor()\n    , showLegend = true\n    , extent\n    , brushExtent = null\n    , tooltips = true\n    , tooltip = function(key, x, y, e, graph) {\n        return '<h3>' + key + '</h3>' +\n               '<p>' +  y + ' at ' + x + '</p>';\n      }\n    , x\n    , x2\n    , y1\n    , y2\n    , y3\n    , y4\n    , noData = \"No Data Available.\"\n    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'brush')\n    , transitionDuration = 0\n    ;\n\n  lines\n    .clipEdge(true)\n    ;\n  lines2\n    .interactive(false)\n    ;\n  xAxis\n    .orient('bottom')\n    .tickPadding(5)\n    ;\n  y1Axis\n    .orient('left')\n    ;\n  y2Axis\n    .orient('right')\n    ;\n  x2Axis\n    .orient('bottom')\n    .tickPadding(5)\n    ;\n  y3Axis\n    .orient('left')\n    ;\n  y4Axis\n    .orient('right')\n    ;\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var showTooltip = function(e, offsetElement) {\n    if (extent) {\n        e.pointIndex += Math.ceil(extent[0]);\n    }\n    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n        x = xAxis.tickFormat()(lines.x()(e.point, e.pointIndex)),\n        y = (e.series.bar ? y1Axis : y2Axis).tickFormat()(lines.y()(e.point, e.pointIndex)),\n        content = tooltip(e.series.key, x, y, e, chart);\n\n    nv.tooltip.show([left, top], content, e.value < 0 ? 'n' : 's', null, offsetElement);\n  };\n\n  //------------------------------------------------------------\n\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this),\n          that = this;\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight1 = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom - height2,\n          availableHeight2 = height2 - margin2.top - margin2.bottom;\n\n      chart.update = function() { container.call(chart); };\n      chart.container = this;\n\n\n      //------------------------------------------------------------\n      // Display No Data message if there's nothing to show.\n\n      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', margin.top + availableHeight1 / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      var dataBars = data.filter(function(d) { return !d.disabled && d.bar });\n      var dataLines = data.filter(function(d) { return !d.bar }); // removed the !d.disabled clause here to fix Issue #240\n\n      x = bars.xScale();\n      x2 = x2Axis.scale();\n      y1 = bars.yScale();\n      y2 = lines.yScale();\n      y3 = bars2.yScale();\n      y4 = lines2.yScale();\n\n      var series1 = data\n        .filter(function(d) { return !d.disabled && d.bar })\n        .map(function(d) {\n          return d.values.map(function(d,i) {\n            return { x: getX(d,i), y: getY(d,i) }\n          })\n        });\n\n      var series2 = data\n        .filter(function(d) { return !d.disabled && !d.bar })\n        .map(function(d) {\n          return d.values.map(function(d,i) {\n            return { x: getX(d,i), y: getY(d,i) }\n          })\n        });\n\n      x   .range([0, availableWidth]);\n      \n      x2  .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x } ))\n          .range([0, availableWidth]);\n\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-linePlusBar').data([data]);\n      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-linePlusBar').append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-legendWrap');\n      \n      var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n      focusEnter.append('g').attr('class', 'nv-x nv-axis');\n      focusEnter.append('g').attr('class', 'nv-y1 nv-axis');\n      focusEnter.append('g').attr('class', 'nv-y2 nv-axis');\n      focusEnter.append('g').attr('class', 'nv-barsWrap');\n      focusEnter.append('g').attr('class', 'nv-linesWrap');\n\n      var contextEnter = gEnter.append('g').attr('class', 'nv-context');\n      contextEnter.append('g').attr('class', 'nv-x nv-axis');\n      contextEnter.append('g').attr('class', 'nv-y1 nv-axis');\n      contextEnter.append('g').attr('class', 'nv-y2 nv-axis');\n      contextEnter.append('g').attr('class', 'nv-barsWrap');\n      contextEnter.append('g').attr('class', 'nv-linesWrap');\n      contextEnter.append('g').attr('class', 'nv-brushBackground');\n      contextEnter.append('g').attr('class', 'nv-x nv-brush');\n\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Legend\n\n      if (showLegend) {\n        legend.width( availableWidth / 2 );\n\n        g.select('.nv-legendWrap')\n            .datum(data.map(function(series) {\n              series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n              series.key = series.originalKey + (series.bar ? ' (left axis)' : ' (right axis)');\n              return series;\n            }))\n          .call(legend);\n\n        if ( margin.top != legend.height()) {\n          margin.top = legend.height();\n          availableHeight1 = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom - height2;\n        }\n\n        g.select('.nv-legendWrap')\n            .attr('transform', 'translate(' + ( availableWidth / 2 ) + ',' + (-margin.top) +')');\n      }\n\n      //------------------------------------------------------------\n\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\n      //------------------------------------------------------------\n      // Context Components\n\n      bars2\n        .width(availableWidth)\n        .height(availableHeight2)\n        .color(data.map(function(d,i) {\n          return d.color || color(d, i);\n        }).filter(function(d,i) { return !data[i].disabled && data[i].bar }));\n\n      lines2\n        .width(availableWidth)\n        .height(availableHeight2)\n        .color(data.map(function(d,i) {\n          return d.color || color(d, i);\n        }).filter(function(d,i) { return !data[i].disabled && !data[i].bar }));\n        \n      var bars2Wrap = g.select('.nv-context .nv-barsWrap')\n          .datum(dataBars.length ? dataBars : [{values:[]}]);\n\n      var lines2Wrap = g.select('.nv-context .nv-linesWrap')\n          .datum(!dataLines[0].disabled ? dataLines : [{values:[]}]);\n          \n      g.select('.nv-context')\n          .attr('transform', 'translate(0,' + ( availableHeight1 + margin.bottom + margin2.top) + ')')\n\n      bars2Wrap.call(bars2);\n      lines2Wrap.call(lines2);\n\n      //------------------------------------------------------------\n\n\n\n      //------------------------------------------------------------\n      // Setup Brush\n\n      brush\n        .x(x2)\n        .on('brush', onBrush);\n\n      if (brushExtent) brush.extent(brushExtent);\n\n      var brushBG = g.select('.nv-brushBackground').selectAll('g')\n          .data([brushExtent || brush.extent()])\n\n      var brushBGenter = brushBG.enter()\n          .append('g');\n\n      brushBGenter.append('rect')\n          .attr('class', 'left')\n          .attr('x', 0)\n          .attr('y', 0)\n          .attr('height', availableHeight2);\n\n      brushBGenter.append('rect')\n          .attr('class', 'right')\n          .attr('x', 0)\n          .attr('y', 0)\n          .attr('height', availableHeight2);\n\n      var gBrush = g.select('.nv-x.nv-brush')\n          .call(brush);\n      gBrush.selectAll('rect')\n          //.attr('y', -5)\n          .attr('height', availableHeight2);\n      gBrush.selectAll('.resize').append('path').attr('d', resizePath);\n\n      //------------------------------------------------------------\n\n      //------------------------------------------------------------\n      // Setup Secondary (Context) Axes\n\n      x2Axis\n        .ticks( availableWidth / 100 )\n        .tickSize(-availableHeight2, 0);\n\n      g.select('.nv-context .nv-x.nv-axis')\n          .attr('transform', 'translate(0,' + y3.range()[0] + ')');\n      g.select('.nv-context .nv-x.nv-axis')\n          .call(x2Axis);\n\n\n      y3Axis\n        .scale(y3)\n        .ticks( availableHeight2 / 36 )\n        .tickSize( -availableWidth, 0);\n\n      g.select('.nv-context .nv-y1.nv-axis')\n          .style('opacity', dataBars.length ? 1 : 0)\n          .attr('transform', 'translate(0,' + x2.range()[0] + ')');\n          \n      g.select('.nv-context .nv-y1.nv-axis')\n          .call(y3Axis);\n          \n\n      y4Axis\n        .scale(y4)\n        .ticks( availableHeight2 / 36 )\n        .tickSize(dataBars.length ? 0 : -availableWidth, 0); // Show the y2 rules only if y1 has none\n\n      g.select('.nv-context .nv-y2.nv-axis')\n          .style('opacity', dataLines.length ? 1 : 0)\n          .attr('transform', 'translate(' + x2.range()[1] + ',0)');\n\n      g.select('.nv-context .nv-y2.nv-axis')\n          .call(y4Axis);\n          \n      //------------------------------------------------------------\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n      legend.dispatch.on('stateChange', function(newState) { \n        chart.update();\n      });\n\n      dispatch.on('tooltipShow', function(e) {\n        if (tooltips) showTooltip(e, that.parentNode);\n      });\n\n      //============================================================\n\n\n      //============================================================\n      // Functions\n      //------------------------------------------------------------\n\n      // Taken from crossfilter (http://square.github.com/crossfilter/)\n      function resizePath(d) {\n        var e = +(d == 'e'),\n            x = e ? 1 : -1,\n            y = availableHeight2 / 3;\n        return 'M' + (.5 * x) + ',' + y\n            + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n            + 'V' + (2 * y - 6)\n            + 'A6,6 0 0 ' + e + ' ' + (.5 * x) + ',' + (2 * y)\n            + 'Z'\n            + 'M' + (2.5 * x) + ',' + (y + 8)\n            + 'V' + (2 * y - 8)\n            + 'M' + (4.5 * x) + ',' + (y + 8)\n            + 'V' + (2 * y - 8);\n      }\n\n\n      function updateBrushBG() {\n        if (!brush.empty()) brush.extent(brushExtent);\n        brushBG\n            .data([brush.empty() ? x2.domain() : brushExtent])\n            .each(function(d,i) {\n              var leftWidth = x2(d[0]) - x2.range()[0],\n                  rightWidth = x2.range()[1] - x2(d[1]);\n              d3.select(this).select('.left')\n                .attr('width',  leftWidth < 0 ? 0 : leftWidth);\n\n              d3.select(this).select('.right')\n                .attr('x', x2(d[1]))\n                .attr('width', rightWidth < 0 ? 0 : rightWidth);\n            });\n      }\n\n\n      function onBrush() {\n        brushExtent = brush.empty() ? null : brush.extent();\n        extent = brush.empty() ? x2.domain() : brush.extent();\n\n\n        dispatch.brush({extent: extent, brush: brush});\n\n        updateBrushBG();\n\n\n        //------------------------------------------------------------\n        // Prepare Main (Focus) Bars and Lines\n        \n        bars\n        .width(availableWidth)\n        .height(availableHeight1)\n        .color(data.map(function(d,i) {\n          return d.color || color(d, i);\n        }).filter(function(d,i) { return !data[i].disabled && data[i].bar }));\n\n\n        lines\n        .width(availableWidth)\n        .height(availableHeight1)\n        .color(data.map(function(d,i) {\n          return d.color || color(d, i);\n        }).filter(function(d,i) { return !data[i].disabled && !data[i].bar }));\n\n        var focusBarsWrap = g.select('.nv-focus .nv-barsWrap')\n            .datum(!dataBars.length ? [{values:[]}] :\n              dataBars\n                .map(function(d,i) {\n                  return {\n                    key: d.key,\n                    values: d.values.filter(function(d,i) {\n                      return bars.x()(d,i) >= extent[0] && bars.x()(d,i) <= extent[1];\n                    })\n                  }\n                })\n            );\n        \n        var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n            .datum(dataLines[0].disabled ? [{values:[]}] :\n              dataLines\n                .map(function(d,i) {\n                  return {\n                    key: d.key,\n                    values: d.values.filter(function(d,i) {\n                      return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n                    })\n                  }\n                })\n             );\n                 \n        //------------------------------------------------------------\n        \n        \n        //------------------------------------------------------------\n        // Update Main (Focus) X Axis\n\n        if (dataBars.length) {\n            x = bars.xScale();\n        } else {\n            x = lines.xScale();\n        }\n        \n        xAxis\n        .scale(x)\n        .ticks( availableWidth / 100 )\n        .tickSize(-availableHeight1, 0);\n\n        xAxis.domain([Math.ceil(extent[0]), Math.floor(extent[1])]);\n        \n        g.select('.nv-x.nv-axis')\n          .call(xAxis);\n        //------------------------------------------------------------\n        \n        \n        //------------------------------------------------------------\n        // Update Main (Focus) Bars and Lines\n\n        focusBarsWrap.call(bars);\n        focusLinesWrap.call(lines);\n        \n        //------------------------------------------------------------\n        \n          \n        //------------------------------------------------------------\n        // Setup and Update Main (Focus) Y Axes\n        \n        g.select('.nv-focus .nv-x.nv-axis')\n          .attr('transform', 'translate(0,' + y1.range()[0] + ')');\n\n\n        y1Axis\n        .scale(y1)\n        .ticks( availableHeight1 / 36 )\n        .tickSize(-availableWidth, 0);\n\n        g.select('.nv-focus .nv-y1.nv-axis')\n          .style('opacity', dataBars.length ? 1 : 0);\n\n\n        y2Axis\n        .scale(y2)\n        .ticks( availableHeight1 / 36 )\n        .tickSize(dataBars.length ? 0 : -availableWidth, 0); // Show the y2 rules only if y1 has none\n\n        g.select('.nv-focus .nv-y2.nv-axis')\n          .style('opacity', dataLines.length ? 1 : 0)\n          .attr('transform', 'translate(' + x.range()[1] + ',0)');\n\n        g.select('.nv-focus .nv-y1.nv-axis')\n            .call(y1Axis);\n        g.select('.nv-focus .nv-y2.nv-axis')\n            .call(y2Axis);\n      }\n\n      //============================================================\n\n      onBrush();\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  lines.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  lines.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  bars.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  bars.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.dispatch = dispatch;\n  chart.legend = legend;\n  chart.lines = lines;\n  chart.lines2 = lines2;\n  chart.bars = bars;\n  chart.bars2 = bars2;\n  chart.xAxis = xAxis;\n  chart.x2Axis = x2Axis;\n  chart.y1Axis = y1Axis;\n  chart.y2Axis = y2Axis;\n  chart.y3Axis = y3Axis;\n  chart.y4Axis = y4Axis;\n\n  d3.rebind(chart, lines, 'defined', 'size', 'clipVoronoi', 'interpolate');\n  //TODO: consider rebinding x, y and some other stuff, and simply do soemthign lile bars.x(lines.x()), etc.\n  //d3.rebind(chart, lines, 'x', 'y', 'size', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi', 'id');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  chart.x = function(_) {\n    if (!arguments.length) return getX;\n    getX = _;\n    lines.x(_);\n    bars.x(_);\n    return chart;\n  };\n\n  chart.y = function(_) {\n    if (!arguments.length) return getY;\n    getY = _;\n    lines.y(_);\n    bars.y(_);\n    return chart;\n  };\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    legend.color(color);\n    return chart;\n  };\n\n  chart.showLegend = function(_) {\n    if (!arguments.length) return showLegend;\n    showLegend = _;\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  chart.brushExtent = function(_) {\n    if (!arguments.length) return brushExtent;\n    brushExtent = _;\n    return chart;\n  };\n\n\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.multiBar = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n    , width = 960\n    , height = 500\n    , x = d3.scale.ordinal()\n    , y = d3.scale.linear()\n    , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n    , getX = function(d) { return d.x }\n    , getY = function(d) { return d.y }\n    , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n    , clipEdge = true\n    , stacked = false\n    , stackOffset = 'zero' // options include 'silhouette', 'wiggle', 'expand', 'zero', or a custom function\n    , color = nv.utils.defaultColor()\n    , hideable = false\n    , barColor = null // adding the ability to set the color for each rather than the whole group\n    , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled\n    , delay = 1200\n    , xDomain\n    , yDomain\n    , xRange\n    , yRange\n    , groupSpacing = 0.1\n    , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout')\n    ;\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var x0, y0 //used to store previous scales\n      ;\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var availableWidth = width - margin.left - margin.right,\n          availableHeight = height - margin.top - margin.bottom,\n          container = d3.select(this);\n\n      if(hideable && data.length) hideable = [{\n        values: data[0].values.map(function(d) {\n        return {\n          x: d.x,\n          y: 0,\n          series: d.series,\n          size: 0.01\n        };}\n      )}];\n\n      if (stacked)\n        data = d3.layout.stack()\n                 .offset(stackOffset)\n                 .values(function(d){ return d.values })\n                 .y(getY)\n                 (!data.length && hideable ? hideable : data);\n\n\n      //add series index to each data point for reference\n      data.forEach(function(series, i) {\n        series.values.forEach(function(point) {\n          point.series = i;\n        });\n      });\n\n\n      //------------------------------------------------------------\n      // HACK for negative value stacking\n      if (stacked)\n        data[0].values.map(function(d,i) {\n          var posBase = 0, negBase = 0;\n          data.map(function(d) {\n            var f = d.values[i]\n            f.size = Math.abs(f.y);\n            if (f.y<0)  {\n              f.y1 = negBase;\n              negBase = negBase - f.size;\n            } else\n            {\n              f.y1 = f.size + posBase;\n              posBase = posBase + f.size;\n            }\n          });\n        });\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      // remap and flatten the data for use in calculating the scales' domains\n      var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n            data.map(function(d) {\n              return d.values.map(function(d,i) {\n                return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1 }\n              })\n            });\n\n      x   .domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n          .rangeBands(xRange || [0, availableWidth], groupSpacing);\n\n      //y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return d.y + (stacked ? d.y1 : 0) }).concat(forceY)))\n      y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return stacked ? (d.y > 0 ? d.y1 : d.y1 + d.y ) : d.y }).concat(forceY)))\n          .range(yRange || [availableHeight, 0]);\n\n      // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n      if (x.domain()[0] === x.domain()[1])\n        x.domain()[0] ?\n            x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n          : x.domain([-1,1]);\n\n      if (y.domain()[0] === y.domain()[1])\n        y.domain()[0] ?\n            y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n          : y.domain([-1,1]);\n\n\n      x0 = x0 || x;\n      y0 = y0 || y;\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-multibar').data([data]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibar');\n      var defsEnter = wrapEnter.append('defs');\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g')\n\n      gEnter.append('g').attr('class', 'nv-groups');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      //------------------------------------------------------------\n\n\n\n      defsEnter.append('clipPath')\n          .attr('id', 'nv-edge-clip-' + id)\n        .append('rect');\n      wrap.select('#nv-edge-clip-' + id + ' rect')\n          .attr('width', availableWidth)\n          .attr('height', availableHeight);\n\n      g   .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n\n\n      var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n          .data(function(d) { return d }, function(d,i) { return i });\n      groups.enter().append('g')\n          .style('stroke-opacity', 1e-6)\n          .style('fill-opacity', 1e-6);\n      groups.exit()\n        .selectAll('rect.nv-bar')\n          .attr('y', function(d) { return stacked ? y0(d.y0) : y0(0) })\n          .attr('height', 0)\n          .remove();\n      groups\n          .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n          .classed('hover', function(d) { return d.hover })\n          .style('fill', function(d,i){ return color(d, i) })\n          .style('stroke', function(d,i){ return color(d, i) });\n      groups\n          .style('stroke-opacity', 1)\n          .style('fill-opacity', .75);\n\n\n      var bars = groups.selectAll('rect.nv-bar')\n          .data(function(d) { return (hideable && !data.length) ? hideable.values : d.values });\n\n      bars.exit().remove();\n\n\n      var barsEnter = bars.enter().append('rect')\n          .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n          .attr('x', function(d,i,j) {\n              return stacked ? 0 : (j * x.rangeBand() / data.length )\n          })\n          .attr('y', function(d) { return y0(stacked ? d.y0 : 0) })\n          .attr('height', 0)\n          .attr('width', x.rangeBand() / (stacked ? 1 : data.length) )\n          .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })\n          ;\n      bars\n          .style('fill', function(d,i,j){ return color(d, j, i);  })\n          .style('stroke', function(d,i,j){ return color(d, j, i); })\n          .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n            d3.select(this).classed('hover', true);\n            dispatch.elementMouseover({\n              value: getY(d,i),\n              point: d,\n              series: data[d.series],\n              pos: [x(getX(d,i)) + (x.rangeBand() * (stacked ? data.length / 2 : d.series + .5) / data.length), y(getY(d,i) + (stacked ? d.y0 : 0))],  // TODO: Figure out why the value appears to be shifted\n              pointIndex: i,\n              seriesIndex: d.series,\n              e: d3.event\n            });\n          })\n          .on('mouseout', function(d,i) {\n            d3.select(this).classed('hover', false);\n            dispatch.elementMouseout({\n              value: getY(d,i),\n              point: d,\n              series: data[d.series],\n              pointIndex: i,\n              seriesIndex: d.series,\n              e: d3.event\n            });\n          })\n          .on('click', function(d,i) {\n            dispatch.elementClick({\n              value: getY(d,i),\n              point: d,\n              series: data[d.series],\n              pos: [x(getX(d,i)) + (x.rangeBand() * (stacked ? data.length / 2 : d.series + .5) / data.length), y(getY(d,i) + (stacked ? d.y0 : 0))],  // TODO: Figure out why the value appears to be shifted\n              pointIndex: i,\n              seriesIndex: d.series,\n              e: d3.event\n            });\n            d3.event.stopPropagation();\n          })\n          .on('dblclick', function(d,i) {\n            dispatch.elementDblClick({\n              value: getY(d,i),\n              point: d,\n              series: data[d.series],\n              pos: [x(getX(d,i)) + (x.rangeBand() * (stacked ? data.length / 2 : d.series + .5) / data.length), y(getY(d,i) + (stacked ? d.y0 : 0))],  // TODO: Figure out why the value appears to be shifted\n              pointIndex: i,\n              seriesIndex: d.series,\n              e: d3.event\n            });\n            d3.event.stopPropagation();\n          });\n      bars\n          .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n          \n          .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })\n\n      if (barColor) {\n        if (!disabled) disabled = data.map(function() { return true });\n        bars\n          .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })\n          .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });\n      }\n\n\n      if (stacked)\n          bars\n            .attr('y', function(d,i) {\n\n              return y((stacked ? d.y1 : 0));\n            })\n            .attr('height', function(d,i) {\n              return Math.max(Math.abs(y(d.y + (stacked ? d.y0 : 0)) - y((stacked ? d.y0 : 0))),1);\n            })\n            .attr('x', function(d,i) {\n                  return stacked ? 0 : (d.series * x.rangeBand() / data.length )\n            })\n            .attr('width', x.rangeBand() / (stacked ? 1 : data.length) );\n      else\n          bars\n            .attr('x', function(d,i) {\n              return d.series * x.rangeBand() / data.length\n            })\n            .attr('width', x.rangeBand() / data.length)\n            .attr('y', function(d,i) {\n                return getY(d,i) < 0 ?\n                        y(0) :\n                        y(0) - y(getY(d,i)) < 1 ?\n                          y(0) - 1 :\n                        y(getY(d,i)) || 0;\n            })\n            .attr('height', function(d,i) {\n                return Math.max(Math.abs(y(getY(d,i)) - y(0)),1) || 0;\n            });\n\n\n\n      //store old scales for use in transitions on update\n      x0 = x.copy();\n      y0 = y.copy();\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  chart.dispatch = dispatch;\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.x = function(_) {\n    if (!arguments.length) return getX;\n    getX = _;\n    return chart;\n  };\n\n  chart.y = function(_) {\n    if (!arguments.length) return getY;\n    getY = _;\n    return chart;\n  };\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.xScale = function(_) {\n    if (!arguments.length) return x;\n    x = _;\n    return chart;\n  };\n\n  chart.yScale = function(_) {\n    if (!arguments.length) return y;\n    y = _;\n    return chart;\n  };\n\n  chart.xDomain = function(_) {\n    if (!arguments.length) return xDomain;\n    xDomain = _;\n    return chart;\n  };\n\n  chart.yDomain = function(_) {\n    if (!arguments.length) return yDomain;\n    yDomain = _;\n    return chart;\n  };\n\n  chart.xRange = function(_) {\n    if (!arguments.length) return xRange;\n    xRange = _;\n    return chart;\n  };\n\n  chart.yRange = function(_) {\n    if (!arguments.length) return yRange;\n    yRange = _;\n    return chart;\n  };\n\n  chart.forceY = function(_) {\n    if (!arguments.length) return forceY;\n    forceY = _;\n    return chart;\n  };\n\n  chart.stacked = function(_) {\n    if (!arguments.length) return stacked;\n    stacked = _;\n    return chart;\n  };\n\n  chart.stackOffset = function(_) {\n    if (!arguments.length) return stackOffset;\n    stackOffset = _;\n    return chart;\n  };\n\n  chart.clipEdge = function(_) {\n    if (!arguments.length) return clipEdge;\n    clipEdge = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    return chart;\n  };\n\n  chart.barColor = function(_) {\n    if (!arguments.length) return barColor;\n    barColor = nv.utils.getColor(_);\n    return chart;\n  };\n\n  chart.disabled = function(_) {\n    if (!arguments.length) return disabled;\n    disabled = _;\n    return chart;\n  };\n\n  chart.id = function(_) {\n    if (!arguments.length) return id;\n    id = _;\n    return chart;\n  };\n\n  chart.hideable = function(_) {\n    if (!arguments.length) return hideable;\n    hideable = _;\n    return chart;\n  };\n\n  chart.delay = function(_) {\n    if (!arguments.length) return delay;\n    delay = _;\n    return chart;\n  };\n\n  chart.groupSpacing = function(_) {\n    if (!arguments.length) return groupSpacing;\n    groupSpacing = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.multiBarChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var multibar = nv.models.multiBar()\n    , xAxis = nv.models.axis()\n    , yAxis = nv.models.axis()\n    , legend = nv.models.legend()\n    , controls = nv.models.legend()\n    ;\n\n  var margin = {top: 30, right: 20, bottom: 50, left: 60}\n    , width = null\n    , height = null\n    , color = nv.utils.defaultColor()\n    , showControls = true\n    , showLegend = true\n    , showXAxis = true\n    , showYAxis = true\n    , rightAlignYAxis = false\n    , reduceXTicks = true // if false a tick will show for every data point\n    , staggerLabels = false\n    , rotateLabels = 0\n    , tooltips = true\n    , tooltip = function(key, x, y, e, graph) {\n        return '<h3>' + key + '</h3>' +\n               '<p>' +  y + ' on ' + x + '</p>'\n      }\n    , x //can be accessed via chart.xScale()\n    , y //can be accessed via chart.yScale()\n    , state = { stacked: false }\n    , defaultState = null\n    , noData = \"No Data Available.\"\n    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n    , controlWidth = function() { return showControls ? 180 : 0 }\n    , transitionDuration = 0\n    ;\n\n  multibar\n    .stacked(false)\n    ;\n  xAxis\n    .orient('bottom')\n    .tickPadding(7)\n    .highlightZero(true)\n    .showMaxMin(false)\n    .tickFormat(function(d) { return d })\n    ;\n  yAxis\n    .orient((rightAlignYAxis) ? 'right' : 'left')\n    .tickFormat(d3.format(',.1f'))\n    ;\n\n  controls.updateState(false);\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var showTooltip = function(e, offsetElement) {\n    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n        x = xAxis.tickFormat()(multibar.x()(e.point, e.pointIndex)),\n        y = yAxis.tickFormat()(multibar.y()(e.point, e.pointIndex)),\n        content = tooltip(e.series.key, x, y, e, chart);\n\n    nv.tooltip.show([left, top], content, e.value < 0 ? 'n' : 's', null, offsetElement);\n  };\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this),\n          that = this;\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n\n      chart.update = function() { container.call(chart) };\n      chart.container = this;\n\n      //set state.disabled\n      state.disabled = data.map(function(d) { return !!d.disabled });\n\n      if (!defaultState) {\n        var key;\n        defaultState = {};\n        for (key in state) {\n          if (state[key] instanceof Array)\n            defaultState[key] = state[key].slice(0);\n          else\n            defaultState[key] = state[key];\n        }\n      }\n      //------------------------------------------------------------\n      // Display noData message if there's nothing to show.\n\n      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', margin.top + availableHeight / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x = multibar.xScale();\n      y = multibar.yScale();\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-multiBarWithLegend').data([data]);\n      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarWithLegend').append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-x nv-axis');\n      gEnter.append('g').attr('class', 'nv-y nv-axis');\n      gEnter.append('g').attr('class', 'nv-barsWrap');\n      gEnter.append('g').attr('class', 'nv-legendWrap');\n      gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Legend\n\n      if (showLegend) {\n        legend.width(availableWidth - controlWidth());\n\n        if (multibar.barColor())\n          data.forEach(function(series,i) {\n            series.color = d3.rgb('#ccc').darker(i * 1.5).toString();\n          })\n\n        g.select('.nv-legendWrap')\n            .datum(data)\n            .call(legend);\n\n        if ( margin.top != legend.height()) {\n          margin.top = legend.height();\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n        }\n\n        g.select('.nv-legendWrap')\n            .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Controls\n\n      if (showControls) {\n        var controlsData = [\n          { key: 'Grouped', disabled: multibar.stacked() },\n          { key: 'Stacked', disabled: !multibar.stacked() }\n        ];\n\n        controls.width(controlWidth()).color(['#444', '#444', '#444']);\n        g.select('.nv-controlsWrap')\n            .datum(controlsData)\n            .attr('transform', 'translate(0,' + (-margin.top) +')')\n            .call(controls);\n      }\n\n      //------------------------------------------------------------\n\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      if (rightAlignYAxis) {\n          g.select(\".nv-y.nv-axis\")\n              .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n      }\n\n      //------------------------------------------------------------\n      // Main Chart Component(s)\n\n      multibar\n        .disabled(data.map(function(series) { return series.disabled }))\n        .width(availableWidth)\n        .height(availableHeight)\n        .color(data.map(function(d,i) {\n          return d.color || color(d, i);\n        }).filter(function(d,i) { return !data[i].disabled }))\n\n\n      var barsWrap = g.select('.nv-barsWrap')\n          .datum(data.filter(function(d) { return !d.disabled }))\n\n      barsWrap.call(multibar);\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Axes\n\n      if (showXAxis) {\n          xAxis\n            .scale(x)\n            .ticks( availableWidth / 100 )\n            .tickSize(-availableHeight, 0);\n\n          g.select('.nv-x.nv-axis')\n              .attr('transform', 'translate(0,' + y.range()[0] + ')');\n          g.select('.nv-x.nv-axis')\n              .call(xAxis);\n\n          var xTicks = g.select('.nv-x.nv-axis > g').selectAll('g');\n\n          xTicks\n              .selectAll('line, text')\n              .style('opacity', 1)\n\n          if (staggerLabels) {\n              var getTranslate = function(x,y) {\n                  return \"translate(\" + x + \",\" + y + \")\";\n              };\n\n              var staggerUp = 5, staggerDown = 17;  //pixels to stagger by\n              // Issue #140\n              xTicks\n                .selectAll(\"text\")\n                .attr('transform', function(d,i,j) { \n                    return  getTranslate(0, (j % 2 == 0 ? staggerUp : staggerDown));\n                  });\n\n              var totalInBetweenTicks = d3.selectAll(\".nv-x.nv-axis .nv-wrap g g text\")[0].length;\n              g.selectAll(\".nv-x.nv-axis .nv-axisMaxMin text\")\n                .attr(\"transform\", function(d,i) {\n                    return getTranslate(0, (i === 0 || totalInBetweenTicks % 2 !== 0) ? staggerDown : staggerUp);\n                });\n          }\n\n          if (reduceXTicks)\n            xTicks\n              .filter(function(d,i) {\n                  return i % Math.ceil(data[0].values.length / (availableWidth / 100)) !== 0;\n                })\n              .selectAll('text, line')\n              .style('opacity', 0);\n\n          if(rotateLabels)\n            xTicks\n              .selectAll('.tick text')\n              .attr('transform', 'rotate(' + rotateLabels + ' 0,0)')\n              .style('text-anchor', rotateLabels > 0 ? 'start' : 'end');\n          \n          g.select('.nv-x.nv-axis').selectAll('g.nv-axisMaxMin text')\n              .style('opacity', 1);\n      }\n\n\n      if (showYAxis) {      \n          yAxis\n            .scale(y)\n            .ticks( availableHeight / 36 )\n            .tickSize( -availableWidth, 0);\n\n          g.select('.nv-y.nv-axis')\n              .call(yAxis);\n      }\n\n\n      //------------------------------------------------------------\n\n\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n      legend.dispatch.on('stateChange', function(newState) { \n        state = newState;\n        dispatch.stateChange(state);\n        chart.update();\n      });\n\n      controls.dispatch.on('legendClick', function(d,i) {\n        if (!d.disabled) return;\n        controlsData = controlsData.map(function(s) {\n          s.disabled = true;\n          return s;\n        });\n        d.disabled = false;\n\n        switch (d.key) {\n          case 'Grouped':\n            multibar.stacked(false);\n            break;\n          case 'Stacked':\n            multibar.stacked(true);\n            break;\n        }\n\n        state.stacked = multibar.stacked();\n        dispatch.stateChange(state);\n\n        chart.update();\n      });\n\n      dispatch.on('tooltipShow', function(e) {\n        if (tooltips) showTooltip(e, that.parentNode)\n      });\n\n      // Update chart from a state object passed to event handler\n      dispatch.on('changeState', function(e) {\n\n        if (typeof e.disabled !== 'undefined') {\n          data.forEach(function(series,i) {\n            series.disabled = e.disabled[i];\n          });\n\n          state.disabled = e.disabled;\n        }\n\n        if (typeof e.stacked !== 'undefined') {\n          multibar.stacked(e.stacked);\n          state.stacked = e.stacked;\n        }\n\n        chart.update();\n      });\n\n      //============================================================\n\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  multibar.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  multibar.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.dispatch = dispatch;\n  chart.multibar = multibar;\n  chart.legend = legend;\n  chart.xAxis = xAxis;\n  chart.yAxis = yAxis;\n\n  d3.rebind(chart, multibar, 'x', 'y', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'clipEdge',\n   'id', 'stacked', 'stackOffset', 'delay', 'barColor','groupSpacing');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    legend.color(color);\n    return chart;\n  };\n\n  chart.showControls = function(_) {\n    if (!arguments.length) return showControls;\n    showControls = _;\n    return chart;\n  };\n\n  chart.showLegend = function(_) {\n    if (!arguments.length) return showLegend;\n    showLegend = _;\n    return chart;\n  };\n\n  chart.showXAxis = function(_) {\n    if (!arguments.length) return showXAxis;\n    showXAxis = _;\n    return chart;\n  };\n\n  chart.showYAxis = function(_) {\n    if (!arguments.length) return showYAxis;\n    showYAxis = _;\n    return chart;\n  };\n\n  chart.rightAlignYAxis = function(_) {\n    if(!arguments.length) return rightAlignYAxis;\n    rightAlignYAxis = _;\n    yAxis.orient( (_) ? 'right' : 'left');\n    return chart;\n  };\n\n  chart.reduceXTicks= function(_) {\n    if (!arguments.length) return reduceXTicks;\n    reduceXTicks = _;\n    return chart;\n  };\n\n  chart.rotateLabels = function(_) {\n    if (!arguments.length) return rotateLabels;\n    rotateLabels = _;\n    return chart;\n  }\n\n  chart.staggerLabels = function(_) {\n    if (!arguments.length) return staggerLabels;\n    staggerLabels = _;\n    return chart;\n  };\n\n  chart.tooltip = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.state = function(_) {\n    if (!arguments.length) return state;\n    state = _;\n    return chart;\n  };\n\n  chart.defaultState = function(_) {\n    if (!arguments.length) return defaultState;\n    defaultState = _;\n    return chart;\n  };\n  \n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  chart.transitionDuration = function(_) {\n    if (!arguments.length) return transitionDuration;\n    transitionDuration = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.multiBarHorizontal = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n    , width = 960\n    , height = 500\n    , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n    , x = d3.scale.ordinal()\n    , y = d3.scale.linear()\n    , getX = function(d) { return d.x }\n    , getY = function(d) { return d.y }\n    , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n    , color = nv.utils.defaultColor()\n    , barColor = null // adding the ability to set the color for each rather than the whole group\n    , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled\n    , stacked = false\n    , showValues = false\n    , showBarLabels = false\n    , valuePadding = 60\n    , valueFormat = d3.format(',.2f')\n    , delay = 1200\n    , xDomain\n    , yDomain\n    , xRange\n    , yRange\n    , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout')\n    ;\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var x0, y0 //used to store previous scales\n      ;\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var availableWidth = width - margin.left - margin.right,\n          availableHeight = height - margin.top - margin.bottom,\n          container = d3.select(this);\n\n\n      if (stacked)\n        data = d3.layout.stack()\n                 .offset('zero')\n                 .values(function(d){ return d.values })\n                 .y(getY)\n                 (data);\n\n\n      //add series index to each data point for reference\n      data.forEach(function(series, i) {\n        series.values.forEach(function(point) {\n          point.series = i;\n        });\n      });\n\n\n\n      //------------------------------------------------------------\n      // HACK for negative value stacking\n      if (stacked)\n        data[0].values.map(function(d,i) {\n          var posBase = 0, negBase = 0;\n          data.map(function(d) {\n            var f = d.values[i]\n            f.size = Math.abs(f.y);\n            if (f.y<0)  {\n              f.y1 = negBase - f.size;\n              negBase = negBase - f.size;\n            } else\n            {\n              f.y1 = posBase;\n              posBase = posBase + f.size;\n            }\n          });\n        });\n\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      // remap and flatten the data for use in calculating the scales' domains\n      var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n            data.map(function(d) {\n              return d.values.map(function(d,i) {\n                return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1 }\n              })\n            });\n\n      x   .domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n          .rangeBands(xRange || [0, availableHeight], .1);\n\n      //y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return d.y + (stacked ? d.y0 : 0) }).concat(forceY)))\n      y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return stacked ? (d.y > 0 ? d.y1 + d.y : d.y1 ) : d.y }).concat(forceY)))\n\n      if (showValues && !stacked)\n        y.range(yRange || [(y.domain()[0] < 0 ? valuePadding : 0), availableWidth - (y.domain()[1] > 0 ? valuePadding : 0) ]);\n      else\n        y.range(yRange || [0, availableWidth]);\n\n      x0 = x0 || x;\n      y0 = y0 || d3.scale.linear().domain(y.domain()).range([y(0),y(0)]);\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = d3.select(this).selectAll('g.nv-wrap.nv-multibarHorizontal').data([data]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibarHorizontal');\n      var defsEnter = wrapEnter.append('defs');\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-groups');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      //------------------------------------------------------------\n\n\n\n      var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n          .data(function(d) { return d }, function(d,i) { return i });\n      groups.enter().append('g')\n          .style('stroke-opacity', 1e-6)\n          .style('fill-opacity', 1e-6);\n      groups.exit()\n          .style('stroke-opacity', 1e-6)\n          .style('fill-opacity', 1e-6)\n          .remove();\n      groups\n          .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n          .classed('hover', function(d) { return d.hover })\n          .style('fill', function(d,i){ return color(d, i) })\n          .style('stroke', function(d,i){ return color(d, i) });\n      groups\n          .style('stroke-opacity', 1)\n          .style('fill-opacity', .75);\n\n\n      var bars = groups.selectAll('g.nv-bar')\n          .data(function(d) { return d.values });\n\n      bars.exit().remove();\n\n\n      var barsEnter = bars.enter().append('g')\n          .attr('transform', function(d,i,j) {\n              return 'translate(' + y0(stacked ? d.y0 : 0) + ',' + (stacked ? 0 : (j * x.rangeBand() / data.length ) + x(getX(d,i))) + ')'\n          });\n\n      barsEnter.append('rect')\n          .attr('width', 0)\n          .attr('height', x.rangeBand() / (stacked ? 1 : data.length) )\n\n      bars\n          .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n            d3.select(this).classed('hover', true);\n            dispatch.elementMouseover({\n              value: getY(d,i),\n              point: d,\n              series: data[d.series],\n              pos: [ y(getY(d,i) + (stacked ? d.y0 : 0)), x(getX(d,i)) + (x.rangeBand() * (stacked ? data.length / 2 : d.series + .5) / data.length) ],\n              pointIndex: i,\n              seriesIndex: d.series,\n              e: d3.event\n            });\n          })\n          .on('mouseout', function(d,i) {\n            d3.select(this).classed('hover', false);\n            dispatch.elementMouseout({\n              value: getY(d,i),\n              point: d,\n              series: data[d.series],\n              pointIndex: i,\n              seriesIndex: d.series,\n              e: d3.event\n            });\n          })\n          .on('click', function(d,i) {\n            dispatch.elementClick({\n              value: getY(d,i),\n              point: d,\n              series: data[d.series],\n              pos: [x(getX(d,i)) + (x.rangeBand() * (stacked ? data.length / 2 : d.series + .5) / data.length), y(getY(d,i) + (stacked ? d.y0 : 0))],  // TODO: Figure out why the value appears to be shifted\n              pointIndex: i,\n              seriesIndex: d.series,\n              e: d3.event\n            });\n            d3.event.stopPropagation();\n          })\n          .on('dblclick', function(d,i) {\n            dispatch.elementDblClick({\n              value: getY(d,i),\n              point: d,\n              series: data[d.series],\n              pos: [x(getX(d,i)) + (x.rangeBand() * (stacked ? data.length / 2 : d.series + .5) / data.length), y(getY(d,i) + (stacked ? d.y0 : 0))],  // TODO: Figure out why the value appears to be shifted\n              pointIndex: i,\n              seriesIndex: d.series,\n              e: d3.event\n            });\n            d3.event.stopPropagation();\n          });\n\n\n      barsEnter.append('text');\n\n      if (showValues && !stacked) {\n        bars.select('text')\n            .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'end' : 'start' })\n            .attr('y', x.rangeBand() / (data.length * 2))\n            .attr('dy', '.32em')\n            .text(function(d,i) { return valueFormat(getY(d,i)) })\n        bars\n          .select('text')\n            .attr('x', function(d,i) { return getY(d,i) < 0 ? -4 : y(getY(d,i)) - y(0) + 4 })\n      } else {\n        bars.selectAll('text').text('');\n      }\n\n      if (showBarLabels && !stacked) {\n        barsEnter.append('text').classed('nv-bar-label',true);\n        bars.select('text.nv-bar-label')\n            .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'start' : 'end' })\n            .attr('y', x.rangeBand() / (data.length * 2))\n            .attr('dy', '.32em')\n            .text(function(d,i) { return getX(d,i) });\n        bars\n          .select('text.nv-bar-label')\n            .attr('x', function(d,i) { return getY(d,i) < 0 ? y(0) - y(getY(d,i)) + 4 : -4 });\n      }\n      else {\n        bars.selectAll('text.nv-bar-label').text('');\n      }\n\n      bars\n          .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n\n      if (barColor) {\n        if (!disabled) disabled = data.map(function() { return true });\n        bars\n          .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })\n          .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });\n      }\n\n      if (stacked)\n        bars\n            .attr('transform', function(d,i) {\n              return 'translate(' + y(d.y1) + ',' + x(getX(d,i)) + ')'\n            })\n          .select('rect')\n            .attr('width', function(d,i) {\n              return Math.abs(y(getY(d,i) + d.y0) - y(d.y0))\n            })\n            .attr('height', x.rangeBand() );\n      else\n        bars\n            .attr('transform', function(d,i) {\n              //TODO: stacked must be all positive or all negative, not both?\n              return 'translate(' +\n              (getY(d,i) < 0 ? y(getY(d,i)) : y(0))\n              + ',' +\n              (d.series * x.rangeBand() / data.length\n              +\n              x(getX(d,i)) )\n              + ')'\n            })\n          .select('rect')\n            .attr('height', x.rangeBand() / data.length )\n            .attr('width', function(d,i) {\n              return Math.max(Math.abs(y(getY(d,i)) - y(0)),1)\n            });\n\n\n      //store old scales for use in transitions on update\n      x0 = x.copy();\n      y0 = y.copy();\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  chart.dispatch = dispatch;\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.x = function(_) {\n    if (!arguments.length) return getX;\n    getX = _;\n    return chart;\n  };\n\n  chart.y = function(_) {\n    if (!arguments.length) return getY;\n    getY = _;\n    return chart;\n  };\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.xScale = function(_) {\n    if (!arguments.length) return x;\n    x = _;\n    return chart;\n  };\n\n  chart.yScale = function(_) {\n    if (!arguments.length) return y;\n    y = _;\n    return chart;\n  };\n\n  chart.xDomain = function(_) {\n    if (!arguments.length) return xDomain;\n    xDomain = _;\n    return chart;\n  };\n\n  chart.yDomain = function(_) {\n    if (!arguments.length) return yDomain;\n    yDomain = _;\n    return chart;\n  };\n\n  chart.xRange = function(_) {\n    if (!arguments.length) return xRange;\n    xRange = _;\n    return chart;\n  };\n\n  chart.yRange = function(_) {\n    if (!arguments.length) return yRange;\n    yRange = _;\n    return chart;\n  };\n\n  chart.forceY = function(_) {\n    if (!arguments.length) return forceY;\n    forceY = _;\n    return chart;\n  };\n\n  chart.stacked = function(_) {\n    if (!arguments.length) return stacked;\n    stacked = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    return chart;\n  };\n\n  chart.barColor = function(_) {\n    if (!arguments.length) return barColor;\n    barColor = nv.utils.getColor(_);\n    return chart;\n  };\n\n  chart.disabled = function(_) {\n    if (!arguments.length) return disabled;\n    disabled = _;\n    return chart;\n  };\n\n  chart.id = function(_) {\n    if (!arguments.length) return id;\n    id = _;\n    return chart;\n  };\n\n  chart.delay = function(_) {\n    if (!arguments.length) return delay;\n    delay = _;\n    return chart;\n  };\n\n  chart.showValues = function(_) {\n    if (!arguments.length) return showValues;\n    showValues = _;\n    return chart;\n  };\n\n  chart.showBarLabels = function(_) {\n    if (!arguments.length) return showBarLabels;\n    showBarLabels = _;\n    return chart;\n  };\n\n\n  chart.valueFormat= function(_) {\n    if (!arguments.length) return valueFormat;\n    valueFormat = _;\n    return chart;\n  };\n\n  chart.valuePadding = function(_) {\n    if (!arguments.length) return valuePadding;\n    valuePadding = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.multiBarHorizontalChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var multibar = nv.models.multiBarHorizontal()\n    , xAxis = nv.models.axis()\n    , yAxis = nv.models.axis()\n    , legend = nv.models.legend().height(30)\n    , controls = nv.models.legend().height(30)\n    ;\n\n  var margin = {top: 30, right: 20, bottom: 50, left: 60}\n    , width = null\n    , height = null\n    , color = nv.utils.defaultColor()\n    , showControls = true\n    , showLegend = true\n    , showXAxis = true\n    , showYAxis = true\n    , stacked = false\n    , tooltips = true\n    , tooltip = function(key, x, y, e, graph) {\n        return '<h3>' + key + ' - ' + x + '</h3>' +\n               '<p>' +  y + '</p>'\n      }\n    , x //can be accessed via chart.xScale()\n    , y //can be accessed via chart.yScale()\n    , state = { stacked: stacked }\n    , defaultState = null\n    , noData = 'No Data Available.'\n    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n    , controlWidth = function() { return showControls ? 180 : 0 }\n    , transitionDuration = 0\n    ;\n\n  multibar\n    .stacked(stacked)\n    ;\n  xAxis\n    .orient('left')\n    .tickPadding(5)\n    .highlightZero(false)\n    .showMaxMin(false)\n    .tickFormat(function(d) { return d })\n    ;\n  yAxis\n    .orient('bottom')\n    .tickFormat(d3.format(',.1f'))\n    ;\n\n  controls.updateState(false);\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var showTooltip = function(e, offsetElement) {\n    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n        x = xAxis.tickFormat()(multibar.x()(e.point, e.pointIndex)),\n        y = yAxis.tickFormat()(multibar.y()(e.point, e.pointIndex)),\n        content = tooltip(e.series.key, x, y, e, chart);\n\n    nv.tooltip.show([left, top], content, e.value < 0 ? 'e' : 'w', null, offsetElement);\n  };\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this),\n          that = this;\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n\n      chart.update = function() { container.call(chart) };\n      chart.container = this;\n\n      //set state.disabled\n      state.disabled = data.map(function(d) { return !!d.disabled });\n\n      if (!defaultState) {\n        var key;\n        defaultState = {};\n        for (key in state) {\n          if (state[key] instanceof Array)\n            defaultState[key] = state[key].slice(0);\n          else\n            defaultState[key] = state[key];\n        }\n      }\n\n      //------------------------------------------------------------\n      // Display No Data message if there's nothing to show.\n\n      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', margin.top + availableHeight / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x = multibar.xScale();\n      y = multibar.yScale();\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-multiBarHorizontalChart').data([data]);\n      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarHorizontalChart').append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-x nv-axis');\n      gEnter.append('g').attr('class', 'nv-y nv-axis')\n            .append('g').attr('class', 'nv-zeroLine')\n            .append('line');\n      gEnter.append('g').attr('class', 'nv-barsWrap');\n      gEnter.append('g').attr('class', 'nv-legendWrap');\n      gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Legend\n\n      if (showLegend) {\n        legend.width(availableWidth - controlWidth());\n\n        if (multibar.barColor())\n          data.forEach(function(series,i) {\n            series.color = d3.rgb('#ccc').darker(i * 1.5).toString();\n          })\n\n        g.select('.nv-legendWrap')\n            .datum(data)\n            .call(legend);\n\n        if ( margin.top != legend.height()) {\n          margin.top = legend.height();\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n        }\n\n        g.select('.nv-legendWrap')\n            .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Controls\n\n      if (showControls) {\n        var controlsData = [\n          { key: 'Grouped', disabled: multibar.stacked() },\n          { key: 'Stacked', disabled: !multibar.stacked() }\n        ];\n\n        controls.width(controlWidth()).color(['#444', '#444', '#444']);\n        g.select('.nv-controlsWrap')\n            .datum(controlsData)\n            .attr('transform', 'translate(0,' + (-margin.top) +')')\n            .call(controls);\n      }\n\n      //------------------------------------------------------------\n\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\n      //------------------------------------------------------------\n      // Main Chart Component(s)\n\n      multibar\n        .disabled(data.map(function(series) { return series.disabled }))\n        .width(availableWidth)\n        .height(availableHeight)\n        .color(data.map(function(d,i) {\n          return d.color || color(d, i);\n        }).filter(function(d,i) { return !data[i].disabled }))\n\n\n      var barsWrap = g.select('.nv-barsWrap')\n          .datum(data.filter(function(d) { return !d.disabled }))\n\n      barsWrap.call(multibar);\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Axes\n\n      if (showXAxis) {\n          xAxis\n            .scale(x)\n            .ticks( availableHeight / 24 )\n            .tickSize(-availableWidth, 0);\n\n          g.select('.nv-x.nv-axis')\n              .call(xAxis);\n\n          var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n\n          xTicks\n              .selectAll('line, text');\n      }\n\n      if (showYAxis) {\n          yAxis\n            .scale(y)\n            .ticks( availableWidth / 100 )\n            .tickSize( -availableHeight, 0);\n\n          g.select('.nv-y.nv-axis')\n              .attr('transform', 'translate(0,' + availableHeight + ')');\n          g.select('.nv-y.nv-axis')\n              .call(yAxis);\n      }\n\n      // Zero line\n      g.select(\".nv-zeroLine line\")\n        .attr(\"x1\", y(0))\n        .attr(\"x2\", y(0))\n        .attr(\"y1\", 0)\n        .attr(\"y2\", -availableHeight)\n        ;\n\n      //------------------------------------------------------------\n\n\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n      legend.dispatch.on('stateChange', function(newState) {\n        state = newState;\n        dispatch.stateChange(state);\n        chart.update();\n      });\n\n      controls.dispatch.on('legendClick', function(d,i) {\n        if (!d.disabled) return;\n        controlsData = controlsData.map(function(s) {\n          s.disabled = true;\n          return s;\n        });\n        d.disabled = false;\n\n        switch (d.key) {\n          case 'Grouped':\n            multibar.stacked(false);\n            break;\n          case 'Stacked':\n            multibar.stacked(true);\n            break;\n        }\n\n        state.stacked = multibar.stacked();\n        dispatch.stateChange(state);\n\n        chart.update();\n      });\n\n      dispatch.on('tooltipShow', function(e) {\n        if (tooltips) showTooltip(e, that.parentNode);\n      });\n\n      // Update chart from a state object passed to event handler\n      dispatch.on('changeState', function(e) {\n\n        if (typeof e.disabled !== 'undefined') {\n          data.forEach(function(series,i) {\n            series.disabled = e.disabled[i];\n          });\n\n          state.disabled = e.disabled;\n        }\n\n        if (typeof e.stacked !== 'undefined') {\n          multibar.stacked(e.stacked);\n          state.stacked = e.stacked;\n        }\n\n        chart.update();\n      });\n      //============================================================\n\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  multibar.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  multibar.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.dispatch = dispatch;\n  chart.multibar = multibar;\n  chart.legend = legend;\n  chart.xAxis = xAxis;\n  chart.yAxis = yAxis;\n\n  d3.rebind(chart, multibar, 'x', 'y', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY',\n    'clipEdge', 'id', 'delay', 'showValues','showBarLabels', 'valueFormat', 'stacked', 'barColor');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    legend.color(color);\n    return chart;\n  };\n\n  chart.showControls = function(_) {\n    if (!arguments.length) return showControls;\n    showControls = _;\n    return chart;\n  };\n\n  chart.showLegend = function(_) {\n    if (!arguments.length) return showLegend;\n    showLegend = _;\n    return chart;\n  };\n\n  chart.showXAxis = function(_) {\n    if (!arguments.length) return showXAxis;\n    showXAxis = _;\n    return chart;\n  };\n\n  chart.showYAxis = function(_) {\n    if (!arguments.length) return showYAxis;\n    showYAxis = _;\n    return chart;\n  };\n\n  chart.tooltip = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.state = function(_) {\n    if (!arguments.length) return state;\n    state = _;\n    return chart;\n  };\n\n  chart.defaultState = function(_) {\n    if (!arguments.length) return defaultState;\n    defaultState = _;\n    return chart;\n  };\n\n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  chart.transitionDuration = function(_) {\n    if (!arguments.length) return transitionDuration;\n    transitionDuration = _;\n    return chart;\n  };\n  //============================================================\n\n\n  return chart;\n}\nnv.models.multiChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var margin = {top: 30, right: 20, bottom: 50, left: 60},\n      color = d3.scale.category20().range(),\n      width = null, \n      height = null,\n      showLegend = true,\n      tooltips = true,\n      tooltip = function(key, x, y, e, graph) {\n        return '<h3>' + key + '</h3>' +\n               '<p>' +  y + ' at ' + x + '</p>'\n      },\n      x,\n      y,\n      yDomain1,\n      yDomain2\n      ; //can be accessed via chart.lines.[x/y]Scale()\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var x = d3.scale.linear(),\n      yScale1 = d3.scale.linear(),\n      yScale2 = d3.scale.linear(),\n\n      lines1 = nv.models.line().yScale(yScale1),\n      lines2 = nv.models.line().yScale(yScale2),\n\n      bars1 = nv.models.multiBar().stacked(false).yScale(yScale1),\n      bars2 = nv.models.multiBar().stacked(false).yScale(yScale2),\n\n      stack1 = nv.models.stackedArea().yScale(yScale1),\n      stack2 = nv.models.stackedArea().yScale(yScale2),\n\n      xAxis = nv.models.axis().scale(x).orient('bottom').tickPadding(5),\n      yAxis1 = nv.models.axis().scale(yScale1).orient('left'),\n      yAxis2 = nv.models.axis().scale(yScale2).orient('right'),\n\n      legend = nv.models.legend().height(30),\n      dispatch = d3.dispatch('tooltipShow', 'tooltipHide');\n\n  var showTooltip = function(e, offsetElement) {\n    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n        x = xAxis.tickFormat()(lines1.x()(e.point, e.pointIndex)),\n        y = ((e.series.yAxis == 2) ? yAxis2 : yAxis1).tickFormat()(lines1.y()(e.point, e.pointIndex)),\n        content = tooltip(e.series.key, x, y, e, chart);\n\n    nv.tooltip.show([left, top], content, undefined, undefined, offsetElement.offsetParent);\n  };\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this),\n          that = this;\n\n      chart.update = function() { container.call(chart); };\n      chart.container = this;\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n\n      var dataLines1 = data.filter(function(d) {return !d.disabled && d.type == 'line' && d.yAxis == 1})\n      var dataLines2 = data.filter(function(d) {return !d.disabled && d.type == 'line' && d.yAxis == 2})\n      var dataBars1 = data.filter(function(d) {return !d.disabled && d.type == 'bar' && d.yAxis == 1})\n      var dataBars2 = data.filter(function(d) {return !d.disabled && d.type == 'bar' && d.yAxis == 2})\n      var dataStack1 = data.filter(function(d) {return !d.disabled && d.type == 'area' && d.yAxis == 1})\n      var dataStack2 = data.filter(function(d) {return !d.disabled && d.type == 'area' && d.yAxis == 2})\n\n      var series1 = data.filter(function(d) {return !d.disabled && d.yAxis == 1})\n            .map(function(d) {\n              return d.values.map(function(d,i) {\n                return { x: d.x, y: d.y }\n              })\n            })\n\n      var series2 = data.filter(function(d) {return !d.disabled && d.yAxis == 2})\n            .map(function(d) {\n              return d.values.map(function(d,i) {\n                return { x: d.x, y: d.y }\n              })\n            })\n\n      x   .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x } ))\n          .range([0, availableWidth]);\n\n      var wrap = container.selectAll('g.wrap.multiChart').data([data]);\n      var gEnter = wrap.enter().append('g').attr('class', 'wrap nvd3 multiChart').append('g');\n\n      gEnter.append('g').attr('class', 'x axis');\n      gEnter.append('g').attr('class', 'y1 axis');\n      gEnter.append('g').attr('class', 'y2 axis');\n      gEnter.append('g').attr('class', 'lines1Wrap');\n      gEnter.append('g').attr('class', 'lines2Wrap');\n      gEnter.append('g').attr('class', 'bars1Wrap');\n      gEnter.append('g').attr('class', 'bars2Wrap');\n      gEnter.append('g').attr('class', 'stack1Wrap');\n      gEnter.append('g').attr('class', 'stack2Wrap');\n      gEnter.append('g').attr('class', 'legendWrap');\n\n      var g = wrap.select('g');\n\n      if (showLegend) {\n        legend.width( availableWidth / 2 );\n\n        g.select('.legendWrap')\n            .datum(data.map(function(series) { \n              series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n              series.key = series.originalKey + (series.yAxis == 1 ? '' : ' (right axis)');\n              return series;\n            }))\n          .call(legend);\n\n        if ( margin.top != legend.height()) {\n          margin.top = legend.height();\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n        }\n\n        g.select('.legendWrap')\n            .attr('transform', 'translate(' + ( availableWidth / 2 ) + ',' + (-margin.top) +')');\n      }\n\n\n      lines1\n        .width(availableWidth)\n        .height(availableHeight)\n        .interpolate(\"monotone\")\n        .color(data.map(function(d,i) {\n          return d.color || color[i % color.length];\n        }).filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'line'}));\n\n      lines2\n        .width(availableWidth)\n        .height(availableHeight)\n        .interpolate(\"monotone\")\n        .color(data.map(function(d,i) {\n          return d.color || color[i % color.length];\n        }).filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'line'}));\n\n      bars1\n        .width(availableWidth)\n        .height(availableHeight)\n        .color(data.map(function(d,i) {\n          return d.color || color[i % color.length];\n        }).filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'bar'}));\n\n      bars2\n        .width(availableWidth)\n        .height(availableHeight)\n        .color(data.map(function(d,i) {\n          return d.color || color[i % color.length];\n        }).filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'bar'}));\n\n      stack1\n        .width(availableWidth)\n        .height(availableHeight)\n        .color(data.map(function(d,i) {\n          return d.color || color[i % color.length];\n        }).filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'area'}));\n\n      stack2\n        .width(availableWidth)\n        .height(availableHeight)\n        .color(data.map(function(d,i) {\n          return d.color || color[i % color.length];\n        }).filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'area'}));\n\n      g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\n      var lines1Wrap = g.select('.lines1Wrap')\n          .datum(dataLines1)\n      var bars1Wrap = g.select('.bars1Wrap')\n          .datum(dataBars1)\n      var stack1Wrap = g.select('.stack1Wrap')\n          .datum(dataStack1)\n\n      var lines2Wrap = g.select('.lines2Wrap')\n          .datum(dataLines2)\n      var bars2Wrap = g.select('.bars2Wrap')\n          .datum(dataBars2)\n      var stack2Wrap = g.select('.stack2Wrap')\n          .datum(dataStack2)\n\n      var extraValue1 = dataStack1.length ? dataStack1.map(function(a){return a.values}).reduce(function(a,b){\n        return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})\n      }).concat([{x:0, y:0}]) : []\n      var extraValue2 = dataStack2.length ? dataStack2.map(function(a){return a.values}).reduce(function(a,b){\n        return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})\n      }).concat([{x:0, y:0}]) : []\n\n      yScale1 .domain(yDomain1 || d3.extent(d3.merge(series1).concat(extraValue1), function(d) { return d.y } ))\n              .range([0, availableHeight])\n\n      yScale2 .domain(yDomain2 || d3.extent(d3.merge(series2).concat(extraValue2), function(d) { return d.y } ))\n              .range([0, availableHeight])\n\n      lines1.yDomain(yScale1.domain())\n      bars1.yDomain(yScale1.domain())\n      stack1.yDomain(yScale1.domain())\n\n      lines2.yDomain(yScale2.domain())\n      bars2.yDomain(yScale2.domain())\n      stack2.yDomain(yScale2.domain())\n\n      if(dataStack1.length){d3.transition(stack1Wrap).call(stack1);}\n      if(dataStack2.length){d3.transition(stack2Wrap).call(stack2);}\n\n      if(dataBars1.length){d3.transition(bars1Wrap).call(bars1);}\n      if(dataBars2.length){d3.transition(bars2Wrap).call(bars2);}\n\n      if(dataLines1.length){d3.transition(lines1Wrap).call(lines1);}\n      if(dataLines2.length){d3.transition(lines2Wrap).call(lines2);}\n      \n\n\n      xAxis\n        .ticks( availableWidth / 100 )\n        .tickSize(-availableHeight, 0);\n\n      g.select('.x.axis')\n          .attr('transform', 'translate(0,' + availableHeight + ')');\n      d3.transition(g.select('.x.axis'))\n          .call(xAxis);\n\n      yAxis1\n        .ticks( availableHeight / 36 )\n        .tickSize( -availableWidth, 0);\n\n\n      d3.transition(g.select('.y1.axis'))\n          .call(yAxis1);\n\n      yAxis2\n        .ticks( availableHeight / 36 )\n        .tickSize( -availableWidth, 0);\n\n      d3.transition(g.select('.y2.axis'))\n          .call(yAxis2);\n\n      g.select('.y2.axis')\n          .style('opacity', series2.length ? 1 : 0)\n          .attr('transform', 'translate(' + x.range()[1] + ',0)');\n\n      legend.dispatch.on('stateChange', function(newState) { \n        chart.update();\n      });\n     \n      dispatch.on('tooltipShow', function(e) {\n        if (tooltips) showTooltip(e, that.parentNode);\n      });\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  lines1.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  lines1.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  lines2.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  lines2.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  bars1.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  bars1.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  bars2.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  bars2.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  stack1.dispatch.on('tooltipShow', function(e) {\n    //disable tooltips when value ~= 0\n    //// TODO: consider removing points from voronoi that have 0 value instead of this hack\n    if (!Math.round(stack1.y()(e.point) * 100)) {  // 100 will not be good for very small numbers... will have to think about making this valu dynamic, based on data range\n      setTimeout(function() { d3.selectAll('.point.hover').classed('hover', false) }, 0);\n      return false;\n    }\n\n    e.pos = [e.pos[0] + margin.left, e.pos[1] + margin.top],\n    dispatch.tooltipShow(e);\n  });\n\n  stack1.dispatch.on('tooltipHide', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  stack2.dispatch.on('tooltipShow', function(e) {\n    //disable tooltips when value ~= 0\n    //// TODO: consider removing points from voronoi that have 0 value instead of this hack\n    if (!Math.round(stack2.y()(e.point) * 100)) {  // 100 will not be good for very small numbers... will have to think about making this valu dynamic, based on data range\n      setTimeout(function() { d3.selectAll('.point.hover').classed('hover', false) }, 0);\n      return false;\n    }\n\n    e.pos = [e.pos[0] + margin.left, e.pos[1] + margin.top],\n    dispatch.tooltipShow(e);\n  });\n\n  stack2.dispatch.on('tooltipHide', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n    lines1.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  lines1.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  lines2.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  lines2.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n\n\n  //============================================================\n  // Global getters and setters\n  //------------------------------------------------------------\n\n  chart.dispatch = dispatch;\n  chart.lines1 = lines1;\n  chart.lines2 = lines2;\n  chart.bars1 = bars1;\n  chart.bars2 = bars2;\n  chart.stack1 = stack1;\n  chart.stack2 = stack2;\n  chart.xAxis = xAxis;\n  chart.yAxis1 = yAxis1;\n  chart.yAxis2 = yAxis2;\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.x = function(_) {\n    if (!arguments.length) return getX;\n    getX = _;\n    lines1.x(_);\n    bars1.x(_);\n    return chart;\n  };\n\n  chart.y = function(_) {\n    if (!arguments.length) return getY;\n    getY = _;\n    lines1.y(_);\n    bars1.y(_);\n    return chart;\n  };\n\n  chart.yDomain1 = function(_) {\n    if (!arguments.length) return yDomain1;\n    yDomain1 = _;\n    return chart;\n  };\n\n  chart.yDomain2 = function(_) {\n    if (!arguments.length) return yDomain2;\n    yDomain2 = _;\n    return chart;\n  };\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin = _;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = _;\n    legend.color(_);\n    return chart;\n  };\n\n  chart.showLegend = function(_) {\n    if (!arguments.length) return showLegend;\n    showLegend = _;\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  return chart;\n}\n\n\nnv.models.ohlcBar = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n    , width = 960\n    , height = 500\n    , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n    , x = d3.scale.linear()\n    , y = d3.scale.linear()\n    , getX = function(d) { return d.x }\n    , getY = function(d) { return d.y }\n    , getOpen = function(d) { return d.open }\n    , getClose = function(d) { return d.close }\n    , getHigh = function(d) { return d.high }\n    , getLow = function(d) { return d.low }\n    , forceX = []\n    , forceY = []\n    , padData     = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n    , clipEdge = true\n    , color = nv.utils.defaultColor()\n    , xDomain\n    , yDomain\n    , xRange\n    , yRange\n    , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout')\n    ;\n\n  //============================================================\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  //TODO: store old scales for transitions\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var availableWidth = width - margin.left - margin.right,\n          availableHeight = height - margin.top - margin.bottom,\n          container = d3.select(this);\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x   .domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\n      if (padData)\n        x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n      else\n        x.range(xRange || [0, availableWidth]);\n\n      y   .domain(yDomain || [\n            d3.min(data[0].values.map(getLow).concat(forceY)),\n            d3.max(data[0].values.map(getHigh).concat(forceY))\n          ])\n          .range(yRange || [availableHeight, 0]);\n\n      // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n      if (x.domain()[0] === x.domain()[1])\n        x.domain()[0] ?\n            x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n          : x.domain([-1,1]);\n\n      if (y.domain()[0] === y.domain()[1])\n        y.domain()[0] ?\n            y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n          : y.domain([-1,1]);\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = d3.select(this).selectAll('g.nv-wrap.nv-ohlcBar').data([data[0].values]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-ohlcBar');\n      var defsEnter = wrapEnter.append('defs');\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-ticks');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      //------------------------------------------------------------\n\n\n      container\n          .on('click', function(d,i) {\n            dispatch.chartClick({\n                data: d,\n                index: i,\n                pos: d3.event,\n                id: id\n            });\n          });\n\n\n      defsEnter.append('clipPath')\n          .attr('id', 'nv-chart-clip-path-' + id)\n        .append('rect');\n\n      wrap.select('#nv-chart-clip-path-' + id + ' rect')\n          .attr('width', availableWidth)\n          .attr('height', availableHeight);\n\n      g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\n\n\n      var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick')\n          .data(function(d) { return d });\n\n      ticks.exit().remove();\n\n\n      var ticksEnter = ticks.enter().append('path')\n          .attr('class', function(d,i,j) { return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i })\n          .attr('d', function(d,i) {\n            var w = (availableWidth / data[0].values.length) * .9;\n            return 'm0,0l0,'\n                 + (y(getOpen(d,i))\n                 - y(getHigh(d,i)))\n                 + 'l'\n                 + (-w/2)\n                 + ',0l'\n                 + (w/2)\n                 + ',0l0,'\n                 + (y(getLow(d,i)) - y(getOpen(d,i)))\n                 + 'l0,'\n                 + (y(getClose(d,i))\n                 - y(getLow(d,i)))\n                 + 'l'\n                 + (w/2)\n                 + ',0l'\n                 + (-w/2)\n                 + ',0z';\n          })\n          .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })\n          //.attr('fill', function(d,i) { return color[0]; })\n          //.attr('stroke', function(d,i) { return color[0]; })\n          //.attr('x', 0 )\n          //.attr('y', function(d,i) {  return y(Math.max(0, getY(d,i))) })\n          //.attr('height', function(d,i) { return Math.abs(y(getY(d,i)) - y(0)) })\n          .on('mouseover', function(d,i) {\n            d3.select(this).classed('hover', true);\n            dispatch.elementMouseover({\n                point: d,\n                series: data[0],\n                pos: [x(getX(d,i)), y(getY(d,i))],  // TODO: Figure out why the value appears to be shifted\n                pointIndex: i,\n                seriesIndex: 0,\n                e: d3.event\n            });\n\n          })\n          .on('mouseout', function(d,i) {\n                d3.select(this).classed('hover', false);\n                dispatch.elementMouseout({\n                    point: d,\n                    series: data[0],\n                    pointIndex: i,\n                    seriesIndex: 0,\n                    e: d3.event\n                });\n          })\n          .on('click', function(d,i) {\n                dispatch.elementClick({\n                    //label: d[label],\n                    value: getY(d,i),\n                    data: d,\n                    index: i,\n                    pos: [x(getX(d,i)), y(getY(d,i))],\n                    e: d3.event,\n                    id: id\n                });\n              d3.event.stopPropagation();\n          })\n          .on('dblclick', function(d,i) {\n              dispatch.elementDblClick({\n                  //label: d[label],\n                  value: getY(d,i),\n                  data: d,\n                  index: i,\n                  pos: [x(getX(d,i)), y(getY(d,i))],\n                  e: d3.event,\n                  id: id\n              });\n              d3.event.stopPropagation();\n          });\n\n      ticks\n          .attr('class', function(d,i,j) { return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i })\n      d3.transition(ticks)\n          .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })\n          .attr('d', function(d,i) {\n            var w = (availableWidth / data[0].values.length) * .9;\n            return 'm0,0l0,'\n                 + (y(getOpen(d,i))\n                 - y(getHigh(d,i)))\n                 + 'l'\n                 + (-w/2)\n                 + ',0l'\n                 + (w/2)\n                 + ',0l0,'\n                 + (y(getLow(d,i))\n                 - y(getOpen(d,i)))\n                 + 'l0,'\n                 + (y(getClose(d,i))\n                 - y(getLow(d,i)))\n                 + 'l'\n                 + (w/2)\n                 + ',0l'\n                 + (-w/2)\n                 + ',0z';\n          })\n          //.attr('width', (availableWidth / data[0].values.length) * .9 )\n\n\n      //d3.transition(ticks)\n          //.attr('y', function(d,i) {  return y(Math.max(0, getY(d,i))) })\n          //.attr('height', function(d,i) { return Math.abs(y(getY(d,i)) - y(0)) });\n          //.order();  // not sure if this makes any sense for this model\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  chart.dispatch = dispatch;\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.x = function(_) {\n    if (!arguments.length) return getX;\n    getX = _;\n    return chart;\n  };\n\n  chart.y = function(_) {\n    if (!arguments.length) return getY;\n    getY = _;\n    return chart;\n  };\n\n  chart.open = function(_) {\n    if (!arguments.length) return getOpen;\n    getOpen = _;\n    return chart;\n  };\n\n  chart.close = function(_) {\n    if (!arguments.length) return getClose;\n    getClose = _;\n    return chart;\n  };\n\n  chart.high = function(_) {\n    if (!arguments.length) return getHigh;\n    getHigh = _;\n    return chart;\n  };\n\n  chart.low = function(_) {\n    if (!arguments.length) return getLow;\n    getLow = _;\n    return chart;\n  };\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.xScale = function(_) {\n    if (!arguments.length) return x;\n    x = _;\n    return chart;\n  };\n\n  chart.yScale = function(_) {\n    if (!arguments.length) return y;\n    y = _;\n    return chart;\n  };\n\n  chart.xDomain = function(_) {\n    if (!arguments.length) return xDomain;\n    xDomain = _;\n    return chart;\n  };\n\n  chart.yDomain = function(_) {\n    if (!arguments.length) return yDomain;\n    yDomain = _;\n    return chart;\n  };\n\n  chart.xRange = function(_) {\n    if (!arguments.length) return xRange;\n    xRange = _;\n    return chart;\n  };\n\n  chart.yRange = function(_) {\n    if (!arguments.length) return yRange;\n    yRange = _;\n    return chart;\n  };\n\n  chart.forceX = function(_) {\n    if (!arguments.length) return forceX;\n    forceX = _;\n    return chart;\n  };\n\n  chart.forceY = function(_) {\n    if (!arguments.length) return forceY;\n    forceY = _;\n    return chart;\n  };\n\n  chart.padData = function(_) {\n    if (!arguments.length) return padData;\n    padData = _;\n    return chart;\n  };\n\n  chart.clipEdge = function(_) {\n    if (!arguments.length) return clipEdge;\n    clipEdge = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    return chart;\n  };\n\n  chart.id = function(_) {\n    if (!arguments.length) return id;\n    id = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\nnv.models.pie = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n    , width = 500\n    , height = 500\n    , getX = function(d) { return d.x }\n    , getY = function(d) { return d.y }\n    , getDescription = function(d) { return d.description }\n    , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n    , color = nv.utils.defaultColor()\n    , valueFormat = d3.format(',.2f')\n    , showLabels = true\n    , pieLabelsOutside = true\n    , donutLabelsOutside = false\n    , labelType = \"key\"\n    , labelThreshold = .02 //if slice percentage is under this, don't show label\n    , donut = false\n    , labelSunbeamLayout = false\n    , startAngle = false\n    , endAngle = false\n    , donutRatio = 0.5\n    , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout')\n    ;\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var availableWidth = width - margin.left - margin.right,\n          availableHeight = height - margin.top - margin.bottom,\n          radius = Math.min(availableWidth, availableHeight) / 2,\n          arcRadius = radius-(radius / 5),\n          container = d3.select(this);\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      //var wrap = container.selectAll('.nv-wrap.nv-pie').data([data]);\n      var wrap = container.selectAll('.nv-wrap.nv-pie').data(data);\n      var wrapEnter = wrap.enter().append('g').attr('class','nvd3 nv-wrap nv-pie nv-chart-' + id);\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-pie');\n      gEnter.append('g').attr('class', 'nv-pieLabels');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n      g.select('.nv-pie').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');\n      g.select('.nv-pieLabels').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');\n\n      //------------------------------------------------------------\n\n\n      container\n          .on('click', function(d,i) {\n              dispatch.chartClick({\n                  data: d,\n                  index: i,\n                  pos: d3.event,\n                  id: id\n              });\n          });\n\n\n      var arc = d3.svg.arc()\n                  .outerRadius(arcRadius);\n\n      if (startAngle) arc.startAngle(startAngle)\n      if (endAngle) arc.endAngle(endAngle);\n      if (donut) arc.innerRadius(radius * donutRatio);\n\n      // Setup the Pie chart and choose the data element\n      var pie = d3.layout.pie()\n          .sort(null)\n          .value(function(d) { return d.disabled ? 0 : getY(d) });\n\n      var slices = wrap.select('.nv-pie').selectAll('.nv-slice')\n          .data(pie);\n\n      var pieLabels = wrap.select('.nv-pieLabels').selectAll('.nv-label')\n          .data(pie);\n\n      slices.exit().remove();\n      pieLabels.exit().remove();\n\n      var ae = slices.enter().append('g')\n              .attr('class', 'nv-slice')\n              .on('mouseover', function(d,i){\n                d3.select(this).classed('hover', true);\n                dispatch.elementMouseover({\n                    label: getX(d.data),\n                    value: getY(d.data),\n                    point: d.data,\n                    pointIndex: i,\n                    pos: [d3.event.pageX, d3.event.pageY],\n                    id: id\n                });\n              })\n              .on('mouseout', function(d,i){\n                d3.select(this).classed('hover', false);\n                dispatch.elementMouseout({\n                    label: getX(d.data),\n                    value: getY(d.data),\n                    point: d.data,\n                    index: i,\n                    id: id\n                });\n              })\n              .on('click', function(d,i) {\n                dispatch.elementClick({\n                    label: getX(d.data),\n                    value: getY(d.data),\n                    point: d.data,\n                    index: i,\n                    pos: d3.event,\n                    id: id\n                });\n                d3.event.stopPropagation();\n              })\n              .on('dblclick', function(d,i) {\n                dispatch.elementDblClick({\n                    label: getX(d.data),\n                    value: getY(d.data),\n                    point: d.data,\n                    index: i,\n                    pos: d3.event,\n                    id: id\n                });\n                d3.event.stopPropagation();\n              });\n\n        slices.attr('fill', function(d,i) { return color(d, i); })\n            .attr('stroke', function(d,i) { return color(d, i); });\n\n        var paths = ae.append('path')\n            .each(function(d) { this._current = d; });\n            //.attr('d', arc);\n\n        slices.select('path')\n            .attr('d', arc);\n            \n        if (showLabels) {\n          // This does the normal label\n          var labelsArc = d3.svg.arc().innerRadius(0);\n\n          if (pieLabelsOutside){ labelsArc = arc; }\n\n          if (donutLabelsOutside) { labelsArc = d3.svg.arc().outerRadius(arc.outerRadius()); }\n\n          pieLabels.enter().append(\"g\").classed(\"nv-label\",true)\n            .each(function(d,i) {\n                var group = d3.select(this);\n\n                group\n                  .attr('transform', function(d) {\n                       if (labelSunbeamLayout) {\n                         d.outerRadius = arcRadius + 10; // Set Outer Coordinate\n                         d.innerRadius = arcRadius + 15; // Set Inner Coordinate\n                         var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);\n                         if ((d.startAngle+d.endAngle)/2 < Math.PI) {\n                           rotateAngle -= 90;\n                         } else {\n                           rotateAngle += 90;\n                         }\n                         return 'translate(' + labelsArc.centroid(d) + ') rotate(' + rotateAngle + ')';\n                       } else {\n                         d.outerRadius = radius + 10; // Set Outer Coordinate\n                         d.innerRadius = radius + 15; // Set Inner Coordinate\n                         return 'translate(' + labelsArc.centroid(d) + ')'\n                       }\n                  });\n\n                group.append('rect')\n                    .style('stroke', '#fff')\n                    .style('fill', '#fff')\n                    .attr(\"rx\", 3)\n                    .attr(\"ry\", 3);\n\n                group.append('text')\n                    .style('text-anchor', labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle') //center the text on it's origin or begin/end if orthogonal aligned\n                    .style('fill', '#000')\n\n            });\n\n          var labelLocationHash = {};\n          var avgHeight = 14;\n          var avgWidth = 140;\n          var createHashKey = function(coordinates) {\n\n              return Math.floor(coordinates[0]/avgWidth) * avgWidth + ',' + Math.floor(coordinates[1]/avgHeight) * avgHeight;\n          };\n          pieLabels\n                .attr('transform', function(d) {\n                  if (labelSunbeamLayout) {\n                      d.outerRadius = arcRadius + 10; // Set Outer Coordinate\n                      d.innerRadius = arcRadius + 15; // Set Inner Coordinate\n                      var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);\n                      if ((d.startAngle+d.endAngle)/2 < Math.PI) {\n                        rotateAngle -= 90;\n                      } else {\n                        rotateAngle += 90;\n                      }\n                      return 'translate(' + labelsArc.centroid(d) + ') rotate(' + rotateAngle + ')';\n                    } else {\n                      d.outerRadius = radius + 10; // Set Outer Coordinate\n                      d.innerRadius = radius + 15; // Set Inner Coordinate\n\n                      /*\n                      Overlapping pie labels are not good. What this attempts to do is, prevent overlapping.\n                      Each label location is hashed, and if a hash collision occurs, we assume an overlap.\n                      Adjust the label's y-position to remove the overlap.\n                      */\n                      var center = labelsArc.centroid(d);\n                      var hashKey = createHashKey(center);\n                      if (labelLocationHash[hashKey]) {\n                        center[1] -= avgHeight;\n                      }\n                      labelLocationHash[createHashKey(center)] = true;\n                      return 'translate(' + center + ')'\n                    }\n                });\n          pieLabels.select(\".nv-label text\")\n                .style('text-anchor', labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle') //center the text on it's origin or begin/end if orthogonal aligned\n                .text(function(d, i) {\n                  var percent = (d.endAngle - d.startAngle) / (2 * Math.PI);\n                  var labelTypes = {\n                    \"key\" : getX(d.data),\n                    \"value\": getY(d.data),\n                    \"percent\": d3.format('%')(percent)\n                  };\n                  return (d.value && percent > labelThreshold) ? labelTypes[labelType] : '';\n                });\n        }\n\n\n        // Computes the angle of an arc, converting from radians to degrees.\n        function angle(d) {\n          var a = (d.startAngle + d.endAngle) * 90 / Math.PI - 90;\n          return a > 90 ? a - 180 : a;\n        }\n\n        function arcTween(a) {\n          a.endAngle = isNaN(a.endAngle) ? 0 : a.endAngle;\n          a.startAngle = isNaN(a.startAngle) ? 0 : a.startAngle;\n          if (!donut) a.innerRadius = 0;\n          var i = d3.interpolate(this._current, a);\n          this._current = i(0);\n          return function(t) {\n            return arc(i(t));\n          };\n        }\n\n        function tweenPie(b) {\n          b.innerRadius = 0;\n          var i = d3.interpolate({startAngle: 0, endAngle: 0}, b);\n          return function(t) {\n              return arc(i(t));\n          };\n        }\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  chart.dispatch = dispatch;\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.values = function(_) {\n    nv.log(\"pie.values() is no longer supported.\");\n    return chart;\n  };\n\n  chart.x = function(_) {\n    if (!arguments.length) return getX;\n    getX = _;\n    return chart;\n  };\n\n  chart.y = function(_) {\n    if (!arguments.length) return getY;\n    getY = d3.functor(_);\n    return chart;\n  };\n\n  chart.description = function(_) {\n    if (!arguments.length) return getDescription;\n    getDescription = _;\n    return chart;\n  };\n\n  chart.showLabels = function(_) {\n    if (!arguments.length) return showLabels;\n    showLabels = _;\n    return chart;\n  };\n\n  chart.labelSunbeamLayout = function(_) {\n    if (!arguments.length) return labelSunbeamLayout;\n    labelSunbeamLayout = _;\n    return chart;\n  };\n\n  chart.donutLabelsOutside = function(_) {\n    if (!arguments.length) return donutLabelsOutside;\n    donutLabelsOutside = _;\n    return chart;\n  };\n\n  chart.pieLabelsOutside = function(_) {\n    if (!arguments.length) return pieLabelsOutside;\n    pieLabelsOutside = _;\n    return chart;\n  };\n\n  chart.labelType = function(_) {\n    if (!arguments.length) return labelType;\n    labelType = _;\n    labelType = labelType || \"key\";\n    return chart;\n  };\n\n  chart.donut = function(_) {\n    if (!arguments.length) return donut;\n    donut = _;\n    return chart;\n  };\n\n  chart.donutRatio = function(_) {\n    if (!arguments.length) return donutRatio;\n    donutRatio = _;\n    return chart;\n  };\n\n  chart.startAngle = function(_) {\n    if (!arguments.length) return startAngle;\n    startAngle = _;\n    return chart;\n  };\n\n  chart.endAngle = function(_) {\n    if (!arguments.length) return endAngle;\n    endAngle = _;\n    return chart;\n  };\n\n  chart.id = function(_) {\n    if (!arguments.length) return id;\n    id = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    return chart;\n  };\n\n  chart.valueFormat = function(_) {\n    if (!arguments.length) return valueFormat;\n    valueFormat = _;\n    return chart;\n  };\n\n  chart.labelThreshold = function(_) {\n    if (!arguments.length) return labelThreshold;\n    labelThreshold = _;\n    return chart;\n  };\n  //============================================================\n\n\n  return chart;\n}\nnv.models.pieChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var pie = nv.models.pie()\n    , legend = nv.models.legend()\n    ;\n\n  var margin = {top: 30, right: 20, bottom: 20, left: 20}\n    , width = null\n    , height = null\n    , showLegend = true\n    , color = nv.utils.defaultColor()\n    , tooltips = true\n    , tooltip = function(key, y, e, graph) {\n        return '<h3>' + key + '</h3>' +\n               '<p>' +  y + '</p>'\n      }\n    , state = {}\n    , defaultState = null\n    , noData = \"No Data Available.\"\n    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n    ;\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var showTooltip = function(e, offsetElement) {\n    var tooltipLabel = pie.description()(e.point) || pie.x()(e.point)\n    var left = e.pos[0] + ( (offsetElement && offsetElement.offsetLeft) || 0 ),\n        top = e.pos[1] + ( (offsetElement && offsetElement.offsetTop) || 0),\n        y = pie.valueFormat()(pie.y()(e.point)),\n        content = tooltip(tooltipLabel, y, e, chart);\n\n    nv.tooltip.show([left, top], content, e.value < 0 ? 'n' : 's', null, offsetElement);\n  };\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this),\n          that = this;\n\n      var availableWidth = (width || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n\n      chart.update = function() { container.call(chart); };\n      chart.container = this;\n\n      //set state.disabled\n      state.disabled = data.map(function(d) { return !!d.disabled });\n\n      if (!defaultState) {\n        var key;\n        defaultState = {};\n        for (key in state) {\n          if (state[key] instanceof Array)\n            defaultState[key] = state[key].slice(0);\n          else\n            defaultState[key] = state[key];\n        }\n      }\n\n      //------------------------------------------------------------\n      // Display No Data message if there's nothing to show.\n\n      if (!data || !data.length) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', margin.top + availableHeight / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-pieChart').data([data]);\n      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-pieChart').append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-pieWrap');\n      gEnter.append('g').attr('class', 'nv-legendWrap');\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Legend\n\n      if (showLegend) {\n        legend\n          .width( availableWidth )\n          .key(pie.x());\n\n        wrap.select('.nv-legendWrap')\n            .datum(data)\n            .call(legend);\n\n        if ( margin.top != legend.height()) {\n          margin.top = legend.height();\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n        }\n\n        wrap.select('.nv-legendWrap')\n            .attr('transform', 'translate(0,' + (-margin.top) +')');\n      }\n\n      //------------------------------------------------------------\n\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\n      //------------------------------------------------------------\n      // Main Chart Component(s)\n\n      pie\n        .width(availableWidth)\n        .height(availableHeight);\n\n\n      var pieWrap = g.select('.nv-pieWrap')\n          .datum([data]);\n\n      d3.transition(pieWrap).call(pie);\n\n      //------------------------------------------------------------\n\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n      legend.dispatch.on('stateChange', function(newState) {\n        state = newState;\n        dispatch.stateChange(state);\n        chart.update();\n      });\n\n      pie.dispatch.on('elementMouseout.tooltip', function(e) {\n        dispatch.tooltipHide(e);\n      });\n\n      // Update chart from a state object passed to event handler\n      dispatch.on('changeState', function(e) {\n\n        if (typeof e.disabled !== 'undefined') {\n          data.forEach(function(series,i) {\n            series.disabled = e.disabled[i];\n          });\n\n          state.disabled = e.disabled;\n        }\n\n        chart.update();\n      });\n\n      //============================================================\n\n\n    });\n\n    return chart;\n  }\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  pie.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  dispatch.on('tooltipShow', function(e) {\n    if (tooltips) showTooltip(e);\n  });\n\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.legend = legend;\n  chart.dispatch = dispatch;\n  chart.pie = pie;\n\n  d3.rebind(chart, pie, 'valueFormat', 'values', 'x', 'y', 'description', 'id', 'showLabels', 'donutLabelsOutside', 'pieLabelsOutside', 'labelType', 'donut', 'donutRatio', 'labelThreshold');\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    legend.color(color);\n    pie.color(color);\n    return chart;\n  };\n\n  chart.showLegend = function(_) {\n    if (!arguments.length) return showLegend;\n    showLegend = _;\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.state = function(_) {\n    if (!arguments.length) return state;\n    state = _;\n    return chart;\n  };\n\n  chart.defaultState = function(_) {\n    if (!arguments.length) return defaultState;\n    defaultState = _;\n    return chart;\n  };\n\n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.scatter = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var margin       = {top: 0, right: 0, bottom: 0, left: 0}\n    , width        = 960\n    , height       = 500\n    , color        = nv.utils.defaultColor() // chooses color\n    , id           = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't select one\n    , x            = d3.scale.linear()\n    , y            = d3.scale.linear()\n    , z            = d3.scale.linear() //linear because d3.svg.shape.size is treated as area\n    , getX         = function(d) { return d.x } // accessor to get the x value\n    , getY         = function(d) { return d.y } // accessor to get the y value\n    , getSize      = function(d) { return d.size || 1} // accessor to get the point size\n    , getShape     = function(d) { return d.shape || 'circle' } // accessor to get point shape\n    , onlyCircles  = true // Set to false to use shapes\n    , forceX       = [] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)\n    , forceY       = [] // List of numbers to Force into the Y scale\n    , forceSize    = [] // List of numbers to Force into the Size scale\n    , interactive  = true // If true, plots a voronoi overlay for advanced point intersection\n    , pointKey     = null\n    , pointActive  = function(d) { return !d.notActive } // any points that return false will be filtered out\n    , padData      = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n    , padDataOuter = .1 //outerPadding to imitate ordinal scale outer padding\n    , clipEdge     = false // if true, masks points within x and y scale\n    , clipVoronoi  = true // if true, masks each point with a circle... can turn off to slightly increase performance\n    , clipRadius   = function() { return 25 } // function to get the radius for voronoi point clips\n    , xDomain      = null // Override x domain (skips the calculation from data)\n    , yDomain      = null // Override y domain\n    , xRange       = null // Override x range\n    , yRange       = null // Override y range\n    , sizeDomain   = null // Override point size domain\n    , sizeRange    = null\n    , singlePoint  = false\n    , dispatch     = d3.dispatch('elementClick', 'elementMouseover', 'elementMouseout')\n    , useVoronoi   = true\n    ;\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var x0, y0, z0 // used to store previous scales\n    , timeoutID\n    , needsUpdate = false // Flag for when the points are visually updating, but the interactive layer is behind, to disable tooltips\n    ;\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var availableWidth = width - margin.left - margin.right,\n          availableHeight = height - margin.top - margin.bottom,\n          container = d3.select(this);\n\n      //add series index to each data point for reference\n      data.forEach(function(series, i) {\n        series.values.forEach(function(point) {\n          point.series = i;\n        });\n      });\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      // remap and flatten the data for use in calculating the scales' domains\n      var seriesData = (xDomain && yDomain && sizeDomain) ? [] : // if we know xDomain and yDomain and sizeDomain, no need to calculate.... if Size is constant remember to set sizeDomain to speed up performance\n            d3.merge(\n              data.map(function(d) {\n                return d.values.map(function(d,i) {\n                  return { x: getX(d,i), y: getY(d,i), size: getSize(d,i) }\n                })\n              })\n            );\n\n      x   .domain(xDomain || d3.extent(seriesData.map(function(d) { return d.x; }).concat(forceX)))\n\n      if (padData && data[0])\n        x.range(xRange || [(availableWidth * padDataOuter +  availableWidth) / (2 *data[0].values.length), availableWidth - availableWidth * (1 + padDataOuter) / (2 * data[0].values.length)  ]);\n        //x.range([availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n      else\n        x.range(xRange || [0, availableWidth]);\n\n      y   .domain(yDomain || d3.extent(seriesData.map(function(d) { return d.y }).concat(forceY)))\n          .range(yRange || [availableHeight, 0]);\n\n      z   .domain(sizeDomain || d3.extent(seriesData.map(function(d) { return d.size }).concat(forceSize)))\n          .range(sizeRange || [16, 256]);\n\n      // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n      if (x.domain()[0] === x.domain()[1] || y.domain()[0] === y.domain()[1]) singlePoint = true;\n      if (x.domain()[0] === x.domain()[1])\n        x.domain()[0] ?\n            x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n          : x.domain([-1,1]);\n\n      if (y.domain()[0] === y.domain()[1])\n        y.domain()[0] ?\n            y.domain([y.domain()[0] - y.domain()[0] * 0.01, y.domain()[1] + y.domain()[1] * 0.01])\n          : y.domain([-1,1]);\n\n      if ( isNaN(x.domain()[0])) {\n          x.domain([-1,1]);\n      }\n\n      if ( isNaN(y.domain()[0])) {\n          y.domain([-1,1]);\n      }\n\n\n      x0 = x0 || x;\n      y0 = y0 || y;\n      z0 = z0 || z;\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-scatter').data([data]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatter nv-chart-' + id + (singlePoint ? ' nv-single-point' : ''));\n      var defsEnter = wrapEnter.append('defs');\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-groups');\n      gEnter.append('g').attr('class', 'nv-point-paths');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      //------------------------------------------------------------\n\n\n      defsEnter.append('clipPath')\n          .attr('id', 'nv-edge-clip-' + id)\n        .append('rect');\n\n      wrap.select('#nv-edge-clip-' + id + ' rect')\n          .attr('width', availableWidth)\n          .attr('height', (availableHeight > 0) ? availableHeight : 0);\n\n      g   .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n\n      function updateInteractiveLayer() {\n\n        if (!interactive) return false;\n\n        var eventElements;\n\n        var vertices = d3.merge(data.map(function(group, groupIndex) {\n            return group.values\n              .map(function(point, pointIndex) {\n                // *Adding noise to make duplicates very unlikely\n                // *Injecting series and point index for reference\n                /* *Adding a 'jitter' to the points, because there's an issue in d3.geom.voronoi.\n                */\n                var pX = getX(point,pointIndex);\n                var pY = getY(point,pointIndex);\n\n                return [x(pX),\n                        y(pY),\n                        groupIndex,\n                        pointIndex, point];\n              })\n              .filter(function(pointArray, pointIndex) {\n                return pointActive(pointArray[4], pointIndex); // Issue #237.. move filter to after map, so pointIndex is correct!\n              })\n          })\n        );\n\n\n\n        //inject series and point index for reference into voronoi\n        if (useVoronoi === true) {\n\n          if (clipVoronoi) {\n            var pointClipsEnter = wrap.select('defs').selectAll('.nv-point-clips')\n                .data([id])\n              .enter();\n\n            pointClipsEnter.append('clipPath')\n                  .attr('class', 'nv-point-clips')\n                  .attr('id', 'nv-points-clip-' + id);\n\n            var pointClips = wrap.select('#nv-points-clip-' + id).selectAll('circle')\n                .data(vertices);\n            pointClips.enter().append('circle')\n                .attr('r', clipRadius);\n            pointClips.exit().remove();\n            pointClips\n                .attr('cx', function(d) { return d[0] })\n                .attr('cy', function(d) { return d[1] });\n\n            wrap.select('.nv-point-paths')\n                .attr('clip-path', 'url(#nv-points-clip-' + id + ')');\n          }\n\n\n          if(vertices.length) {\n            // Issue #283 - Adding 2 dummy points to the voronoi b/c voronoi requires min 3 points to work\n            vertices.push([x.range()[0] - 20, y.range()[0] - 20, null, null]);\n            vertices.push([x.range()[1] + 20, y.range()[1] + 20, null, null]);\n            vertices.push([x.range()[0] - 20, y.range()[0] + 20, null, null]);\n            vertices.push([x.range()[1] + 20, y.range()[1] - 20, null, null]);\n          }\n\n          var bounds = d3.geom.polygon([\n              [-10,-10],\n              [-10,height + 10],\n              [width + 10,height + 10],\n              [width + 10,-10]\n          ]);\n\n          // delete duplicates from vertices - essential assumption for d3.geom.voronoi\n          var epsilon = 1e-6; // d3 uses 1e-6 to determine equivalence.\n          vertices = vertices.sort(function(a,b){return ((a[0] - b[0]) || (a[1] - b[1]))});\n          for (var i = 0; i < vertices.length - 1; ) {\n              if ((Math.abs(vertices[i][0] - vertices[i+1][0]) < epsilon) &&\n                  (Math.abs(vertices[i][1] - vertices[i+1][1]) < epsilon)) {\n                      vertices.splice(i+1, 1);\n              } else {\n                  i++;\n              }\n          }\n \n          var voronoi = d3.geom.voronoi(vertices).map(function(d, i) {\n              return {\n                'data': bounds.clip(d),\n                'series': vertices[i][2],\n                'point': vertices[i][3]\n              }\n            });\n\n\n          var pointPaths = wrap.select('.nv-point-paths').selectAll('path')\n              .data(voronoi);\n          pointPaths.enter().append('path')\n              .attr('class', function(d,i) { return 'nv-path-'+i; });\n          pointPaths.exit().remove();\n          pointPaths\n              .attr('d', function(d) {\n                if (!d || !d.data || d.data.length === 0)\n                    return 'M 0 0';\n                else\n                    return 'M' + d.data.join('L') + 'Z';\n              });\n\n          var mouseEventCallback = function(d,mDispatch) {\n                if (needsUpdate) return 0;\n                var series = data[d.series];\n                if (typeof series === 'undefined') return;\n\n                var point  = series.values[d.point];\n\n                mDispatch({\n                  point: point,\n                  series: series,\n                  pos: [x(getX(point, d.point)) + margin.left, y(getY(point, d.point)) + margin.top],\n                  seriesIndex: d.series,\n                  pointIndex: d.point\n                });\n          };\n\n          pointPaths\n              .on('click', function(d) {\n                mouseEventCallback(d, dispatch.elementClick);\n              })\n              .on('mouseover', function(d) {\n                mouseEventCallback(d, dispatch.elementMouseover);\n              })\n              .on('mouseout', function(d, i) {\n                mouseEventCallback(d, dispatch.elementMouseout);\n              });\n\n\n        } else {\n          /*\n          // bring data in form needed for click handlers\n          var dataWithPoints = vertices.map(function(d, i) {\n              return {\n                'data': d,\n                'series': vertices[i][2],\n                'point': vertices[i][3]\n              }\n            });\n           */\n\n          // add event handlers to points instead voronoi paths\n          wrap.select('.nv-groups').selectAll('.nv-group')\n            .selectAll('.nv-point')\n              //.data(dataWithPoints)\n              //.style('pointer-events', 'auto') // recativate events, disabled by css\n              .on('click', function(d,i) {\n                //nv.log('test', d, i);\n                if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                var series = data[d.series],\n                    point  = series.values[i];\n\n                dispatch.elementClick({\n                  point: point,\n                  series: series,\n                  pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                  seriesIndex: d.series,\n                  pointIndex: i\n                });\n              })\n              .on('mouseover', function(d,i) {\n                if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                var series = data[d.series],\n                    point  = series.values[i];\n\n                dispatch.elementMouseover({\n                  point: point,\n                  series: series,\n                  pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                  seriesIndex: d.series,\n                  pointIndex: i\n                });\n              })\n              .on('mouseout', function(d,i) {\n                if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                var series = data[d.series],\n                    point  = series.values[i];\n\n                dispatch.elementMouseout({\n                  point: point,\n                  series: series,\n                  seriesIndex: d.series,\n                  pointIndex: i\n                });\n              });\n          }\n\n          needsUpdate = false;\n      }\n\n      needsUpdate = true;\n\n      var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n          .data(function(d) { return d }, function(d) { return d.key });\n      groups.enter().append('g')\n          .style('stroke-opacity', 1e-6)\n          .style('fill-opacity', 1e-6);\n      groups.exit()\n          .remove();\n      groups\n          .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n          .classed('hover', function(d) { return d.hover });\n      groups\n          \n          .style('fill', function(d,i) { return color(d, i) })\n          .style('stroke', function(d,i) { return color(d, i) })\n          .style('stroke-opacity', 1)\n          .style('fill-opacity', .5);\n\n\n      if (onlyCircles) {\n\n        var points = groups.selectAll('circle.nv-point')\n            .data(function(d) { return d.values }, pointKey);\n        points.enter().append('circle')\n            .style('fill', function (d,i) { return d.color })\n            .style('stroke', function (d,i) { return d.color })\n            .attr('cx', function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n            .attr('cy', function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n            .attr('r', function(d,i) { return Math.sqrt(z(getSize(d,i))/Math.PI) });\n        points.exit().remove();\n        groups.exit().selectAll('path.nv-point')\n            .attr('cx', function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n            .attr('cy', function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n            .remove();\n        points.each(function(d,i) {\n          d3.select(this)\n            .classed('nv-point', true)\n            .classed('nv-point-' + i, true)\n            .classed('hover',false)\n            ;\n        });\n        points\n            .attr('cx', function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n            .attr('cy', function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n            .attr('r', function(d,i) { return Math.sqrt(z(getSize(d,i))/Math.PI) });\n\n      } else {\n\n        var points = groups.selectAll('path.nv-point')\n            .data(function(d) { return d.values });\n        points.enter().append('path')\n            .style('fill', function (d,i) { return d.color })\n            .style('stroke', function (d,i) { return d.color })\n            .attr('transform', function(d,i) {\n              return 'translate(' + x0(getX(d,i)) + ',' + y0(getY(d,i)) + ')'\n            })\n            .attr('d',\n              d3.svg.symbol()\n                .type(getShape)\n                .size(function(d,i) { return z(getSize(d,i)) })\n            );\n        points.exit().remove();\n        groups.exit().selectAll('path.nv-point')\n            \n            .attr('transform', function(d,i) {\n              return 'translate(' + x(getX(d,i)) + ',' + y(getY(d,i)) + ')'\n            })\n            .remove();\n        points.each(function(d,i) {\n          d3.select(this)\n            .classed('nv-point', true)\n            .classed('nv-point-' + i, true)\n            .classed('hover',false)\n            ;\n        });\n        points\n            .attr('transform', function(d,i) {\n              //nv.log(d,i,getX(d,i), x(getX(d,i)));\n              return 'translate(' + x(getX(d,i)) + ',' + y(getY(d,i)) + ')'\n            })\n            .attr('d',\n              d3.svg.symbol()\n                .type(getShape)\n                .size(function(d,i) { return z(getSize(d,i)) })\n            );\n      }\n\n\n      // Delay updating the invisible interactive layer for smoother animation\n      clearTimeout(timeoutID); // stop repeat calls to updateInteractiveLayer\n      timeoutID = setTimeout(updateInteractiveLayer, 300);\n      //updateInteractiveLayer();\n\n      //store old scales for use in transitions on update\n      x0 = x.copy();\n      y0 = y.copy();\n      z0 = z.copy();\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n  chart.clearHighlights = function() {\n      //Remove the 'hover' class from all highlighted points.\n      d3.selectAll(\".nv-chart-\" + id + \" .nv-point.hover\").classed(\"hover\",false);\n  };\n\n  chart.highlightPoint = function(seriesIndex,pointIndex,isHoverOver) {\n      d3.select(\".nv-chart-\" + id + \" .nv-series-\" + seriesIndex + \" .nv-point-\" + pointIndex)\n          .classed(\"hover\",isHoverOver);\n  };\n\n\n  dispatch.on('elementMouseover.point', function(d) {\n     if (interactive) chart.highlightPoint(d.seriesIndex,d.pointIndex,true);\n  });\n\n  dispatch.on('elementMouseout.point', function(d) {\n     if (interactive) chart.highlightPoint(d.seriesIndex,d.pointIndex,false);\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  chart.dispatch = dispatch;\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.x = function(_) {\n    if (!arguments.length) return getX;\n    getX = d3.functor(_);\n    return chart;\n  };\n\n  chart.y = function(_) {\n    if (!arguments.length) return getY;\n    getY = d3.functor(_);\n    return chart;\n  };\n\n  chart.size = function(_) {\n    if (!arguments.length) return getSize;\n    getSize = d3.functor(_);\n    return chart;\n  };\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.xScale = function(_) {\n    if (!arguments.length) return x;\n    x = _;\n    return chart;\n  };\n\n  chart.yScale = function(_) {\n    if (!arguments.length) return y;\n    y = _;\n    return chart;\n  };\n\n  chart.zScale = function(_) {\n    if (!arguments.length) return z;\n    z = _;\n    return chart;\n  };\n\n  chart.xDomain = function(_) {\n    if (!arguments.length) return xDomain;\n    xDomain = _;\n    return chart;\n  };\n\n  chart.yDomain = function(_) {\n    if (!arguments.length) return yDomain;\n    yDomain = _;\n    return chart;\n  };\n\n  chart.sizeDomain = function(_) {\n    if (!arguments.length) return sizeDomain;\n    sizeDomain = _;\n    return chart;\n  };\n\n  chart.xRange = function(_) {\n    if (!arguments.length) return xRange;\n    xRange = _;\n    return chart;\n  };\n\n  chart.yRange = function(_) {\n    if (!arguments.length) return yRange;\n    yRange = _;\n    return chart;\n  };\n\n  chart.sizeRange = function(_) {\n    if (!arguments.length) return sizeRange;\n    sizeRange = _;\n    return chart;\n  };\n\n  chart.forceX = function(_) {\n    if (!arguments.length) return forceX;\n    forceX = _;\n    return chart;\n  };\n\n  chart.forceY = function(_) {\n    if (!arguments.length) return forceY;\n    forceY = _;\n    return chart;\n  };\n\n  chart.forceSize = function(_) {\n    if (!arguments.length) return forceSize;\n    forceSize = _;\n    return chart;\n  };\n\n  chart.interactive = function(_) {\n    if (!arguments.length) return interactive;\n    interactive = _;\n    return chart;\n  };\n\n  chart.pointKey = function(_) {\n    if (!arguments.length) return pointKey;\n    pointKey = _;\n    return chart;\n  };\n\n  chart.pointActive = function(_) {\n    if (!arguments.length) return pointActive;\n    pointActive = _;\n    return chart;\n  };\n\n  chart.padData = function(_) {\n    if (!arguments.length) return padData;\n    padData = _;\n    return chart;\n  };\n\n  chart.padDataOuter = function(_) {\n    if (!arguments.length) return padDataOuter;\n    padDataOuter = _;\n    return chart;\n  };\n\n  chart.clipEdge = function(_) {\n    if (!arguments.length) return clipEdge;\n    clipEdge = _;\n    return chart;\n  };\n\n  chart.clipVoronoi= function(_) {\n    if (!arguments.length) return clipVoronoi;\n    clipVoronoi = _;\n    return chart;\n  };\n\n  chart.useVoronoi= function(_) {\n    if (!arguments.length) return useVoronoi;\n    useVoronoi = _;\n    if (useVoronoi === false) {\n        clipVoronoi = false;\n    }\n    return chart;\n  };\n\n  chart.clipRadius = function(_) {\n    if (!arguments.length) return clipRadius;\n    clipRadius = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    return chart;\n  };\n\n  chart.shape = function(_) {\n    if (!arguments.length) return getShape;\n    getShape = _;\n    return chart;\n  };\n\n  chart.onlyCircles = function(_) {\n    if (!arguments.length) return onlyCircles;\n    onlyCircles = _;\n    return chart;\n  };\n\n  chart.id = function(_) {\n    if (!arguments.length) return id;\n    id = _;\n    return chart;\n  };\n\n  chart.singlePoint = function(_) {\n    if (!arguments.length) return singlePoint;\n    singlePoint = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\nnv.models.scatterChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var scatter      = nv.models.scatter()\n    , xAxis        = nv.models.axis()\n    , yAxis        = nv.models.axis()\n    , legend       = nv.models.legend()\n    , controls     = nv.models.legend()\n    , distX        = nv.models.distribution()\n    , distY        = nv.models.distribution()\n    ;\n\n  var margin       = {top: 30, right: 20, bottom: 50, left: 75}\n    , width        = null\n    , height       = null\n    , color        = nv.utils.defaultColor()\n    , x            = d3.fisheye ? d3.fisheye.scale(d3.scale.linear).distortion(0) : scatter.xScale()\n    , y            = d3.fisheye ? d3.fisheye.scale(d3.scale.linear).distortion(0) : scatter.yScale()\n    , xPadding     = 0\n    , yPadding     = 0\n    , showDistX    = false\n    , showDistY    = false\n    , showLegend   = true\n    , showXAxis    = true\n    , showYAxis    = true\n    , rightAlignYAxis = false\n    , showControls = !!d3.fisheye\n    , fisheye      = 0\n    , pauseFisheye = false\n    , tooltips     = true\n    , tooltipX     = function(key, x, y) { return '<strong>' + x + '</strong>' }\n    , tooltipY     = function(key, x, y) { return '<strong>' + y + '</strong>' }\n    , tooltip      = null\n    , state = {}\n    , defaultState = null\n    , dispatch     = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n    , noData       = \"No Data Available.\"\n    , transitionDuration = 0\n    ;\n\n  scatter\n    .xScale(x)\n    .yScale(y)\n    ;\n  xAxis\n    .orient('bottom')\n    .tickPadding(10)\n    ;\n  yAxis\n    .orient((rightAlignYAxis) ? 'right' : 'left')\n    .tickPadding(10)\n    ;\n  distX\n    .axis('x')\n    ;\n  distY\n    .axis('y')\n    ;\n\n  controls.updateState(false);\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var x0, y0;\n\n  var showTooltip = function(e, offsetElement) {\n    //TODO: make tooltip style an option between single or dual on axes (maybe on all charts with axes?)\n\n    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n        leftX = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n        topX = y.range()[0] + margin.top + ( offsetElement.offsetTop || 0),\n        leftY = x.range()[0] + margin.left + ( offsetElement.offsetLeft || 0 ),\n        topY = e.pos[1] + ( offsetElement.offsetTop || 0),\n        xVal = xAxis.tickFormat()(scatter.x()(e.point, e.pointIndex)),\n        yVal = yAxis.tickFormat()(scatter.y()(e.point, e.pointIndex));\n\n      if( tooltipX != null )\n          nv.tooltip.show([leftX, topX], tooltipX(e.series.key, xVal, yVal, e, chart), 'n', 1, offsetElement, 'x-nvtooltip');\n      if( tooltipY != null )\n          nv.tooltip.show([leftY, topY], tooltipY(e.series.key, xVal, yVal, e, chart), 'e', 1, offsetElement, 'y-nvtooltip');\n      if( tooltip != null )\n          nv.tooltip.show([left, top], tooltip(e.series.key, xVal, yVal, e, chart), e.value < 0 ? 'n' : 's', null, offsetElement);\n  };\n\n  var controlsData = [\n    { key: 'Magnify', disabled: true }\n  ];\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this),\n          that = this;\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n\n      chart.update = function() { container.call(chart); };\n      chart.container = this;\n\n      //set state.disabled\n      state.disabled = data.map(function(d) { return !!d.disabled });\n\n      if (!defaultState) {\n        var key;\n        defaultState = {};\n        for (key in state) {\n          if (state[key] instanceof Array)\n            defaultState[key] = state[key].slice(0);\n          else\n            defaultState[key] = state[key];\n        }\n      }\n\n      //------------------------------------------------------------\n      // Display noData message if there's nothing to show.\n\n      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', margin.top + availableHeight / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x0 = x0 || x;\n      y0 = y0 || y;\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-scatterChart').data([data]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatterChart nv-chart-' + scatter.id());\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g');\n\n      // background for pointer events\n      gEnter.append('rect').attr('class', 'nvd3 nv-background');\n\n      gEnter.append('g').attr('class', 'nv-x nv-axis');\n      gEnter.append('g').attr('class', 'nv-y nv-axis');\n      gEnter.append('g').attr('class', 'nv-scatterWrap');\n      gEnter.append('g').attr('class', 'nv-distWrap');\n      gEnter.append('g').attr('class', 'nv-legendWrap');\n      gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Legend\n\n      if (showLegend) {\n        var legendWidth = (showControls) ? availableWidth / 2 : availableWidth;\n        legend.width(legendWidth);\n\n        wrap.select('.nv-legendWrap')\n            .datum(data)\n            .call(legend);\n\n        if ( margin.top != legend.height()) {\n          margin.top = legend.height();\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n        }\n\n        wrap.select('.nv-legendWrap')\n            .attr('transform', 'translate(' + (availableWidth - legendWidth) + ',' + (-margin.top) +')');\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Controls\n\n      if (showControls) {\n        controls.width(180).color(['#444']);\n        g.select('.nv-controlsWrap')\n            .datum(controlsData)\n            .attr('transform', 'translate(0,' + (-margin.top) +')')\n            .call(controls);\n      }\n\n      //------------------------------------------------------------\n\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      if (rightAlignYAxis) {\n          g.select(\".nv-y.nv-axis\")\n              .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n      }\n\n      //------------------------------------------------------------\n      // Main Chart Component(s)\n\n      scatter\n          .width(availableWidth)\n          .height(availableHeight)\n          .color(data.map(function(d,i) {\n            return d.color || color(d, i);\n          }).filter(function(d,i) { return !data[i].disabled }));\n\n      if (xPadding !== 0)\n        scatter.xDomain(null);\n\n      if (yPadding !== 0)\n        scatter.yDomain(null);\n\n      wrap.select('.nv-scatterWrap')\n          .datum(data.filter(function(d) { return !d.disabled }))\n          .call(scatter);\n\n      //Adjust for x and y padding\n      if (xPadding !== 0) {\n        var xRange = x.domain()[1] - x.domain()[0];\n        scatter.xDomain([x.domain()[0] - (xPadding * xRange), x.domain()[1] + (xPadding * xRange)]);\n      }\n\n      if (yPadding !== 0) {\n        var yRange = y.domain()[1] - y.domain()[0];\n        scatter.yDomain([y.domain()[0] - (yPadding * yRange), y.domain()[1] + (yPadding * yRange)]);\n      }\n\n      //Only need to update the scatter again if x/yPadding changed the domain.\n      if (yPadding !== 0 || xPadding !== 0) {\n        wrap.select('.nv-scatterWrap')\n            .datum(data.filter(function(d) { return !d.disabled }))\n            .call(scatter);\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Axes\n      if (showXAxis) {\n        xAxis\n            .scale(x)\n            .ticks( xAxis.ticks() && xAxis.ticks().length ? xAxis.ticks() : availableWidth / 100 )\n            .tickSize( -availableHeight , 0);\n\n        g.select('.nv-x.nv-axis')\n            .attr('transform', 'translate(0,' + y.range()[0] + ')')\n            .call(xAxis);\n\n      }\n\n      if (showYAxis) {\n        yAxis\n            .scale(y)\n            .ticks( yAxis.ticks() && yAxis.ticks().length ? yAxis.ticks() : availableHeight / 36 )\n            .tickSize( -availableWidth, 0);\n\n        g.select('.nv-y.nv-axis')\n            .call(yAxis);\n      }\n\n\n      if (showDistX) {\n        distX\n            .getData(scatter.x())\n            .scale(x)\n            .width(availableWidth)\n            .color(data.map(function(d,i) {\n              return d.color || color(d, i);\n            }).filter(function(d,i) { return !data[i].disabled }));\n        gEnter.select('.nv-distWrap').append('g')\n            .attr('class', 'nv-distributionX');\n        g.select('.nv-distributionX')\n            .attr('transform', 'translate(0,' + y.range()[0] + ')')\n            .datum(data.filter(function(d) { return !d.disabled }))\n            .call(distX);\n      }\n\n      if (showDistY) {\n        distY\n            .getData(scatter.y())\n            .scale(y)\n            .width(availableHeight)\n            .color(data.map(function(d,i) {\n              return d.color || color(d, i);\n            }).filter(function(d,i) { return !data[i].disabled }));\n        gEnter.select('.nv-distWrap').append('g')\n            .attr('class', 'nv-distributionY');\n        g.select('.nv-distributionY')\n            .attr('transform', \n              'translate(' + (rightAlignYAxis ? availableWidth : -distY.size() ) + ',0)')\n            .datum(data.filter(function(d) { return !d.disabled }))\n            .call(distY);\n      }\n\n      //------------------------------------------------------------\n\n\n\n\n      if (d3.fisheye) {\n        g.select('.nv-background')\n            .attr('width', availableWidth)\n            .attr('height', availableHeight);\n\n        g.select('.nv-background').on('mousemove', updateFisheye);\n        g.select('.nv-background').on('click', function() { pauseFisheye = !pauseFisheye;});\n        scatter.dispatch.on('elementClick.freezeFisheye', function() {\n          pauseFisheye = !pauseFisheye;\n        });\n      }\n\n\n      function updateFisheye() {\n        if (pauseFisheye) {\n          g.select('.nv-point-paths').style('pointer-events', 'all');\n          return false;\n        }\n\n        g.select('.nv-point-paths').style('pointer-events', 'none' );\n\n        var mouse = d3.mouse(this);\n        x.distortion(fisheye).focus(mouse[0]);\n        y.distortion(fisheye).focus(mouse[1]);\n\n        g.select('.nv-scatterWrap')\n            .call(scatter);\n\n        if (showXAxis)\n          g.select('.nv-x.nv-axis').call(xAxis);\n        \n        if (showYAxis)\n          g.select('.nv-y.nv-axis').call(yAxis);\n        \n        g.select('.nv-distributionX')\n            .datum(data.filter(function(d) { return !d.disabled }))\n            .call(distX);\n        g.select('.nv-distributionY')\n            .datum(data.filter(function(d) { return !d.disabled }))\n            .call(distY);\n      }\n\n\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n      controls.dispatch.on('legendClick', function(d,i) {\n        d.disabled = !d.disabled;\n\n        fisheye = d.disabled ? 0 : 2.5;\n        g.select('.nv-background') .style('pointer-events', d.disabled ? 'none' : 'all');\n        g.select('.nv-point-paths').style('pointer-events', d.disabled ? 'all' : 'none' );\n\n        if (d.disabled) {\n          x.distortion(fisheye).focus(0);\n          y.distortion(fisheye).focus(0);\n\n          g.select('.nv-scatterWrap').call(scatter);\n          g.select('.nv-x.nv-axis').call(xAxis);\n          g.select('.nv-y.nv-axis').call(yAxis);\n        } else {\n          pauseFisheye = false;\n        }\n\n        chart.update();\n      });\n\n      legend.dispatch.on('stateChange', function(newState) {\n        state.disabled = newState.disabled;\n        dispatch.stateChange(state);\n        chart.update();\n      });\n\n      scatter.dispatch.on('elementMouseover.tooltip', function(e) {\n        d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-distx-' + e.pointIndex)\n            .attr('y1', function(d,i) { return e.pos[1] - availableHeight;});\n        d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-disty-' + e.pointIndex)\n            .attr('x2', e.pos[0] + distX.size());\n\n        e.pos = [e.pos[0] + margin.left, e.pos[1] + margin.top];\n        dispatch.tooltipShow(e);\n      });\n\n      dispatch.on('tooltipShow', function(e) {\n        if (tooltips) showTooltip(e, that.parentNode);\n      });\n\n      // Update chart from a state object passed to event handler\n      dispatch.on('changeState', function(e) {\n\n        if (typeof e.disabled !== 'undefined') {\n          data.forEach(function(series,i) {\n            series.disabled = e.disabled[i];\n          });\n\n          state.disabled = e.disabled;\n        }\n\n        chart.update();\n      });\n\n      //============================================================\n\n\n      //store old scales for use in transitions on update\n      x0 = x.copy();\n      y0 = y.copy();\n\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  scatter.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n\n    d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-distx-' + e.pointIndex)\n        .attr('y1', 0);\n    d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-disty-' + e.pointIndex)\n        .attr('x2', distY.size());\n  });\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.dispatch = dispatch;\n  chart.scatter = scatter;\n  chart.legend = legend;\n  chart.controls = controls;\n  chart.xAxis = xAxis;\n  chart.yAxis = yAxis;\n  chart.distX = distX;\n  chart.distY = distY;\n\n  d3.rebind(chart, scatter, 'id', 'interactive', 'pointActive', 'x', 'y', 'shape', 'size', 'xScale', 'yScale', 'zScale', 'xDomain', 'yDomain', 'xRange', 'yRange', 'sizeDomain', 'sizeRange', 'forceX', 'forceY', 'forceSize', 'clipVoronoi', 'clipRadius', 'useVoronoi');\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    legend.color(color);\n    distX.color(color);\n    distY.color(color);\n    return chart;\n  };\n\n  chart.showDistX = function(_) {\n    if (!arguments.length) return showDistX;\n    showDistX = _;\n    return chart;\n  };\n\n  chart.showDistY = function(_) {\n    if (!arguments.length) return showDistY;\n    showDistY = _;\n    return chart;\n  };\n\n  chart.showControls = function(_) {\n    if (!arguments.length) return showControls;\n    showControls = _;\n    return chart;\n  };\n\n  chart.showLegend = function(_) {\n    if (!arguments.length) return showLegend;\n    showLegend = _;\n    return chart;\n  };\n\n  chart.showXAxis = function(_) {\n    if (!arguments.length) return showXAxis;\n    showXAxis = _;\n    return chart;\n  };\n\n  chart.showYAxis = function(_) {\n    if (!arguments.length) return showYAxis;\n    showYAxis = _;\n    return chart;\n  };\n\n  chart.rightAlignYAxis = function(_) {\n    if(!arguments.length) return rightAlignYAxis;\n    rightAlignYAxis = _;\n    yAxis.orient( (_) ? 'right' : 'left');\n    return chart;\n  };\n\n\n  chart.fisheye = function(_) {\n    if (!arguments.length) return fisheye;\n    fisheye = _;\n    return chart;\n  };\n\n  chart.xPadding = function(_) {\n    if (!arguments.length) return xPadding;\n    xPadding = _;\n    return chart;\n  };\n\n  chart.yPadding = function(_) {\n    if (!arguments.length) return yPadding;\n    yPadding = _;\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.tooltipXContent = function(_) {\n    if (!arguments.length) return tooltipX;\n    tooltipX = _;\n    return chart;\n  };\n\n  chart.tooltipYContent = function(_) {\n    if (!arguments.length) return tooltipY;\n    tooltipY = _;\n    return chart;\n  };\n\n  chart.state = function(_) {\n    if (!arguments.length) return state;\n    state = _;\n    return chart;\n  };\n\n  chart.defaultState = function(_) {\n    if (!arguments.length) return defaultState;\n    defaultState = _;\n    return chart;\n  };\n  \n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  chart.transitionDuration = function(_) {\n    if (!arguments.length) return transitionDuration;\n    transitionDuration = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.scatterPlusLineChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var scatter      = nv.models.scatter()\n    , xAxis        = nv.models.axis()\n    , yAxis        = nv.models.axis()\n    , legend       = nv.models.legend()\n    , controls     = nv.models.legend()\n    , distX        = nv.models.distribution()\n    , distY        = nv.models.distribution()\n    ;\n\n  var margin       = {top: 30, right: 20, bottom: 50, left: 75}\n    , width        = null\n    , height       = null\n    , color        = nv.utils.defaultColor()\n    , x            = d3.fisheye ? d3.fisheye.scale(d3.scale.linear).distortion(0) : scatter.xScale()\n    , y            = d3.fisheye ? d3.fisheye.scale(d3.scale.linear).distortion(0) : scatter.yScale()\n    , showDistX    = false\n    , showDistY    = false\n    , showLegend   = true\n    , showXAxis    = true\n    , showYAxis    = true\n    , rightAlignYAxis = false\n    , showControls = !!d3.fisheye\n    , fisheye      = 0\n    , pauseFisheye = false\n    , tooltips     = true\n    , tooltipX     = function(key, x, y) { return '<strong>' + x + '</strong>' }\n    , tooltipY     = function(key, x, y) { return '<strong>' + y + '</strong>' }\n    , tooltip      = function(key, x, y, date) { return '<h3>' + key + '</h3>' \n                                                      + '<p>' + date + '</p>' }\n    , state = {}\n    , defaultState = null\n    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n    , noData       = \"No Data Available.\"\n    , transitionDuration = 0\n    ;\n\n  scatter\n    .xScale(x)\n    .yScale(y)\n    ;\n  xAxis\n    .orient('bottom')\n    .tickPadding(10)\n    ;\n  yAxis\n    .orient((rightAlignYAxis) ? 'right' : 'left')\n    .tickPadding(10)\n    ;\n  distX\n    .axis('x')\n    ;\n  distY\n    .axis('y')\n    ;\n  \n  controls.updateState(false);\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var x0, y0;\n\n  var showTooltip = function(e, offsetElement) {\n    //TODO: make tooltip style an option between single or dual on axes (maybe on all charts with axes?)\n\n    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n        leftX = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n        topX = y.range()[0] + margin.top + ( offsetElement.offsetTop || 0),\n        leftY = x.range()[0] + margin.left + ( offsetElement.offsetLeft || 0 ),\n        topY = e.pos[1] + ( offsetElement.offsetTop || 0),\n        xVal = xAxis.tickFormat()(scatter.x()(e.point, e.pointIndex)),\n        yVal = yAxis.tickFormat()(scatter.y()(e.point, e.pointIndex));\n\n      if( tooltipX != null )\n          nv.tooltip.show([leftX, topX], tooltipX(e.series.key, xVal, yVal, e, chart), 'n', 1, offsetElement, 'x-nvtooltip');\n      if( tooltipY != null )\n          nv.tooltip.show([leftY, topY], tooltipY(e.series.key, xVal, yVal, e, chart), 'e', 1, offsetElement, 'y-nvtooltip');\n      if( tooltip != null )\n          nv.tooltip.show([left, top], tooltip(e.series.key, xVal, yVal, e.point.tooltip, e, chart), e.value < 0 ? 'n' : 's', null, offsetElement);\n  };\n\n  var controlsData = [\n    { key: 'Magnify', disabled: true }\n  ];\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this),\n          that = this;\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n\n      chart.update = function() { container.call(chart); };\n      chart.container = this;\n\n      //set state.disabled\n      state.disabled = data.map(function(d) { return !!d.disabled });\n\n      if (!defaultState) {\n        var key;\n        defaultState = {};\n        for (key in state) {\n          if (state[key] instanceof Array)\n            defaultState[key] = state[key].slice(0);\n          else\n            defaultState[key] = state[key];\n        }\n      }\n\n      //------------------------------------------------------------\n      // Display noData message if there's nothing to show.\n\n      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', margin.top + availableHeight / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x = scatter.xScale();\n      y = scatter.yScale();\n\n      x0 = x0 || x;\n      y0 = y0 || y;\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-scatterChart').data([data]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatterChart nv-chart-' + scatter.id());\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g')\n\n      // background for pointer events\n      gEnter.append('rect').attr('class', 'nvd3 nv-background').style(\"pointer-events\",\"none\");\n\n      gEnter.append('g').attr('class', 'nv-x nv-axis');\n      gEnter.append('g').attr('class', 'nv-y nv-axis');\n      gEnter.append('g').attr('class', 'nv-scatterWrap');\n      gEnter.append('g').attr('class', 'nv-regressionLinesWrap');\n      gEnter.append('g').attr('class', 'nv-distWrap');\n      gEnter.append('g').attr('class', 'nv-legendWrap');\n      gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      if (rightAlignYAxis) {\n          g.select(\".nv-y.nv-axis\")\n              .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Legend\n\n      if (showLegend) {\n        legend.width( availableWidth / 2 );\n\n        wrap.select('.nv-legendWrap')\n            .datum(data)\n            .call(legend);\n\n        if ( margin.top != legend.height()) {\n          margin.top = legend.height();\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n        }\n\n        wrap.select('.nv-legendWrap')\n            .attr('transform', 'translate(' + (availableWidth / 2) + ',' + (-margin.top) +')');\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Controls\n\n      if (showControls) {\n        controls.width(180).color(['#444']);\n        g.select('.nv-controlsWrap')\n            .datum(controlsData)\n            .attr('transform', 'translate(0,' + (-margin.top) +')')\n            .call(controls);\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Main Chart Component(s)\n\n      scatter\n          .width(availableWidth)\n          .height(availableHeight)\n          .color(data.map(function(d,i) {\n            return d.color || color(d, i);\n          }).filter(function(d,i) { return !data[i].disabled }))\n\n      wrap.select('.nv-scatterWrap')\n          .datum(data.filter(function(d) { return !d.disabled }))\n          .call(scatter);\n\n      wrap.select('.nv-regressionLinesWrap')\n          .attr('clip-path', 'url(#nv-edge-clip-' + scatter.id() + ')');\n\n      var regWrap = wrap.select('.nv-regressionLinesWrap').selectAll('.nv-regLines')\n                      .data(function(d) {return d });\n      \n      regWrap.enter().append('g').attr('class', 'nv-regLines');\n\n      var regLine = regWrap.selectAll('.nv-regLine').data(function(d){return [d]});\n      var regLineEnter = regLine.enter()\n                       .append('line').attr('class', 'nv-regLine')\n                       .style('stroke-opacity', 0);\n\n      regLine\n          \n          .attr('x1', x.range()[0])\n          .attr('x2', x.range()[1])\n          .attr('y1', function(d,i) {return y(x.domain()[0] * d.slope + d.intercept) })\n          .attr('y2', function(d,i) { return y(x.domain()[1] * d.slope + d.intercept) })\n          .style('stroke', function(d,i,j) { return color(d,j) })\n          .style('stroke-opacity', function(d,i) {\n            return (d.disabled || typeof d.slope === 'undefined' || typeof d.intercept === 'undefined') ? 0 : 1 \n          });\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Axes\n\n      if (showXAxis) {\n        xAxis\n            .scale(x)\n            .ticks( xAxis.ticks() ? xAxis.ticks() : availableWidth / 100 )\n            .tickSize( -availableHeight , 0);\n\n        g.select('.nv-x.nv-axis')\n            .attr('transform', 'translate(0,' + y.range()[0] + ')')\n            .call(xAxis);\n      }\n\n      if (showYAxis) {\n        yAxis\n            .scale(y)\n            .ticks( yAxis.ticks() ? yAxis.ticks() : availableHeight / 36 )\n            .tickSize( -availableWidth, 0);\n\n        g.select('.nv-y.nv-axis')\n            .call(yAxis);\n      }\n\n\n      if (showDistX) {\n        distX\n            .getData(scatter.x())\n            .scale(x)\n            .width(availableWidth)\n            .color(data.map(function(d,i) {\n              return d.color || color(d, i);\n            }).filter(function(d,i) { return !data[i].disabled }));\n        gEnter.select('.nv-distWrap').append('g')\n            .attr('class', 'nv-distributionX');\n        g.select('.nv-distributionX')\n            .attr('transform', 'translate(0,' + y.range()[0] + ')')\n            .datum(data.filter(function(d) { return !d.disabled }))\n            .call(distX);\n      }\n\n      if (showDistY) {\n        distY\n            .getData(scatter.y())\n            .scale(y)\n            .width(availableHeight)\n            .color(data.map(function(d,i) {\n              return d.color || color(d, i);\n            }).filter(function(d,i) { return !data[i].disabled }));\n        gEnter.select('.nv-distWrap').append('g')\n            .attr('class', 'nv-distributionY');\n        g.select('.nv-distributionY')\n            .attr('transform', 'translate(' + (rightAlignYAxis ? availableWidth : -distY.size() ) + ',0)')\n            .datum(data.filter(function(d) { return !d.disabled }))\n            .call(distY);\n      }\n\n      //------------------------------------------------------------\n\n\n\n\n      if (d3.fisheye) {\n        g.select('.nv-background')\n            .attr('width', availableWidth)\n            .attr('height', availableHeight)\n            ;\n\n        g.select('.nv-background').on('mousemove', updateFisheye);\n        g.select('.nv-background').on('click', function() { pauseFisheye = !pauseFisheye;});\n        scatter.dispatch.on('elementClick.freezeFisheye', function() {\n          pauseFisheye = !pauseFisheye;\n        });\n      }\n\n\n      function updateFisheye() {\n        if (pauseFisheye) {\n          g.select('.nv-point-paths').style('pointer-events', 'all');\n          return false;\n        }\n\n        g.select('.nv-point-paths').style('pointer-events', 'none' );\n\n        var mouse = d3.mouse(this);\n        x.distortion(fisheye).focus(mouse[0]);\n        y.distortion(fisheye).focus(mouse[1]);\n\n        g.select('.nv-scatterWrap')\n            .datum(data.filter(function(d) { return !d.disabled }))\n            .call(scatter);\n\n        if (showXAxis)\n          g.select('.nv-x.nv-axis').call(xAxis);\n\n        if (showYAxis)\n          g.select('.nv-y.nv-axis').call(yAxis);\n        \n        g.select('.nv-distributionX')\n            .datum(data.filter(function(d) { return !d.disabled }))\n            .call(distX);\n        g.select('.nv-distributionY')\n            .datum(data.filter(function(d) { return !d.disabled }))\n            .call(distY);\n      }\n\n\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n      controls.dispatch.on('legendClick', function(d,i) {\n        d.disabled = !d.disabled;\n\n        fisheye = d.disabled ? 0 : 2.5;\n        g.select('.nv-background') .style('pointer-events', d.disabled ? 'none' : 'all');\n        g.select('.nv-point-paths').style('pointer-events', d.disabled ? 'all' : 'none' );\n\n        if (d.disabled) {\n          x.distortion(fisheye).focus(0);\n          y.distortion(fisheye).focus(0);\n\n          g.select('.nv-scatterWrap').call(scatter);\n          g.select('.nv-x.nv-axis').call(xAxis);\n          g.select('.nv-y.nv-axis').call(yAxis);\n        } else {\n          pauseFisheye = false;\n        }\n\n        chart.update();\n      });\n\n      legend.dispatch.on('stateChange', function(newState) { \n        state = newState;\n        dispatch.stateChange(state);\n        chart.update();\n      });\n\n\n      scatter.dispatch.on('elementMouseover.tooltip', function(e) {\n        d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-distx-' + e.pointIndex)\n            .attr('y1', e.pos[1] - availableHeight);\n        d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-disty-' + e.pointIndex)\n            .attr('x2', e.pos[0] + distX.size());\n\n        e.pos = [e.pos[0] + margin.left, e.pos[1] + margin.top];\n        dispatch.tooltipShow(e);\n      });\n\n      dispatch.on('tooltipShow', function(e) {\n        if (tooltips) showTooltip(e, that.parentNode);\n      });\n\n      // Update chart from a state object passed to event handler\n      dispatch.on('changeState', function(e) {\n\n        if (typeof e.disabled !== 'undefined') {\n          data.forEach(function(series,i) {\n            series.disabled = e.disabled[i];\n          });\n\n          state.disabled = e.disabled;\n        }\n\n        chart.update();\n      });\n\n      //============================================================\n\n\n      //store old scales for use in transitions on update\n      x0 = x.copy();\n      y0 = y.copy();\n\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  scatter.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n\n    d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-distx-' + e.pointIndex)\n        .attr('y1', 0);\n    d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-disty-' + e.pointIndex)\n        .attr('x2', distY.size());\n  });\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.dispatch = dispatch;\n  chart.scatter = scatter;\n  chart.legend = legend;\n  chart.controls = controls;\n  chart.xAxis = xAxis;\n  chart.yAxis = yAxis;\n  chart.distX = distX;\n  chart.distY = distY;\n\n  d3.rebind(chart, scatter, 'id', 'interactive', 'pointActive', 'x', 'y', 'shape', 'size', 'xScale', 'yScale', 'zScale', 'xDomain', 'yDomain', 'xRange', 'yRange', 'sizeDomain', 'sizeRange', 'forceX', 'forceY', 'forceSize', 'clipVoronoi', 'clipRadius', 'useVoronoi');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    legend.color(color);\n    distX.color(color);\n    distY.color(color);\n    return chart;\n  };\n\n  chart.showDistX = function(_) {\n    if (!arguments.length) return showDistX;\n    showDistX = _;\n    return chart;\n  };\n\n  chart.showDistY = function(_) {\n    if (!arguments.length) return showDistY;\n    showDistY = _;\n    return chart;\n  };\n\n  chart.showControls = function(_) {\n    if (!arguments.length) return showControls;\n    showControls = _;\n    return chart;\n  };\n\n  chart.showLegend = function(_) {\n    if (!arguments.length) return showLegend;\n    showLegend = _;\n    return chart;\n  };\n\n  chart.showXAxis = function(_) {\n    if (!arguments.length) return showXAxis;\n    showXAxis = _;\n    return chart;\n  };\n\n  chart.showYAxis = function(_) {\n    if (!arguments.length) return showYAxis;\n    showYAxis = _;\n    return chart;\n  };\n\n  chart.rightAlignYAxis = function(_) {\n    if(!arguments.length) return rightAlignYAxis;\n    rightAlignYAxis = _;\n    yAxis.orient( (_) ? 'right' : 'left');\n    return chart;\n  };\n\n  chart.fisheye = function(_) {\n    if (!arguments.length) return fisheye;\n    fisheye = _;\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.tooltipXContent = function(_) {\n    if (!arguments.length) return tooltipX;\n    tooltipX = _;\n    return chart;\n  };\n\n  chart.tooltipYContent = function(_) {\n    if (!arguments.length) return tooltipY;\n    tooltipY = _;\n    return chart;\n  };\n\n  chart.state = function(_) {\n    if (!arguments.length) return state;\n    state = _;\n    return chart;\n  };\n\n  chart.defaultState = function(_) {\n    if (!arguments.length) return defaultState;\n    defaultState = _;\n    return chart;\n  };\n\n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  chart.transitionDuration = function(_) {\n    if (!arguments.length) return transitionDuration;\n    transitionDuration = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.sparkline = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var margin = {top: 2, right: 0, bottom: 2, left: 0}\n    , width = 400\n    , height = 32\n    , animate = true\n    , x = d3.scale.linear()\n    , y = d3.scale.linear()\n    , getX = function(d) { return d.x }\n    , getY = function(d) { return d.y }\n    , color = nv.utils.getColor(['#000'])\n    , xDomain\n    , yDomain\n    , xRange\n    , yRange\n    ;\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var availableWidth = width - margin.left - margin.right,\n          availableHeight = height - margin.top - margin.bottom,\n          container = d3.select(this);\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x   .domain(xDomain || d3.extent(data, getX ))\n          .range(xRange || [0, availableWidth]);\n\n      y   .domain(yDomain || d3.extent(data, getY ))\n          .range(yRange || [availableHeight, 0]);\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-sparkline').data([data]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparkline');\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\n      //------------------------------------------------------------\n\n\n      var paths = wrap.selectAll('path')\n          .data(function(d) { return [d] });\n      paths.enter().append('path');\n      paths.exit().remove();\n      paths\n          .style('stroke', function(d,i) { return d.color || color(d, i) })\n          .attr('d', d3.svg.line()\n            .x(function(d,i) { return x(getX(d,i)) })\n            .y(function(d,i) { return y(getY(d,i)) })\n          );\n\n\n      // TODO: Add CURRENT data point (Need Min, Mac, Current / Most recent)\n      var points = wrap.selectAll('circle.nv-point')\n          .data(function(data) {\n              var yValues = data.map(function(d, i) { return getY(d,i); });\n              function pointIndex(index) {\n                  if (index != -1) {\n\t              var result = data[index];\n                      result.pointIndex = index;\n                      return result;\n                  } else {\n                      return null;\n                  }\n              }\n              var maxPoint = pointIndex(yValues.lastIndexOf(y.domain()[1])),\n                  minPoint = pointIndex(yValues.indexOf(y.domain()[0])),\n                  currentPoint = pointIndex(yValues.length - 1);\n              return [minPoint, maxPoint, currentPoint].filter(function (d) {return d != null;});\n          });\n      points.enter().append('circle');\n      points.exit().remove();\n      points\n          .attr('cx', function(d,i) { return x(getX(d,d.pointIndex)) })\n          .attr('cy', function(d,i) { return y(getY(d,d.pointIndex)) })\n          .attr('r', 2)\n          .attr('class', function(d,i) {\n            return getX(d, d.pointIndex) == x.domain()[1] ? 'nv-point nv-currentValue' :\n                   getY(d, d.pointIndex) == y.domain()[0] ? 'nv-point nv-minValue' : 'nv-point nv-maxValue'\n          });\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.x = function(_) {\n    if (!arguments.length) return getX;\n    getX = d3.functor(_);\n    return chart;\n  };\n\n  chart.y = function(_) {\n    if (!arguments.length) return getY;\n    getY = d3.functor(_);\n    return chart;\n  };\n\n  chart.xScale = function(_) {\n    if (!arguments.length) return x;\n    x = _;\n    return chart;\n  };\n\n  chart.yScale = function(_) {\n    if (!arguments.length) return y;\n    y = _;\n    return chart;\n  };\n\n  chart.xDomain = function(_) {\n    if (!arguments.length) return xDomain;\n    xDomain = _;\n    return chart;\n  };\n\n  chart.yDomain = function(_) {\n    if (!arguments.length) return yDomain;\n    yDomain = _;\n    return chart;\n  };\n\n  chart.xRange = function(_) {\n    if (!arguments.length) return xRange;\n    xRange = _;\n    return chart;\n  };\n\n  chart.yRange = function(_) {\n    if (!arguments.length) return yRange;\n    yRange = _;\n    return chart;\n  };\n\n  chart.animate = function(_) {\n    if (!arguments.length) return animate;\n    animate = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.sparklinePlus = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var sparkline = nv.models.sparkline();\n\n  var margin = {top: 15, right: 100, bottom: 10, left: 50}\n    , width = null\n    , height = null\n    , x\n    , y\n    , index = []\n    , paused = false\n    , xTickFormat = d3.format(',r')\n    , yTickFormat = d3.format(',.2f')\n    , showValue = true\n    , alignValue = true\n    , rightAlignValue = false\n    , noData = \"No Data Available.\"\n    ;\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this);\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n\n      \n\n      chart.update = function() { chart(selection) };\n      chart.container = this;\n\n\n      //------------------------------------------------------------\n      // Display No Data message if there's nothing to show.\n\n      if (!data || !data.length) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', margin.top + availableHeight / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      var currentValue = sparkline.y()(data[data.length-1], data.length-1);\n\n      //------------------------------------------------------------\n\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x = sparkline.xScale();\n      y = sparkline.yScale();\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-sparklineplus').data([data]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparklineplus');\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-sparklineWrap');\n      gEnter.append('g').attr('class', 'nv-valueWrap');\n      gEnter.append('g').attr('class', 'nv-hoverArea');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Main Chart Component(s)\n\n      var sparklineWrap = g.select('.nv-sparklineWrap');\n\n      sparkline\n        .width(availableWidth)\n        .height(availableHeight);\n\n      sparklineWrap\n          .call(sparkline);\n\n      //------------------------------------------------------------\n\n\n      var valueWrap = g.select('.nv-valueWrap');\n      \n      var value = valueWrap.selectAll('.nv-currentValue')\n          .data([currentValue]);\n\n      value.enter().append('text').attr('class', 'nv-currentValue')\n          .attr('dx', rightAlignValue ? -8 : 8)\n          .attr('dy', '.9em')\n          .style('text-anchor', rightAlignValue ? 'end' : 'start');\n\n      value\n          .attr('x', availableWidth + (rightAlignValue ? margin.right : 0))\n          .attr('y', alignValue ? function(d) { return y(d) } : 0)\n          .style('fill', sparkline.color()(data[data.length-1], data.length-1))\n          .text(yTickFormat(currentValue));\n\n\n\n      gEnter.select('.nv-hoverArea').append('rect')\n          .on('mousemove', sparklineHover)\n          .on('click', function() { paused = !paused })\n          .on('mouseout', function() { index = []; updateValueLine(); });\n          //.on('mouseout', function() { index = null; updateValueLine(); });\n\n      g.select('.nv-hoverArea rect')\n          .attr('transform', function(d) { return 'translate(' + -margin.left + ',' + -margin.top + ')' })\n          .attr('width', availableWidth + margin.left + margin.right)\n          .attr('height', availableHeight + margin.top);\n\n\n\n      function updateValueLine() { //index is currently global (within the chart), may or may not keep it that way\n        if (paused) return;\n\n        var hoverValue = g.selectAll('.nv-hoverValue').data(index)\n\n        var hoverEnter = hoverValue.enter()\n          .append('g').attr('class', 'nv-hoverValue')\n            .style('stroke-opacity', 0)\n            .style('fill-opacity', 0);\n\n        hoverValue.exit()\n          \n            .style('stroke-opacity', 0)\n            .style('fill-opacity', 0)\n            .remove();\n\n        hoverValue\n            .attr('transform', function(d) { return 'translate(' + x(sparkline.x()(data[d],d)) + ',0)' })\n          \n            .style('stroke-opacity', 1)\n            .style('fill-opacity', 1);\n\n        if (!index.length) return;\n\n        hoverEnter.append('line')\n            .attr('x1', 0)\n            .attr('y1', -margin.top)\n            .attr('x2', 0)\n            .attr('y2', availableHeight);\n\n\n        hoverEnter.append('text').attr('class', 'nv-xValue')\n            .attr('x', -6)\n            .attr('y', -margin.top)\n            .attr('text-anchor', 'end')\n            .attr('dy', '.9em')\n\n\n        g.select('.nv-hoverValue .nv-xValue')\n            .text(xTickFormat(sparkline.x()(data[index[0]], index[0])));\n\n        hoverEnter.append('text').attr('class', 'nv-yValue')\n            .attr('x', 6)\n            .attr('y', -margin.top)\n            .attr('text-anchor', 'start')\n            .attr('dy', '.9em')\n\n        g.select('.nv-hoverValue .nv-yValue')\n            .text(yTickFormat(sparkline.y()(data[index[0]], index[0])));\n\n      }\n\n\n      function sparklineHover() {\n        if (paused) return;\n\n        var pos = d3.mouse(this)[0] - margin.left;\n\n        function getClosestIndex(data, x) {\n          var distance = Math.abs(sparkline.x()(data[0], 0) - x);\n          var closestIndex = 0;\n          for (var i = 0; i < data.length; i++){\n            if (Math.abs(sparkline.x()(data[i], i) - x) < distance) {\n              distance = Math.abs(sparkline.x()(data[i], i) - x);\n              closestIndex = i;\n            }\n          }\n          return closestIndex;\n        }\n\n        index = [getClosestIndex(data, Math.round(x.invert(pos)))];\n\n        updateValueLine();\n      }\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.sparkline = sparkline;\n\n  d3.rebind(chart, sparkline, 'x', 'y', 'xScale', 'yScale', 'color');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.xTickFormat = function(_) {\n    if (!arguments.length) return xTickFormat;\n    xTickFormat = _;\n    return chart;\n  };\n\n  chart.yTickFormat = function(_) {\n    if (!arguments.length) return yTickFormat;\n    yTickFormat = _;\n    return chart;\n  };\n\n  chart.showValue = function(_) {\n    if (!arguments.length) return showValue;\n    showValue = _;\n    return chart;\n  };\n\n  chart.alignValue = function(_) {\n    if (!arguments.length) return alignValue;\n    alignValue = _;\n    return chart;\n  };\n\n  chart.rightAlignValue = function(_) {\n    if (!arguments.length) return rightAlignValue;\n    rightAlignValue = _;\n    return chart;\n  };\n\n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.stackedArea = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n    , width = 960\n    , height = 500\n    , color = nv.utils.defaultColor() // a function that computes the color\n    , id = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't selet one\n    , getX = function(d) { return d.x } // accessor to get the x value from a data point\n    , getY = function(d) { return d.y } // accessor to get the y value from a data point\n    , style = 'stack'\n    , offset = 'zero'\n    , order = 'default'\n    , interpolate = 'linear'  // controls the line interpolation\n    , clipEdge = false // if true, masks lines within x and y scale\n    , x //can be accessed via chart.xScale()\n    , y //can be accessed via chart.yScale()\n    , scatter = nv.models.scatter()\n    , dispatch =  d3.dispatch('tooltipShow', 'tooltipHide', 'areaClick', 'areaMouseover', 'areaMouseout')\n    ;\n\n  scatter\n    .size(2.2) // default size\n    .sizeDomain([2.2,2.2]) // all the same size by default\n    ;\n\n  /************************************\n   * offset:\n   *   'wiggle' (stream)\n   *   'zero' (stacked)\n   *   'expand' (normalize to 100%)\n   *   'silhouette' (simple centered)\n   *\n   * order:\n   *   'inside-out' (stream)\n   *   'default' (input order)\n   ************************************/\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var availableWidth = width - margin.left - margin.right,\n          availableHeight = height - margin.top - margin.bottom,\n          container = d3.select(this);\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x = scatter.xScale();\n      y = scatter.yScale();\n\n      //------------------------------------------------------------\n\n      var dataRaw = data;\n      // Injecting point index into each point because d3.layout.stack().out does not give index\n      data.forEach(function(aseries, i) {\n        aseries.seriesIndex = i;\n        aseries.values = aseries.values.map(function(d, j) {\n          d.index = j;\n          d.seriesIndex = i;\n          return d;\n        });\n      });\n\n      var dataFiltered = data.filter(function(series) {\n            return !series.disabled;\n      });\n\n      data = d3.layout.stack()\n               .order(order)\n               .offset(offset)\n               .values(function(d) { return d.values })  //TODO: make values customizeable in EVERY model in this fashion\n               .x(getX)\n               .y(getY)\n               .out(function(d, y0, y) {\n                    var yHeight = (getY(d) === 0) ? 0 : y;\n                    d.display = {\n                      y: yHeight,\n                     y0: y0\n                    };\n                })\n              (dataFiltered);\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-stackedarea').data([data]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedarea');\n      var defsEnter = wrapEnter.append('defs');\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-areaWrap');\n      gEnter.append('g').attr('class', 'nv-scatterWrap');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      //------------------------------------------------------------\n\n\n      scatter\n        .width(availableWidth)\n        .height(availableHeight)\n        .x(getX)\n        .y(function(d) { return d.display.y + d.display.y0 })\n        .forceY([0])\n        .color(data.map(function(d,i) {\n          return d.color || color(d, d.seriesIndex);\n        }));\n\n\n      var scatterWrap = g.select('.nv-scatterWrap')\n          .datum(data);\n\n      scatterWrap.call(scatter);\n\n      defsEnter.append('clipPath')\n          .attr('id', 'nv-edge-clip-' + id)\n        .append('rect');\n\n      wrap.select('#nv-edge-clip-' + id + ' rect')\n          .attr('width', availableWidth)\n          .attr('height', availableHeight);\n\n      g   .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n      var area = d3.svg.area()\n          .x(function(d,i)  { return x(getX(d,i)) })\n          .y0(function(d) {\n              return y(d.display.y0)\n          })\n          .y1(function(d) {\n              return y(d.display.y + d.display.y0)\n          })\n          .interpolate(interpolate);\n\n      var zeroArea = d3.svg.area()\n          .x(function(d,i)  { return x(getX(d,i)) })\n          .y0(function(d) { return y(d.display.y0) })\n          .y1(function(d) { return y(d.display.y0) });\n\n\n      var path = g.select('.nv-areaWrap').selectAll('path.nv-area')\n          .data(function(d) { return d });\n\n      path.enter().append('path').attr('class', function(d,i) { return 'nv-area nv-area-' + i })\n          .attr('d', function(d,i){\n            return zeroArea(d.values, d.seriesIndex);\n          })\n          .on('mouseover', function(d,i) {\n            d3.select(this).classed('hover', true);\n            dispatch.areaMouseover({\n              point: d,\n              series: d.key,\n              pos: [d3.event.pageX, d3.event.pageY],\n              seriesIndex: d.seriesIndex\n            });\n          })\n          .on('mouseout', function(d,i) {\n            d3.select(this).classed('hover', false);\n            dispatch.areaMouseout({\n              point: d,\n              series: d.key,\n              pos: [d3.event.pageX, d3.event.pageY],\n              seriesIndex: d.seriesIndex\n            });\n          })\n          .on('click', function(d,i) {\n            d3.select(this).classed('hover', false);\n            dispatch.areaClick({\n              point: d,\n              series: d.key,\n              pos: [d3.event.pageX, d3.event.pageY],\n              seriesIndex: d.seriesIndex\n            });\n          })\n\n      path.exit().remove();\n\n      path\n          .style('fill', function(d,i){\n            return d.color || color(d, d.seriesIndex)\n          })\n          .style('stroke', function(d,i){ return d.color || color(d, d.seriesIndex) });\n      path\n          .attr('d', function(d,i) {\n            return area(d.values,i)\n          });\n\n\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n      scatter.dispatch.on('elementMouseover.area', function(e) {\n        g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', true);\n      });\n      scatter.dispatch.on('elementMouseout.area', function(e) {\n        g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', false);\n      });\n\n      //============================================================\n      //Special offset functions\n      chart.d3_stackedOffset_stackPercent = function(stackData) {\n          var n = stackData.length,    //How many series\n          m = stackData[0].length,     //how many points per series\n          k = 1 / n,\n           i,\n           j,\n           o,\n           y0 = [];\n\n          for (j = 0; j < m; ++j) { //Looping through all points\n            for (i = 0, o = 0; i < dataRaw.length; i++)  //looping through series'\n                o += getY(dataRaw[i].values[j])   //total value of all points at a certian point in time.\n\n            if (o) for (i = 0; i < n; i++)\n               stackData[i][j][1] /= o;\n            else\n              for (i = 0; i < n; i++)\n               stackData[i][j][1] = k;\n          }\n          for (j = 0; j < m; ++j) y0[j] = 0;\n          return y0;\n      };\n\n    });\n\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  scatter.dispatch.on('elementClick.area', function(e) {\n    dispatch.areaClick(e);\n  })\n  scatter.dispatch.on('elementMouseover.tooltip', function(e) {\n        e.pos = [e.pos[0] + margin.left, e.pos[1] + margin.top],\n        dispatch.tooltipShow(e);\n  });\n  scatter.dispatch.on('elementMouseout.tooltip', function(e) {\n        dispatch.tooltipHide(e);\n  });\n\n  //============================================================\n\n  //============================================================\n  // Global getters and setters\n  //------------------------------------------------------------\n\n  chart.dispatch = dispatch;\n  chart.scatter = scatter;\n\n  d3.rebind(chart, scatter, 'interactive', 'size', 'xScale', 'yScale', 'zScale', 'xDomain', 'yDomain', 'xRange', 'yRange',\n    'sizeDomain', 'forceX', 'forceY', 'forceSize', 'clipVoronoi', 'useVoronoi','clipRadius','highlightPoint','clearHighlights');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.x = function(_) {\n    if (!arguments.length) return getX;\n    getX = d3.functor(_);\n    return chart;\n  };\n\n  chart.y = function(_) {\n    if (!arguments.length) return getY;\n    getY = d3.functor(_);\n    return chart;\n  }\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.clipEdge = function(_) {\n    if (!arguments.length) return clipEdge;\n    clipEdge = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    return chart;\n  };\n\n  chart.offset = function(_) {\n    if (!arguments.length) return offset;\n    offset = _;\n    return chart;\n  };\n\n  chart.order = function(_) {\n    if (!arguments.length) return order;\n    order = _;\n    return chart;\n  };\n\n  //shortcut for offset + order\n  chart.style = function(_) {\n    if (!arguments.length) return style;\n    style = _;\n\n    switch (style) {\n      case 'stack':\n        chart.offset('zero');\n        chart.order('default');\n        break;\n      case 'stream':\n        chart.offset('wiggle');\n        chart.order('inside-out');\n        break;\n      case 'stream-center':\n          chart.offset('silhouette');\n          chart.order('inside-out');\n          break;\n      case 'expand':\n        chart.offset('expand');\n        chart.order('default');\n        break;\n      case 'stack_percent':\n        chart.offset(chart.d3_stackedOffset_stackPercent);\n        chart.order('default');\n        break;\n    }\n\n    return chart;\n  };\n\n  chart.interpolate = function(_) {\n\t    if (!arguments.length) return interpolate;\n\t    interpolate = _;\n\t    return chart;\n  };\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.stackedAreaChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var stacked = nv.models.stackedArea()\n    , xAxis = nv.models.axis()\n    , yAxis = nv.models.axis()\n    , legend = nv.models.legend()\n    , controls = nv.models.legend()\n    , interactiveLayer = nv.interactiveGuideline()\n    ;\n\n  var margin = {top: 30, right: 25, bottom: 50, left: 60}\n    , width = null\n    , height = null\n    , color = nv.utils.defaultColor() // a function that takes in d, i and returns color\n    , showControls = true\n    , showLegend = true\n    , showXAxis = true\n    , showYAxis = true\n    , rightAlignYAxis = false\n    , useInteractiveGuideline = false\n    , tooltips = true\n    , tooltip = function(key, x, y, e, graph) {\n        return '<h3>' + key + '</h3>' +\n               '<p>' +  y + ' on ' + x + '</p>'\n      }\n    , x //can be accessed via chart.xScale()\n    , y //can be accessed via chart.yScale()\n    , yAxisTickFormat = d3.format(',.2f')\n    , state = { style: stacked.style() }\n    , defaultState = null\n    , noData = 'No Data Available.'\n    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n    , controlWidth = 250\n    , cData = ['Stacked','Stream','Expanded']\n    , controlLabels = {}\n    , transitionDuration = 0\n    ;\n\n  xAxis\n    .orient('bottom')\n    .tickPadding(7)\n    ;\n  yAxis\n    .orient((rightAlignYAxis) ? 'right' : 'left')\n    ;\n\n  controls.updateState(false);\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var showTooltip = function(e, offsetElement) {\n    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n        x = xAxis.tickFormat()(stacked.x()(e.point, e.pointIndex)),\n        y = yAxis.tickFormat()(stacked.y()(e.point, e.pointIndex)),\n        content = tooltip(e.series.key, x, y, e, chart);\n\n    nv.tooltip.show([left, top], content, e.value < 0 ? 'n' : 's', null, offsetElement);\n  };\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this),\n          that = this;\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n\n      chart.update = function() { container.call(chart); };\n      chart.container = this;\n\n      //set state.disabled\n      state.disabled = data.map(function(d) { return !!d.disabled });\n\n      if (!defaultState) {\n        var key;\n        defaultState = {};\n        for (key in state) {\n          if (state[key] instanceof Array)\n            defaultState[key] = state[key].slice(0);\n          else\n            defaultState[key] = state[key];\n        }\n      }\n\n      //------------------------------------------------------------\n      // Display No Data message if there's nothing to show.\n\n      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', margin.top + availableHeight / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x = stacked.xScale();\n      y = stacked.yScale();\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-stackedAreaChart').data([data]);\n      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedAreaChart').append('g');\n      var g = wrap.select('g');\n\n      gEnter.append(\"rect\").style(\"opacity\",0);\n      gEnter.append('g').attr('class', 'nv-x nv-axis');\n      gEnter.append('g').attr('class', 'nv-y nv-axis');\n      gEnter.append('g').attr('class', 'nv-stackedWrap');\n      gEnter.append('g').attr('class', 'nv-legendWrap');\n      gEnter.append('g').attr('class', 'nv-controlsWrap');\n      gEnter.append('g').attr('class', 'nv-interactive');\n\n      g.select(\"rect\").attr(\"width\",availableWidth).attr(\"height\",availableHeight);\n      //------------------------------------------------------------\n      // Legend\n\n      if (showLegend) {\n        var legendWidth = (showControls) ? availableWidth - controlWidth : availableWidth;\n        legend\n          .width(legendWidth);\n\n        g.select('.nv-legendWrap')\n            .datum(data)\n            .call(legend);\n\n        if ( margin.top != legend.height()) {\n          margin.top = legend.height();\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n        }\n\n        g.select('.nv-legendWrap')\n            .attr('transform', 'translate(' + (availableWidth-legendWidth) + ',' + (-margin.top) +')');\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Controls\n\n      if (showControls) {\n        var controlsData = [\n          {\n            key: controlLabels.stacked || 'Stacked',\n            metaKey: 'Stacked',\n            disabled: stacked.style() != 'stack',\n            style: 'stack'\n          },\n          {\n            key: controlLabels.stream || 'Stream',\n            metaKey: 'Stream',\n            disabled: stacked.style() != 'stream',\n            style: 'stream'\n          },\n          {\n            key: controlLabels.expanded || 'Expanded',\n            metaKey: 'Expanded',\n            disabled: stacked.style() != 'expand',\n            style: 'expand'\n          },\n          {\n            key: controlLabels.stack_percent || 'Stack %',\n            metaKey: 'Stack_Percent',\n            disabled: stacked.style() != 'stack_percent',\n            style: 'stack_percent'\n          }\n        ];\n\n        controlWidth = (cData.length/3) * 260;\n\n        controlsData = controlsData.filter(function(d) {\n          return cData.indexOf(d.metaKey) !== -1;\n        })\n\n        controls\n          .width( controlWidth )\n          .color(['#444', '#444', '#444']);\n\n        g.select('.nv-controlsWrap')\n            .datum(controlsData)\n            .call(controls);\n\n\n        if ( margin.top != Math.max(controls.height(), legend.height()) ) {\n          margin.top = Math.max(controls.height(), legend.height());\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n        }\n\n\n        g.select('.nv-controlsWrap')\n            .attr('transform', 'translate(0,' + (-margin.top) +')');\n      }\n\n      //------------------------------------------------------------\n\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      if (rightAlignYAxis) {\n          g.select(\".nv-y.nv-axis\")\n              .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n      }\n\n      //------------------------------------------------------------\n      // Main Chart Component(s)\n\n      //------------------------------------------------------------\n      //Set up interactive layer\n      if (useInteractiveGuideline) {\n        interactiveLayer\n           .width(availableWidth)\n           .height(availableHeight)\n           .margin({left: margin.left, top: margin.top})\n           .svgContainer(container)\n           .xScale(x);\n        wrap.select(\".nv-interactive\").call(interactiveLayer);\n      }\n\n      stacked\n        .width(availableWidth)\n        .height(availableHeight)\n\n      var stackedWrap = g.select('.nv-stackedWrap')\n          .datum(data);\n\n      stackedWrap.call(stacked);\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Axes\n\n      if (showXAxis) {\n        xAxis\n          .scale(x)\n          .ticks( availableWidth / 100 )\n          .tickSize( -availableHeight, 0);\n\n        g.select('.nv-x.nv-axis')\n            .attr('transform', 'translate(0,' + availableHeight + ')');\n\n        g.select('.nv-x.nv-axis')\n          \n            .call(xAxis);\n      }\n\n      if (showYAxis) {\n        yAxis\n          .scale(y)\n          .ticks(stacked.offset() == 'wiggle' ? 0 : availableHeight / 36)\n          .tickSize(-availableWidth, 0)\n          .setTickFormat( (stacked.style() == 'expand' || stacked.style() == 'stack_percent')\n                ? d3.format('%') : yAxisTickFormat);\n\n        g.select('.nv-y.nv-axis')\n          \n            .call(yAxis);\n      }\n\n      //------------------------------------------------------------\n\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n      stacked.dispatch.on('areaClick.toggle', function(e) {\n        if (data.filter(function(d) { return !d.disabled }).length === 1)\n          data.forEach(function(d) {\n            d.disabled = false;\n          });\n        else\n          data.forEach(function(d,i) {\n            d.disabled = (i != e.seriesIndex);\n          });\n\n        state.disabled = data.map(function(d) { return !!d.disabled });\n        dispatch.stateChange(state);\n\n        chart.update();\n      });\n\n      legend.dispatch.on('stateChange', function(newState) {\n        state.disabled = newState.disabled;\n        dispatch.stateChange(state);\n        chart.update();\n      });\n\n      controls.dispatch.on('legendClick', function(d,i) {\n        if (!d.disabled) return;\n\n        controlsData = controlsData.map(function(s) {\n          s.disabled = true;\n          return s;\n        });\n        d.disabled = false;\n\n        stacked.style(d.style);\n\n\n        state.style = stacked.style();\n        dispatch.stateChange(state);\n\n        chart.update();\n      });\n\n\n      interactiveLayer.dispatch.on('elementMousemove', function(e) {\n          stacked.clearHighlights();\n          var singlePoint, pointIndex, pointXLocation, allData = [];\n          data\n          .filter(function(series, i) {\n            series.seriesIndex = i;\n            return !series.disabled;\n          })\n          .forEach(function(series,i) {\n              pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n              stacked.highlightPoint(i, pointIndex, true);\n              var point = series.values[pointIndex];\n              if (typeof point === 'undefined') return;\n              if (typeof singlePoint === 'undefined') singlePoint = point;\n              if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n\n              //If we are in 'expand' mode, use the stacked percent value instead of raw value.\n              var tooltipValue = (stacked.style() == 'expand') ? point.display.y : chart.y()(point,pointIndex);\n              allData.push({\n                  key: series.key,\n                  value: tooltipValue,\n                  color: color(series,series.seriesIndex),\n                  stackedValue: point.display\n              });\n          });\n\n          allData.reverse();\n\n          //Highlight the tooltip entry based on which stack the mouse is closest to.\n          if (allData.length > 2) {\n            var yValue = chart.yScale().invert(e.mouseY);\n            var yDistMax = Infinity, indexToHighlight = null;\n            allData.forEach(function(series,i) {\n\n               //To handle situation where the stacked area chart is negative, we need to use absolute values\n               //when checking if the mouse Y value is within the stack area.\n               yValue = Math.abs(yValue);\n               var stackedY0 = Math.abs(series.stackedValue.y0);\n               var stackedY = Math.abs(series.stackedValue.y);\n               if ( yValue >= stackedY0 && yValue <= (stackedY + stackedY0))\n               {\n                  indexToHighlight = i;\n                  return;\n               }\n            });\n            if (indexToHighlight != null)\n               allData[indexToHighlight].highlight = true;\n          }\n\n          var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex));\n\n          //If we are in 'expand' mode, force the format to be a percentage.\n          var valueFormatter = (stacked.style() == 'expand') ?\n               function(d,i) {return d3.format(\".1%\")(d);} :\n               function(d,i) {return yAxis.tickFormat()(d); };\n          interactiveLayer.tooltip\n                  .position({left: pointXLocation + margin.left, top: e.mouseY + margin.top})\n                  .chartContainer(that.parentNode)\n                  .enabled(tooltips)\n                  .valueFormatter(valueFormatter)\n                  .data(\n                      {\n                        value: xValue,\n                        series: allData\n                      }\n                  )();\n\n          interactiveLayer.renderGuideLine(pointXLocation);\n\n      });\n\n      interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n          dispatch.tooltipHide();\n          stacked.clearHighlights();\n      });\n\n\n      dispatch.on('tooltipShow', function(e) {\n        if (tooltips) showTooltip(e, that.parentNode);\n      });\n\n      // Update chart from a state object passed to event handler\n      dispatch.on('changeState', function(e) {\n\n        if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {\n          data.forEach(function(series,i) {\n            series.disabled = e.disabled[i];\n          });\n\n          state.disabled = e.disabled;\n        }\n\n        if (typeof e.style !== 'undefined') {\n          stacked.style(e.style);\n        }\n\n        chart.update();\n      });\n\n    });\n\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  stacked.dispatch.on('tooltipShow', function(e) {\n    //disable tooltips when value ~= 0\n    //// TODO: consider removing points from voronoi that have 0 value instead of this hack\n    /*\n    if (!Math.round(stacked.y()(e.point) * 100)) {  // 100 will not be good for very small numbers... will have to think about making this valu dynamic, based on data range\n      setTimeout(function() { d3.selectAll('.point.hover').classed('hover', false) }, 0);\n      return false;\n    }\n   */\n\n    e.pos = [e.pos[0] + margin.left, e.pos[1] + margin.top],\n    dispatch.tooltipShow(e);\n  });\n\n  stacked.dispatch.on('tooltipHide', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.dispatch = dispatch;\n  chart.stacked = stacked;\n  chart.legend = legend;\n  chart.controls = controls;\n  chart.xAxis = xAxis;\n  chart.yAxis = yAxis;\n  chart.interactiveLayer = interactiveLayer;\n\n  d3.rebind(chart, stacked, 'x', 'y', 'size', 'xScale', 'yScale', 'xDomain', 'yDomain', 'xRange', 'yRange', 'sizeDomain', 'interactive', 'useVoronoi', 'offset', 'order', 'style', 'clipEdge', 'forceX', 'forceY', 'forceSize', 'interpolate');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    legend.color(color);\n    stacked.color(color);\n    return chart;\n  };\n\n  chart.showControls = function(_) {\n    if (!arguments.length) return showControls;\n    showControls = _;\n    return chart;\n  };\n\n  chart.showLegend = function(_) {\n    if (!arguments.length) return showLegend;\n    showLegend = _;\n    return chart;\n  };\n\n  chart.showXAxis = function(_) {\n    if (!arguments.length) return showXAxis;\n    showXAxis = _;\n    return chart;\n  };\n\n  chart.showYAxis = function(_) {\n    if (!arguments.length) return showYAxis;\n    showYAxis = _;\n    return chart;\n  };\n\n  chart.rightAlignYAxis = function(_) {\n    if(!arguments.length) return rightAlignYAxis;\n    rightAlignYAxis = _;\n    yAxis.orient( (_) ? 'right' : 'left');\n    return chart;\n  };\n\n  chart.useInteractiveGuideline = function(_) {\n    if(!arguments.length) return useInteractiveGuideline;\n    useInteractiveGuideline = _;\n    if (_ === true) {\n       chart.interactive(false);\n       chart.useVoronoi(false);\n    }\n    return chart;\n  };\n\n  chart.tooltip = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.state = function(_) {\n    if (!arguments.length) return state;\n    state = _;\n    return chart;\n  };\n\n  chart.defaultState = function(_) {\n    if (!arguments.length) return defaultState;\n    defaultState = _;\n    return chart;\n  };\n\n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  chart.transitionDuration = function(_) {\n    if (!arguments.length) return transitionDuration;\n    transitionDuration = _;\n    return chart;\n  };\n\n  chart.controlsData = function(_) {\n    if (!arguments.length) return cData;\n    cData = _;\n    return chart;\n  };\n\n  chart.controlLabels = function(_) {\n    if (!arguments.length) return controlLabels;\n    if (typeof _ !== 'object') return controlLabels;\n    controlLabels = _;\n    return chart;\n  };\n\n  yAxis.setTickFormat = yAxis.tickFormat;\n\n  yAxis.tickFormat = function(_) {\n    if (!arguments.length) return yAxisTickFormat;\n    yAxisTickFormat = _;\n    return yAxis;\n  };\n\n\n  //============================================================\n\n  return chart;\n}\n})();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./static/repository/plugins/nvd3/nv.d3.js\n ** module id = 10\n ** module chunks = 7 8 9 10 11 12 13 14 15 16 17 18 19\n **/","/** This is the common wrapper for nvd3 based visualizations. */\ndefine( [ 'visualizations/utilities/tabular-utilities', 'plugins/nvd3/nv.d3', 'style!css!plugins/nvd3/nv.d3.css' ], function( Utilities ) {\n    return Backbone.View.extend({\n        initialize: function( options ) {\n            var self = this;\n            this.options = options;\n            options.render = function( canvas_id, groups ) {\n                return self.render( canvas_id, groups )\n            };\n            Utilities.panelHelper( options );\n        },\n\n        render: function( canvas_id, groups ) {\n            var self = this;\n            var chart       = this.options.chart;\n            var type        = this.options.type;\n            var makeConfig  = this.options.makeConfig;\n            var d3chart = nv.models[ type ]();\n            nv.addGraph( function() {\n                try {\n                    d3chart.xAxis.axisLabel( chart.settings.get( 'x_axis_label' ) );\n                    d3chart.yAxis.axisLabel( chart.settings.get( 'y_axis_label' ) ).axisLabelDistance( 30 );\n                    d3chart.options( { showControls: false } );\n                    d3chart.showLegend && d3chart.showLegend(chart.settings.get('show_legend') == 'true');\n                    self._makeAxes( d3chart, groups, chart.settings );\n                    makeConfig && makeConfig( d3chart );\n                    chart.settings.get( '__use_panels' ) === 'true' && d3chart.options( { showControls: false } );\n                    d3chart.xAxis.showMaxMin( false );\n                    d3chart.yAxis.showMaxMin( chart.definition.showmaxmin );\n                    d3chart.tooltipContent( function( key, x, y, graph ) {\n                        return '<h3>' + ( graph.point.tooltip || key ) + '</h3>';\n                    });\n                    if ( $( '#' + canvas_id ).length > 0 ) {\n                        var canvas = d3.select( '#' + canvas_id );\n                        canvas.datum( groups ).call( d3chart );\n                        if ( chart.definition.zoomable && chart.definition.zoomable != 'native' ) {\n                            d3chart.clipEdge && d3chart.clipEdge( true );\n                            Utilities.addZoom({\n                                xAxis  : d3chart.xAxis,\n                                yAxis  : d3chart.yAxis,\n                                yDomain: d3chart.yDomain,\n                                xDomain: d3chart.xDomain,\n                                redraw : function() { d3chart.update() },\n                                svg    : canvas\n                            });\n                        }\n                        nv.utils.windowResize( d3chart.update );\n                    }\n                } catch ( err ) {\n                    chart.state( 'failed', err );\n                }\n            });\n            return true;\n        },\n\n        /** Format axes ticks */\n        _makeAxes: function( d3chart, groups, settings ) {\n            var categories = Utilities.makeCategories( groups, [ 'x', 'y' ] );\n            function makeTickFormat( id ) {\n                Utilities.makeTickFormat({\n                    categories  : categories.array[ id ],\n                    type        : settings.get( id + '_axis_type|type' ),\n                    precision   : settings.get( id + '_axis_type|precision' ),\n                    formatter   : function( formatter ) {\n                        formatter && d3chart[ id + 'Axis' ].tickFormat( function( value ) {\n                            return formatter( value );\n                        });\n                    }\n                });\n            };\n            makeTickFormat( 'x' );\n            makeTickFormat( 'y' );\n        }\n    });\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./static/repository/visualizations/nvd3/common/wrapper.js\n ** module id = 11\n ** module chunks = 7 8 9 10 11 12 13 14 15 16 17 18\n **/"],"sourceRoot":""}