{"version":3,"sources":["webpack:///nvd3_pie.js","webpack:///webpack/bootstrap e3622d0033a89edad914?63f1******************","webpack:///./static/repository/visualizations/nvd3/pie/wrapper.js","webpack:///./static/repository/utilities/utils.js?825c****************","webpack:///./static/repository/visualizations/utilities/tabular-datasets.js?bf7b****************","webpack:///./~/css-loader/lib/css-base.js?da04****************","webpack:///./~/style-loader/addStyles.js?b980****************","webpack:///./static/repository/plugins/nvd3/nv.d3.css?e878***********","webpack:///./static/repository/plugins/nvd3/nv.d3.css?3f1e************","webpack:///./static/repository/plugins/nvd3/nv.d3.js?7602***********"],"names":["define","modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","Utils","Datasets","Backbone","View","extend","initialize","options","self","this","chart","targets","process","request","dataset_id","get","dataset_groups","groups","success","group_index","group","_drawGroup","state","resolve","canvas_id","canvas","d3","select","title","append","_fixTitle","key","pie_data","_","each","values","value","push","y","x","label","nv","addGraph","legend_visible","settings","label_outside","label_type","donut_ratio","parseFloat","chart_3d","models","pieChart","donut","labelThreshold","showLegend","labelType","donutRatio","donutLabelsOutside","datum","utils","windowResize","update","err","console","log","title_element","title_text","width","parseInt","style","height","attr","text","apply","undefined","clone","obj","JSON","parse","stringify","isJSON","test","replace","top","__utils__get__","cache_key","cache","window","debug","url","data","response","error","ajaxConfig","contentType","type","$","isEmptyObject","indexOf","param","dataType","ajax","done","jQuery","parseJSON","e","fail","response_text","responseText","always","complete","merge","optionsDefault","defaults","uid","__utils__uid__","_cache","column_list","column_def","column_name","column","block_id","_block_id","length","_fillFromCache","Galaxy","root","data_type","provider","indeces","toString","results","Array","i","row","j","v","limit","column_data","Math","max","dict","attributes","isNaN","is_label","list","result","item","join","mediaQuery","alreadyImportedModules","addStylesToDom","styles","domStyle","stylesInDom","refs","parts","addStyle","listToStyles","newStyles","css","media","sourceMap","part","insertStyleElement","styleElement","head","getHeadElement","lastStyleElementInsertedAtTop","styleElementsInsertedAtTop","insertAt","nextSibling","insertBefore","appendChild","firstChild","Error","removeStyleElement","parentNode","removeChild","idx","splice","createStyleElement","document","createElement","createLinkElement","linkElement","rel","remove","singleton","styleIndex","singletonCounter","singletonElement","applyToSingletonTag","bind","URL","createObjectURL","revokeObjectURL","Blob","btoa","updateLink","href","applyToTag","newObj","index","styleSheet","cssText","replaceText","cssNode","createTextNode","childNodes","setAttribute","unescape","encodeURIComponent","blob","oldSrc","memoize","fn","memo","arguments","isOldIE","navigator","userAgent","toLowerCase","getElementsByTagName","newList","mayRemove","textStore","replacement","filter","Boolean","content","locals","daysInMonth","month","year","Date","getDate","d3_time_range","floor","step","number","t0","t1","dt","time","times","date","version","dev","tooltip","charts","graphs","logs","dispatch","on","startTime","endTime","totalTime","Function","prototype","render","active","render_start","setTimeout","graph","queue","generate","callback","callee","render_end","identity","d","strip","s","monthEnd","getFullYear","getMonth","monthEnds","setUTCDate","getUTCDate","setDate","interactiveGuideline","layer","selection","mouseHandler","d3mouse","mouse","mouseX","mouseY","subtractMargin","mouseOutAnyReason","isMSIE","event","offsetX","offsetY","target","tagName","className","baseVal","match","margin","left","availableWidth","availableHeight","relatedTarget","ownerSVGElement","nvPointerEventsClass","elementMouseout","renderGuideLine","pointXValue","xScale","invert","elementMousemove","elementDblclick","container","wrap","selectAll","wrapEnter","enter","svgContainer","showGuideLine","line","NaNtoZero","String","exit","scale","linear","interactiveBisect","searchVal","xAccessor","bisect","bisector","currentValue","nextIndex","min","nextValue","abs","nearestValueIndex","threshold","yDistMax","Infinity","indexToHighlight","forEach","delta","convertViewBoxRatio","chartContainer","svg","node","viewBox","split","ratio","position","getTooltipContainer","newContent","body","classes","innerHTML","classed","nvtooltip","enabled","dataSeriesExists","fixedTop","contentGenerator","tooltipElem","svgComp","svgOffset","getBoundingClientRect","svgBound","chartBound","svgBoundTop","containerBound","offsetLeft","scrollLeft","offsetTop","scrollTop","snapDistance","calcTooltipPosition","gravity","distance","random","valueFormatter","headerFormatter","table","theadEnter","html","tbodyEnter","trowEnter","series","highlight","color","opacityScale","domain","range","opacity","outerHTML","footer","show","pos","dist","parentContainer","findFirstNonSVGParent","Elem","findTotalOffsetTop","initialTop","offsetParent","findTotalOffsetLeft","initialLeft","offsetHeight","offsetWidth","windowWidth","windowSize","windowHeight","pageYOffset","pageXOffset","innerWidth","scrollWidth","innerHeight","scrollHeight","tooltipTop","tooltipLeft","tLeft","tTop","cleanup","tooltips","getElementsByClassName","purging","transitionDelay","removeMe","pop","size","compatMode","documentElement","fun","oldresize","onresize","getColor","Object","defaultColor","colors","category20","customTheme","dictionary","getKey","defaultColors","defIndex","pjax","links","load","fragment","replaceChild","history","pushState","textContent","preventDefault","calcApproxTextWidth","svgTextElem","fontSize","textLength","n","optionsFunc","args","map","axis","g","ticks","orient","scale0","fmt","tickFormat","axisLabel","axisLabelText","w","showMaxMin","axisMaxMin","tickPadding","xLabelMargin","maxTextWidth","xTicks","rotateLabels","getBBox","sin","PI","isOrdinal","rangeBand","staggerLabels","rotateYLabel","right","axisLabelDistance","maxMinRange","highlightZero","round","__data__","copy","bottom","rebind","rangeBands","historicalBar","xDomain","extent","getX","concat","forceX","padData","xRange","yDomain","getY","forceY","yRange","defsEnter","gEnter","chartClick","clipEdge","bars","interactive","elementMouseover","point","pointIndex","seriesIndex","elementClick","stopPropagation","elementDblClick","rval","highlightPoint","isHoverOver","clearHighlights","yScale","bullet","rangez","ranges","slice","sort","descending","markerz","markers","measurez","measures","rangeLabelz","rangeLabels","markerLabelz","markerLabels","measureLabelz","measureLabels","x1","reverse","__chart__","rangeMin","rangeMax","rangeAvg","w1","xp1","h3","bulletChart","that","noDataText","noData","x0","subtitle","bulletWrap","transition","format","tick","tickEnter","tickUpdate","showTooltip","timer","flush","offsetElement","tooltipShow","tooltipHide","tooltipContent","cumulativeLineChart","dragStart","dragMove","dx","updateZero","dragEnd","stateChange","indexLine","oldDuration","transitionDuration","disabled","defaultState","indexDrag","behavior","drag","lines","rescaleY","seriesDomains","initialDomain","completeDomain","clamp","indexify","interactivePointerEvents","legend","showControls","controlsData","controls","rightAlign","rightAlignYAxis","tempDisabled","useInteractiveGuideline","interactiveLayer","display","linesWrap","avgLineData","average","avgLines","getAvgLineY","yVal","showXAxis","xAxis","tickSize","showYAxis","yAxis","newState","singlePoint","pointXLocation","allData","yValue","domainExtent","xValue","indexValue","noErrorCheck","updateState","useVoronoi","discreteBar","seriesData","y0","showValues","hover","barsEnter","valueFormat","rectClass","ordinal","discreteBarChart","beforeUpdate","discretebar","barsWrap","distribution","naxis","distWrap","getData","functor","historicalBarChart","indentedTree","click","unshift","shiftKey","_values","hasChildren","icon","iconOpen","iconClose","folded","depth","tree","layout","children","childIndent","nodes","tableEnter","tableClass","header","thead","theadRow1","columns","tbody","filterZero","nodeEnter","nodeName","getUrl","showCount","order","scatter","seriesEnter","legendMouseover","legendMouseout","legendClick","radioButtonMode","every","legendDblclick","align","seriesWidths","nodeTextLength","legendText","getComputedTextLength","seriesPerRow","legendWidth","columnWidths","k","reduce","prev","cur","array","xPositions","curX","ceil","xpos","ypos","newxpos","maxwidth","scatterWrap","areaPaths","isArea","area","interpolate","defined","y1","linePaths","sizeDomain","lineChart","linePlusBarChart","dataBars","bar","dataLines","y2","originalKey","y1Axis","y2Axis","lineWithFocusChart","resizePath","availableHeight2","updateBrushBG","brush","empty","brushExtent","brushBG","x2","leftWidth","rightWidth","onBrush","focusLinesWrap","availableHeight1","height2","margin2","lines2","focusEnter","contextEnter","contextLinesWrap","oldTransition","brushBGenter","gBrush","x2Axis","xTickFormat","yTickFormat","linePlusBarWithFocusChart","focusBarsWrap","y3","bars2","y4","series1","series2","bars2Wrap","lines2Wrap","y3Axis","y4Axis","multiBar","hideable","stacked","stack","offset","stackOffset","posBase","negBase","f","groupSpacing","barColor","rgb","darker","delay","multiBarChart","multibar","controlWidth","getTranslate","staggerUp","staggerDown","totalInBetweenTicks","reduceXTicks","multiBarHorizontal","valuePadding","showBarLabels","multiBarHorizontalChart","multiChart","dataLines1","dataLines2","dataBars1","dataBars2","dataStack1","dataStack2","lines1","bars1","stack1","stack2","lines1Wrap","bars1Wrap","stack1Wrap","stack2Wrap","extraValue1","a","b","aVal","extraValue2","yScale1","yDomain1","yScale2","yDomain2","yAxis1","yAxis2","stackedArea","ohlcBar","getLow","getHigh","getOpen","getClose","open","close","high","low","pie","radius","arcRadius","arc","outerRadius","startAngle","endAngle","innerRadius","slices","pieLabels","ae","pageX","pageY","_current","showLabels","labelsArc","pieLabelsOutside","labelSunbeamLayout","rotateAngle","centroid","labelLocationHash","avgHeight","avgWidth","createHashKey","coordinates","center","hashKey","percent","labelTypes","getDescription","description","pieWrap","tooltipLabel","updateInteractiveLayer","vertices","groupIndex","pX","pY","pointArray","pointActive","clipVoronoi","pointClipsEnter","pointClips","clipRadius","bounds","geom","polygon","epsilon","voronoi","clip","pointPaths","mouseEventCallback","mDispatch","needsUpdate","getSize","padDataOuter","z","forceSize","sizeRange","z0","onlyCircles","points","pointKey","sqrt","symbol","getShape","clearTimeout","timeoutID","shape","notActive","zScale","scatterChart","updateFisheye","pauseFisheye","distortion","fisheye","focus","distX","distY","xPadding","yPadding","showDistX","showDistY","tooltipX","tooltipY","leftX","topX","leftY","topY","xVal","tooltipXContent","tooltipYContent","scatterPlusLineChart","regWrap","regLine","slope","intercept","sparkline","paths","yValues","maxPoint","lastIndexOf","minPoint","currentPoint","animate","sparklinePlus","updateValueLine","paused","hoverValue","hoverEnter","sparklineHover","getClosestIndex","closestIndex","sparklineWrap","valueWrap","rightAlignValue","alignValue","showValue","dataRaw","aseries","dataFiltered","out","yHeight","zeroArea","path","areaMouseover","areaMouseout","areaClick","d3_stackedOffset_stackPercent","stackData","o","stackedAreaChart","controlLabels","metaKey","stream","expanded","stack_percent","cData","stackedWrap","setTickFormat","yAxisTickFormat","tooltipValue","stackedValue","stackedY0","stackedY"],"mappings":"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","file":"nvd3_pie.js","sourcesContent":["define(function() { return /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/** Pie chart wrapper */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1), __webpack_require__(5), __webpack_require__(10), __webpack_require__(9) ], __WEBPACK_AMD_DEFINE_RESULT__ = function( Utils, Datasets ) {\n\t    return Backbone.View.extend({\n\t        initialize: function( options ) {\n\t            var self = this;\n\t            var chart = options.chart;\n\t            var targets = options.targets;\n\t            var process = options.process;\n\t            Datasets.request({\n\t                dataset_id      : chart.get( 'dataset_id' ),\n\t                dataset_groups  : chart.groups,\n\t                success         : function( groups ) {\n\t                    for ( var group_index in groups ) {\n\t                        var group = groups[ group_index ];\n\t                        self._drawGroup( chart, group, targets[ group_index ] );\n\t                    }\n\t                    chart.state('ok', 'Pie chart has been drawn.');\n\t                    process.resolve();\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Draw group */\n\t        _drawGroup: function( chart, group, canvas_id ) {\n\t            try {\n\t                var self = this;\n\t                var canvas = d3.select( '#' + canvas_id );\n\t                var title = canvas.append( 'text' );\n\t                this._fixTitle( chart, canvas, title, group.key );\n\t                var pie_data = [];\n\t                _.each( group.values, function( value ) {\n\t                    pie_data.push( { y : value.y, x : value.label } );\n\t                });\n\t\n\t                // add graph to screen\n\t                nv.addGraph(function() {\n\t                    var legend_visible = chart.settings.get( 'show_legend' ) == 'true';\n\t                    var label_outside = chart.settings.get( 'label_outside' ) == 'true';\n\t                    var label_type = chart.settings.get( 'label_type' );\n\t                    var donut_ratio = parseFloat( chart.settings.get( 'donut_ratio' ) );\n\t                    var chart_3d = nv.models.pieChart()\n\t                        .donut( true )\n\t                        .labelThreshold( .05 )\n\t                        .showLegend( legend_visible )\n\t                        .labelType( label_type )\n\t                        .donutRatio( donut_ratio )\n\t                        .donutLabelsOutside( label_outside );\n\t                    canvas.datum( pie_data ).call( chart_3d );\n\t                    nv.utils.windowResize( function() {\n\t                        chart_3d.update();\n\t                        self._fixTitle( chart, canvas, title, group.key );\n\t                    });\n\t                });\n\t            } catch ( err ) {\n\t                console.log( err );\n\t            }\n\t        },\n\t\n\t        /** Fix title */\n\t        _fixTitle: function( chart, canvas, title_element, title_text ) {\n\t            var width = parseInt( canvas.style( 'width' ) );\n\t            var height = parseInt( canvas.style( 'height' ) );\n\t            title_element.attr( 'x', width / 2 )\n\t                         .attr( 'y', height - 10 )\n\t                         .attr( 'text-anchor', 'middle' )\n\t                         .text( title_text );\n\t        }\n\t    });\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/** Useful helper functions */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t\n\t    /** Clone */\n\t    function clone( obj ) {\n\t        return JSON.parse( JSON.stringify( obj ) || null );\n\t    };\n\t\n\t    /**\n\t     * Check if a string is a json string\n\t     * @param{String}   text - Content to be validated\n\t     */\n\t    function isJSON(text) {\n\t        return /^[\\],:{}\\s]*$/.test(text.replace(/\\\\[\"\\\\\\/bfnrtu]/g, '@').\n\t            replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']').\n\t            replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''));\n\t    };\n\t\n\t    /**\n\t     * Request handler for GET\n\t     * @param{String}   url     - Url request is made to\n\t     * @param{Function} success - Callback on success\n\t     * @param{Function} error   - Callback on error\n\t     * @param{Boolean}  cache   - Use cached data if available\n\t     */\n\t    function get (options) {\n\t        top.__utils__get__ = top.__utils__get__ || {};\n\t        var cache_key = JSON.stringify( options );\n\t        if (options.cache && top.__utils__get__[cache_key]) {\n\t            options.success && options.success(top.__utils__get__[cache_key]);\n\t            window.console.debug('utils.js::get() - Fetching from cache [' + options.url + '].');\n\t        } else {\n\t            request({\n\t                url     : options.url,\n\t                data    : options.data,\n\t                success : function(response) {\n\t                    top.__utils__get__[cache_key] = response;\n\t                    options.success && options.success(response);\n\t                },\n\t                error : function(response) {\n\t                    options.error && options.error(response);\n\t                }\n\t            });\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Request handler\n\t     * @param{String}   method  - Request method ['GET', 'POST', 'DELETE', 'PUT']\n\t     * @param{String}   url     - Url request is made to\n\t     * @param{Object}   data    - Data send to url\n\t     * @param{Function} success - Callback on success\n\t     * @param{Function} error   - Callback on error\n\t     */\n\t    function request (options) {\n\t        var ajaxConfig = {\n\t            contentType : 'application/json',\n\t            type        : options.type || 'GET',\n\t            data        : options.data || {},\n\t            url         : options.url\n\t        }\n\t        if ( ajaxConfig.type == 'GET' || ajaxConfig.type == 'DELETE' ) {\n\t            if ( !$.isEmptyObject(ajaxConfig.data) ) {\n\t                ajaxConfig.url += ajaxConfig.url.indexOf('?') == -1 ? '?' : '&';\n\t                ajaxConfig.url += $.param(ajaxConfig.data, true);\n\t            }\n\t            ajaxConfig.data = null;\n\t        } else {\n\t            ajaxConfig.dataType = 'json';\n\t            ajaxConfig.url      = ajaxConfig.url;\n\t            ajaxConfig.data     = JSON.stringify( ajaxConfig.data );\n\t        }\n\t        $.ajax( ajaxConfig ).done( function( response ) {\n\t            if ( typeof response === 'string' && isJSON( response ) ) {\n\t                try {\n\t                    response = response.replace( 'Infinity,', '\"Infinity\",' );\n\t                    response = jQuery.parseJSON( response );\n\t                } catch ( e ) {\n\t                    console.debug( e );\n\t                }\n\t            }\n\t            options.success && options.success( response );\n\t        }).fail( function( response ) {\n\t            var response_text = null;\n\t            try {\n\t                response_text = jQuery.parseJSON( response.responseText );\n\t            } catch (e) {\n\t                response_text = response.responseText;\n\t            }\n\t            options.error && options.error( response_text, response );\n\t        }).always( function() {\n\t            options.complete && options.complete();\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Safely merge to dictionaries\n\t     * @param{Object}   options         - Target dictionary\n\t     * @param{Object}   optionsDefault  - Source dictionary\n\t     */\n\t    function merge (options, optionsDefault) {\n\t        if (options) {\n\t            return _.defaults(options, optionsDefault);\n\t        } else {\n\t            return optionsDefault;\n\t        }\n\t    };\n\t\n\t    /** Create a unique id */\n\t    function uid(){\n\t        top.__utils__uid__ = top.__utils__uid__ || 0;\n\t        return 'uid-' + top.__utils__uid__++;\n\t    };\n\t\n\t    return {\n\t        get     : get,\n\t        merge   : merge,\n\t        uid     : uid,\n\t        request : request,\n\t        clone   : clone,\n\t        isJSON  : isJSON\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 2 */,\n/* 3 */,\n/* 4 */,\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/** This class handles, formats and caches datasets. */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1) ], __WEBPACK_AMD_DEFINE_RESULT__ = function( Utils ) {\n\t    /** Fills request dictionary with data from cache/response */\n\t    var _cache = {};\n\t    var request = function( options ) {\n\t        var groups      = options.dataset_groups;\n\t        var dataset_id  = options.dataset_id;\n\t        // identify columns needed to fulfill request\n\t        var column_list = [];\n\t        groups.each( function( group ) {\n\t            _.each( group.get( '__data_columns' ), function( column_def, column_name ) {\n\t                var column = group.get( column_name );\n\t                var block_id = _block_id( dataset_id, column );\n\t                if ( column_list.indexOf( column ) === -1 && !_cache[ block_id ] && column != 'auto' && column != 'zero' && column !== undefined ) {\n\t                    column_list.push( column );\n\t                }\n\t            });\n\t        });\n\t        if ( column_list.length == 0 ) {\n\t            _fillFromCache( options );\n\t            return;\n\t        }\n\t        // Fetch data columns into dataset object\n\t        Utils.get({\n\t            url     : Galaxy.root + 'api/datasets/' + dataset_id,\n\t            data    : {\n\t                data_type   : 'raw_data',\n\t                provider    : 'dataset-column',\n\t                indeces     : column_list.toString()\n\t            },\n\t            success : function( response ) {\n\t                var results = new Array( column_list.length );\n\t                for ( var i = 0; i < results.length; i++ ) {\n\t                    results[ i ] = [];\n\t                }\n\t                for ( var i in response.data ) {\n\t                    var row = response.data[ i ];\n\t                    for ( var j in row ) {\n\t                        var v = row[ j ];\n\t                        if ( v !== undefined && v != 2147483647 ) {\n\t                            results[ j ].push( v );\n\t                        }\n\t                    }\n\t                }\n\t                console.debug( 'tabular-datasets::_fetch() - Fetching complete.' );\n\t                for ( var i in results ) {\n\t                    var column = column_list[ i ];\n\t                    var block_id = _block_id( dataset_id, column );\n\t                    _cache[ block_id ] = results[ i ];\n\t                }\n\t                _fillFromCache( options );\n\t            }\n\t        });\n\t    };\n\t\n\t    /** Fill data from cache */\n\t    var _fillFromCache = function( options ) {\n\t        var groups      = options.dataset_groups;\n\t        var dataset_id  = options.dataset_id;\n\t        console.debug( 'tabular-datasets::_fillFromCache() - Filling request from cache.' );\n\t        var limit = 0;\n\t        groups.each( function( group ) {\n\t            _.each( group.get( '__data_columns' ), function( column_def, column_name ) {\n\t                var column = group.get( column_name );\n\t                var block_id = _block_id( dataset_id, column );\n\t                var column_data = _cache[ block_id ];\n\t                if ( column_data ) {\n\t                    limit = Math.max( limit, column_data.length );\n\t                }\n\t            });\n\t        });\n\t        if ( limit == 0 ) {\n\t            console.debug( 'tabular-datasets::_fillFromCache() - No data available.' );\n\t        }\n\t        var results = [];\n\t        groups.each( function( group, group_index ) {\n\t            var dict = Utils.merge( { key: ( group_index ) + ':' + group.get( 'key' ), values: [] }, group.attributes );\n\t            for ( var j = 0; j < limit; j++ ) {\n\t                dict.values[ j ] = { x : parseInt( j ) };\n\t            }\n\t            results.push( dict );\n\t        });\n\t        groups.each( function( group, group_index ) {\n\t            var values = results[ group_index ].values;\n\t            _.each( group.get( '__data_columns' ), function( column_def, column_name ) {\n\t                var column = group.get( column_name );\n\t                switch ( column ) {\n\t                    case 'auto':\n\t                        for ( var j = 0; j < limit; j++ ) {\n\t                            values[ j ][ column_name ] = parseInt( j );\n\t                        }\n\t                        break;\n\t                    case 'zero':\n\t                        for ( var j = 0; j < limit; j++ ) {\n\t                            values[ j ][ column_name ] = 0;\n\t                        }\n\t                        break;\n\t                    default:\n\t                        var block_id = _block_id( dataset_id, column );\n\t                        var column_data = _cache[ block_id ];\n\t                        for ( var j = 0; j < limit; j++ ) {\n\t                            var value = values[ j ];\n\t                            var v = column_data[ j ];\n\t                            if ( isNaN( v ) && !column_def.is_label ) {\n\t                                v = 0;\n\t                            }\n\t                            value[ column_name ] = v;\n\t                        }\n\t                }\n\t            });\n\t        });\n\t        options.success( results );\n\t    };\n\t\n\t    /** Get block id */\n\t    var _block_id = function ( dataset_id, column ) {\n\t        return dataset_id + '_' + '_' + column;\n\t    };\n\t\n\t    return { request: request };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\r\n\t// css base code, injected by the css-loader\r\n\tmodule.exports = function() {\r\n\t\tvar list = [];\r\n\t\r\n\t\t// return the list of modules as css string\r\n\t\tlist.toString = function toString() {\r\n\t\t\tvar result = [];\r\n\t\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\t\tvar item = this[i];\r\n\t\t\t\tif(item[2]) {\r\n\t\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresult.push(item[1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result.join(\"\");\r\n\t\t};\r\n\t\r\n\t\t// import a list of modules into the list\r\n\t\tlist.i = function(modules, mediaQuery) {\r\n\t\t\tif(typeof modules === \"string\")\r\n\t\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\t\tvar alreadyImportedModules = {};\r\n\t\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\t\tvar id = this[i][0];\r\n\t\t\t\tif(typeof id === \"number\")\r\n\t\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t\t}\r\n\t\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\t\tvar item = modules[i];\r\n\t\t\t\t// skip already imported module\r\n\t\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlist.push(item);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\treturn list;\r\n\t};\r\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\r\n\tvar stylesInDom = {},\r\n\t\tmemoize = function(fn) {\r\n\t\t\tvar memo;\r\n\t\t\treturn function () {\r\n\t\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\t\treturn memo;\r\n\t\t\t};\r\n\t\t},\r\n\t\tisOldIE = memoize(function() {\r\n\t\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t\t}),\r\n\t\tgetHeadElement = memoize(function () {\r\n\t\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t\t}),\r\n\t\tsingletonElement = null,\r\n\t\tsingletonCounter = 0,\r\n\t\tstyleElementsInsertedAtTop = [];\r\n\t\r\n\tmodule.exports = function(list, options) {\r\n\t\tif(false) {\r\n\t\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t\t}\r\n\t\r\n\t\toptions = options || {};\r\n\t\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t\t// tags it will allow on a page\r\n\t\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\t\r\n\t\t// By default, add <style> tags to the bottom of <head>.\r\n\t\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\r\n\t\r\n\t\tvar styles = listToStyles(list);\r\n\t\taddStylesToDom(styles, options);\r\n\t\r\n\t\treturn function update(newList) {\r\n\t\t\tvar mayRemove = [];\r\n\t\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\t\tvar item = styles[i];\r\n\t\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\t\tdomStyle.refs--;\r\n\t\t\t\tmayRemove.push(domStyle);\r\n\t\t\t}\r\n\t\t\tif(newList) {\r\n\t\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\t\taddStylesToDom(newStyles, options);\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\t\r\n\tfunction addStylesToDom(styles, options) {\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tif(domStyle) {\r\n\t\t\t\tdomStyle.refs++;\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t\t}\r\n\t\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tvar parts = [];\r\n\t\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t\t}\r\n\t\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction listToStyles(list) {\r\n\t\tvar styles = [];\r\n\t\tvar newStyles = {};\r\n\t\tfor(var i = 0; i < list.length; i++) {\r\n\t\t\tvar item = list[i];\r\n\t\t\tvar id = item[0];\r\n\t\t\tvar css = item[1];\r\n\t\t\tvar media = item[2];\r\n\t\t\tvar sourceMap = item[3];\r\n\t\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\t\tif(!newStyles[id])\r\n\t\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\t\telse\r\n\t\t\t\tnewStyles[id].parts.push(part);\r\n\t\t}\r\n\t\treturn styles;\r\n\t}\r\n\t\r\n\tfunction insertStyleElement(options, styleElement) {\r\n\t\tvar head = getHeadElement();\r\n\t\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\r\n\t\tif (options.insertAt === \"top\") {\r\n\t\t\tif(!lastStyleElementInsertedAtTop) {\r\n\t\t\t\thead.insertBefore(styleElement, head.firstChild);\r\n\t\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\r\n\t\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\r\n\t\t\t} else {\r\n\t\t\t\thead.appendChild(styleElement);\r\n\t\t\t}\r\n\t\t\tstyleElementsInsertedAtTop.push(styleElement);\r\n\t\t} else if (options.insertAt === \"bottom\") {\r\n\t\t\thead.appendChild(styleElement);\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction removeStyleElement(styleElement) {\r\n\t\tstyleElement.parentNode.removeChild(styleElement);\r\n\t\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\r\n\t\tif(idx >= 0) {\r\n\t\t\tstyleElementsInsertedAtTop.splice(idx, 1);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction createStyleElement(options) {\r\n\t\tvar styleElement = document.createElement(\"style\");\r\n\t\tstyleElement.type = \"text/css\";\r\n\t\tinsertStyleElement(options, styleElement);\r\n\t\treturn styleElement;\r\n\t}\r\n\t\r\n\tfunction createLinkElement(options) {\r\n\t\tvar linkElement = document.createElement(\"link\");\r\n\t\tlinkElement.rel = \"stylesheet\";\r\n\t\tinsertStyleElement(options, linkElement);\r\n\t\treturn linkElement;\r\n\t}\r\n\t\r\n\tfunction addStyle(obj, options) {\r\n\t\tvar styleElement, update, remove;\r\n\t\r\n\t\tif (options.singleton) {\r\n\t\t\tvar styleIndex = singletonCounter++;\r\n\t\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\r\n\t\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t\t} else if(obj.sourceMap &&\r\n\t\t\ttypeof URL === \"function\" &&\r\n\t\t\ttypeof URL.createObjectURL === \"function\" &&\r\n\t\t\ttypeof URL.revokeObjectURL === \"function\" &&\r\n\t\t\ttypeof Blob === \"function\" &&\r\n\t\t\ttypeof btoa === \"function\") {\r\n\t\t\tstyleElement = createLinkElement(options);\r\n\t\t\tupdate = updateLink.bind(null, styleElement);\r\n\t\t\tremove = function() {\r\n\t\t\t\tremoveStyleElement(styleElement);\r\n\t\t\t\tif(styleElement.href)\r\n\t\t\t\t\tURL.revokeObjectURL(styleElement.href);\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tstyleElement = createStyleElement(options);\r\n\t\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\t\tremove = function() {\r\n\t\t\t\tremoveStyleElement(styleElement);\r\n\t\t\t};\r\n\t\t}\r\n\t\r\n\t\tupdate(obj);\r\n\t\r\n\t\treturn function updateStyle(newObj) {\r\n\t\t\tif(newObj) {\r\n\t\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\t\treturn;\r\n\t\t\t\tupdate(obj = newObj);\r\n\t\t\t} else {\r\n\t\t\t\tremove();\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\t\r\n\tvar replaceText = (function () {\r\n\t\tvar textStore = [];\r\n\t\r\n\t\treturn function (index, replacement) {\r\n\t\t\ttextStore[index] = replacement;\r\n\t\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t\t};\r\n\t})();\r\n\t\r\n\tfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\t\tvar css = remove ? \"\" : obj.css;\r\n\t\r\n\t\tif (styleElement.styleSheet) {\r\n\t\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t\t} else {\r\n\t\t\tvar cssNode = document.createTextNode(css);\r\n\t\t\tvar childNodes = styleElement.childNodes;\r\n\t\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\t\tif (childNodes.length) {\r\n\t\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t\t} else {\r\n\t\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction applyToTag(styleElement, obj) {\r\n\t\tvar css = obj.css;\r\n\t\tvar media = obj.media;\r\n\t\r\n\t\tif(media) {\r\n\t\t\tstyleElement.setAttribute(\"media\", media)\r\n\t\t}\r\n\t\r\n\t\tif(styleElement.styleSheet) {\r\n\t\t\tstyleElement.styleSheet.cssText = css;\r\n\t\t} else {\r\n\t\t\twhile(styleElement.firstChild) {\r\n\t\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t\t}\r\n\t\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction updateLink(linkElement, obj) {\r\n\t\tvar css = obj.css;\r\n\t\tvar sourceMap = obj.sourceMap;\r\n\t\r\n\t\tif(sourceMap) {\r\n\t\t\t// http://stackoverflow.com/a/26603875\r\n\t\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t\t}\r\n\t\r\n\t\tvar blob = new Blob([css], { type: \"text/css\" });\r\n\t\r\n\t\tvar oldSrc = linkElement.href;\r\n\t\r\n\t\tlinkElement.href = URL.createObjectURL(blob);\r\n\t\r\n\t\tif(oldSrc)\r\n\t\t\tURL.revokeObjectURL(oldSrc);\r\n\t}\r\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = __webpack_require__(6)();\n\t// imports\n\t\n\t\n\t// module\n\texports.push([module.id, \".chartWrap{margin:0;padding:0;overflow:hidden}.nvtooltip.with-3d-shadow,.with-3d-shadow .nvtooltip{box-shadow:0 5px 10px rgba(0,0,0,.2);border-radius:6px}.nvtooltip{position:absolute;background-color:#fff;padding:1px;border:1px solid rgba(0,0,0,.2);z-index:10000;font-family:Arial;font-size:13px;text-align:left;pointer-events:none;white-space:nowrap;-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.nvtooltip.with-transitions,.with-transitions .nvtooltip{transition:opacity .25s linear;-moz-transition:opacity .25s linear;-webkit-transition:opacity .25s linear;transition-delay:.25s;-moz-transition-delay:.25s;-webkit-transition-delay:.25s}.nvtooltip.x-nvtooltip,.nvtooltip.y-nvtooltip{padding:8px}.nvtooltip h3{margin:0;padding:4px 14px;line-height:18px;font-weight:400;background-color:hsla(0,0%,97%,.75);text-align:center;border-bottom:1px solid #ebebeb;border-radius:5px 5px 0 0}.nvtooltip p{margin:0;padding:5px 14px;text-align:center}.nvtooltip span{display:inline-block;margin:2px 0}.nvtooltip table{margin:6px;border-spacing:0}.nvtooltip table td{padding:2px 9px 2px 0;vertical-align:middle}.nvtooltip table td.key{font-weight:400}.nvtooltip table td.value{text-align:right;font-weight:700}.nvtooltip table tr.highlight td{padding:1px 9px 1px 0;border-bottom-style:solid;border-bottom-width:1px;border-top-style:solid;border-top-width:1px}.nvtooltip table td.legend-color-guide div{width:8px;height:8px;vertical-align:middle}.nvtooltip .footer{padding:3px;text-align:center}.nvtooltip-pending-removal{position:absolute;pointer-events:none}svg{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:block;width:100%;height:100%}svg text{font:400 12px Arial}svg .title{font:700 14px Arial}.nvd3 .nv-background{fill:#fff;fill-opacity:0}.nvd3.nv-noData{font-size:18px;font-weight:700}.nv-brush .extent{fill-opacity:.125;shape-rendering:crispEdges}.nvd3 .nv-legend .nv-series{cursor:pointer}.nvd3 .nv-legend .disabled circle{fill-opacity:0}.nvd3 .nv-axis{pointer-events:none}.nvd3 .nv-axis path{fill:none;stroke:#000;stroke-opacity:.75;shape-rendering:crispEdges}.nvd3 .nv-axis path.domain{stroke-opacity:.75}.nvd3 .nv-axis.nv-x path.domain{stroke-opacity:0}.nvd3 .nv-axis text{font-size:11px}.nv-axis line{fill:none;stroke:#e5e5e5;shape-rendering:crispEdges}.nvd3 .nv-axis .zero line,.nvd3 .nv-axis line.zero{stroke-opacity:.75}.nvd3 .nv-axis .nv-axisMaxMin text{font-weight:700}.nvd3 .x2 .nv-axis .nv-axisMaxMin text,.nvd3 .x3 .nv-axis .nv-axisMaxMin text,.nvd3 .x .nv-axis .nv-axisMaxMin text{text-anchor:middle}.nv-brush .resize path{fill:#eee;stroke:#666}.nvd3 .nv-bars .negative rect{zfill:brown}.nvd3 .nv-bars rect{zfill:#4682b4;fill-opacity:.75;transition:fill-opacity .25s linear;-moz-transition:fill-opacity .25s linear;-webkit-transition:fill-opacity .25s linear}.nvd3 .nv-bars rect.hover{fill-opacity:1}.nvd3 .nv-bars .hover rect{fill:#add8e6}.nvd3 .nv-bars text{fill:transparent}.nvd3 .nv-bars .hover text{fill:#000}.nvd3 .nv-discretebar .nv-groups rect,.nvd3 .nv-multibar .nv-groups rect,.nvd3 .nv-multibarHorizontal .nv-groups rect{stroke-opacity:0;transition:fill-opacity .25s linear;-moz-transition:fill-opacity .25s linear;-webkit-transition:fill-opacity .25s linear}.nvd3 .nv-discretebar .nv-groups rect:hover,.nvd3 .nv-multibar .nv-groups rect:hover,.nvd3 .nv-multibarHorizontal .nv-groups rect:hover{fill-opacity:1}.nvd3 .nv-discretebar .nv-groups text,.nvd3 .nv-multibarHorizontal .nv-groups text{font-weight:700;fill:#000;stroke:transparent}.nvd3.nv-pie path{stroke-opacity:0;transition:fill-opacity .25s linear,stroke-width .25s linear,stroke-opacity .25s linear;-moz-transition:fill-opacity .25s linear,stroke-width .25s linear,stroke-opacity .25s linear;-webkit-transition:fill-opacity .25s linear,stroke-width .25s linear,stroke-opacity .25s linear}.nvd3.nv-pie .nv-slice text{stroke:#000;stroke-width:0}.nvd3.nv-pie path{stroke:#fff;stroke-width:1px;stroke-opacity:1}.nvd3.nv-pie .hover path{fill-opacity:.7}.nvd3.nv-pie .nv-label{pointer-events:none}.nvd3.nv-pie .nv-label rect{fill-opacity:0;stroke-opacity:0}.nvd3 .nv-groups path.nv-line{fill:none;stroke-width:1.5px}.nvd3 .nv-groups path.nv-line.nv-thin-line{stroke-width:1px}.nvd3 .nv-groups path.nv-area{stroke:none}.nvd3 .nv-line.hover path{stroke-width:6px}.nvd3.nv-line .nvd3.nv-scatter .nv-groups .nv-point{fill-opacity:0;stroke-opacity:0}.nvd3.nv-scatter.nv-single-point .nv-groups .nv-point{fill-opacity:.5!important;stroke-opacity:.5!important}.with-transitions .nvd3 .nv-groups .nv-point{transition:stroke-width .25s linear,stroke-opacity .25s linear;-moz-transition:stroke-width .25s linear,stroke-opacity .25s linear;-webkit-transition:stroke-width .25s linear,stroke-opacity .25s linear}.nvd3 .nv-groups .nv-point.hover,.nvd3.nv-scatter .nv-groups .nv-point.hover{stroke-width:7px;fill-opacity:.95!important;stroke-opacity:.95!important}.nvd3 .nv-point-paths path{stroke:#aaa;stroke-opacity:0;fill:#eee;fill-opacity:0}.nvd3 .nv-indexLine{cursor:ew-resize}.nvd3 .nv-distribution{pointer-events:none}.nvd3 .nv-groups .nv-point.hover{stroke-width:20px;stroke-opacity:.5}.nvd3 .nv-scatter .nv-point.hover{fill-opacity:1}.nvd3.nv-stackedarea path.nv-area{fill-opacity:.7;stroke-opacity:0;transition:fill-opacity .25s linear,stroke-opacity .25s linear;-moz-transition:fill-opacity .25s linear,stroke-opacity .25s linear;-webkit-transition:fill-opacity .25s linear,stroke-opacity .25s linear}.nvd3.nv-stackedarea path.nv-area.hover{fill-opacity:.9}.nvd3.nv-stackedarea .nv-groups .nv-point{stroke-opacity:0;fill-opacity:0}.nvd3.nv-linePlusBar .nv-bar rect{fill-opacity:.75}.nvd3.nv-linePlusBar .nv-bar rect:hover{fill-opacity:1}.nvd3.nv-bullet{font:10px sans-serif}.nvd3.nv-bullet .nv-measure{fill-opacity:.8}.nvd3.nv-bullet .nv-measure:hover{fill-opacity:1}.nvd3.nv-bullet .nv-marker{stroke:#000;stroke-width:2px}.nvd3.nv-bullet .nv-markerTriangle{stroke:#000;fill:#fff;stroke-width:1.5px}.nvd3.nv-bullet .nv-tick line{stroke:#666;stroke-width:.5px}.nvd3.nv-bullet .nv-range.nv-s0{fill:#eee}.nvd3.nv-bullet .nv-range.nv-s1{fill:#ddd}.nvd3.nv-bullet .nv-range.nv-s2{fill:#ccc}.nvd3.nv-bullet .nv-title{font-size:14px;font-weight:700}.nvd3.nv-bullet .nv-subtitle{fill:#999}.nvd3.nv-bullet .nv-range{fill:#bababa;fill-opacity:.4}.nvd3.nv-bullet .nv-range:hover{fill-opacity:.7}.nvd3.nv-sparkline path{fill:none}.nvd3.nv-sparklineplus g.nv-hoverValue{pointer-events:none}.nvd3.nv-sparklineplus .nv-hoverValue line{stroke:#333;stroke-width:1.5px}.nvd3.nv-sparklineplus,.nvd3.nv-sparklineplus g{pointer-events:all}.nvd3 .nv-hoverArea{fill-opacity:0;stroke-opacity:0}.nvd3.nv-sparklineplus .nv-xValue,.nvd3.nv-sparklineplus .nv-yValue{stroke-width:0;font-size:.9em;font-weight:400}.nvd3.nv-sparklineplus .nv-yValue{stroke:#f66}.nvd3.nv-sparklineplus .nv-maxValue{stroke:#2ca02c;fill:#2ca02c}.nvd3.nv-sparklineplus .nv-minValue{stroke:#d62728;fill:#d62728}.nvd3.nv-sparklineplus .nv-currentValue{font-weight:700;font-size:1.1em}.nvd3.nv-ohlcBar .nv-ticks .nv-tick{stroke-width:2px}.nvd3.nv-ohlcBar .nv-ticks .nv-tick.hover{stroke-width:4px}.nvd3.nv-ohlcBar .nv-ticks .nv-tick.positive{stroke:#2ca02c}.nvd3.nv-ohlcBar .nv-ticks .nv-tick.negative{stroke:#d62728}.nvd3.nv-historicalStockChart .nv-axis .nv-axislabel{font-weight:700}.nvd3.nv-historicalStockChart .nv-dragTarget{fill-opacity:0;stroke:none;cursor:move}.nvd3 .nv-brush .extent{fill-opacity:0!important}.nvd3 .nv-brushBackground rect{stroke:#000;stroke-width:.4;fill:#fff;fill-opacity:.7}.nvd3.nv-indentedtree .name{margin-left:5px}.nvd3.nv-indentedtree .clickable{color:#08c;cursor:pointer}.nvd3.nv-indentedtree span.clickable:hover{color:#005580;text-decoration:underline}.nvd3.nv-indentedtree .nv-childrenCount{display:inline-block;margin-left:5px}.nvd3.nv-indentedtree .nv-treeicon,.nvd3.nv-indentedtree .nv-treeicon.nv-folded{cursor:pointer}.nvd3 .background path{fill:none;stroke:#ccc;stroke-opacity:.4;shape-rendering:crispEdges}.nvd3 .foreground path{fill:none;stroke:#4682b4;stroke-opacity:.7}.nvd3 .brush .extent{fill-opacity:.3;stroke:#fff;shape-rendering:crispEdges}.axis path,.nvd3 .axis line{fill:none;stroke:#000;shape-rendering:crispEdges}.nvd3 .axis text{text-shadow:0 1px 0 #fff}.nvd3 .nv-interactiveGuideLine{pointer-events:none}.nvd3 line.nv-guideline{stroke:#ccc}\", \"\"]);\n\t\n\t// exports\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// style-loader: Adds some css to the DOM by adding a <style> tag\n\t\n\t// load the styles\n\tvar content = __webpack_require__(8);\n\tif(typeof content === 'string') content = [[module.id, content, '']];\n\t// add the styles to the DOM\n\tvar update = __webpack_require__(7)(content, {});\n\tif(content.locals) module.exports = content.locals;\n\t// Hot Module Replacement\n\tif(false) {\n\t\t// When the styles change, update the <style> tags\n\t\tif(!content.locals) {\n\t\t\tmodule.hot.accept(\"!!./../../../../node_modules/css-loader/index.js!./nv.d3.css\", function() {\n\t\t\t\tvar newContent = require(\"!!./../../../../node_modules/css-loader/index.js!./nv.d3.css\");\n\t\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\t\tupdate(newContent);\n\t\t\t});\n\t\t}\n\t\t// When the module is disposed, remove the <style> tags\n\t\tmodule.hot.dispose(function() { update(); });\n\t}\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t(function(){\n\t\n\tvar nv = window.nv || {};\n\t\n\t\n\tnv.version = '1.1.15b';\n\tnv.dev = true //set false when in production\n\t\n\twindow.nv = nv;\n\t\n\tnv.tooltip = nv.tooltip || {}; // For the tooltip system\n\tnv.utils = nv.utils || {}; // Utility subsystem\n\tnv.models = nv.models || {}; //stores all the possible models/components\n\tnv.charts = {}; //stores all the ready to use charts\n\tnv.graphs = []; //stores all the graphs currently on the page\n\tnv.logs = {}; //stores some statistics and potential error messages\n\t\n\tnv.dispatch = d3.dispatch('render_start', 'render_end');\n\t\n\t// *************************************************************************\n\t//  Development render timers - disabled if dev = false\n\t\n\tif (nv.dev) {\n\t  nv.dispatch.on('render_start', function(e) {\n\t    nv.logs.startTime = +new Date();\n\t  });\n\t\n\t  nv.dispatch.on('render_end', function(e) {\n\t    nv.logs.endTime = +new Date();\n\t    nv.logs.totalTime = nv.logs.endTime - nv.logs.startTime;\n\t    nv.log('total', nv.logs.totalTime); // used for development, to keep track of graph generation times\n\t  });\n\t}\n\t\n\t// ********************************************\n\t//  Public Core NV functions\n\t\n\t// Logs all arguments, and returns the last so you can test things in place\n\t// Note: in IE8 console.log is an object not a function, and if modernizr is used\n\t// then calling Function.prototype.bind with with anything other than a function\n\t// causes a TypeError to be thrown.\n\tnv.log = function() {\n\t  if (nv.dev && console.log && console.log.apply)\n\t    console.log.apply(console, arguments)\n\t  else if (nv.dev && typeof console.log == \"function\" && Function.prototype.bind) {\n\t    var log = Function.prototype.bind.call(console.log, console);\n\t    log.apply(console, arguments);\n\t  }\n\t  return arguments[arguments.length - 1];\n\t};\n\t\n\t\n\tnv.render = function render(step) {\n\t  step = step || 1; // number of graphs to generate in each timeout loop\n\t\n\t  nv.render.active = true;\n\t  nv.dispatch.render_start();\n\t\n\t  setTimeout(function() {\n\t    var chart, graph;\n\t\n\t    for (var i = 0; i < step && (graph = nv.render.queue[i]); i++) {\n\t      chart = graph.generate();\n\t      if (typeof graph.callback == typeof(Function)) graph.callback(chart);\n\t      nv.graphs.push(chart);\n\t    }\n\t\n\t    nv.render.queue.splice(0, i);\n\t\n\t    if (nv.render.queue.length) setTimeout(arguments.callee, 0);\n\t    else {\n\t      nv.dispatch.render_end();\n\t      nv.render.active = false;\n\t    }\n\t  }, 0);\n\t};\n\t\n\tnv.render.active = false;\n\tnv.render.queue = [];\n\t\n\tnv.addGraph = function(obj) {\n\t  if (typeof arguments[0] === typeof(Function))\n\t    obj = {generate: arguments[0], callback: arguments[1]};\n\t\n\t  nv.render.queue.push(obj);\n\t\n\t  if (!nv.render.active) nv.render();\n\t};\n\t\n\tnv.identity = function(d) { return d; };\n\t\n\tnv.strip = function(s) { return s.replace(/(\\s|&)/g,''); };\n\t\n\tfunction daysInMonth(month,year) {\n\t  return (new Date(year, month+1, 0)).getDate();\n\t}\n\t\n\tfunction d3_time_range(floor, step, number) {\n\t  return function(t0, t1, dt) {\n\t    var time = floor(t0), times = [];\n\t    if (time < t0) step(time);\n\t    if (dt > 1) {\n\t      while (time < t1) {\n\t        var date = new Date(+time);\n\t        if ((number(date) % dt === 0)) times.push(date);\n\t        step(time);\n\t      }\n\t    } else {\n\t      while (time < t1) { times.push(new Date(+time)); step(time); }\n\t    }\n\t    return times;\n\t  };\n\t}\n\t\n\td3.time.monthEnd = function(date) {\n\t  return new Date(date.getFullYear(), date.getMonth(), 0);\n\t};\n\t\n\td3.time.monthEnds = d3_time_range(d3.time.monthEnd, function(date) {\n\t    date.setUTCDate(date.getUTCDate() + 1);\n\t    date.setDate(daysInMonth(date.getMonth() + 1, date.getFullYear()));\n\t  }, function(date) {\n\t    return date.getMonth();\n\t  }\n\t);\n\t\n\t/* Utility class to handle creation of an interactive layer.\n\tThis places a rectangle on top of the chart. When you mouse move over it, it sends a dispatch\n\tcontaining the X-coordinate. It can also render a vertical line where the mouse is located.\n\t\n\tdispatch.elementMousemove is the important event to latch onto.  It is fired whenever the mouse moves over\n\tthe rectangle. The dispatch is given one object which contains the mouseX/Y location.\n\tIt also has 'pointXValue', which is the conversion of mouseX to the x-axis scale.\n\t*/\n\tnv.interactiveGuideline = function() {\n\t\t\"use strict\";\n\t\tvar tooltip = nv.models.tooltip();\n\t\t//Public settings\n\t\tvar width = null\n\t\t, height = null\n\t    //Please pass in the bounding chart's top and left margins\n\t    //This is important for calculating the correct mouseX/Y positions.\n\t\t, margin = {left: 0, top: 0}\n\t\t, xScale = d3.scale.linear()\n\t\t, yScale = d3.scale.linear()\n\t\t, dispatch = d3.dispatch('elementMousemove', 'elementMouseout','elementDblclick')\n\t\t, showGuideLine = true\n\t\t, svgContainer = null  \n\t    //Must pass in the bounding chart's <svg> container.\n\t    //The mousemove event is attached to this container.\n\t\t;\n\t\n\t\t//Private variables\n\t\tvar isMSIE = navigator.userAgent.indexOf(\"MSIE\") !== -1  //Check user-agent for Microsoft Internet Explorer.\n\t\t;\n\t\n\t\n\t\tfunction layer(selection) {\n\t\t\tselection.each(function(data) {\n\t\t\t\t\tvar container = d3.select(this);\n\t\t\t\t\t\n\t\t\t\t\tvar availableWidth = (width || 960), availableHeight = (height || 400);\n\t\n\t\t\t\t\tvar wrap = container.selectAll(\"g.nv-wrap.nv-interactiveLineLayer\").data([data]);\n\t\t\t\t\tvar wrapEnter = wrap.enter()\n\t\t\t\t\t\t\t\t\t.append(\"g\").attr(\"class\", \" nv-wrap nv-interactiveLineLayer\");\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\twrapEnter.append(\"g\").attr(\"class\",\"nv-interactiveGuideLine\");\n\t\t\t\t\t\n\t\t\t\t\tif (!svgContainer) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\n\t                function mouseHandler() {\n\t                      var d3mouse = d3.mouse(this);\n\t                      var mouseX = d3mouse[0];\n\t                      var mouseY = d3mouse[1];\n\t                      var subtractMargin = true;\n\t                      var mouseOutAnyReason = false;\n\t                      if (isMSIE) {\n\t                         /*\n\t                            D3.js (or maybe SVG.getScreenCTM) has a nasty bug in Internet Explorer 10.\n\t                            d3.mouse() returns incorrect X,Y mouse coordinates when mouse moving\n\t                            over a rect in IE 10.\n\t                            However, d3.event.offsetX/Y also returns the mouse coordinates\n\t                            relative to the triggering <rect>. So we use offsetX/Y on IE.  \n\t                         */\n\t                         mouseX = d3.event.offsetX;\n\t                         mouseY = d3.event.offsetY;\n\t\n\t                         /*\n\t                            On IE, if you attach a mouse event listener to the <svg> container,\n\t                            it will actually trigger it for all the child elements (like <path>, <circle>, etc).\n\t                            When this happens on IE, the offsetX/Y is set to where ever the child element\n\t                            is located.\n\t                            As a result, we do NOT need to subtract margins to figure out the mouse X/Y\n\t                            position under this scenario. Removing the line below *will* cause \n\t                            the interactive layer to not work right on IE.\n\t                         */\n\t                         if(d3.event.target.tagName !== \"svg\")\n\t                            subtractMargin = false;\n\t\n\t                         if (d3.event.target.className.baseVal.match(\"nv-legend\"))\n\t                         \tmouseOutAnyReason = true;\n\t                          \n\t                      }\n\t\n\t                      if(subtractMargin) {\n\t                         mouseX -= margin.left;\n\t                         mouseY -= margin.top;\n\t                      }\n\t\n\t                      /* If mouseX/Y is outside of the chart's bounds,\n\t                      trigger a mouseOut event.\n\t                      */\n\t                      if (mouseX < 0 || mouseY < 0 \n\t                        || mouseX > availableWidth || mouseY > availableHeight\n\t                        || (d3.event.relatedTarget && d3.event.relatedTarget.ownerSVGElement === undefined)\n\t                        || mouseOutAnyReason\n\t                        ) \n\t                      {\n\t                      \t\tif (isMSIE) {\n\t                      \t\t\tif (d3.event.relatedTarget \n\t                      \t\t\t\t&& d3.event.relatedTarget.ownerSVGElement === undefined\n\t                      \t\t\t\t&& d3.event.relatedTarget.className.match(tooltip.nvPointerEventsClass)) {\n\t                      \t\t\t\treturn;\n\t                      \t\t\t}\n\t                      \t\t}\n\t                            dispatch.elementMouseout({\n\t                               mouseX: mouseX,\n\t                               mouseY: mouseY\n\t                            });\n\t                            layer.renderGuideLine(null); //hide the guideline\n\t                            return;\n\t                      }\n\t                      \n\t                      var pointXValue = xScale.invert(mouseX);\n\t                      dispatch.elementMousemove({\n\t                            mouseX: mouseX,\n\t                            mouseY: mouseY,\n\t                            pointXValue: pointXValue\n\t                      });\n\t\n\t                      //If user double clicks the layer, fire a elementDblclick dispatch.\n\t                      if (d3.event.type === \"dblclick\") {\n\t                        dispatch.elementDblclick({\n\t                            mouseX: mouseX,\n\t                            mouseY: mouseY,\n\t                            pointXValue: pointXValue\n\t                        });\n\t                      }\n\t                }\n\t\n\t\t\t\t\tsvgContainer\n\t\t\t\t\t      .on(\"mousemove\",mouseHandler, true)\n\t\t\t\t\t      .on(\"mouseout\" ,mouseHandler,true)\n\t                      .on(\"dblclick\" ,mouseHandler)\n\t\t\t\t\t      ;\n\t\n\t\t\t\t\t //Draws a vertical guideline at the given X postion.\n\t\t\t\t\tlayer.renderGuideLine = function(x) {\n\t\t\t\t\t \tif (!showGuideLine) return;\n\t\t\t\t\t \tvar line = wrap.select(\".nv-interactiveGuideLine\")\n\t\t\t\t\t \t      .selectAll(\"line\")\n\t\t\t\t\t \t      .data((x != null) ? [nv.utils.NaNtoZero(x)] : [], String);\n\t\n\t\t\t\t\t \tline.enter()\n\t\t\t\t\t \t\t.append(\"line\")\n\t\t\t\t\t \t\t.attr(\"class\", \"nv-guideline\")\n\t\t\t\t\t \t\t.attr(\"x1\", function(d) { return d;})\n\t\t\t\t\t \t\t.attr(\"x2\", function(d) { return d;})\n\t\t\t\t\t \t\t.attr(\"y1\", availableHeight)\n\t\t\t\t\t \t\t.attr(\"y2\",0)\n\t\t\t\t\t \t\t;\n\t\t\t\t\t \tline.exit().remove();\n\t\n\t\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\n\t\tlayer.dispatch = dispatch;\n\t\tlayer.tooltip = tooltip;\n\t\n\t\tlayer.margin = function(_) {\n\t\t    if (!arguments.length) return margin;\n\t\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t\t    return layer;\n\t    };\n\t\n\t\tlayer.width = function(_) {\n\t\t\tif (!arguments.length) return width;\n\t\t\twidth = _;\n\t\t\treturn layer;\n\t\t};\n\t\n\t\tlayer.height = function(_) {\n\t\t\tif (!arguments.length) return height;\n\t\t\theight = _;\n\t\t\treturn layer;\n\t\t};\n\t\n\t\tlayer.xScale = function(_) {\n\t\t\tif (!arguments.length) return xScale;\n\t\t\txScale = _;\n\t\t\treturn layer;\n\t\t};\n\t\n\t\tlayer.showGuideLine = function(_) {\n\t\t\tif (!arguments.length) return showGuideLine;\n\t\t\tshowGuideLine = _;\n\t\t\treturn layer;\n\t\t};\n\t\n\t\tlayer.svgContainer = function(_) {\n\t\t\tif (!arguments.length) return svgContainer;\n\t\t\tsvgContainer = _;\n\t\t\treturn layer;\n\t\t};\n\t\n\t\n\t\treturn layer;\n\t};\n\t\n\t/* Utility class that uses d3.bisect to find the index in a given array, where a search value can be inserted.\n\tThis is different from normal bisectLeft; this function finds the nearest index to insert the search value.\n\t\n\tFor instance, lets say your array is [1,2,3,5,10,30], and you search for 28. \n\tNormal d3.bisectLeft will return 4, because 28 is inserted after the number 10.  But interactiveBisect will return 5\n\tbecause 28 is closer to 30 than 10.\n\t\n\tUnit tests can be found in: interactiveBisectTest.html\n\t\n\tHas the following known issues:\n\t   * Will not work if the data points move backwards (ie, 10,9,8,7, etc) or if the data points are in random order.\n\t   * Won't work if there are duplicate x coordinate values.\n\t*/\n\tnv.interactiveBisect = function (values, searchVal, xAccessor) {\n\t\t  \"use strict\";\n\t      if (! values instanceof Array) return null;\n\t      if (typeof xAccessor !== 'function') xAccessor = function(d,i) { return d.x;}\n\t\n\t      var bisect = d3.bisector(xAccessor).left;\n\t      var index = d3.max([0, bisect(values,searchVal) - 1]);\n\t      var currentValue = xAccessor(values[index], index);\n\t      if (typeof currentValue === 'undefined') currentValue = index;\n\t\n\t      if (currentValue === searchVal) return index;  //found exact match\n\t\n\t      var nextIndex = d3.min([index+1, values.length - 1]);\n\t      var nextValue = xAccessor(values[nextIndex], nextIndex);\n\t      if (typeof nextValue === 'undefined') nextValue = nextIndex;\n\t\n\t      if (Math.abs(nextValue - searchVal) >= Math.abs(currentValue - searchVal))\n\t          return index;\n\t      else\n\t          return nextIndex\n\t};\n\t\n\t/*\n\tReturns the index in the array \"values\" that is closest to searchVal.\n\tOnly returns an index if searchVal is within some \"threshold\".\n\tOtherwise, returns null.\n\t*/\n\tnv.nearestValueIndex = function (values, searchVal, threshold) {\n\t      \"use strict\";\n\t      var yDistMax = Infinity, indexToHighlight = null;\n\t      values.forEach(function(d,i) {\n\t         var delta = Math.abs(searchVal - d);\n\t         if ( delta <= yDistMax && delta < threshold) {\n\t            yDistMax = delta;\n\t            indexToHighlight = i;\n\t         }\n\t      });\n\t      return indexToHighlight;\n\t};/* Tooltip rendering model for nvd3 charts.\n\twindow.nv.models.tooltip is the updated,new way to render tooltips.\n\t\n\twindow.nv.tooltip.show is the old tooltip code.\n\twindow.nv.tooltip.* also has various helper methods.\n\t*/\n\t(function() {\n\t  \"use strict\";\n\t  window.nv.tooltip = {};\n\t\n\t  /* Model which can be instantiated to handle tooltip rendering.\n\t    Example usage: \n\t    var tip = nv.models.tooltip().gravity('w').distance(23)\n\t                .data(myDataObject);\n\t\n\t        tip();    //just invoke the returned function to render tooltip.\n\t  */\n\t  window.nv.models.tooltip = function() {\n\t        var content = null    //HTML contents of the tooltip.  If null, the content is generated via the data variable.\n\t        ,   data = null     /* Tooltip data. If data is given in the proper format, a consistent tooltip is generated.\n\t        Format of data:\n\t        {\n\t            key: \"Date\",\n\t            value: \"August 2009\", \n\t            series: [\n\t                    {\n\t                        key: \"Series 1\",\n\t                        value: \"Value 1\",\n\t                        color: \"#000\"\n\t                    },\n\t                    {\n\t                        key: \"Series 2\",\n\t                        value: \"Value 2\",\n\t                        color: \"#00f\"\n\t                    }\n\t            ]\n\t\n\t        }\n\t\n\t        */\n\t        ,   gravity = 'w'   //Can be 'n','s','e','w'. Determines how tooltip is positioned.\n\t        ,   distance = 50   //Distance to offset tooltip from the mouse location.\n\t        ,   snapDistance = 25   //Tolerance allowed before tooltip is moved from its current position (creates 'snapping' effect)\n\t        ,   fixedTop = null //If not null, this fixes the top position of the tooltip.\n\t        ,   classes = null  //Attaches additional CSS classes to the tooltip DIV that is created.\n\t        ,   chartContainer = null   //Parent DIV, of the SVG Container that holds the chart.\n\t        ,   tooltipElem = null  //actual DOM element representing the tooltip.\n\t        ,   position = {left: null, top: null}      //Relative position of the tooltip inside chartContainer.\n\t        ,   enabled = true  //True -> tooltips are rendered. False -> don't render tooltips.\n\t        //Generates a unique id when you create a new tooltip() object\n\t        ,   id = \"nvtooltip-\" + Math.floor(Math.random() * 100000)\n\t        ;\n\t\n\t        //CSS class to specify whether element should not have mouse events.\n\t        var  nvPointerEventsClass = \"nv-pointer-events-none\";\n\t\n\t        //Format function for the tooltip values column\n\t        var valueFormatter = function(d,i) {\n\t            return d;\n\t        };\n\t\n\t        //Format function for the tooltip header value.\n\t        var headerFormatter = function(d) {\n\t            return d;\n\t        };\n\t\n\t        //By default, the tooltip model renders a beautiful table inside a DIV.\n\t        //You can override this function if a custom tooltip is desired.\n\t        var contentGenerator = function(d) {\n\t            if (content != null) return content;\n\t\n\t            if (d == null) return '';\n\t\n\t            var table = d3.select(document.createElement(\"table\"));\n\t            var theadEnter = table.selectAll(\"thead\")\n\t                .data([d])\n\t                .enter().append(\"thead\");\n\t            theadEnter.append(\"tr\")\n\t                .append(\"td\")\n\t                .attr(\"colspan\",3)\n\t                .append(\"strong\")\n\t                    .classed(\"x-value\",true)\n\t                    .html(headerFormatter(d.value));\n\t\n\t            var tbodyEnter = table.selectAll(\"tbody\")\n\t                .data([d])\n\t                .enter().append(\"tbody\");\n\t            var trowEnter = tbodyEnter.selectAll(\"tr\")\n\t                .data(function(p) { return p.series})\n\t                .enter()\n\t                .append(\"tr\")\n\t                .classed(\"highlight\", function(p) { return p.highlight})\n\t                ;\n\t\n\t            trowEnter.append(\"td\")\n\t                .classed(\"legend-color-guide\",true)\n\t                .append(\"div\")\n\t                    .style(\"background-color\", function(p) { return p.color});\n\t            trowEnter.append(\"td\")\n\t                .classed(\"key\",true)\n\t                .html(function(p) {return p.key});\n\t            trowEnter.append(\"td\")\n\t                .classed(\"value\",true)\n\t                .html(function(p,i) { return valueFormatter(p.value,i) });\n\t\n\t\n\t            trowEnter.selectAll(\"td\").each(function(p) {\n\t                if (p.highlight) {\n\t                    var opacityScale = d3.scale.linear().domain([0,1]).range([\"#fff\",p.color]);\n\t                    var opacity = 0.6;\n\t                    d3.select(this)\n\t                        .style(\"border-bottom-color\", opacityScale(opacity))\n\t                        .style(\"border-top-color\", opacityScale(opacity))\n\t                        ;\n\t                }\n\t            });\n\t\n\t            var html = table.node().outerHTML;\n\t            if (d.footer !== undefined)\n\t                html += \"<div class='footer'>\" + d.footer + \"</div>\";\n\t            return html;\n\t\n\t        };\n\t\n\t        var dataSeriesExists = function(d) {\n\t            if (d && d.series && d.series.length > 0) return true;\n\t\n\t            return false;\n\t        };\n\t\n\t        //In situations where the chart is in a 'viewBox', re-position the tooltip based on how far chart is zoomed.\n\t        function convertViewBoxRatio() {\n\t            if (chartContainer) {\n\t              var svg = d3.select(chartContainer);\n\t              if (svg.node().tagName !== \"svg\") {\n\t                 svg = svg.select(\"svg\");\n\t              }\n\t              var viewBox = (svg.node()) ? svg.attr('viewBox') : null;\n\t              if (viewBox) {\n\t                viewBox = viewBox.split(' ');\n\t                var ratio = parseInt(svg.style('width')) / viewBox[2];\n\t                \n\t                position.left = position.left * ratio;\n\t                position.top  = position.top * ratio;\n\t              }\n\t            }\n\t        }\n\t\n\t        //Creates new tooltip container, or uses existing one on DOM.\n\t        function getTooltipContainer(newContent) {\n\t            var body;\n\t            if (chartContainer)\n\t                body = d3.select(chartContainer);\n\t            else\n\t                body = d3.select(\"body\");\n\t\n\t            var container = body.select(\".nvtooltip\");\n\t            if (container.node() === null) {\n\t                //Create new tooltip div if it doesn't exist on DOM.\n\t                container = body.append(\"div\")\n\t                    .attr(\"class\", \"nvtooltip \" + (classes? classes: \"xy-tooltip\"))\n\t                    .attr(\"id\",id)\n\t                    ;\n\t            }\n\t        \n\t\n\t            container.node().innerHTML = newContent;\n\t            container.style(\"top\",0).style(\"left\",0).style(\"opacity\",0);\n\t            container.selectAll(\"div, table, td, tr\").classed(nvPointerEventsClass,true)\n\t            container.classed(nvPointerEventsClass,true);\n\t            return container.node();\n\t        }\n\t\n\t        \n\t\n\t        //Draw the tooltip onto the DOM.\n\t        function nvtooltip() {\n\t            if (!enabled) return;\n\t            if (!dataSeriesExists(data)) return;\n\t\n\t            convertViewBoxRatio();\n\t\n\t            var left = position.left;\n\t            var top = (fixedTop != null) ? fixedTop : position.top;\n\t            var container = getTooltipContainer(contentGenerator(data));\n\t            tooltipElem = container;\n\t            if (chartContainer) {\n\t                var svgComp = chartContainer.getElementsByTagName(\"svg\")[0];\n\t                var boundRect = (svgComp) ? svgComp.getBoundingClientRect() : chartContainer.getBoundingClientRect();\n\t                var svgOffset = {left:0,top:0};\n\t                if (svgComp) {\n\t                    var svgBound = svgComp.getBoundingClientRect();\n\t                    var chartBound = chartContainer.getBoundingClientRect();\n\t                    var svgBoundTop = svgBound.top;\n\t                    \n\t                    //Defensive code. Sometimes, svgBoundTop can be a really negative\n\t                    //  number, like -134254. That's a bug. \n\t                    //  If such a number is found, use zero instead. FireFox bug only\n\t                    if (svgBoundTop < 0) {\n\t                        var containerBound = chartContainer.getBoundingClientRect();\n\t                        svgBoundTop = (Math.abs(svgBoundTop) > containerBound.height) ? 0 : svgBoundTop;\n\t                    } \n\t                    svgOffset.top = Math.abs(svgBoundTop - chartBound.top);\n\t                    svgOffset.left = Math.abs(svgBound.left - chartBound.left);\n\t                }\n\t                //If the parent container is an overflow <div> with scrollbars, subtract the scroll offsets.\n\t                //You need to also add any offset between the <svg> element and its containing <div>\n\t                //Finally, add any offset of the containing <div> on the whole page.\n\t                left += chartContainer.offsetLeft + svgOffset.left - 2*chartContainer.scrollLeft;\n\t                top += chartContainer.offsetTop + svgOffset.top - 2*chartContainer.scrollTop;\n\t            }\n\t\n\t            if (snapDistance && snapDistance > 0) {\n\t                top = Math.floor(top/snapDistance) * snapDistance;\n\t            }\n\t\n\t            nv.tooltip.calcTooltipPosition([left,top], gravity, distance, container);\n\t            return nvtooltip;\n\t        };\n\t\n\t        nvtooltip.nvPointerEventsClass = nvPointerEventsClass;\n\t        \n\t        nvtooltip.content = function(_) {\n\t            if (!arguments.length) return content;\n\t            content = _;\n\t            return nvtooltip;\n\t        };\n\t\n\t        //Returns tooltipElem...not able to set it.\n\t        nvtooltip.tooltipElem = function() {\n\t            return tooltipElem;\n\t        };\n\t\n\t        nvtooltip.contentGenerator = function(_) {\n\t            if (!arguments.length) return contentGenerator;\n\t            if (typeof _ === 'function') {\n\t                contentGenerator = _;\n\t            }\n\t            return nvtooltip;\n\t        };\n\t\n\t        nvtooltip.data = function(_) {\n\t            if (!arguments.length) return data;\n\t            data = _;\n\t            return nvtooltip;\n\t        };\n\t\n\t        nvtooltip.gravity = function(_) {\n\t            if (!arguments.length) return gravity;\n\t            gravity = _;\n\t            return nvtooltip;\n\t        };\n\t\n\t        nvtooltip.distance = function(_) {\n\t            if (!arguments.length) return distance;\n\t            distance = _;\n\t            return nvtooltip;\n\t        };\n\t\n\t        nvtooltip.snapDistance = function(_) {\n\t            if (!arguments.length) return snapDistance;\n\t            snapDistance = _;\n\t            return nvtooltip;\n\t        };\n\t\n\t        nvtooltip.classes = function(_) {\n\t            if (!arguments.length) return classes;\n\t            classes = _;\n\t            return nvtooltip;\n\t        };\n\t\n\t        nvtooltip.chartContainer = function(_) {\n\t            if (!arguments.length) return chartContainer;\n\t            chartContainer = _;\n\t            return nvtooltip;\n\t        };\n\t\n\t        nvtooltip.position = function(_) {\n\t            if (!arguments.length) return position;\n\t            position.left = (typeof _.left !== 'undefined') ? _.left : position.left;\n\t            position.top = (typeof _.top !== 'undefined') ? _.top : position.top;\n\t            return nvtooltip;\n\t        };\n\t\n\t        nvtooltip.fixedTop = function(_) {\n\t            if (!arguments.length) return fixedTop;\n\t            fixedTop = _;\n\t            return nvtooltip;\n\t        };\n\t\n\t        nvtooltip.enabled = function(_) {\n\t            if (!arguments.length) return enabled;\n\t            enabled = _;\n\t            return nvtooltip;\n\t        };\n\t\n\t        nvtooltip.valueFormatter = function(_) {\n\t            if (!arguments.length) return valueFormatter;\n\t            if (typeof _ === 'function') {\n\t                valueFormatter = _;\n\t            }\n\t            return nvtooltip;\n\t        };\n\t\n\t        nvtooltip.headerFormatter = function(_) {\n\t            if (!arguments.length) return headerFormatter;\n\t            if (typeof _ === 'function') {\n\t                headerFormatter = _;\n\t            }\n\t            return nvtooltip;\n\t        };\n\t\n\t        //id() is a read-only function. You can't use it to set the id.\n\t        nvtooltip.id = function() {\n\t            return id;\n\t        };\n\t\n\t\n\t        return nvtooltip;\n\t  };\n\t\n\t\n\t  //Original tooltip.show function. Kept for backward compatibility.\n\t  // pos = [left,top]\n\t  nv.tooltip.show = function(pos, content, gravity, dist, parentContainer, classes) {\n\t      \n\t        //Create new tooltip div if it doesn't exist on DOM.\n\t        var   container = document.createElement('div');\n\t        container.className = 'nvtooltip ' + (classes ? classes : 'xy-tooltip');\n\t\n\t        var body = parentContainer;\n\t        if ( !parentContainer || parentContainer.tagName.match(/g|svg/i)) {\n\t            //If the parent element is an SVG element, place tooltip in the <body> element.\n\t            body = document.getElementsByTagName('body')[0];\n\t        }\n\t   \n\t        container.style.left = 0;\n\t        container.style.top = 0;\n\t        container.style.opacity = 0;\n\t        container.innerHTML = content;\n\t        body.appendChild(container);\n\t        \n\t        //If the parent container is an overflow <div> with scrollbars, subtract the scroll offsets.\n\t        if (parentContainer) {\n\t           pos[0] = pos[0] - parentContainer.scrollLeft;\n\t           pos[1] = pos[1] - parentContainer.scrollTop;\n\t        }\n\t        nv.tooltip.calcTooltipPosition(pos, gravity, dist, container);\n\t  };\n\t\n\t  //Looks up the ancestry of a DOM element, and returns the first NON-svg node.\n\t  nv.tooltip.findFirstNonSVGParent = function(Elem) {\n\t            while(Elem.tagName.match(/^g|svg$/i) !== null) {\n\t                Elem = Elem.parentNode;\n\t            }\n\t            return Elem;\n\t  };\n\t\n\t  //Finds the total offsetTop of a given DOM element.\n\t  //Looks up the entire ancestry of an element, up to the first relatively positioned element.\n\t  nv.tooltip.findTotalOffsetTop = function ( Elem, initialTop ) {\n\t                var offsetTop = initialTop;\n\t                \n\t                do {\n\t                    if( !isNaN( Elem.offsetTop ) ) {\n\t                        offsetTop += (Elem.offsetTop);\n\t                    }\n\t                } while( Elem = Elem.offsetParent );\n\t                return offsetTop;\n\t  };\n\t\n\t  //Finds the total offsetLeft of a given DOM element.\n\t  //Looks up the entire ancestry of an element, up to the first relatively positioned element.\n\t  nv.tooltip.findTotalOffsetLeft = function ( Elem, initialLeft) {\n\t                var offsetLeft = initialLeft;\n\t                \n\t                do {\n\t                    if( !isNaN( Elem.offsetLeft ) ) {\n\t                        offsetLeft += (Elem.offsetLeft);\n\t                    }\n\t                } while( Elem = Elem.offsetParent );\n\t                return offsetLeft;\n\t  };\n\t\n\t  //Global utility function to render a tooltip on the DOM.\n\t  //pos = [left,top] coordinates of where to place the tooltip, relative to the SVG chart container.\n\t  //gravity = how to orient the tooltip\n\t  //dist = how far away from the mouse to place tooltip\n\t  //container = tooltip DIV\n\t  nv.tooltip.calcTooltipPosition = function(pos, gravity, dist, container) {\n\t\n\t            var height = parseInt(container.offsetHeight),\n\t                width = parseInt(container.offsetWidth),\n\t                windowWidth = nv.utils.windowSize().width,\n\t                windowHeight = nv.utils.windowSize().height,\n\t                scrollTop = window.pageYOffset,\n\t                scrollLeft = window.pageXOffset,\n\t                left, top;\n\t\n\t            windowHeight = window.innerWidth >= document.body.scrollWidth ? windowHeight : windowHeight - 16;\n\t            windowWidth = window.innerHeight >= document.body.scrollHeight ? windowWidth : windowWidth - 16;\n\t\n\t            gravity = gravity || 's';\n\t            dist = dist || 20;\n\t\n\t            var tooltipTop = function ( Elem ) {\n\t                return nv.tooltip.findTotalOffsetTop(Elem, top);\n\t            };\n\t\n\t            var tooltipLeft = function ( Elem ) {\n\t                return nv.tooltip.findTotalOffsetLeft(Elem,left);\n\t            };\n\t\n\t            switch (gravity) {\n\t              case 'e':\n\t                left = pos[0] - width - dist;\n\t                top = pos[1] - (height / 2);\n\t                var tLeft = tooltipLeft(container);\n\t                var tTop = tooltipTop(container);\n\t                if (tLeft < scrollLeft) left = pos[0] + dist > scrollLeft ? pos[0] + dist : scrollLeft - tLeft + left;\n\t                if (tTop < scrollTop) top = scrollTop - tTop + top;\n\t                if (tTop + height > scrollTop + windowHeight) top = scrollTop + windowHeight - tTop + top - height;\n\t                break;\n\t              case 'w':\n\t                left = pos[0] + dist;\n\t                top = pos[1] - (height / 2);\n\t                var tLeft = tooltipLeft(container);\n\t                var tTop = tooltipTop(container);\n\t                if (tLeft + width > windowWidth) left = pos[0] - width - dist;\n\t                if (tTop < scrollTop) top = scrollTop + 5;\n\t                if (tTop + height > scrollTop + windowHeight) top = scrollTop + windowHeight - tTop + top - height;\n\t                break;\n\t              case 'n':\n\t                left = pos[0] - (width / 2) - 5;\n\t                top = pos[1] + dist;\n\t                var tLeft = tooltipLeft(container);\n\t                var tTop = tooltipTop(container);\n\t                if (tLeft < scrollLeft) left = scrollLeft + 5;\n\t                if (tLeft + width > windowWidth) left = left - width/2 + 5;\n\t                if (tTop + height > scrollTop + windowHeight) top = scrollTop + windowHeight - tTop + top - height;\n\t                break;\n\t              case 's':\n\t                left = pos[0] - (width / 2);\n\t                top = pos[1] - height - dist;\n\t                var tLeft = tooltipLeft(container);\n\t                var tTop = tooltipTop(container);\n\t                if (tLeft < scrollLeft) left = scrollLeft + 5;\n\t                if (tLeft + width > windowWidth) left = left - width/2 + 5;\n\t                if (scrollTop > tTop) top = scrollTop;\n\t                break;\n\t              case 'none':\n\t                left = pos[0];\n\t                top = pos[1] - dist;\n\t                var tLeft = tooltipLeft(container);\n\t                var tTop = tooltipTop(container);\n\t                break;\n\t            }\n\t\n\t\n\t            container.style.left = left+'px';\n\t            container.style.top = top+'px';\n\t            container.style.opacity = 1;\n\t            container.style.position = 'absolute'; \n\t\n\t            return container;\n\t    };\n\t\n\t    //Global utility function to remove tooltips from the DOM.\n\t    nv.tooltip.cleanup = function() {\n\t\n\t              // Find the tooltips, mark them for removal by this class (so others cleanups won't find it)\n\t              var tooltips = document.getElementsByClassName('nvtooltip');\n\t              var purging = [];\n\t              while(tooltips.length) {\n\t                purging.push(tooltips[0]);\n\t                tooltips[0].style.transitionDelay = '0 !important';\n\t                tooltips[0].style.opacity = 0;\n\t                tooltips[0].className = 'nvtooltip-pending-removal';\n\t              }\n\t\n\t              setTimeout(function() {\n\t\n\t                  while (purging.length) {\n\t                     var removeMe = purging.pop();\n\t                      removeMe.parentNode.removeChild(removeMe);\n\t                  }\n\t            }, 500);\n\t    };\n\t\n\t})();\n\t\n\tnv.utils.windowSize = function() {\n\t    // Sane defaults\n\t    var size = {width: 640, height: 480};\n\t\n\t    // Earlier IE uses Doc.body\n\t    if (document.body && document.body.offsetWidth) {\n\t        size.width = document.body.offsetWidth;\n\t        size.height = document.body.offsetHeight;\n\t    }\n\t\n\t    // IE can use depending on mode it is in\n\t    if (document.compatMode=='CSS1Compat' &&\n\t        document.documentElement &&\n\t        document.documentElement.offsetWidth ) {\n\t        size.width = document.documentElement.offsetWidth;\n\t        size.height = document.documentElement.offsetHeight;\n\t    }\n\t\n\t    // Most recent browsers use\n\t    if (window.innerWidth && window.innerHeight) {\n\t        size.width = window.innerWidth;\n\t        size.height = window.innerHeight;\n\t    }\n\t    return (size);\n\t};\n\t\n\t\n\t\n\t// Easy way to bind multiple functions to window.onresize\n\t// TODO: give a way to remove a function after its bound, other than removing all of them\n\tnv.utils.windowResize = function(fun){\n\t  if (fun === undefined) return;\n\t  var oldresize = window.onresize;\n\t\n\t  window.onresize = function(e) {\n\t    if (typeof oldresize == 'function') oldresize(e);\n\t    fun(e);\n\t  }\n\t}\n\t\n\t// Backwards compatible way to implement more d3-like coloring of graphs.\n\t// If passed an array, wrap it in a function which implements the old default\n\t// behavior\n\tnv.utils.getColor = function(color) {\n\t    if (!arguments.length) return nv.utils.defaultColor(); //if you pass in nothing, get default colors back\n\t\n\t    if( Object.prototype.toString.call( color ) === '[object Array]' )\n\t        return function(d, i) { return d.color || color[i % color.length]; };\n\t    else\n\t        return color;\n\t        //can't really help it if someone passes rubbish as color\n\t}\n\t\n\t// Default color chooser uses the index of an object as before.\n\tnv.utils.defaultColor = function() {\n\t    var colors = d3.scale.category20().range();\n\t    return function(d, i) { return d.color || colors[i % colors.length] };\n\t}\n\t\n\t\n\t// Returns a color function that takes the result of 'getKey' for each series and\n\t// looks for a corresponding color from the dictionary,\n\tnv.utils.customTheme = function(dictionary, getKey, defaultColors) {\n\t  getKey = getKey || function(series) { return series.key }; // use default series.key if getKey is undefined\n\t  defaultColors = defaultColors || d3.scale.category20().range(); //default color function\n\t\n\t  var defIndex = defaultColors.length; //current default color (going in reverse)\n\t\n\t  return function(series, index) {\n\t    var key = getKey(series);\n\t\n\t    if (!defIndex) defIndex = defaultColors.length; //used all the default colors, start over\n\t\n\t    if (typeof dictionary[key] !== \"undefined\")\n\t      return (typeof dictionary[key] === \"function\") ? dictionary[key]() : dictionary[key];\n\t    else\n\t      return defaultColors[--defIndex]; // no match in dictionary, use default color\n\t  }\n\t}\n\t\n\t\n\t\n\t// From the PJAX example on d3js.org, while this is not really directly needed\n\t// it's a very cool method for doing pjax, I may expand upon it a little bit,\n\t// open to suggestions on anything that may be useful\n\tnv.utils.pjax = function(links, content) {\n\t  d3.selectAll(links).on(\"click\", function() {\n\t    history.pushState(this.href, this.textContent, this.href);\n\t    load(this.href);\n\t    d3.event.preventDefault();\n\t  });\n\t\n\t  function load(href) {\n\t    d3.html(href, function(fragment) {\n\t      var target = d3.select(content).node();\n\t      target.parentNode.replaceChild(d3.select(fragment).select(content).node(), target);\n\t      nv.utils.pjax(links, content);\n\t    });\n\t  }\n\t\n\t  d3.select(window).on(\"popstate\", function() {\n\t    if (d3.event.state) load(d3.event.state);\n\t  });\n\t}\n\t\n\t/* For situations where we want to approximate the width in pixels for an SVG:text element.\n\tMost common instance is when the element is in a display:none; container.\n\tForumla is : text.length * font-size * constant_factor\n\t*/\n\tnv.utils.calcApproxTextWidth = function (svgTextElem) {\n\t    if (typeof svgTextElem.style === 'function'\n\t        && typeof svgTextElem.text === 'function') {\n\t        var fontSize = parseInt(svgTextElem.style(\"font-size\").replace(\"px\",\"\"));\n\t        var textLength = svgTextElem.text().length;\n\t\n\t        return textLength * fontSize * 0.5;\n\t    }\n\t    return 0;\n\t};\n\t\n\t/* Numbers that are undefined, null or NaN, convert them to zeros.\n\t*/\n\tnv.utils.NaNtoZero = function(n) {\n\t    if (typeof n !== 'number'\n\t        || isNaN(n)\n\t        || n === null\n\t        || n === Infinity) return 0;\n\t\n\t    return n;\n\t};\n\t\n\t/*\n\tSnippet of code you can insert into each nv.models.* to give you the ability to\n\tdo things like:\n\tchart.options({\n\t  showXAxis: true,\n\t  tooltips: true\n\t});\n\t\n\tTo enable in the chart:\n\tchart.options = nv.utils.optionsFunc.bind(chart);\n\t*/\n\tnv.utils.optionsFunc = function(args) {\n\t    if (args) {\n\t      d3.map(args).forEach((function(key,value) {\n\t        if (typeof this[key] === \"function\") {\n\t           this[key](value);\n\t        }\n\t      }).bind(this));\n\t    }\n\t    return this;\n\t};nv.models.axis = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var axis = d3.svg.axis()\n\t    ;\n\t\n\t  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t    , width = 75 //only used for tickLabel currently\n\t    , height = 60 //only used for tickLabel currently\n\t    , scale = d3.scale.linear()\n\t    , axisLabelText = null\n\t    , showMaxMin = true //TODO: showMaxMin should be disabled on all ordinal scaled axes\n\t    , highlightZero = true\n\t    , rotateLabels = 0\n\t    , rotateYLabel = true\n\t    , staggerLabels = false\n\t    , isOrdinal = false\n\t    , ticks = null\n\t    , axisLabelDistance = 12 //The larger this number is, the closer the axis label is to the axis.\n\t    ;\n\t\n\t  axis\n\t    .scale(scale)\n\t    .orient('bottom')\n\t    .tickFormat(function(d) { return d })\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var scale0;\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this);\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-axis').data([data]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-axis');\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g')\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      if (ticks !== null)\n\t        axis.ticks(ticks);\n\t      else if (axis.orient() == 'top' || axis.orient() == 'bottom')\n\t        axis.ticks(Math.abs(scale.range()[1] - scale.range()[0]) / 100);\n\t\n\t\n\t      //TODO: consider calculating width/height based on whether or not label is added, for reference in charts using this component\n\t\n\t\n\t      g.call(axis);\n\t\n\t      scale0 = scale0 || axis.scale();\n\t\n\t      var fmt = axis.tickFormat();\n\t      if (fmt == null) {\n\t        fmt = scale0.tickFormat();\n\t      }\n\t\n\t      var axisLabel = g.selectAll('text.nv-axislabel')\n\t          .data([axisLabelText || null]);\n\t      axisLabel.exit().remove();\n\t      switch (axis.orient()) {\n\t        case 'top':\n\t          axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n\t          var w = (scale.range().length==2) ? scale.range()[1] : (scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]));\n\t          axisLabel\n\t              .attr('text-anchor', 'middle')\n\t              .attr('y', 0)\n\t              .attr('x', w/2);\n\t          if (showMaxMin) {\n\t            var axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n\t                           .data(scale.domain());\n\t            axisMaxMin.enter().append('g').attr('class', 'nv-axisMaxMin').append('text');\n\t            axisMaxMin.exit().remove();\n\t            axisMaxMin\n\t                .attr('transform', function(d,i) {\n\t                  return 'translate(' + scale(d) + ',0)'\n\t                })\n\t              .select('text')\n\t                .attr('dy', '-0.5em')\n\t                .attr('y', -axis.tickPadding())\n\t                .attr('text-anchor', 'middle')\n\t                .text(function(d,i) {\n\t                  var v = fmt(d);\n\t                  return ('' + v).match('NaN') ? '' : v;\n\t                });\n\t            axisMaxMin\n\t                .attr('transform', function(d,i) {\n\t                  return 'translate(' + scale.range()[i] + ',0)'\n\t                });\n\t          }\n\t          break;\n\t        case 'bottom':\n\t          var xLabelMargin = 36;\n\t          var maxTextWidth = 30;\n\t          var xTicks = g.selectAll('g').select(\"text\");\n\t          if (rotateLabels%360) {\n\t            //Calculate the longest xTick width\n\t            xTicks.each(function(d,i){\n\t              var width = this.getBBox().width;\n\t              if(width > maxTextWidth) maxTextWidth = width;\n\t            });\n\t            //Convert to radians before calculating sin. Add 30 to margin for healthy padding.\n\t            var sin = Math.abs(Math.sin(rotateLabels*Math.PI/180));\n\t            var xLabelMargin = (sin ? sin*maxTextWidth : maxTextWidth)+30;\n\t            //Rotate all xTicks\n\t            xTicks\n\t              .attr('transform', function(d,i,j) { return 'rotate(' + rotateLabels + ' 0,0)' })\n\t              .style('text-anchor', rotateLabels%360 > 0 ? 'start' : 'end');\n\t          }\n\t          axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n\t          var w = (scale.range().length==2) ? scale.range()[1] : (scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]));\n\t          axisLabel\n\t              .attr('text-anchor', 'middle')\n\t              .attr('y', xLabelMargin)\n\t              .attr('x', w/2);\n\t          if (showMaxMin) {\n\t          //if (showMaxMin && !isOrdinal) {\n\t            var axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n\t                           //.data(scale.domain())\n\t                           .data([scale.domain()[0], scale.domain()[scale.domain().length - 1]]);\n\t            axisMaxMin.enter().append('g').attr('class', 'nv-axisMaxMin').append('text');\n\t            axisMaxMin.exit().remove();\n\t            axisMaxMin\n\t                .attr('transform', function(d,i) {\n\t                  return 'translate(' + (scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0)) + ',0)'\n\t                })\n\t              .select('text')\n\t                .attr('dy', '.71em')\n\t                .attr('y', axis.tickPadding())\n\t                .attr('transform', function(d,i,j) { return 'rotate(' + rotateLabels + ' 0,0)' })\n\t                .style('text-anchor', rotateLabels ? (rotateLabels%360 > 0 ? 'start' : 'end') : 'middle')\n\t                .text(function(d,i) {\n\t                  var v = fmt(d);\n\t                  return ('' + v).match('NaN') ? '' : v;\n\t                });\n\t            axisMaxMin\n\t                .attr('transform', function(d,i) {\n\t                  //return 'translate(' + scale.range()[i] + ',0)'\n\t                  //return 'translate(' + scale(d) + ',0)'\n\t                  return 'translate(' + (scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0)) + ',0)'\n\t                });\n\t          }\n\t          if (staggerLabels)\n\t            xTicks\n\t                .attr('transform', function(d,i) { return 'translate(0,' + (i % 2 == 0 ? '0' : '12') + ')' });\n\t\n\t          break;\n\t        case 'right':\n\t          axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n\t          axisLabel\n\t              .style('text-anchor', rotateYLabel ? 'middle' : 'begin')\n\t              .attr('transform', rotateYLabel ? 'rotate(90)' : '')\n\t              .attr('y', rotateYLabel ? (-Math.max(margin.right,width) + 12) : -10) //TODO: consider calculating this based on largest tick width... OR at least expose this on chart\n\t              .attr('x', rotateYLabel ? (scale.range()[0] / 2) : axis.tickPadding());\n\t          if (showMaxMin) {\n\t            var axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n\t                           .data(scale.domain());\n\t            axisMaxMin.enter().append('g').attr('class', 'nv-axisMaxMin').append('text')\n\t                .style('opacity', 0);\n\t            axisMaxMin.exit().remove();\n\t            axisMaxMin\n\t                .attr('transform', function(d,i) {\n\t                  return 'translate(0,' + scale(d) + ')'\n\t                })\n\t              .select('text')\n\t                .attr('dy', '.32em')\n\t                .attr('y', 0)\n\t                .attr('x', axis.tickPadding())\n\t                .style('text-anchor', 'start')\n\t                .text(function(d,i) {\n\t                  var v = fmt(d);\n\t                  return ('' + v).match('NaN') ? '' : v;\n\t                });\n\t            axisMaxMin\n\t                .attr('transform', function(d,i) {\n\t                  return 'translate(0,' + scale.range()[i] + ')'\n\t                })\n\t              .select('text')\n\t                .style('opacity', 1);\n\t          }\n\t          break;\n\t        case 'left':\n\t          /*\n\t          //For dynamically placing the label. Can be used with dynamically-sized chart axis margins\n\t          var yTicks = g.selectAll('g').select(\"text\");\n\t          yTicks.each(function(d,i){\n\t            var labelPadding = this.getBBox().width + axis.tickPadding() + 16;\n\t            if(labelPadding > width) width = labelPadding;\n\t          });\n\t          */\n\t          axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n\t          axisLabel\n\t              .style('text-anchor', rotateYLabel ? 'middle' : 'end')\n\t              .attr('transform', rotateYLabel ? 'rotate(-90)' : '')\n\t              .attr('y', rotateYLabel ? (-Math.max(margin.left,width) + axisLabelDistance) : -10) //TODO: consider calculating this based on largest tick width... OR at least expose this on chart\n\t              .attr('x', rotateYLabel ? (-scale.range()[0] / 2) : -axis.tickPadding());\n\t          if (showMaxMin) {\n\t            var axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n\t                           .data(scale.domain());\n\t            axisMaxMin.enter().append('g').attr('class', 'nv-axisMaxMin').append('text')\n\t                .style('opacity', 0);\n\t            axisMaxMin.exit().remove();\n\t            axisMaxMin\n\t                .attr('transform', function(d,i) {\n\t                  return 'translate(0,' + scale0(d) + ')'\n\t                })\n\t              .select('text')\n\t                .attr('dy', '.32em')\n\t                .attr('y', 0)\n\t                .attr('x', -axis.tickPadding())\n\t                .attr('text-anchor', 'end')\n\t                .text(function(d,i) {\n\t                  var v = fmt(d);\n\t                  return ('' + v).match('NaN') ? '' : v;\n\t                });\n\t            axisMaxMin\n\t                .attr('transform', function(d,i) {\n\t                  return 'translate(0,' + scale.range()[i] + ')'\n\t                })\n\t              .select('text')\n\t                .style('opacity', 1);\n\t          }\n\t          break;\n\t      }\n\t      axisLabel\n\t          .text(function(d) { return d });\n\t\n\t\n\t      if (showMaxMin && (axis.orient() === 'left' || axis.orient() === 'right')) {\n\t        //check if max and min overlap other values, if so, hide the values that overlap\n\t        g.selectAll('g') // the g's wrapping each tick\n\t            .each(function(d,i) {\n\t              d3.select(this).select('text').attr('opacity', 1);\n\t              if (scale(d) < scale.range()[1] + 10 || scale(d) > scale.range()[0] - 10) { // 10 is assuming text height is 16... if d is 0, leave it!\n\t                if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL\n\t                  d3.select(this).attr('opacity', 0);\n\t\n\t                d3.select(this).select('text').attr('opacity', 0); // Don't remove the ZERO line!!\n\t              }\n\t            });\n\t\n\t        //if Max and Min = 0 only show min, Issue #281\n\t        if (scale.domain()[0] == scale.domain()[1] && scale.domain()[0] == 0)\n\t          wrap.selectAll('g.nv-axisMaxMin')\n\t            .style('opacity', function(d,i) { return !i ? 1 : 0 });\n\t\n\t      }\n\t\n\t      if (showMaxMin && (axis.orient() === 'top' || axis.orient() === 'bottom')) {\n\t        var maxMinRange = [];\n\t        wrap.selectAll('g.nv-axisMaxMin')\n\t            .each(function(d,i) {\n\t              try {\n\t                  if (i) // i== 1, max position\n\t                      maxMinRange.push(scale(d) - this.getBBox().width - 4)  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)\n\t                  else // i==0, min position\n\t                      maxMinRange.push(scale(d) + this.getBBox().width + 4)\n\t              }catch (err) {\n\t                  if (i) // i== 1, max position\n\t                      maxMinRange.push(scale(d) - 4)  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)\n\t                  else // i==0, min position\n\t                      maxMinRange.push(scale(d) + 4)\n\t              }\n\t            });\n\t        g.selectAll('g') // the g's wrapping each tick\n\t            .each(function(d,i) {\n\t              if (scale(d) < maxMinRange[0] || scale(d) > maxMinRange[1]) {\n\t                if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL\n\t                  d3.select(this).remove();\n\t                else\n\t                  d3.select(this).select('text').remove(); // Don't remove the ZERO line!!\n\t              }\n\t            });\n\t      }\n\t\n\t\n\t      //highlight zero line ... Maybe should not be an option and should just be in CSS?\n\t      if (highlightZero)\n\t        g.selectAll('.tick')\n\t          .filter(function(d) { return !parseFloat(Math.round(d.__data__*100000)/1000000) && (d.__data__ !== undefined) }) //this is because sometimes the 0 tick is a very small fraction, TODO: think of cleaner technique\n\t            .classed('zero', true);\n\t\n\t      //store old scales for use in transitions on update\n\t      scale0 = scale.copy();\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.axis = axis;\n\t\n\t  d3.rebind(chart, axis, 'orient', 'tickValues', 'tickSubdivide', 'tickSize', 'tickPadding', 'tickFormat');\n\t  d3.rebind(chart, scale, 'domain', 'range', 'rangeBand', 'rangeBands'); //these are also accessible by chart.scale(), but added common ones directly for ease of use\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.margin = function(_) {\n\t    if(!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  }\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.ticks = function(_) {\n\t    if (!arguments.length) return ticks;\n\t    ticks = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.axisLabel = function(_) {\n\t    if (!arguments.length) return axisLabelText;\n\t    axisLabelText = _;\n\t    return chart;\n\t  }\n\t\n\t  chart.showMaxMin = function(_) {\n\t    if (!arguments.length) return showMaxMin;\n\t    showMaxMin = _;\n\t    return chart;\n\t  }\n\t\n\t  chart.highlightZero = function(_) {\n\t    if (!arguments.length) return highlightZero;\n\t    highlightZero = _;\n\t    return chart;\n\t  }\n\t\n\t  chart.scale = function(_) {\n\t    if (!arguments.length) return scale;\n\t    scale = _;\n\t    axis.scale(scale);\n\t    isOrdinal = typeof scale.rangeBands === 'function';\n\t    d3.rebind(chart, scale, 'domain', 'range', 'rangeBand', 'rangeBands');\n\t    return chart;\n\t  }\n\t\n\t  chart.rotateYLabel = function(_) {\n\t    if(!arguments.length) return rotateYLabel;\n\t    rotateYLabel = _;\n\t    return chart;\n\t  }\n\t\n\t  chart.rotateLabels = function(_) {\n\t    if(!arguments.length) return rotateLabels;\n\t    rotateLabels = _;\n\t    return chart;\n\t  }\n\t\n\t  chart.staggerLabels = function(_) {\n\t    if (!arguments.length) return staggerLabels;\n\t    staggerLabels = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.axisLabelDistance = function(_) {\n\t    if (!arguments.length) return axisLabelDistance;\n\t    axisLabelDistance = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t//TODO: consider deprecating and using multibar with single series for this\n\tnv.models.historicalBar = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t    , width = 960\n\t    , height = 500\n\t    , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n\t    , x = d3.scale.linear()\n\t    , y = d3.scale.linear()\n\t    , getX = function(d) { return d.x }\n\t    , getY = function(d) { return d.y }\n\t    , forceX = []\n\t    , forceY = [0]\n\t    , padData = false\n\t    , clipEdge = true\n\t    , color = nv.utils.defaultColor()\n\t    , xDomain\n\t    , yDomain\n\t    , xRange\n\t    , yRange\n\t    , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout')\n\t    , interactive = true\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var availableWidth = width - margin.left - margin.right,\n\t          availableHeight = height - margin.top - margin.bottom,\n\t          container = d3.select(this);\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x   .domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ))\n\t\n\t      if (padData)\n\t        x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n\t      else\n\t        x.range(xRange || [0, availableWidth]);\n\t\n\t      y   .domain(yDomain || d3.extent(data[0].values.map(getY).concat(forceY) ))\n\t          .range(yRange || [availableHeight, 0]);\n\t\n\t      // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n\t\n\t      if (x.domain()[0] === x.domain()[1])\n\t        x.domain()[0] ?\n\t            x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n\t          : x.domain([-1,1]);\n\t\n\t      if (y.domain()[0] === y.domain()[1])\n\t        y.domain()[0] ?\n\t            y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n\t          : y.domain([-1,1]);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-historicalBar-' + id).data([data[0].values]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBar-' + id);\n\t      var defsEnter = wrapEnter.append('defs');\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-bars');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      container\n\t          .on('click', function(d,i) {\n\t            dispatch.chartClick({\n\t                data: d,\n\t                index: i,\n\t                pos: d3.event,\n\t                id: id\n\t            });\n\t          });\n\t\n\t\n\t      defsEnter.append('clipPath')\n\t          .attr('id', 'nv-chart-clip-path-' + id)\n\t        .append('rect');\n\t\n\t      wrap.select('#nv-chart-clip-path-' + id + ' rect')\n\t          .attr('width', availableWidth)\n\t          .attr('height', availableHeight);\n\t\n\t      g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\t\n\t\n\t\n\t      var bars = wrap.select('.nv-bars').selectAll('.nv-bar')\n\t          .data(function(d) { return d }, function(d,i) {return getX(d,i)});\n\t\n\t      bars.exit().remove();\n\t\n\t\n\t      var barsEnter = bars.enter().append('rect')\n\t          //.attr('class', function(d,i,j) { return (getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive') + ' nv-bar-' + j + '-' + i })\n\t          .attr('x', 0 )\n\t          .attr('y', function(d,i) {  return nv.utils.NaNtoZero(y(Math.max(0, getY(d,i)))) })\n\t          .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.abs(y(getY(d,i)) - y(0))) })\n\t          .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; }) \n\t          .on('mouseover', function(d,i) {\n\t            if (!interactive) return;\n\t            d3.select(this).classed('hover', true);\n\t            dispatch.elementMouseover({\n\t                point: d,\n\t                series: data[0],\n\t                pos: [x(getX(d,i)), y(getY(d,i))],  // TODO: Figure out why the value appears to be shifted\n\t                pointIndex: i,\n\t                seriesIndex: 0,\n\t                e: d3.event\n\t            });\n\t\n\t          })\n\t          .on('mouseout', function(d,i) {\n\t                if (!interactive) return;\n\t                d3.select(this).classed('hover', false);\n\t                dispatch.elementMouseout({\n\t                    point: d,\n\t                    series: data[0],\n\t                    pointIndex: i,\n\t                    seriesIndex: 0,\n\t                    e: d3.event\n\t                });\n\t          })\n\t          .on('click', function(d,i) {\n\t                if (!interactive) return;\n\t                dispatch.elementClick({\n\t                    //label: d[label],\n\t                    value: getY(d,i),\n\t                    data: d,\n\t                    index: i,\n\t                    pos: [x(getX(d,i)), y(getY(d,i))],\n\t                    e: d3.event,\n\t                    id: id\n\t                });\n\t              d3.event.stopPropagation();\n\t          })\n\t          .on('dblclick', function(d,i) {\n\t              if (!interactive) return;\n\t              dispatch.elementDblClick({\n\t                  //label: d[label],\n\t                  value: getY(d,i),\n\t                  data: d,\n\t                  index: i,\n\t                  pos: [x(getX(d,i)), y(getY(d,i))],\n\t                  e: d3.event,\n\t                  id: id\n\t              });\n\t              d3.event.stopPropagation();\n\t          });\n\t\n\t      bars\n\t          .attr('fill', function(d,i) { return color(d, i); })\n\t          .attr('class', function(d,i,j) { return (getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive') + ' nv-bar-' + j + '-' + i })\n\t          \n\t          .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; }) \n\t           //TODO: better width calculations that don't assume always uniform data spacing;w\n\t          .attr('width', (availableWidth / data[0].values.length) * .9 );\n\t\n\t\n\t      bars\n\t          .attr('y', function(d,i) {\n\t            var rval = getY(d,i) < 0 ?\n\t                    y(0) :\n\t                    y(0) - y(getY(d,i)) < 1 ?\n\t                      y(0) - 1 :\n\t                      y(getY(d,i));\n\t            return nv.utils.NaNtoZero(rval);\n\t          })\n\t          .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.max(Math.abs(y(getY(d,i)) - y(0)),1)) });\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t  //Create methods to allow outside functions to highlight a specific bar.\n\t  chart.highlightPoint = function(pointIndex, isHoverOver) {\n\t      d3.select(\".nv-historicalBar-\" + id)\n\t        .select(\".nv-bars .nv-bar-0-\" + pointIndex)\n\t              .classed(\"hover\", isHoverOver)\n\t               ;\n\t  };\n\t\n\t  chart.clearHighlights = function() {\n\t      d3.select(\".nv-historicalBar-\" + id)\n\t        .select(\".nv-bars .nv-bar.hover\")\n\t              .classed(\"hover\", false)\n\t               ;\n\t  };\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  chart.dispatch = dispatch;\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  chart.x = function(_) {\n\t    if (!arguments.length) return getX;\n\t    getX = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.y = function(_) {\n\t    if (!arguments.length) return getY;\n\t    getY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xScale = function(_) {\n\t    if (!arguments.length) return x;\n\t    x = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yScale = function(_) {\n\t    if (!arguments.length) return y;\n\t    y = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xDomain = function(_) {\n\t    if (!arguments.length) return xDomain;\n\t    xDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yDomain = function(_) {\n\t    if (!arguments.length) return yDomain;\n\t    yDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xRange = function(_) {\n\t    if (!arguments.length) return xRange;\n\t    xRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yRange = function(_) {\n\t    if (!arguments.length) return yRange;\n\t    yRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.forceX = function(_) {\n\t    if (!arguments.length) return forceX;\n\t    forceX = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.forceY = function(_) {\n\t    if (!arguments.length) return forceY;\n\t    forceY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.padData = function(_) {\n\t    if (!arguments.length) return padData;\n\t    padData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.clipEdge = function(_) {\n\t    if (!arguments.length) return clipEdge;\n\t    clipEdge = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.id = function(_) {\n\t    if (!arguments.length) return id;\n\t    id = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.interactive = function(_) {\n\t    if(!arguments.length) return interactive;\n\t    interactive = false;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\t// Chart design based on the recommendations of Stephen Few. Implementation\n\t// based on the work of Clint Ivy, Jamie Love, and Jason Davies.\n\t// http://projects.instantcognition.com/protovis/bulletchart/\n\t\n\tnv.models.bullet = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t    , orient = 'left' // TODO top & bottom\n\t    , reverse = false\n\t    , ranges = function(d) { return d.ranges }\n\t    , markers = function(d) { return d.markers }\n\t    , measures = function(d) { return d.measures }\n\t    , rangeLabels = function(d) { return d.rangeLabels ? d.rangeLabels : [] }\n\t    , markerLabels = function(d) { return d.markerLabels ? d.markerLabels : []  }\n\t    , measureLabels = function(d) { return d.measureLabels ? d.measureLabels : []  }\n\t    , forceX = [0] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)\n\t    , width = 380\n\t    , height = 30\n\t    , tickFormat = null\n\t    , color = nv.utils.getColor(['#1f77b4'])\n\t    , dispatch = d3.dispatch('elementMouseover', 'elementMouseout')\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(d, i) {\n\t      var availableWidth = width - margin.left - margin.right,\n\t          availableHeight = height - margin.top - margin.bottom,\n\t          container = d3.select(this);\n\t\n\t      var rangez = ranges.call(this, d, i).slice().sort(d3.descending),\n\t          markerz = markers.call(this, d, i).slice().sort(d3.descending),\n\t          measurez = measures.call(this, d, i).slice().sort(d3.descending),\n\t          rangeLabelz = rangeLabels.call(this, d, i).slice(),\n\t          markerLabelz = markerLabels.call(this, d, i).slice(),\n\t          measureLabelz = measureLabels.call(this, d, i).slice();\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      // Compute the new x-scale.\n\t      var x1 = d3.scale.linear()\n\t          .domain( d3.extent(d3.merge([forceX, rangez])) )\n\t          .range(reverse ? [availableWidth, 0] : [0, availableWidth]);\n\t\n\t      // Retrieve the old x-scale, if this is an update.\n\t      var x0 = this.__chart__ || d3.scale.linear()\n\t          .domain([0, Infinity])\n\t          .range(x1.range());\n\t\n\t      // Stash the new scale.\n\t      this.__chart__ = x1;\n\t\n\t\n\t      var rangeMin = d3.min(rangez), //rangez[2]\n\t          rangeMax = d3.max(rangez), //rangez[0]\n\t          rangeAvg = rangez[1];\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-bullet').data([d]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bullet');\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('rect').attr('class', 'nv-range nv-rangeMax');\n\t      gEnter.append('rect').attr('class', 'nv-range nv-rangeAvg');\n\t      gEnter.append('rect').attr('class', 'nv-range nv-rangeMin');\n\t      gEnter.append('rect').attr('class', 'nv-measure');\n\t      gEnter.append('path').attr('class', 'nv-markerTriangle');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t\n\t      var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)\n\t          w1 = function(d) { return Math.abs(x1(d) - x1(0)) };\n\t      var xp0 = function(d) { return d < 0 ? x0(d) : x0(0) },\n\t          xp1 = function(d) { return d < 0 ? x1(d) : x1(0) };\n\t\n\t\n\t      g.select('rect.nv-rangeMax')\n\t          .attr('height', availableHeight)\n\t          .attr('width', w1(rangeMax > 0 ? rangeMax : rangeMin))\n\t          .attr('x', xp1(rangeMax > 0 ? rangeMax : rangeMin))\n\t          .datum(rangeMax > 0 ? rangeMax : rangeMin)\n\t          /*\n\t          .attr('x', rangeMin < 0 ?\n\t                         rangeMax > 0 ?\n\t                             x1(rangeMin)\n\t                           : x1(rangeMax)\n\t                       : x1(0))\n\t                      */\n\t\n\t      g.select('rect.nv-rangeAvg')\n\t          .attr('height', availableHeight)\n\t          .attr('width', w1(rangeAvg))\n\t          .attr('x', xp1(rangeAvg))\n\t          .datum(rangeAvg)\n\t          /*\n\t          .attr('width', rangeMax <= 0 ?\n\t                             x1(rangeMax) - x1(rangeAvg)\n\t                           : x1(rangeAvg) - x1(rangeMin))\n\t          .attr('x', rangeMax <= 0 ?\n\t                         x1(rangeAvg)\n\t                       : x1(rangeMin))\n\t                      */\n\t\n\t      g.select('rect.nv-rangeMin')\n\t          .attr('height', availableHeight)\n\t          .attr('width', w1(rangeMax))\n\t          .attr('x', xp1(rangeMax))\n\t          .attr('width', w1(rangeMax > 0 ? rangeMin : rangeMax))\n\t          .attr('x', xp1(rangeMax > 0 ? rangeMin : rangeMax))\n\t          .datum(rangeMax > 0 ? rangeMin : rangeMax)\n\t          /*\n\t          .attr('width', rangeMax <= 0 ?\n\t                             x1(rangeAvg) - x1(rangeMin)\n\t                           : x1(rangeMax) - x1(rangeAvg))\n\t          .attr('x', rangeMax <= 0 ?\n\t                         x1(rangeMin)\n\t                       : x1(rangeAvg))\n\t                      */\n\t\n\t      g.select('rect.nv-measure')\n\t          .style('fill', color)\n\t          .attr('height', availableHeight / 3)\n\t          .attr('y', availableHeight / 3)\n\t          .attr('width', measurez < 0 ?\n\t                             x1(0) - x1(measurez[0])\n\t                           : x1(measurez[0]) - x1(0))\n\t          .attr('x', xp1(measurez))\n\t          .on('mouseover', function() {\n\t              dispatch.elementMouseover({\n\t                value: measurez[0],\n\t                label: measureLabelz[0] || 'Current',\n\t                pos: [x1(measurez[0]), availableHeight/2]\n\t              })\n\t          })\n\t          .on('mouseout', function() {\n\t              dispatch.elementMouseout({\n\t                value: measurez[0],\n\t                label: measureLabelz[0] || 'Current'\n\t              })\n\t          })\n\t\n\t      var h3 =  availableHeight / 6;\n\t      if (markerz[0]) {\n\t        g.selectAll('path.nv-markerTriangle')\n\t            .attr('transform', function(d) { return 'translate(' + x1(markerz[0]) + ',' + (availableHeight / 2) + ')' })\n\t            .attr('d', 'M0,' + h3 + 'L' + h3 + ',' + (-h3) + ' ' + (-h3) + ',' + (-h3) + 'Z')\n\t            .on('mouseover', function() {\n\t              dispatch.elementMouseover({\n\t                value: markerz[0],\n\t                label: markerLabelz[0] || 'Previous',\n\t                pos: [x1(markerz[0]), availableHeight/2]\n\t              })\n\t            })\n\t            .on('mouseout', function() {\n\t              dispatch.elementMouseout({\n\t                value: markerz[0],\n\t                label: markerLabelz[0] || 'Previous'\n\t              })\n\t            });\n\t      } else {\n\t        g.selectAll('path.nv-markerTriangle').remove();\n\t      }\n\t\n\t\n\t      wrap.selectAll('.nv-range')\n\t          .on('mouseover', function(d,i) {\n\t            var label = rangeLabelz[i] || (!i ? \"Maximum\" : i == 1 ? \"Mean\" : \"Minimum\");\n\t\n\t            dispatch.elementMouseover({\n\t              value: d,\n\t              label: label,\n\t              pos: [x1(d), availableHeight/2]\n\t            })\n\t          })\n\t          .on('mouseout', function(d,i) {\n\t            var label = rangeLabelz[i] || (!i ? \"Maximum\" : i == 1 ? \"Mean\" : \"Minimum\");\n\t\n\t            dispatch.elementMouseout({\n\t              value: d,\n\t              label: label\n\t            })\n\t          })\n\t\n\t/* // THIS IS THE PREVIOUS BULLET IMPLEMENTATION, WILL REMOVE SHORTLY\n\t      // Update the range rects.\n\t      var range = g.selectAll('rect.nv-range')\n\t          .data(rangez);\n\t\n\t      range.enter().append('rect')\n\t          .attr('class', function(d, i) { return 'nv-range nv-s' + i; })\n\t          .attr('width', w0)\n\t          .attr('height', availableHeight)\n\t          .attr('x', reverse ? x0 : 0)\n\t          .on('mouseover', function(d,i) { \n\t              dispatch.elementMouseover({\n\t                value: d,\n\t                label: (i <= 0) ? 'Maximum' : (i > 1) ? 'Minimum' : 'Mean', //TODO: make these labels a variable\n\t                pos: [x1(d), availableHeight/2]\n\t              })\n\t          })\n\t          .on('mouseout', function(d,i) { \n\t              dispatch.elementMouseout({\n\t                value: d,\n\t                label: (i <= 0) ? 'Minimum' : (i >=1) ? 'Maximum' : 'Mean' //TODO: make these labels a variable\n\t              })\n\t          })\n\t\n\t      d3.transition(range)\n\t          .attr('x', reverse ? x1 : 0)\n\t          .attr('width', w1)\n\t          .attr('height', availableHeight);\n\t\n\t\n\t      // Update the measure rects.\n\t      var measure = g.selectAll('rect.nv-measure')\n\t          .data(measurez);\n\t\n\t      measure.enter().append('rect')\n\t          .attr('class', function(d, i) { return 'nv-measure nv-s' + i; })\n\t          .style('fill', function(d,i) { return color(d,i ) })\n\t          .attr('width', w0)\n\t          .attr('height', availableHeight / 3)\n\t          .attr('x', reverse ? x0 : 0)\n\t          .attr('y', availableHeight / 3)\n\t          .on('mouseover', function(d) { \n\t              dispatch.elementMouseover({\n\t                value: d,\n\t                label: 'Current', //TODO: make these labels a variable\n\t                pos: [x1(d), availableHeight/2]\n\t              })\n\t          })\n\t          .on('mouseout', function(d) { \n\t              dispatch.elementMouseout({\n\t                value: d,\n\t                label: 'Current' //TODO: make these labels a variable\n\t              })\n\t          })\n\t\n\t      d3.transition(measure)\n\t          .attr('width', w1)\n\t          .attr('height', availableHeight / 3)\n\t          .attr('x', reverse ? x1 : 0)\n\t          .attr('y', availableHeight / 3);\n\t\n\t\n\t\n\t      // Update the marker lines.\n\t      var marker = g.selectAll('path.nv-markerTriangle')\n\t          .data(markerz);\n\t\n\t      var h3 =  availableHeight / 6;\n\t      marker.enter().append('path')\n\t          .attr('class', 'nv-markerTriangle')\n\t          .attr('transform', function(d) { return 'translate(' + x0(d) + ',' + (availableHeight / 2) + ')' })\n\t          .attr('d', 'M0,' + h3 + 'L' + h3 + ',' + (-h3) + ' ' + (-h3) + ',' + (-h3) + 'Z')\n\t          .on('mouseover', function(d,i) {\n\t              dispatch.elementMouseover({\n\t                value: d,\n\t                label: 'Previous',\n\t                pos: [x1(d), availableHeight/2]\n\t              })\n\t          })\n\t          .on('mouseout', function(d,i) {\n\t              dispatch.elementMouseout({\n\t                value: d,\n\t                label: 'Previous'\n\t              })\n\t          });\n\t\n\t      d3.transition(marker)\n\t          .attr('transform', function(d) { return 'translate(' + (x1(d) - x1(0)) + ',' + (availableHeight / 2) + ')' });\n\t\n\t      marker.exit().remove();\n\t*/\n\t\n\t    });\n\t\n\t    // d3.timer.flush();  // Not needed?\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  chart.dispatch = dispatch;\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  // left, right, top, bottom\n\t  chart.orient = function(_) {\n\t    if (!arguments.length) return orient;\n\t    orient = _;\n\t    reverse = orient == 'right' || orient == 'bottom';\n\t    return chart;\n\t  };\n\t\n\t  // ranges (bad, satisfactory, good)\n\t  chart.ranges = function(_) {\n\t    if (!arguments.length) return ranges;\n\t    ranges = _;\n\t    return chart;\n\t  };\n\t\n\t  // markers (previous, goal)\n\t  chart.markers = function(_) {\n\t    if (!arguments.length) return markers;\n\t    markers = _;\n\t    return chart;\n\t  };\n\t\n\t  // measures (actual, forecast)\n\t  chart.measures = function(_) {\n\t    if (!arguments.length) return measures;\n\t    measures = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.forceX = function(_) {\n\t    if (!arguments.length) return forceX;\n\t    forceX = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.tickFormat = function(_) {\n\t    if (!arguments.length) return tickFormat;\n\t    tickFormat = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t};\n\t\n\t\n\t\n\t// Chart design based on the recommendations of Stephen Few. Implementation\n\t// based on the work of Clint Ivy, Jamie Love, and Jason Davies.\n\t// http://projects.instantcognition.com/protovis/bulletchart/\n\tnv.models.bulletChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var bullet = nv.models.bullet()\n\t    ;\n\t\n\t  var orient = 'left' // TODO top & bottom\n\t    , reverse = false\n\t    , margin = {top: 5, right: 40, bottom: 20, left: 120}\n\t    , ranges = function(d) { return d.ranges }\n\t    , markers = function(d) { return d.markers }\n\t    , measures = function(d) { return d.measures }\n\t    , width = null\n\t    , height = 55\n\t    , tickFormat = null\n\t    , tooltips = true\n\t    , tooltip = function(key, x, y, e, graph) {\n\t        return '<h3>' + x + '</h3>' +\n\t               '<p>' + y + '</p>'\n\t      }\n\t    , noData = 'No Data Available.'\n\t    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide')\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ) + margin.left,\n\t        top = e.pos[1] + ( offsetElement.offsetTop || 0) + margin.top,\n\t        content = tooltip(e.key, e.label, e.value, e, chart);\n\t\n\t    nv.tooltip.show([left, top], content, e.value < 0 ? 'e' : 'w', null, offsetElement);\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(d, i) {\n\t      var container = d3.select(this);\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight = height - margin.top - margin.bottom,\n\t          that = this;\n\t\n\t\n\t      chart.update = function() { chart(selection) };\n\t      chart.container = this;\n\t\n\t      //------------------------------------------------------------\n\t      // Display No Data message if there's nothing to show.\n\t\n\t      if (!d || !ranges.call(this, d, i)) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', 18 + margin.top + availableHeight / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t\n\t      var rangez = ranges.call(this, d, i).slice().sort(d3.descending),\n\t          markerz = markers.call(this, d, i).slice().sort(d3.descending),\n\t          measurez = measures.call(this, d, i).slice().sort(d3.descending);\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-bulletChart').data([d]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bulletChart');\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-bulletWrap');\n\t      gEnter.append('g').attr('class', 'nv-titles');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      // Compute the new x-scale.\n\t      var x1 = d3.scale.linear()\n\t          .domain([0, Math.max(rangez[0], markerz[0], measurez[0])])  // TODO: need to allow forceX and forceY, and xDomain, yDomain\n\t          .range(reverse ? [availableWidth, 0] : [0, availableWidth]);\n\t\n\t      // Retrieve the old x-scale, if this is an update.\n\t      var x0 = this.__chart__ || d3.scale.linear()\n\t          .domain([0, Infinity])\n\t          .range(x1.range());\n\t\n\t      // Stash the new scale.\n\t      this.__chart__ = x1;\n\t\n\t      /*\n\t      // Derive width-scales from the x-scales.\n\t      var w0 = bulletWidth(x0),\n\t          w1 = bulletWidth(x1);\n\t\n\t      function bulletWidth(x) {\n\t        var x0 = x(0);\n\t        return function(d) {\n\t          return Math.abs(x(d) - x(0));\n\t        };\n\t      }\n\t\n\t      function bulletTranslate(x) {\n\t        return function(d) {\n\t          return 'translate(' + x(d) + ',0)';\n\t        };\n\t      }\n\t      */\n\t\n\t      var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)\n\t          w1 = function(d) { return Math.abs(x1(d) - x1(0)) };\n\t\n\t\n\t      var title = gEnter.select('.nv-titles').append('g')\n\t          .attr('text-anchor', 'end')\n\t          .attr('transform', 'translate(-6,' + (height - margin.top - margin.bottom) / 2 + ')');\n\t      title.append('text')\n\t          .attr('class', 'nv-title')\n\t          .text(function(d) { return d.title; });\n\t\n\t      title.append('text')\n\t          .attr('class', 'nv-subtitle')\n\t          .attr('dy', '1em')\n\t          .text(function(d) { return d.subtitle; });\n\t\n\t\n\t\n\t      bullet\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t\n\t      var bulletWrap = g.select('.nv-bulletWrap');\n\t\n\t      d3.transition(bulletWrap).call(bullet);\n\t\n\t\n\t\n\t      // Compute the tick format.\n\t      var format = tickFormat || x1.tickFormat( availableWidth / 100 );\n\t\n\t      // Update the tick groups.\n\t      var tick = g.selectAll('g.nv-tick')\n\t          .data(x1.ticks( availableWidth / 50 ), function(d) {\n\t            return this.textContent || format(d);\n\t          });\n\t\n\t      // Initialize the ticks with the old scale, x0.\n\t      var tickEnter = tick.enter().append('g')\n\t          .attr('class', 'nv-tick')\n\t          .attr('transform', function(d) { return 'translate(' + x0(d) + ',0)' })\n\t          .style('opacity', 1e-6);\n\t\n\t      tickEnter.append('line')\n\t          .attr('y1', availableHeight)\n\t          .attr('y2', availableHeight * 7 / 6);\n\t\n\t      tickEnter.append('text')\n\t          .attr('text-anchor', 'middle')\n\t          .attr('dy', '1em')\n\t          .attr('y', availableHeight * 7 / 6)\n\t          .text(format);\n\t\n\t\n\t      // Transition the updating ticks to the new scale, x1.\n\t      var tickUpdate = d3.transition(tick)\n\t          .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })\n\t          .style('opacity', 1);\n\t\n\t      tickUpdate.select('line')\n\t          .attr('y1', availableHeight)\n\t          .attr('y2', availableHeight * 7 / 6);\n\t\n\t      tickUpdate.select('text')\n\t          .attr('y', availableHeight * 7 / 6);\n\t\n\t      // Transition the exiting ticks to the new scale, x1.\n\t      d3.transition(tick.exit())\n\t          .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })\n\t          .style('opacity', 1e-6)\n\t          .remove();\n\t\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t      dispatch.on('tooltipShow', function(e) {\n\t        e.key = d.title;\n\t        if (tooltips) showTooltip(e, that.parentNode);\n\t      });\n\t\n\t      //============================================================\n\t\n\t    });\n\t\n\t    d3.timer.flush();\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  bullet.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  bullet.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  chart.dispatch = dispatch;\n\t  chart.bullet = bullet;\n\t\n\t  d3.rebind(chart, bullet, 'color');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  // left, right, top, bottom\n\t  chart.orient = function(x) {\n\t    if (!arguments.length) return orient;\n\t    orient = x;\n\t    reverse = orient == 'right' || orient == 'bottom';\n\t    return chart;\n\t  };\n\t\n\t  // ranges (bad, satisfactory, good)\n\t  chart.ranges = function(x) {\n\t    if (!arguments.length) return ranges;\n\t    ranges = x;\n\t    return chart;\n\t  };\n\t\n\t  // markers (previous, goal)\n\t  chart.markers = function(x) {\n\t    if (!arguments.length) return markers;\n\t    markers = x;\n\t    return chart;\n\t  };\n\t\n\t  // measures (actual, forecast)\n\t  chart.measures = function(x) {\n\t    if (!arguments.length) return measures;\n\t    measures = x;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(x) {\n\t    if (!arguments.length) return width;\n\t    width = x;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(x) {\n\t    if (!arguments.length) return height;\n\t    height = x;\n\t    return chart;\n\t  };\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.tickFormat = function(x) {\n\t    if (!arguments.length) return tickFormat;\n\t    tickFormat = x;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t};\n\t\n\t\n\t\n\tnv.models.cumulativeLineChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var lines = nv.models.line()\n\t    , xAxis = nv.models.axis()\n\t    , yAxis = nv.models.axis()\n\t    , legend = nv.models.legend()\n\t    , controls = nv.models.legend()\n\t    , interactiveLayer = nv.interactiveGuideline()\n\t    ;\n\t\n\t  var margin = {top: 30, right: 30, bottom: 50, left: 60}\n\t    , color = nv.utils.defaultColor()\n\t    , width = null\n\t    , height = null\n\t    , showLegend = true\n\t    , showXAxis = true\n\t    , showYAxis = true\n\t    , rightAlignYAxis = false\n\t    , tooltips = true\n\t    , showControls = true\n\t    , useInteractiveGuideline = false\n\t    , rescaleY = true\n\t    , tooltip = function(key, x, y, e, graph) {\n\t        return '<h3>' + key + '</h3>' +\n\t               '<p>' +  y + ' at ' + x + '</p>'\n\t      }\n\t    , x //can be accessed via chart.xScale()\n\t    , y //can be accessed via chart.yScale()\n\t    , id = lines.id()\n\t    , state = { index: 0, rescaleY: rescaleY }\n\t    , defaultState = null\n\t    , noData = 'No Data Available.'\n\t    , average = function(d) { return d.average }\n\t    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n\t    , transitionDuration = 0\n\t    , noErrorCheck = false  //if set to TRUE, will bypass an error check in the indexify function.\n\t    ;\n\t\n\t  xAxis\n\t    .orient('bottom')\n\t    .tickPadding(7)\n\t    ;\n\t  yAxis\n\t    .orient((rightAlignYAxis) ? 'right' : 'left')\n\t    ;\n\t\n\t  //============================================================\n\t  controls.updateState(false);\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t   var dx = d3.scale.linear()\n\t     , index = {i: 0, x: 0}\n\t     ;\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t        x = xAxis.tickFormat()(lines.x()(e.point, e.pointIndex)),\n\t        y = yAxis.tickFormat()(lines.y()(e.point, e.pointIndex)),\n\t        content = tooltip(e.series.key, x, y, e, chart);\n\t\n\t    nv.tooltip.show([left, top], content, null, null, offsetElement);\n\t  };\n\t\n\t  //============================================================\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this).classed('nv-chart-' + id, true),\n\t          that = this;\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t\n\t\n\t      chart.update = function() { container.call(chart) };\n\t      chart.container = this;\n\t\n\t      //set state.disabled\n\t      state.disabled = data.map(function(d) { return !!d.disabled });\n\t\n\t      if (!defaultState) {\n\t        var key;\n\t        defaultState = {};\n\t        for (key in state) {\n\t          if (state[key] instanceof Array)\n\t            defaultState[key] = state[key].slice(0);\n\t          else\n\t            defaultState[key] = state[key];\n\t        }\n\t      }\n\t\n\t      var indexDrag = d3.behavior.drag()\n\t                        .on('dragstart', dragStart)\n\t                        .on('drag', dragMove)\n\t                        .on('dragend', dragEnd);\n\t\n\t\n\t      function dragStart(d,i) {\n\t        d3.select(chart.container)\n\t            .style('cursor', 'ew-resize');\n\t      }\n\t\n\t      function dragMove(d,i) {\n\t        index.x = d3.event.x;\n\t        index.i = Math.round(dx.invert(index.x));\n\t        updateZero();\n\t      }\n\t\n\t      function dragEnd(d,i) {\n\t        d3.select(chart.container)\n\t            .style('cursor', 'auto');\n\t\n\t        // update state and send stateChange with new index\n\t        state.index = index.i;\n\t        dispatch.stateChange(state);\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t      // Display No Data message if there's nothing to show.\n\t\n\t      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', margin.top + availableHeight / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x = lines.xScale();\n\t      y = lines.yScale();\n\t\n\t\n\t      if (!rescaleY) {\n\t        var seriesDomains = data\n\t          .filter(function(series) { return !series.disabled })\n\t          .map(function(series,i) {\n\t            var initialDomain = d3.extent(series.values, lines.y());\n\t\n\t            //account for series being disabled when losing 95% or more\n\t            if (initialDomain[0] < -.95) initialDomain[0] = -.95;\n\t\n\t            return [\n\t              (initialDomain[0] - initialDomain[1]) / (1 + initialDomain[1]),\n\t              (initialDomain[1] - initialDomain[0]) / (1 + initialDomain[0])\n\t            ];\n\t          });\n\t\n\t        var completeDomain = [\n\t          d3.min(seriesDomains, function(d) { return d[0] }),\n\t          d3.max(seriesDomains, function(d) { return d[1] })\n\t        ]\n\t\n\t        lines.yDomain(completeDomain);\n\t      } else {\n\t        lines.yDomain(null);\n\t      }\n\t\n\t\n\t      dx  .domain([0, data[0].values.length - 1]) //Assumes all series have same length\n\t          .range([0, availableWidth])\n\t          .clamp(true);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      var data = indexify(index.i, data);\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t      var interactivePointerEvents = (useInteractiveGuideline) ? \"none\" : \"all\";\n\t      var wrap = container.selectAll('g.nv-wrap.nv-cumulativeLine').data([data]);\n\t      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-cumulativeLine').append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-interactive');\n\t      gEnter.append('g').attr('class', 'nv-x nv-axis').style(\"pointer-events\",\"none\");\n\t      gEnter.append('g').attr('class', 'nv-y nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-background');\n\t      gEnter.append('g').attr('class', 'nv-linesWrap').style(\"pointer-events\",interactivePointerEvents);\n\t      gEnter.append('g').attr('class', 'nv-avgLinesWrap').style(\"pointer-events\",\"none\");\n\t      gEnter.append('g').attr('class', 'nv-legendWrap');\n\t      gEnter.append('g').attr('class', 'nv-controlsWrap');\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Legend\n\t\n\t      if (showLegend) {\n\t        legend.width(availableWidth);\n\t\n\t        g.select('.nv-legendWrap')\n\t            .datum(data)\n\t            .call(legend);\n\t\n\t        if ( margin.top != legend.height()) {\n\t          margin.top = legend.height();\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t        }\n\t\n\t        g.select('.nv-legendWrap')\n\t            .attr('transform', 'translate(0,' + (-margin.top) +')')\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Controls\n\t\n\t      if (showControls) {\n\t        var controlsData = [\n\t          { key: 'Re-scale y-axis', disabled: !rescaleY }\n\t        ];\n\t\n\t        controls\n\t            .width(140)\n\t            .color(['#444', '#444', '#444'])\n\t            .rightAlign(false)\n\t            .margin({top: 5, right: 0, bottom: 5, left: 20})\n\t            ;\n\t\n\t        g.select('.nv-controlsWrap')\n\t            .datum(controlsData)\n\t            .attr('transform', 'translate(0,' + (-margin.top) +')')\n\t            .call(controls);\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      if (rightAlignYAxis) {\n\t          g.select(\".nv-y.nv-axis\")\n\t              .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n\t      }\n\t\n\t      // Show error if series goes below 100%\n\t      var tempDisabled = data.filter(function(d) { return d.tempDisabled });\n\t\n\t      wrap.select('.tempDisabled').remove(); //clean-up and prevent duplicates\n\t      if (tempDisabled.length) {\n\t        wrap.append('text').attr('class', 'tempDisabled')\n\t            .attr('x', availableWidth / 2)\n\t            .attr('y', '-.71em')\n\t            .style('text-anchor', 'end')\n\t            .text(tempDisabled.map(function(d) { return d.key }).join(', ') + ' values cannot be calculated for this time period.');\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t      // Main Chart Component(s)\n\t\n\t      //------------------------------------------------------------\n\t      //Set up interactive layer\n\t      if (useInteractiveGuideline) {\n\t        interactiveLayer\n\t          .width(availableWidth)\n\t          .height(availableHeight)\n\t          .margin({left:margin.left,top:margin.top})\n\t          .svgContainer(container)\n\t          .xScale(x);\n\t        wrap.select(\".nv-interactive\").call(interactiveLayer);\n\t      }\n\t\n\t      gEnter.select('.nv-background')\n\t        .append('rect');\n\t\n\t      g.select('.nv-background rect')\n\t          .attr('width', availableWidth)\n\t          .attr('height', availableHeight);\n\t\n\t      lines\n\t        //.x(function(d) { return d.x })\n\t        .y(function(d) { return d.display.y })\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color(d, i);\n\t        }).filter(function(d,i) { return !data[i].disabled && !data[i].tempDisabled; }));\n\t\n\t\n\t\n\t      var linesWrap = g.select('.nv-linesWrap')\n\t          .datum(data.filter(function(d) { return  !d.disabled && !d.tempDisabled }));\n\t\n\t      //d3.transition(linesWrap).call(lines);\n\t      linesWrap.call(lines);\n\t\n\t      /*Handle average lines [AN-612] ----------------------------*/\n\t\n\t      //Store a series index number in the data array.\n\t      data.forEach(function(d,i) {\n\t            d.seriesIndex = i;\n\t      });\n\t\n\t      var avgLineData = data.filter(function(d) {\n\t          return !d.disabled && !!average(d);\n\t      });\n\t\n\t      var avgLines = g.select(\".nv-avgLinesWrap\").selectAll(\"line\")\n\t              .data(avgLineData, function(d) { return d.key; });\n\t\n\t      var getAvgLineY = function(d) {\n\t          //If average lines go off the svg element, clamp them to the svg bounds.\n\t          var yVal = y(average(d));\n\t          if (yVal < 0) return 0;\n\t          if (yVal > availableHeight) return availableHeight;\n\t          return yVal;\n\t      };\n\t\n\t      avgLines.enter()\n\t              .append('line')\n\t              .style('stroke-width',2)\n\t              .style('stroke-dasharray','10,10')\n\t              .style('stroke',function (d,i) {\n\t                  return lines.color()(d,d.seriesIndex);\n\t              })\n\t              .attr('x1',0)\n\t              .attr('x2',availableWidth)\n\t              .attr('y1', getAvgLineY)\n\t              .attr('y2', getAvgLineY);\n\t\n\t      avgLines\n\t              .style('stroke-opacity',function(d){\n\t                  //If average lines go offscreen, make them transparent\n\t                  var yVal = y(average(d));\n\t                  if (yVal < 0 || yVal > availableHeight) return 0;\n\t                  return 1;\n\t              })\n\t              .attr('x1',0)\n\t              .attr('x2',availableWidth)\n\t              .attr('y1', getAvgLineY)\n\t              .attr('y2', getAvgLineY);\n\t\n\t      avgLines.exit().remove();\n\t\n\t      //Create index line -----------------------------------------\n\t\n\t      var indexLine = linesWrap.selectAll('.nv-indexLine')\n\t          .data([index]);\n\t      indexLine.enter().append('rect').attr('class', 'nv-indexLine')\n\t          .attr('width', 3)\n\t          .attr('x', -2)\n\t          .attr('fill', 'red')\n\t          .attr('fill-opacity', .5)\n\t          .style(\"pointer-events\",\"all\")\n\t          .call(indexDrag)\n\t\n\t      indexLine\n\t          .attr('transform', function(d) { return 'translate(' + dx(d.i) + ',0)' })\n\t          .attr('height', availableHeight)\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Axes\n\t\n\t      if (showXAxis) {\n\t        xAxis\n\t          .scale(x)\n\t          //Suggest how many ticks based on the chart width and D3 should listen (70 is the optimal number for MM/DD/YY dates)\n\t          .ticks( Math.min(data[0].values.length,availableWidth/70) )\n\t          .tickSize(-availableHeight, 0);\n\t\n\t        g.select('.nv-x.nv-axis')\n\t            .attr('transform', 'translate(0,' + y.range()[0] + ')');\n\t        d3.transition(g.select('.nv-x.nv-axis'))\n\t            .call(xAxis);\n\t      }\n\t\n\t\n\t      if (showYAxis) {\n\t        yAxis\n\t          .scale(y)\n\t          .ticks( availableHeight / 36 )\n\t          .tickSize( -availableWidth, 0);\n\t\n\t        d3.transition(g.select('.nv-y.nv-axis'))\n\t            .call(yAxis);\n\t      }\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t\n\t      function updateZero() {\n\t        indexLine\n\t          .data([index]);\n\t\n\t        //When dragging the index line, turn off line transitions.\n\t        // Then turn them back on when done dragging.\n\t        var oldDuration = chart.transitionDuration();\n\t        chart.transitionDuration(0);\n\t        chart.update();\n\t        chart.transitionDuration(oldDuration);\n\t      }\n\t\n\t      g.select('.nv-background rect')\n\t          .on('click', function() {\n\t            index.x = d3.mouse(this)[0];\n\t            index.i = Math.round(dx.invert(index.x));\n\t\n\t            // update state and send stateChange with new index\n\t            state.index = index.i;\n\t            dispatch.stateChange(state);\n\t\n\t            updateZero();\n\t          });\n\t\n\t      lines.dispatch.on('elementClick', function(e) {\n\t        index.i = e.pointIndex;\n\t        index.x = dx(index.i);\n\t\n\t        // update state and send stateChange with new index\n\t        state.index = index.i;\n\t        dispatch.stateChange(state);\n\t\n\t        updateZero();\n\t      });\n\t\n\t      controls.dispatch.on('legendClick', function(d,i) {\n\t        d.disabled = !d.disabled;\n\t        rescaleY = !d.disabled;\n\t\n\t        state.rescaleY = rescaleY;\n\t        dispatch.stateChange(state);\n\t        chart.update();\n\t      });\n\t\n\t\n\t      legend.dispatch.on('stateChange', function(newState) {\n\t        state.disabled = newState.disabled;\n\t        dispatch.stateChange(state);\n\t        chart.update();\n\t      });\n\t\n\t      interactiveLayer.dispatch.on('elementMousemove', function(e) {\n\t          lines.clearHighlights();\n\t          var singlePoint, pointIndex, pointXLocation, allData = [];\n\t\n\t\n\t          data\n\t          .filter(function(series, i) {\n\t            series.seriesIndex = i;\n\t            return !series.disabled;\n\t          })\n\t          .forEach(function(series,i) {\n\t              pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n\t              lines.highlightPoint(i, pointIndex, true);\n\t              var point = series.values[pointIndex];\n\t              if (typeof point === 'undefined') return;\n\t              if (typeof singlePoint === 'undefined') singlePoint = point;\n\t              if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n\t              allData.push({\n\t                  key: series.key,\n\t                  value: chart.y()(point, pointIndex),\n\t                  color: color(series,series.seriesIndex)\n\t              });\n\t          });\n\t\n\t          //Highlight the tooltip entry based on which point the mouse is closest to.\n\t          if (allData.length > 2) {\n\t            var yValue = chart.yScale().invert(e.mouseY);\n\t            var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);\n\t            var threshold = 0.03 * domainExtent;\n\t            var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value}),yValue,threshold);\n\t            if (indexToHighlight !== null)\n\t              allData[indexToHighlight].highlight = true;\n\t          }\n\t\n\t          var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex), pointIndex);\n\t          interactiveLayer.tooltip\n\t                  .position({left: pointXLocation + margin.left, top: e.mouseY + margin.top})\n\t                  .chartContainer(that.parentNode)\n\t                  .enabled(tooltips)\n\t                  .valueFormatter(function(d,i) {\n\t                     return yAxis.tickFormat()(d);\n\t                  })\n\t                  .data(\n\t                      {\n\t                        value: xValue,\n\t                        series: allData\n\t                      }\n\t                  )();\n\t\n\t          interactiveLayer.renderGuideLine(pointXLocation);\n\t\n\t      });\n\t\n\t      interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n\t          dispatch.tooltipHide();\n\t          lines.clearHighlights();\n\t      });\n\t\n\t      dispatch.on('tooltipShow', function(e) {\n\t        if (tooltips) showTooltip(e, that.parentNode);\n\t      });\n\t\n\t\n\t      // Update chart from a state object passed to event handler\n\t      dispatch.on('changeState', function(e) {\n\t\n\t        if (typeof e.disabled !== 'undefined') {\n\t          data.forEach(function(series,i) {\n\t            series.disabled = e.disabled[i];\n\t          });\n\t\n\t          state.disabled = e.disabled;\n\t        }\n\t\n\t\n\t        if (typeof e.index !== 'undefined') {\n\t          index.i = e.index;\n\t          index.x = dx(index.i);\n\t\n\t          state.index = e.index;\n\t\n\t          indexLine\n\t            .data([index]);\n\t        }\n\t\n\t\n\t        if (typeof e.rescaleY !== 'undefined') {\n\t          rescaleY = e.rescaleY;\n\t        }\n\t\n\t        chart.update();\n\t      });\n\t\n\t      //============================================================\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  lines.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  lines.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.dispatch = dispatch;\n\t  chart.lines = lines;\n\t  chart.legend = legend;\n\t  chart.xAxis = xAxis;\n\t  chart.yAxis = yAxis;\n\t  chart.interactiveLayer = interactiveLayer;\n\t\n\t  d3.rebind(chart, lines, 'defined', 'isArea', 'x', 'y', 'xScale','yScale', 'size', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi','useVoronoi',  'id');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    legend.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.rescaleY = function(_) {\n\t    if (!arguments.length) return rescaleY;\n\t    rescaleY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showControls = function(_) {\n\t    if (!arguments.length) return showControls;\n\t    showControls = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.useInteractiveGuideline = function(_) {\n\t    if(!arguments.length) return useInteractiveGuideline;\n\t    useInteractiveGuideline = _;\n\t    if (_ === true) {\n\t       chart.interactive(false);\n\t       chart.useVoronoi(false);\n\t    }\n\t    return chart;\n\t  };\n\t\n\t  chart.showLegend = function(_) {\n\t    if (!arguments.length) return showLegend;\n\t    showLegend = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showXAxis = function(_) {\n\t    if (!arguments.length) return showXAxis;\n\t    showXAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showYAxis = function(_) {\n\t    if (!arguments.length) return showYAxis;\n\t    showYAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.rightAlignYAxis = function(_) {\n\t    if(!arguments.length) return rightAlignYAxis;\n\t    rightAlignYAxis = _;\n\t    yAxis.orient( (_) ? 'right' : 'left');\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.state = function(_) {\n\t    if (!arguments.length) return state;\n\t    state = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.defaultState = function(_) {\n\t    if (!arguments.length) return defaultState;\n\t    defaultState = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.average = function(_) {\n\t     if(!arguments.length) return average;\n\t     average = _;\n\t     return chart;\n\t  };\n\t\n\t  chart.transitionDuration = function(_) {\n\t    if (!arguments.length) return transitionDuration;\n\t    transitionDuration = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.noErrorCheck = function(_) {\n\t    if (!arguments.length) return noErrorCheck;\n\t    noErrorCheck = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Functions\n\t  //------------------------------------------------------------\n\t\n\t  /* Normalize the data according to an index point. */\n\t  function indexify(idx, data) {\n\t    return data.map(function(line, i) {\n\t      if (!line.values) {\n\t         return line;\n\t      }\n\t      var indexValue = line.values[idx];\n\t      if (indexValue == null) {\n\t        return line;\n\t      }\n\t      var v = lines.y()(indexValue, idx);\n\t\n\t      //TODO: implement check below, and disable series if series loses 100% or more cause divide by 0 issue\n\t      if (v < -.95 && !noErrorCheck) {\n\t        //if a series loses more than 100%, calculations fail.. anything close can cause major distortion (but is mathematically correct till it hits 100)\n\t\n\t        line.tempDisabled = true;\n\t        return line;\n\t      }\n\t\n\t      line.tempDisabled = false;\n\t\n\t      line.values = line.values.map(function(point, pointIndex) {\n\t        point.display = {'y': (lines.y()(point, pointIndex) - v) / (1 + v) };\n\t        return point;\n\t      })\n\t\n\t      return line;\n\t    })\n\t  }\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t//TODO: consider deprecating by adding necessary features to multiBar model\n\tnv.models.discreteBar = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t    , width = 960\n\t    , height = 500\n\t    , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n\t    , x = d3.scale.ordinal()\n\t    , y = d3.scale.linear()\n\t    , getX = function(d) { return d.x }\n\t    , getY = function(d) { return d.y }\n\t    , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n\t    , color = nv.utils.defaultColor()\n\t    , showValues = false\n\t    , valueFormat = d3.format(',.2f')\n\t    , xDomain\n\t    , yDomain\n\t    , xRange\n\t    , yRange\n\t    , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout')\n\t    , rectClass = 'discreteBar'\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var x0, y0;\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var availableWidth = width - margin.left - margin.right,\n\t          availableHeight = height - margin.top - margin.bottom,\n\t          container = d3.select(this);\n\t\n\t\n\t      //add series index to each data point for reference\n\t      data.forEach(function(series, i) {\n\t        series.values.forEach(function(point) {\n\t          point.series = i;\n\t        });\n\t      });\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      // remap and flatten the data for use in calculating the scales' domains\n\t      var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n\t            data.map(function(d) {\n\t              return d.values.map(function(d,i) {\n\t                return { x: getX(d,i), y: getY(d,i), y0: d.y0 }\n\t              })\n\t            });\n\t\n\t      x   .domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n\t          .rangeBands(xRange || [0, availableWidth], .1);\n\t\n\t      y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return d.y }).concat(forceY)));\n\t\n\t\n\t      // If showValues, pad the Y axis range to account for label height\n\t      if (showValues) y.range(yRange || [availableHeight - (y.domain()[0] < 0 ? 12 : 0), y.domain()[1] > 0 ? 12 : 0]);\n\t      else y.range(yRange || [availableHeight, 0]);\n\t\n\t      //store old scales if they exist\n\t      x0 = x0 || x;\n\t      y0 = y0 || y.copy().range([y(0),y(0)]);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-discretebar').data([data]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discretebar');\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-groups');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t\n\t      //TODO: by definition, the discrete bar should not have multiple groups, will modify/remove later\n\t      var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n\t          .data(function(d) { return d }, function(d) { return d.key });\n\t      groups.enter().append('g')\n\t          .style('stroke-opacity', 1e-6)\n\t          .style('fill-opacity', 1e-6);\n\t      groups.exit()\n\t          \n\t          .style('stroke-opacity', 1e-6)\n\t          .style('fill-opacity', 1e-6)\n\t          .remove();\n\t      groups\n\t          .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n\t          .classed('hover', function(d) { return d.hover });\n\t      groups\n\t          \n\t          .style('stroke-opacity', 1)\n\t          .style('fill-opacity', .75);\n\t\n\t\n\t      var bars = groups.selectAll('g.nv-bar')\n\t          .data(function(d) { return d.values });\n\t\n\t      bars.exit().remove();\n\t\n\t\n\t      var barsEnter = bars.enter().append('g')\n\t          .attr('transform', function(d,i,j) {\n\t              return 'translate(' + (x(getX(d,i)) + x.rangeBand() * .05 ) + ', ' + y(0) + ')'\n\t          })\n\t          .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n\t            d3.select(this).classed('hover', true);\n\t            dispatch.elementMouseover({\n\t              value: getY(d,i),\n\t              point: d,\n\t              series: data[d.series],\n\t              pos: [x(getX(d,i)) + (x.rangeBand() * (d.series + .5) / data.length), y(getY(d,i))],  // TODO: Figure out why the value appears to be shifted\n\t              pointIndex: i,\n\t              seriesIndex: d.series,\n\t              e: d3.event\n\t            });\n\t          })\n\t          .on('mouseout', function(d,i) {\n\t            d3.select(this).classed('hover', false);\n\t            dispatch.elementMouseout({\n\t              value: getY(d,i),\n\t              point: d,\n\t              series: data[d.series],\n\t              pointIndex: i,\n\t              seriesIndex: d.series,\n\t              e: d3.event\n\t            });\n\t          })\n\t          .on('click', function(d,i) {\n\t            dispatch.elementClick({\n\t              value: getY(d,i),\n\t              point: d,\n\t              series: data[d.series],\n\t              pos: [x(getX(d,i)) + (x.rangeBand() * (d.series + .5) / data.length), y(getY(d,i))],  // TODO: Figure out why the value appears to be shifted\n\t              pointIndex: i,\n\t              seriesIndex: d.series,\n\t              e: d3.event\n\t            });\n\t            d3.event.stopPropagation();\n\t          })\n\t          .on('dblclick', function(d,i) {\n\t            dispatch.elementDblClick({\n\t              value: getY(d,i),\n\t              point: d,\n\t              series: data[d.series],\n\t              pos: [x(getX(d,i)) + (x.rangeBand() * (d.series + .5) / data.length), y(getY(d,i))],  // TODO: Figure out why the value appears to be shifted\n\t              pointIndex: i,\n\t              seriesIndex: d.series,\n\t              e: d3.event\n\t            });\n\t            d3.event.stopPropagation();\n\t          });\n\t\n\t      barsEnter.append('rect')\n\t          .attr('height', 0)\n\t          .attr('width', x.rangeBand() * .9 / data.length )\n\t\n\t      if (showValues) {\n\t        barsEnter.append('text')\n\t          .attr('text-anchor', 'middle')\n\t          ;\n\t\n\t        bars.select('text')\n\t          .text(function(d,i) { return valueFormat(getY(d,i)) })\n\t          \n\t          .attr('x', x.rangeBand() * .9 / 2)\n\t          .attr('y', function(d,i) { return getY(d,i) < 0 ? y(getY(d,i)) - y(0) + 12 : -4 })\n\t\n\t          ;\n\t      } else {\n\t        bars.selectAll('text').remove();\n\t      }\n\t\n\t      bars\n\t          .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive' })\n\t          .style('fill', function(d,i) { return d.color || color(d,i) })\n\t          .style('stroke', function(d,i) { return d.color || color(d,i) })\n\t        .select('rect')\n\t          .attr('class', rectClass)\n\t          \n\t          .attr('width', x.rangeBand() * .9 / data.length);\n\t      bars\n\t          .attr('transform', function(d,i) {\n\t            var left = x(getX(d,i)) + x.rangeBand() * .05,\n\t                top = getY(d,i) < 0 ?\n\t                        y(0) :\n\t                        y(0) - y(getY(d,i)) < 1 ?\n\t                          y(0) - 1 : //make 1 px positive bars show up above y=0\n\t                          y(getY(d,i));\n\t\n\t              return 'translate(' + left + ', ' + top + ')'\n\t          })\n\t        .select('rect')\n\t          .attr('height', function(d,i) {\n\t            return  Math.max(Math.abs(y(getY(d,i)) - y((yDomain && yDomain[0]) || 0)) || 1)\n\t          });\n\t\n\t\n\t      //store old scales for use in transitions on update\n\t      x0 = x.copy();\n\t      y0 = y.copy();\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  chart.dispatch = dispatch;\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.x = function(_) {\n\t    if (!arguments.length) return getX;\n\t    getX = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.y = function(_) {\n\t    if (!arguments.length) return getY;\n\t    getY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xScale = function(_) {\n\t    if (!arguments.length) return x;\n\t    x = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yScale = function(_) {\n\t    if (!arguments.length) return y;\n\t    y = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xDomain = function(_) {\n\t    if (!arguments.length) return xDomain;\n\t    xDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yDomain = function(_) {\n\t    if (!arguments.length) return yDomain;\n\t    yDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xRange = function(_) {\n\t    if (!arguments.length) return xRange;\n\t    xRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yRange = function(_) {\n\t    if (!arguments.length) return yRange;\n\t    yRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.forceY = function(_) {\n\t    if (!arguments.length) return forceY;\n\t    forceY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.id = function(_) {\n\t    if (!arguments.length) return id;\n\t    id = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showValues = function(_) {\n\t    if (!arguments.length) return showValues;\n\t    showValues = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.valueFormat= function(_) {\n\t    if (!arguments.length) return valueFormat;\n\t    valueFormat = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.rectClass= function(_) {\n\t    if (!arguments.length) return rectClass;\n\t    rectClass = _;\n\t    return chart;\n\t  };\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.discreteBarChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var discretebar = nv.models.discreteBar()\n\t    , xAxis = nv.models.axis()\n\t    , yAxis = nv.models.axis()\n\t    ;\n\t\n\t  var margin = {top: 15, right: 10, bottom: 50, left: 60}\n\t    , width = null\n\t    , height = null\n\t    , color = nv.utils.getColor()\n\t    , showXAxis = true\n\t    , showYAxis = true\n\t    , rightAlignYAxis = false\n\t    , staggerLabels = false\n\t    , tooltips = true\n\t    , tooltip = function(key, x, y, e, graph) {\n\t        return '<h3>' + x + '</h3>' +\n\t               '<p>' +  y + '</p>'\n\t      }\n\t    , x\n\t    , y\n\t    , noData = \"No Data Available.\"\n\t    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'beforeUpdate')\n\t    , transitionDuration = 0\n\t    ;\n\t\n\t  xAxis\n\t    .orient('bottom')\n\t    .highlightZero(false)\n\t    .showMaxMin(false)\n\t    .tickFormat(function(d) { return d })\n\t    ;\n\t  yAxis\n\t    .orient((rightAlignYAxis) ? 'right' : 'left')\n\t    .tickFormat(d3.format(',.1f'))\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t        x = xAxis.tickFormat()(discretebar.x()(e.point, e.pointIndex)),\n\t        y = yAxis.tickFormat()(discretebar.y()(e.point, e.pointIndex)),\n\t        content = tooltip(e.series.key, x, y, e, chart);\n\t\n\t    nv.tooltip.show([left, top], content, e.value < 0 ? 'n' : 's', null, offsetElement);\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this),\n\t          that = this;\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t\n\t\n\t      chart.update = function() { \n\t        dispatch.beforeUpdate(); \n\t        container.call(chart); \n\t      };\n\t      chart.container = this;\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Display No Data message if there's nothing to show.\n\t\n\t      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', margin.top + availableHeight / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x = discretebar.xScale();\n\t      y = discretebar.yScale().clamp(true);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-discreteBarWithAxes').data([data]);\n\t      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discreteBarWithAxes').append('g');\n\t      var defsEnter = gEnter.append('defs');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-x nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-y nv-axis')\n\t            .append('g').attr('class', 'nv-zeroLine')\n\t            .append('line');\n\t        \n\t      gEnter.append('g').attr('class', 'nv-barsWrap');\n\t\n\t      g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      if (rightAlignYAxis) {\n\t          g.select(\".nv-y.nv-axis\")\n\t              .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Main Chart Component(s)\n\t\n\t      discretebar\n\t        .width(availableWidth)\n\t        .height(availableHeight);\n\t\n\t\n\t      var barsWrap = g.select('.nv-barsWrap')\n\t          .datum(data.filter(function(d) { return !d.disabled }))\n\t\n\t      barsWrap.call(discretebar);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t\n\t      defsEnter.append('clipPath')\n\t          .attr('id', 'nv-x-label-clip-' + discretebar.id())\n\t        .append('rect');\n\t\n\t      g.select('#nv-x-label-clip-' + discretebar.id() + ' rect')\n\t          .attr('width', x.rangeBand() * (staggerLabels ? 2 : 1))\n\t          .attr('height', 16)\n\t          .attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2 ));\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Axes\n\t\n\t      if (showXAxis) {\n\t          xAxis\n\t            .scale(x)\n\t            .ticks( availableWidth / 100 )\n\t            .tickSize(-availableHeight, 0);\n\t\n\t          g.select('.nv-x.nv-axis')\n\t              .attr('transform', 'translate(0,' + (y.range()[0] + ((discretebar.showValues() && y.domain()[0] < 0) ? 16 : 0)) + ')');\n\t          //d3.transition(g.select('.nv-x.nv-axis'))\n\t          g.select('.nv-x.nv-axis')\n\t              .call(xAxis);\n\t\n\t\n\t          var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n\t\n\t          if (staggerLabels) {\n\t            xTicks\n\t                .selectAll('text')\n\t                .attr('transform', function(d,i,j) { return 'translate(0,' + (j % 2 == 0 ? '5' : '17') + ')' })\n\t          }\n\t      }\n\t\n\t      if (showYAxis) {\n\t          yAxis\n\t            .scale(y)\n\t            .ticks( availableHeight / 36 )\n\t            .tickSize( -availableWidth, 0);\n\t\n\t          g.select('.nv-y.nv-axis')\n\t              .call(yAxis);\n\t      }\n\t\n\t      // Zero line\n\t      g.select(\".nv-zeroLine line\")\n\t        .attr(\"x1\",0)\n\t        .attr(\"x2\",availableWidth)\n\t        .attr(\"y1\", y(0))\n\t        .attr(\"y2\", y(0))\n\t        ;\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t      dispatch.on('tooltipShow', function(e) {\n\t        if (tooltips) showTooltip(e, that.parentNode);\n\t      });\n\t\n\t      //============================================================\n\t\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  discretebar.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  discretebar.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.dispatch = dispatch;\n\t  chart.discretebar = discretebar;\n\t  chart.xAxis = xAxis;\n\t  chart.yAxis = yAxis;\n\t\n\t  d3.rebind(chart, discretebar, 'x', 'y', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'id', 'showValues', 'valueFormat');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    discretebar.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.showXAxis = function(_) {\n\t    if (!arguments.length) return showXAxis;\n\t    showXAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showYAxis = function(_) {\n\t    if (!arguments.length) return showYAxis;\n\t    showYAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.rightAlignYAxis = function(_) {\n\t    if(!arguments.length) return rightAlignYAxis;\n\t    rightAlignYAxis = _;\n\t    yAxis.orient( (_) ? 'right' : 'left');\n\t    return chart;\n\t  };\n\t\n\t  chart.staggerLabels = function(_) {\n\t    if (!arguments.length) return staggerLabels;\n\t    staggerLabels = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.transitionDuration = function(_) {\n\t    if (!arguments.length) return transitionDuration;\n\t    transitionDuration = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.distribution = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t    , width = 400 //technically width or height depending on x or y....\n\t    , size = 8\n\t    , axis = 'x' // 'x' or 'y'... horizontal or vertical\n\t    , getData = function(d) { return d[axis] }  // defaults d.x or d.y\n\t    , color = nv.utils.defaultColor()\n\t    , scale = d3.scale.linear()\n\t    , domain\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var scale0;\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var availableLength = width - (axis === 'x' ? margin.left + margin.right : margin.top + margin.bottom),\n\t          naxis = axis == 'x' ? 'y' : 'x',\n\t          container = d3.select(this);\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      scale0 = scale0 || scale;\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-distribution').data([data]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-distribution');\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      var distWrap = g.selectAll('g.nv-dist')\n\t          .data(function(d) { return d }, function(d) { return d.key });\n\t\n\t      distWrap.enter().append('g');\n\t      distWrap\n\t          .attr('class', function(d,i) { return 'nv-dist nv-series-' + i })\n\t          .style('stroke', function(d,i) { return color(d, i) });\n\t\n\t      var dist = distWrap.selectAll('line.nv-dist' + axis)\n\t          .data(function(d) { return d.values })\n\t      dist.enter().append('line')\n\t          .attr(axis + '1', function(d,i) { return scale0(getData(d,i)) })\n\t          .attr(axis + '2', function(d,i) { return scale0(getData(d,i)) })\n\t      distWrap.exit().selectAll('line.nv-dist' + axis)\n\t          \n\t          .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })\n\t          .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })\n\t          .style('stroke-opacity', 0)\n\t          .remove();\n\t      dist\n\t          .attr('class', function(d,i) { return 'nv-dist' + axis + ' nv-dist' + axis + '-' + i })\n\t          .attr(naxis + '1', 0)\n\t          .attr(naxis + '2', size);\n\t      dist\n\t          \n\t          .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })\n\t          .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })\n\t\n\t\n\t      scale0 = scale.copy();\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.axis = function(_) {\n\t    if (!arguments.length) return axis;\n\t    axis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.size = function(_) {\n\t    if (!arguments.length) return size;\n\t    size = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.getData = function(_) {\n\t    if (!arguments.length) return getData;\n\t    getData = d3.functor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.scale = function(_) {\n\t    if (!arguments.length) return scale;\n\t    scale = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    return chart;\n\t  };\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.historicalBarChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var bars = nv.models.historicalBar()\n\t    , xAxis = nv.models.axis()\n\t    , yAxis = nv.models.axis()\n\t    , legend = nv.models.legend()\n\t    ;\n\t\n\t\n\t  var margin = {top: 30, right: 90, bottom: 50, left: 90}\n\t    , color = nv.utils.defaultColor()\n\t    , width = null\n\t    , height = null\n\t    , showLegend = false\n\t    , showXAxis = true\n\t    , showYAxis = true\n\t    , rightAlignYAxis = false\n\t    , tooltips = true\n\t    , tooltip = function(key, x, y, e, graph) {\n\t        return '<h3>' + key + '</h3>' +\n\t               '<p>' +  y + ' at ' + x + '</p>'\n\t      }\n\t    , x\n\t    , y\n\t    , state = {}\n\t    , defaultState = null\n\t    , noData = 'No Data Available.'\n\t    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n\t    , transitionDuration = 0\n\t    ;\n\t\n\t  xAxis\n\t    .orient('bottom')\n\t    .tickPadding(7)\n\t    ;\n\t  yAxis\n\t    .orient( (rightAlignYAxis) ? 'right' : 'left')\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t\n\t    // New addition to calculate position if SVG is scaled with viewBox, may move TODO: consider implementing everywhere else\n\t    if (offsetElement) {\n\t      var svg = d3.select(offsetElement).select('svg');\n\t      var viewBox = (svg.node()) ? svg.attr('viewBox') : null;\n\t      if (viewBox) {\n\t        viewBox = viewBox.split(' ');\n\t        var ratio = parseInt(svg.style('width')) / viewBox[2];\n\t        e.pos[0] = e.pos[0] * ratio;\n\t        e.pos[1] = e.pos[1] * ratio;\n\t      }\n\t    }\n\t\n\t    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t        x = xAxis.tickFormat()(bars.x()(e.point, e.pointIndex)),\n\t        y = yAxis.tickFormat()(bars.y()(e.point, e.pointIndex)),\n\t        content = tooltip(e.series.key, x, y, e, chart);\n\t\n\t    nv.tooltip.show([left, top], content, null, null, offsetElement);\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this),\n\t          that = this;\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t\n\t\n\t      chart.update = function() { container.call(chart) };\n\t      chart.container = this;\n\t\n\t      //set state.disabled\n\t      state.disabled = data.map(function(d) { return !!d.disabled });\n\t\n\t      if (!defaultState) {\n\t        var key;\n\t        defaultState = {};\n\t        for (key in state) {\n\t          if (state[key] instanceof Array)\n\t            defaultState[key] = state[key].slice(0);\n\t          else\n\t            defaultState[key] = state[key];\n\t        }\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t      // Display noData message if there's nothing to show.\n\t\n\t      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', margin.top + availableHeight / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x = bars.xScale();\n\t      y = bars.yScale();\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-historicalBarChart').data([data]);\n\t      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBarChart').append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-x nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-y nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-barsWrap');\n\t      gEnter.append('g').attr('class', 'nv-legendWrap');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Legend\n\t\n\t      if (showLegend) {\n\t        legend.width(availableWidth);\n\t\n\t        g.select('.nv-legendWrap')\n\t            .datum(data)\n\t            .call(legend);\n\t\n\t        if ( margin.top != legend.height()) {\n\t          margin.top = legend.height();\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t        }\n\t\n\t        wrap.select('.nv-legendWrap')\n\t            .attr('transform', 'translate(0,' + (-margin.top) +')')\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      if (rightAlignYAxis) {\n\t        g.select(\".nv-y.nv-axis\")\n\t            .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n\t      }\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Main Chart Component(s)\n\t\n\t      bars\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color(d, i);\n\t        }).filter(function(d,i) { return !data[i].disabled }));\n\t\n\t\n\t      var barsWrap = g.select('.nv-barsWrap')\n\t          .datum(data.filter(function(d) { return !d.disabled }))\n\t\n\t      barsWrap.call(bars);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Axes\n\t\n\t      if (showXAxis) {\n\t        xAxis\n\t          .scale(x)\n\t          .tickSize(-availableHeight, 0);\n\t\n\t        g.select('.nv-x.nv-axis')\n\t            .attr('transform', 'translate(0,' + y.range()[0] + ')');\n\t        g.select('.nv-x.nv-axis')\n\t            \n\t            .call(xAxis);\n\t      }\n\t\n\t      if (showYAxis) {\n\t        yAxis\n\t          .scale(y)\n\t          .ticks( availableHeight / 36 )\n\t          .tickSize( -availableWidth, 0);\n\t\n\t        g.select('.nv-y.nv-axis')\n\t          \n\t            .call(yAxis);\n\t      }\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t      legend.dispatch.on('legendClick', function(d,i) {\n\t        d.disabled = !d.disabled;\n\t\n\t        if (!data.filter(function(d) { return !d.disabled }).length) {\n\t          data.map(function(d) {\n\t            d.disabled = false;\n\t            wrap.selectAll('.nv-series').classed('disabled', false);\n\t            return d;\n\t          });\n\t        }\n\t\n\t        state.disabled = data.map(function(d) { return !!d.disabled });\n\t        dispatch.stateChange(state);\n\t\n\t        selection.call(chart);\n\t      });\n\t\n\t      legend.dispatch.on('legendDblclick', function(d) {\n\t          //Double clicking should always enable current series, and disabled all others.\n\t          data.forEach(function(d) {\n\t             d.disabled = true;\n\t          });\n\t          d.disabled = false;\n\t\n\t          state.disabled = data.map(function(d) { return !!d.disabled });\n\t          dispatch.stateChange(state);\n\t          chart.update();\n\t      });\n\t\n\t      dispatch.on('tooltipShow', function(e) {\n\t        if (tooltips) showTooltip(e, that.parentNode);\n\t      });\n\t\n\t\n\t      dispatch.on('changeState', function(e) {\n\t\n\t        if (typeof e.disabled !== 'undefined') {\n\t          data.forEach(function(series,i) {\n\t            series.disabled = e.disabled[i];\n\t          });\n\t\n\t          state.disabled = e.disabled;\n\t        }\n\t\n\t        chart.update();\n\t      });\n\t\n\t      //============================================================\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  bars.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  bars.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.dispatch = dispatch;\n\t  chart.bars = bars;\n\t  chart.legend = legend;\n\t  chart.xAxis = xAxis;\n\t  chart.yAxis = yAxis;\n\t\n\t  d3.rebind(chart, bars, 'defined', 'isArea', 'x', 'y', 'size', 'xScale', 'yScale',\n\t    'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi', 'id', 'interpolate','highlightPoint','clearHighlights', 'interactive');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    legend.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.showLegend = function(_) {\n\t    if (!arguments.length) return showLegend;\n\t    showLegend = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showXAxis = function(_) {\n\t    if (!arguments.length) return showXAxis;\n\t    showXAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showYAxis = function(_) {\n\t    if (!arguments.length) return showYAxis;\n\t    showYAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.rightAlignYAxis = function(_) {\n\t    if(!arguments.length) return rightAlignYAxis;\n\t    rightAlignYAxis = _;\n\t    yAxis.orient( (_) ? 'right' : 'left');\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.state = function(_) {\n\t    if (!arguments.length) return state;\n\t    state = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.defaultState = function(_) {\n\t    if (!arguments.length) return defaultState;\n\t    defaultState = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.transitionDuration = function(_) {\n\t    if (!arguments.length) return transitionDuration;\n\t    transitionDuration = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\tnv.models.indentedTree = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var margin = {top: 0, right: 0, bottom: 0, left: 0} //TODO: implement, maybe as margin on the containing div\n\t    , width = 960\n\t    , height = 500\n\t    , color = nv.utils.defaultColor()\n\t    , id = Math.floor(Math.random() * 10000)\n\t    , header = true\n\t    , filterZero = false\n\t    , noData = \"No Data Available.\"\n\t    , childIndent = 20\n\t    , columns = [{key:'key', label: 'Name', type:'text'}] //TODO: consider functions like chart.addColumn, chart.removeColumn, instead of a block like this\n\t    , tableClass = null\n\t    , iconOpen = 'images/grey-plus.png' //TODO: consider removing this and replacing with a '+' or '-' unless user defines images\n\t    , iconClose = 'images/grey-minus.png'\n\t    , dispatch = d3.dispatch('elementClick', 'elementDblclick', 'elementMouseover', 'elementMouseout')\n\t    , getUrl = function(d) { return d.url }\n\t    ;\n\t\n\t  //============================================================\n\t\n\t  var idx = 0;\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var depth = 1,\n\t          container = d3.select(this);\n\t\n\t      var tree = d3.layout.tree()\n\t          .children(function(d) { return d.values })\n\t          .size([height, childIndent]); //Not sure if this is needed now that the result is HTML\n\t\n\t      chart.update = function() { container.call(chart) };\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Display No Data message if there's nothing to show.\n\t      if (!data[0]) data[0] = {key: noData};\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      var nodes = tree.nodes(data[0]);\n\t\n\t      // nodes.map(function(d) {\n\t      //   d.id = i++;\n\t      // })\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = d3.select(this).selectAll('div').data([[nodes]]);\n\t      var wrapEnter = wrap.enter().append('div').attr('class', 'nvd3 nv-wrap nv-indentedtree');\n\t      var tableEnter = wrapEnter.append('table');\n\t      var table = wrap.select('table').attr('width', '100%').attr('class', tableClass);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      if (header) {\n\t        var thead = tableEnter.append('thead');\n\t\n\t        var theadRow1 = thead.append('tr');\n\t\n\t        columns.forEach(function(column) {\n\t          theadRow1\n\t            .append('th')\n\t              .attr('width', column.width ? column.width : '10%')\n\t              .style('text-align', column.type == 'numeric' ? 'right' : 'left')\n\t            .append('span')\n\t              .text(column.label);\n\t        });\n\t      }\n\t\n\t\n\t      var tbody = table.selectAll('tbody')\n\t                    .data(function(d) { return d });\n\t      tbody.enter().append('tbody');\n\t\n\t\n\t\n\t      //compute max generations\n\t      depth = d3.max(nodes, function(node) { return node.depth });\n\t      tree.size([height, depth * childIndent]); //TODO: see if this is necessary at all\n\t\n\t\n\t      // Update the nodes…\n\t      var node = tbody.selectAll('tr')\n\t          // .data(function(d) { return d; }, function(d) { return d.id || (d.id == ++i)});\n\t          .data(function(d) { return d.filter(function(d) { return (filterZero && !d.children) ? filterZero(d) :  true; } )}, function(d,i) { return d.id || (d.id || ++idx)});\n\t          //.style('display', 'table-row'); //TODO: see if this does anything\n\t\n\t      node.exit().remove();\n\t\n\t      node.select('img.nv-treeicon')\n\t          .attr('src', icon)\n\t          .classed('folded', folded);\n\t\n\t      var nodeEnter = node.enter().append('tr');\n\t\n\t\n\t      columns.forEach(function(column, index) {\n\t\n\t        var nodeName = nodeEnter.append('td')\n\t            .style('padding-left', function(d) { return (index ? 0 : d.depth * childIndent + 12 + (icon(d) ? 0 : 16)) + 'px' }, 'important') //TODO: check why I did the ternary here\n\t            .style('text-align', column.type == 'numeric' ? 'right' : 'left');\n\t\n\t\n\t        if (index == 0) {\n\t          nodeName.append('img')\n\t              .classed('nv-treeicon', true)\n\t              .classed('nv-folded', folded)\n\t              .attr('src', icon)\n\t              .style('width', '14px')\n\t              .style('height', '14px')\n\t              .style('padding', '0 1px')\n\t              .style('display', function(d) { return icon(d) ? 'inline-block' : 'none'; })\n\t              .on('click', click);\n\t        }\n\t\n\t\n\t        nodeName.each(function(d) {\n\t          if (!index && getUrl(d))\n\t            d3.select(this)\n\t              .append('a')\n\t              .attr('href',getUrl)\n\t              .attr('class', d3.functor(column.classes))\n\t              .append('span')\n\t          else\n\t            d3.select(this)\n\t              .append('span')\n\t\n\t            d3.select(this).select('span')\n\t              .attr('class', d3.functor(column.classes) )\n\t              .text(function(d) { return column.format ? (d[column.key] ? column.format(d[column.key]) : '-') :  (d[column.key] || '-'); });\n\t          });\n\t\n\t        if  (column.showCount) {\n\t          nodeName.append('span')\n\t              .attr('class', 'nv-childrenCount');\n\t\n\t          node.selectAll('span.nv-childrenCount').text(function(d) {\n\t                return ((d.values && d.values.length) || (d._values && d._values.length)) ?                                   //If this is a parent\n\t                    '(' + ((d.values && (d.values.filter(function(d) { return filterZero ? filterZero(d) :  true; }).length)) //If children are in values check its children and filter\n\t                    || (d._values && d._values.filter(function(d) { return filterZero ? filterZero(d) :  true; }).length)     //Otherwise, do the same, but with the other name, _values...\n\t                    || 0) + ')'                                                                                               //This is the catch-all in case there are no children after a filter\n\t                    : ''                                                                                                     //If this is not a parent, just give an empty string\n\t            });\n\t        }\n\t\n\t        // if (column.click)\n\t        //   nodeName.select('span').on('click', column.click);\n\t\n\t      });\n\t\n\t      node\n\t        .order()\n\t        .on('click', function(d) { \n\t          dispatch.elementClick({\n\t            row: this, //TODO: decide whether or not this should be consistent with scatter/line events or should be an html link (a href)\n\t            data: d,\n\t            pos: [d.x, d.y]\n\t          });\n\t        })\n\t        .on('dblclick', function(d) { \n\t          dispatch.elementDblclick({\n\t            row: this,\n\t            data: d,\n\t            pos: [d.x, d.y]\n\t          });\n\t        })\n\t        .on('mouseover', function(d) { \n\t          dispatch.elementMouseover({\n\t            row: this,\n\t            data: d,\n\t            pos: [d.x, d.y]\n\t          });\n\t        })\n\t        .on('mouseout', function(d) { \n\t          dispatch.elementMouseout({\n\t            row: this,\n\t            data: d,\n\t            pos: [d.x, d.y]\n\t          });\n\t        });\n\t\n\t\n\t\n\t\n\t      // Toggle children on click.\n\t      function click(d, _, unshift) {\n\t        d3.event.stopPropagation();\n\t\n\t        if(d3.event.shiftKey && !unshift) {\n\t          //If you shift-click, it'll toggle fold all the children, instead of itself\n\t          d3.event.shiftKey = false;\n\t          d.values && d.values.forEach(function(node){\n\t            if (node.values || node._values) {\n\t              click(node, 0, true);\n\t            }\n\t          });\n\t          return true;\n\t        }\n\t        if(!hasChildren(d)) {\n\t          //download file\n\t          //window.location.href = d.url;\n\t          return true;\n\t        }\n\t        if (d.values) {\n\t          d._values = d.values;\n\t          d.values = null;\n\t        } else {\n\t          d.values = d._values;\n\t          d._values = null;\n\t        }\n\t        chart.update();\n\t      }\n\t\n\t\n\t      function icon(d) {\n\t        return (d._values && d._values.length) ? iconOpen : (d.values && d.values.length) ? iconClose : '';\n\t      }\n\t\n\t      function folded(d) {\n\t        return (d._values && d._values.length);\n\t      }\n\t\n\t      function hasChildren(d) {\n\t        var values = d.values || d._values;\n\t\n\t        return (values && values.length);\n\t      }\n\t\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    scatter.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.id = function(_) {\n\t    if (!arguments.length) return id;\n\t    id = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.header = function(_) {\n\t    if (!arguments.length) return header;\n\t    header = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.filterZero = function(_) {\n\t    if (!arguments.length) return filterZero;\n\t    filterZero = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.columns = function(_) {\n\t    if (!arguments.length) return columns;\n\t    columns = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tableClass = function(_) {\n\t    if (!arguments.length) return tableClass;\n\t    tableClass = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.iconOpen = function(_){\n\t     if (!arguments.length) return iconOpen;\n\t    iconOpen = _;\n\t    return chart;\n\t  }\n\t\n\t  chart.iconClose = function(_){\n\t     if (!arguments.length) return iconClose;\n\t    iconClose = _;\n\t    return chart;\n\t  }\n\t\n\t  chart.getUrl = function(_){\n\t     if (!arguments.length) return getUrl;\n\t    getUrl = _;\n\t    return chart;\n\t  }\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t};nv.models.legend = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var margin = {top: 5, right: 0, bottom: 5, left: 0}\n\t    , width = 400\n\t    , height = 20\n\t    , getKey = function(d) { return d.key }\n\t    , color = nv.utils.defaultColor()\n\t    , align = true\n\t    , rightAlign = true\n\t    , updateState = true   //If true, legend will update data.disabled and trigger a 'stateChange' dispatch.\n\t    , radioButtonMode = false   //If true, clicking legend items will cause it to behave like a radio button. (only one can be selected at a time)\n\t    , dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange')\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var availableWidth = width - margin.left - margin.right,\n\t          container = d3.select(this);\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-legend').data([data]);\n\t      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');\n\t      var g = wrap.select('g');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      var series = g.selectAll('.nv-series')\n\t          .data(function(d) { return d });\n\t      var seriesEnter = series.enter().append('g').attr('class', 'nv-series')\n\t          .on('mouseover', function(d,i) {\n\t            dispatch.legendMouseover(d,i);  //TODO: Make consistent with other event objects\n\t          })\n\t          .on('mouseout', function(d,i) {\n\t            dispatch.legendMouseout(d,i);\n\t          })\n\t          .on('click', function(d,i) {\n\t            dispatch.legendClick(d,i);\n\t            if (updateState) {\n\t               if (radioButtonMode) {\n\t                   //Radio button mode: set every series to disabled,\n\t                   //  and enable the clicked series.\n\t                   data.forEach(function(series) { series.disabled = true});\n\t                   d.disabled = false;\n\t               }\n\t               else {\n\t                   d.disabled = !d.disabled;\n\t                   if (data.every(function(series) { return series.disabled})) {\n\t                       //the default behavior of NVD3 legends is, if every single series\n\t                       // is disabled, turn all series' back on.\n\t                       data.forEach(function(series) { series.disabled = false});\n\t                   }\n\t               }\n\t               dispatch.stateChange({\n\t                  disabled: data.map(function(d) { return !!d.disabled })\n\t               });\n\t            }\n\t          })\n\t          .on('dblclick', function(d,i) {\n\t            dispatch.legendDblclick(d,i);\n\t            if (updateState) {\n\t                //the default behavior of NVD3 legends, when double clicking one,\n\t                // is to set all other series' to false, and make the double clicked series enabled.\n\t                data.forEach(function(series) {\n\t                   series.disabled = true;\n\t                });\n\t                d.disabled = false;\n\t                dispatch.stateChange({\n\t                    disabled: data.map(function(d) { return !!d.disabled })\n\t                });\n\t            }\n\t          });\n\t      seriesEnter.append('circle')\n\t          .style('stroke-width', 2)\n\t          .attr('class','nv-legend-symbol')\n\t          .attr('r', 5);\n\t      seriesEnter.append('text')\n\t          .attr('text-anchor', 'start')\n\t          .attr('class','nv-legend-text')\n\t          .attr('dy', '.32em')\n\t          .attr('dx', '8');\n\t      series.classed('disabled', function(d) { return d.disabled });\n\t      series.exit().remove();\n\t      series.select('circle')\n\t          .style('fill', function(d,i) { return d.color || color(d,i)})\n\t          .style('stroke', function(d,i) { return d.color || color(d, i) });\n\t      series.select('text').text(getKey);\n\t\n\t\n\t      //TODO: implement fixed-width and max-width options (max-width is especially useful with the align option)\n\t\n\t      // NEW ALIGNING CODE, TODO: clean up\n\t      if (align) {\n\t\n\t        var seriesWidths = [];\n\t        series.each(function(d,i) {\n\t              var legendText = d3.select(this).select('text');\n\t              var nodeTextLength;\n\t              try {\n\t                nodeTextLength = legendText.getComputedTextLength();\n\t                // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead\n\t                if(nodeTextLength <= 0) throw Error();\n\t              }\n\t              catch(e) {\n\t                nodeTextLength = nv.utils.calcApproxTextWidth(legendText);\n\t              }\n\t\n\t              seriesWidths.push(nodeTextLength + 28); // 28 is ~ the width of the circle plus some padding\n\t            });\n\t\n\t        var seriesPerRow = 0;\n\t        var legendWidth = 0;\n\t        var columnWidths = [];\n\t\n\t        while ( legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {\n\t          columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];\n\t          legendWidth += seriesWidths[seriesPerRow++];\n\t        }\n\t        if (seriesPerRow === 0) seriesPerRow = 1; //minimum of one series per row\n\t\n\t\n\t        while ( legendWidth > availableWidth && seriesPerRow > 1 ) {\n\t          columnWidths = [];\n\t          seriesPerRow--;\n\t\n\t          for (var k = 0; k < seriesWidths.length; k++) {\n\t            if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0) )\n\t              columnWidths[k % seriesPerRow] = seriesWidths[k];\n\t          }\n\t\n\t          legendWidth = columnWidths.reduce(function(prev, cur, index, array) {\n\t                          return prev + cur;\n\t                        });\n\t        }\n\t\n\t        var xPositions = [];\n\t        for (var i = 0, curX = 0; i < seriesPerRow; i++) {\n\t            xPositions[i] = curX;\n\t            curX += columnWidths[i];\n\t        }\n\t\n\t        series\n\t            .attr('transform', function(d, i) {\n\t              return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * 20) + ')';\n\t            });\n\t\n\t        //position legend as far right as possible within the total width\n\t        if (rightAlign) {\n\t           g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')');\n\t        }\n\t        else {\n\t           g.attr('transform', 'translate(0' + ',' + margin.top + ')');\n\t        }\n\t\n\t        height = margin.top + margin.bottom + (Math.ceil(seriesWidths.length / seriesPerRow) * 20);\n\t\n\t      } else {\n\t\n\t        var ypos = 5,\n\t            newxpos = 5,\n\t            maxwidth = 0,\n\t            xpos;\n\t        series\n\t            .attr('transform', function(d, i) {\n\t              var length = d3.select(this).select('text').node().getComputedTextLength() + 28;\n\t              xpos = newxpos;\n\t\n\t              if (width < margin.left + margin.right + xpos + length) {\n\t                newxpos = xpos = 5;\n\t                ypos += 20;\n\t              }\n\t\n\t              newxpos += length;\n\t              if (newxpos > maxwidth) maxwidth = newxpos;\n\t\n\t              return 'translate(' + xpos + ',' + ypos + ')';\n\t            });\n\t\n\t        //position legend as far right as possible within the total width\n\t        g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');\n\t\n\t        height = margin.top + margin.bottom + ypos + 15;\n\t\n\t      }\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  chart.dispatch = dispatch;\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.key = function(_) {\n\t    if (!arguments.length) return getKey;\n\t    getKey = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.align = function(_) {\n\t    if (!arguments.length) return align;\n\t    align = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.rightAlign = function(_) {\n\t    if (!arguments.length) return rightAlign;\n\t    rightAlign = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.updateState = function(_) {\n\t    if (!arguments.length) return updateState;\n\t    updateState = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.radioButtonMode = function(_) {\n\t    if (!arguments.length) return radioButtonMode;\n\t    radioButtonMode = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.line = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var  scatter = nv.models.scatter()\n\t    ;\n\t\n\t  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t    , width = 960\n\t    , height = 500\n\t    , color = nv.utils.defaultColor() // a function that returns a color\n\t    , getX = function(d) { return d.x } // accessor to get the x value from a data point\n\t    , getY = function(d) { return d.y } // accessor to get the y value from a data point\n\t    , defined = function(d,i) { return !isNaN(getY(d,i)) && getY(d,i) !== null } // allows a line to be not continuous when it is not defined\n\t    , isArea = function(d) { return d.area } // decides if a line is an area or just a line\n\t    , clipEdge = false // if true, masks lines within x and y scale\n\t    , x //can be accessed via chart.xScale()\n\t    , y //can be accessed via chart.yScale()\n\t    , interpolate = \"linear\" // controls the line interpolation\n\t    ;\n\t\n\t  scatter\n\t    .size(16) // default size\n\t    .sizeDomain([16,256]) //set to speed up calculation, needs to be unset if there is a custom size accessor\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var x0, y0 //used to store previous scales\n\t      ;\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var availableWidth = width - margin.left - margin.right,\n\t          availableHeight = height - margin.top - margin.bottom,\n\t          container = d3.select(this);\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x = scatter.xScale();\n\t      y = scatter.yScale();\n\t\n\t      x0 = x0 || x;\n\t      y0 = y0 || y;\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-line').data([data]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-line');\n\t      var defsEnter = wrapEnter.append('defs');\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g')\n\t\n\t      gEnter.append('g').attr('class', 'nv-groups');\n\t      gEnter.append('g').attr('class', 'nv-scatterWrap');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t\n\t\n\t      scatter\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t\n\t      var scatterWrap = wrap.select('.nv-scatterWrap');\n\t          //.datum(data); // Data automatically trickles down from the wrap\n\t\n\t      scatterWrap.call(scatter);\n\t\n\t\n\t\n\t      defsEnter.append('clipPath')\n\t          .attr('id', 'nv-edge-clip-' + scatter.id())\n\t        .append('rect');\n\t\n\t      wrap.select('#nv-edge-clip-' + scatter.id() + ' rect')\n\t          .attr('width', availableWidth)\n\t          .attr('height', (availableHeight > 0) ? availableHeight : 0);\n\t\n\t      g   .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');\n\t      scatterWrap\n\t          .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');\n\t\n\t\n\t\n\t\n\t      var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n\t          .data(function(d) { return d }, function(d) { return d.key });\n\t      groups.enter().append('g')\n\t          .style('stroke-opacity', 1e-6)\n\t          .style('fill-opacity', 1e-6);\n\t\n\t      groups.exit().remove();\n\t\n\t      groups\n\t          .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n\t          .classed('hover', function(d) { return d.hover })\n\t          .style('fill', function(d,i){ return color(d, i) })\n\t          .style('stroke', function(d,i){ return color(d, i)});\n\t      groups\n\t          \n\t          .style('stroke-opacity', 1)\n\t          .style('fill-opacity', .5);\n\t\n\t\n\t\n\t      var areaPaths = groups.selectAll('path.nv-area')\n\t          .data(function(d) { return isArea(d) ? [d] : [] }); // this is done differently than lines because I need to check if series is an area\n\t      areaPaths.enter().append('path')\n\t          .attr('class', 'nv-area')\n\t          .attr('d', function(d) {\n\t            return d3.svg.area()\n\t                .interpolate(interpolate)\n\t                .defined(defined)\n\t                .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n\t                .y0(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n\t                .y1(function(d,i) { return y0( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })\n\t                //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this\n\t                .apply(this, [d.values])\n\t          });\n\t      groups.exit().selectAll('path.nv-area')\n\t           .remove();\n\t\n\t      areaPaths\n\t          \n\t          .attr('d', function(d) {\n\t            return d3.svg.area()\n\t                .interpolate(interpolate)\n\t                .defined(defined)\n\t                .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n\t                .y0(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n\t                .y1(function(d,i) { return y( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })\n\t                //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this\n\t                .apply(this, [d.values])\n\t          });\n\t\n\t\n\t\n\t      var linePaths = groups.selectAll('path.nv-line')\n\t          .data(function(d) { return [d.values] });\n\t      linePaths.enter().append('path')\n\t          .attr('class', 'nv-line')\n\t          .attr('d',\n\t            d3.svg.line()\n\t              .interpolate(interpolate)\n\t              .defined(defined)\n\t              .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n\t              .y(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n\t          );\n\t\n\t      linePaths\n\t          \n\t          .attr('d',\n\t            d3.svg.line()\n\t              .interpolate(interpolate)\n\t              .defined(defined)\n\t              .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n\t              .y(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n\t          );\n\t\n\t\n\t\n\t      //store old scales for use in transitions on update\n\t      x0 = x.copy();\n\t      y0 = y.copy();\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  chart.dispatch = scatter.dispatch;\n\t  chart.scatter = scatter;\n\t\n\t  d3.rebind(chart, scatter, 'id', 'interactive', 'size', 'xScale', 'yScale', 'zScale', 'xDomain', 'yDomain', 'xRange', 'yRange',\n\t    'sizeDomain', 'forceX', 'forceY', 'forceSize', 'clipVoronoi', 'useVoronoi', 'clipRadius', 'padData','highlightPoint','clearHighlights');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.x = function(_) {\n\t    if (!arguments.length) return getX;\n\t    getX = _;\n\t    scatter.x(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.y = function(_) {\n\t    if (!arguments.length) return getY;\n\t    getY = _;\n\t    scatter.y(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.clipEdge = function(_) {\n\t    if (!arguments.length) return clipEdge;\n\t    clipEdge = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    scatter.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.interpolate = function(_) {\n\t    if (!arguments.length) return interpolate;\n\t    interpolate = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.defined = function(_) {\n\t    if (!arguments.length) return defined;\n\t    defined = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.isArea = function(_) {\n\t    if (!arguments.length) return isArea;\n\t    isArea = d3.functor(_);\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.lineChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var lines = nv.models.line()\n\t    , xAxis = nv.models.axis()\n\t    , yAxis = nv.models.axis()\n\t    , legend = nv.models.legend()\n\t    , interactiveLayer = nv.interactiveGuideline()\n\t    ;\n\t\n\t  var margin = {top: 30, right: 20, bottom: 50, left: 60}\n\t    , color = nv.utils.defaultColor()\n\t    , width = null\n\t    , height = null\n\t    , showLegend = true\n\t    , showXAxis = true\n\t    , showYAxis = true\n\t    , rightAlignYAxis = false\n\t    , useInteractiveGuideline = false\n\t    , tooltips = true\n\t    , tooltip = function(key, x, y, e, graph) {\n\t        return '<h3>' + key + '</h3>' +\n\t               '<p>' +  y + ' at ' + x + '</p>'\n\t      }\n\t    , x\n\t    , y\n\t    , state = {}\n\t    , defaultState = null\n\t    , noData = 'No Data Available.'\n\t    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n\t    , transitionDuration = 0\n\t    ;\n\t\n\t  xAxis\n\t    .orient('bottom')\n\t    .tickPadding(7)\n\t    ;\n\t  yAxis\n\t    .orient((rightAlignYAxis) ? 'right' : 'left')\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t        x = xAxis.tickFormat()(lines.x()(e.point, e.pointIndex)),\n\t        y = yAxis.tickFormat()(lines.y()(e.point, e.pointIndex)),\n\t        content = tooltip(e.series.key, x, y, e, chart);\n\t\n\t    nv.tooltip.show([left, top], content, null, null, offsetElement);\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this),\n\t          that = this;\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t\n\t\n\t      chart.update = function() { container.call(chart) };\n\t      chart.container = this;\n\t\n\t      //set state.disabled\n\t      state.disabled = data.map(function(d) { return !!d.disabled });\n\t\n\t\n\t      if (!defaultState) {\n\t        var key;\n\t        defaultState = {};\n\t        for (key in state) {\n\t          if (state[key] instanceof Array)\n\t            defaultState[key] = state[key].slice(0);\n\t          else\n\t            defaultState[key] = state[key];\n\t        }\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t      // Display noData message if there's nothing to show.\n\t\n\t      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', margin.top + availableHeight / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x = lines.xScale();\n\t      y = lines.yScale();\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-lineChart').data([data]);\n\t      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-lineChart').append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append(\"rect\").style(\"opacity\",0);\n\t      gEnter.append('g').attr('class', 'nv-x nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-y nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-linesWrap');\n\t      gEnter.append('g').attr('class', 'nv-legendWrap');\n\t      gEnter.append('g').attr('class', 'nv-interactive');\n\t\n\t      g.select(\"rect\")\n\t        .attr(\"width\",availableWidth)\n\t        .attr(\"height\",(availableHeight > 0) ? availableHeight : 0);\n\t      //------------------------------------------------------------\n\t      // Legend\n\t\n\t      if (showLegend) {\n\t        legend.width(availableWidth);\n\t\n\t        g.select('.nv-legendWrap')\n\t            .datum(data)\n\t            .call(legend);\n\t\n\t        if ( margin.top != legend.height()) {\n\t          margin.top = legend.height();\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t        }\n\t\n\t        wrap.select('.nv-legendWrap')\n\t            .attr('transform', 'translate(0,' + (-margin.top) +')')\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      if (rightAlignYAxis) {\n\t          g.select(\".nv-y.nv-axis\")\n\t              .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t      // Main Chart Component(s)\n\t\n\t\n\t      //------------------------------------------------------------\n\t      //Set up interactive layer\n\t      if (useInteractiveGuideline) {\n\t        interactiveLayer\n\t           .width(availableWidth)\n\t           .height(availableHeight)\n\t           .margin({left:margin.left, top:margin.top})\n\t           .svgContainer(container)\n\t           .xScale(x);\n\t        wrap.select(\".nv-interactive\").call(interactiveLayer);\n\t      }\n\t\n\t\n\t      lines\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color(d, i);\n\t        }).filter(function(d,i) { return !data[i].disabled }));\n\t\n\t\n\t      var linesWrap = g.select('.nv-linesWrap')\n\t          .datum(data.filter(function(d) { return !d.disabled }))\n\t\n\t      linesWrap.call(lines);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Axes\n\t\n\t      if (showXAxis) {\n\t        xAxis\n\t          .scale(x)\n\t          .ticks( availableWidth / 100 )\n\t          .tickSize(-availableHeight, 0);\n\t\n\t        g.select('.nv-x.nv-axis')\n\t            .attr('transform', 'translate(0,' + y.range()[0] + ')');\n\t        g.select('.nv-x.nv-axis')\n\t            \n\t            .call(xAxis);\n\t      }\n\t\n\t      if (showYAxis) {\n\t        yAxis\n\t          .scale(y)\n\t          .ticks( availableHeight / 36 )\n\t          .tickSize( -availableWidth, 0);\n\t\n\t        g.select('.nv-y.nv-axis')\n\t            \n\t            .call(yAxis);\n\t      }\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t      legend.dispatch.on('stateChange', function(newState) {\n\t          state = newState;\n\t          dispatch.stateChange(state);\n\t          chart.update();\n\t      });\n\t\n\t      interactiveLayer.dispatch.on('elementMousemove', function(e) {\n\t          lines.clearHighlights();\n\t          var singlePoint, pointIndex, pointXLocation, allData = [];\n\t          data\n\t          .filter(function(series, i) {\n\t            series.seriesIndex = i;\n\t            return !series.disabled;\n\t          })\n\t          .forEach(function(series,i) {\n\t              pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n\t              lines.highlightPoint(i, pointIndex, true);\n\t              var point = series.values[pointIndex];\n\t              if (typeof point === 'undefined') return;\n\t              if (typeof singlePoint === 'undefined') singlePoint = point;\n\t              if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n\t              allData.push({\n\t                  key: series.key,\n\t                  value: chart.y()(point, pointIndex),\n\t                  color: color(series,series.seriesIndex)\n\t              });\n\t          });\n\t          //Highlight the tooltip entry based on which point the mouse is closest to.\n\t          if (allData.length > 2) {\n\t            var yValue = chart.yScale().invert(e.mouseY);\n\t            var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);\n\t            var threshold = 0.03 * domainExtent;\n\t            var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value}),yValue,threshold);\n\t            if (indexToHighlight !== null)\n\t              allData[indexToHighlight].highlight = true;\n\t          }\n\t\n\t          var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex));\n\t          interactiveLayer.tooltip\n\t                  .position({left: pointXLocation + margin.left, top: e.mouseY + margin.top})\n\t                  .chartContainer(that.parentNode)\n\t                  .enabled(tooltips)\n\t                  .valueFormatter(function(d,i) {\n\t                     return yAxis.tickFormat()(d);\n\t                  })\n\t                  .data(\n\t                      {\n\t                        value: xValue,\n\t                        series: allData\n\t                      }\n\t                  )();\n\t\n\t          interactiveLayer.renderGuideLine(pointXLocation);\n\t\n\t      });\n\t\n\t      interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n\t          dispatch.tooltipHide();\n\t          lines.clearHighlights();\n\t      });\n\t\n\t      dispatch.on('tooltipShow', function(e) {\n\t        if (tooltips) showTooltip(e, that.parentNode);\n\t      });\n\t\n\t\n\t      dispatch.on('changeState', function(e) {\n\t\n\t        if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {\n\t          data.forEach(function(series,i) {\n\t            series.disabled = e.disabled[i];\n\t          });\n\t\n\t          state.disabled = e.disabled;\n\t        }\n\t\n\t        chart.update();\n\t      });\n\t\n\t      //============================================================\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  lines.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  lines.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.dispatch = dispatch;\n\t  chart.lines = lines;\n\t  chart.legend = legend;\n\t  chart.xAxis = xAxis;\n\t  chart.yAxis = yAxis;\n\t  chart.interactiveLayer = interactiveLayer;\n\t\n\t  d3.rebind(chart, lines, 'defined', 'isArea', 'x', 'y', 'size', 'xScale', 'yScale', 'xDomain', 'yDomain', 'xRange', 'yRange'\n\t    , 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi', 'useVoronoi','id', 'interpolate');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    legend.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.showLegend = function(_) {\n\t    if (!arguments.length) return showLegend;\n\t    showLegend = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showXAxis = function(_) {\n\t    if (!arguments.length) return showXAxis;\n\t    showXAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showYAxis = function(_) {\n\t    if (!arguments.length) return showYAxis;\n\t    showYAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.rightAlignYAxis = function(_) {\n\t    if(!arguments.length) return rightAlignYAxis;\n\t    rightAlignYAxis = _;\n\t    yAxis.orient( (_) ? 'right' : 'left');\n\t    return chart;\n\t  };\n\t\n\t  chart.useInteractiveGuideline = function(_) {\n\t    if(!arguments.length) return useInteractiveGuideline;\n\t    useInteractiveGuideline = _;\n\t    if (_ === true) {\n\t       chart.interactive(false);\n\t       chart.useVoronoi(false);\n\t    }\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.state = function(_) {\n\t    if (!arguments.length) return state;\n\t    state = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.defaultState = function(_) {\n\t    if (!arguments.length) return defaultState;\n\t    defaultState = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.transitionDuration = function(_) {\n\t    if (!arguments.length) return transitionDuration;\n\t    transitionDuration = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.linePlusBarChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var lines = nv.models.line()\n\t    , bars = nv.models.historicalBar()\n\t    , xAxis = nv.models.axis()\n\t    , y1Axis = nv.models.axis()\n\t    , y2Axis = nv.models.axis()\n\t    , legend = nv.models.legend()\n\t    ;\n\t\n\t  var margin = {top: 30, right: 60, bottom: 50, left: 60}\n\t    , width = null\n\t    , height = null\n\t    , getX = function(d) { return d.x }\n\t    , getY = function(d) { return d.y }\n\t    , color = nv.utils.defaultColor()\n\t    , showLegend = true\n\t    , tooltips = true\n\t    , tooltip = function(key, x, y, e, graph) {\n\t        return '<h3>' + key + '</h3>' +\n\t               '<p>' +  y + ' at ' + x + '</p>';\n\t      }\n\t    , x\n\t    , y1\n\t    , y2\n\t    , state = {}\n\t    , defaultState = null\n\t    , noData = \"No Data Available.\"\n\t    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n\t    ;\n\t\n\t  bars\n\t    .padData(true)\n\t    ;\n\t  lines\n\t    .clipEdge(false)\n\t    .padData(true)\n\t    ;\n\t  xAxis\n\t    .orient('bottom')\n\t    .tickPadding(7)\n\t    .highlightZero(false)\n\t    ;\n\t  y1Axis\n\t    .orient('left')\n\t    ;\n\t  y2Axis\n\t    .orient('right')\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t      var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t          top = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t          x = xAxis.tickFormat()(lines.x()(e.point, e.pointIndex)),\n\t          y = (e.series.bar ? y1Axis : y2Axis).tickFormat()(lines.y()(e.point, e.pointIndex)),\n\t          content = tooltip(e.series.key, x, y, e, chart);\n\t\n\t      nv.tooltip.show([left, top], content, e.value < 0 ? 'n' : 's', null, offsetElement);\n\t    }\n\t    ;\n\t\n\t  //------------------------------------------------------------\n\t\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this),\n\t          that = this;\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t\n\t      chart.update = function() { container.call(chart); };\n\t      // chart.container = this;\n\t\n\t      //set state.disabled\n\t      state.disabled = data.map(function(d) { return !!d.disabled });\n\t\n\t      if (!defaultState) {\n\t        var key;\n\t        defaultState = {};\n\t        for (key in state) {\n\t          if (state[key] instanceof Array)\n\t            defaultState[key] = state[key].slice(0);\n\t          else\n\t            defaultState[key] = state[key];\n\t        }\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t      // Display No Data message if there's nothing to show.\n\t\n\t      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', margin.top + availableHeight / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      var dataBars = data.filter(function(d) { return !d.disabled && d.bar });\n\t      var dataLines = data.filter(function(d) { return !d.bar }); // removed the !d.disabled clause here to fix Issue #240\n\t\n\t      //x = xAxis.scale();\n\t       x = dataLines.filter(function(d) { return !d.disabled; }).length && dataLines.filter(function(d) { return !d.disabled; })[0].values.length ? lines.xScale() : bars.xScale();\n\t      //x = dataLines.filter(function(d) { return !d.disabled; }).length ? lines.xScale() : bars.xScale(); //old code before change above\n\t      y1 = bars.yScale();\n\t      y2 = lines.yScale();\n\t\n\t      //------------------------------------------------------------\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = d3.select(this).selectAll('g.nv-wrap.nv-linePlusBar').data([data]);\n\t      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-linePlusBar').append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-x nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-y1 nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-y2 nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-barsWrap');\n\t      gEnter.append('g').attr('class', 'nv-linesWrap');\n\t      gEnter.append('g').attr('class', 'nv-legendWrap');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Legend\n\t\n\t      if (showLegend) {\n\t        legend.width( availableWidth / 2 );\n\t\n\t        g.select('.nv-legendWrap')\n\t            .datum(data.map(function(series) {\n\t              series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n\t              series.key = series.originalKey + (series.bar ? ' (left axis)' : ' (right axis)');\n\t              return series;\n\t            }))\n\t          .call(legend);\n\t\n\t        if ( margin.top != legend.height()) {\n\t          margin.top = legend.height();\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t        }\n\t\n\t        g.select('.nv-legendWrap')\n\t            .attr('transform', 'translate(' + ( availableWidth / 2 ) + ',' + (-margin.top) +')');\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Main Chart Component(s)\n\t\n\t\n\t      lines\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color(d, i);\n\t        }).filter(function(d,i) { return !data[i].disabled && !data[i].bar }))\n\t\n\t      bars\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color(d, i);\n\t        }).filter(function(d,i) { return !data[i].disabled && data[i].bar }))\n\t\n\t\n\t\n\t      var barsWrap = g.select('.nv-barsWrap')\n\t          .datum(dataBars.length ? dataBars : [{values:[]}])\n\t\n\t      var linesWrap = g.select('.nv-linesWrap')\n\t          .datum(dataLines[0] && !dataLines[0].disabled ? dataLines : [{values:[]}] );\n\t          //.datum(!dataLines[0].disabled ? dataLines : [{values:dataLines[0].values.map(function(d) { return [d[0], null] }) }] );\n\t\n\t      d3.transition(barsWrap).call(bars);\n\t      d3.transition(linesWrap).call(lines);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Axes\n\t\n\t      xAxis\n\t        .scale(x)\n\t        .ticks( availableWidth / 100 )\n\t        .tickSize(-availableHeight, 0);\n\t\n\t      g.select('.nv-x.nv-axis')\n\t          .attr('transform', 'translate(0,' + y1.range()[0] + ')');\n\t      d3.transition(g.select('.nv-x.nv-axis'))\n\t          .call(xAxis);\n\t\n\t\n\t      y1Axis\n\t        .scale(y1)\n\t        .ticks( availableHeight / 36 )\n\t        .tickSize(-availableWidth, 0);\n\t\n\t      d3.transition(g.select('.nv-y1.nv-axis'))\n\t          .style('opacity', dataBars.length ? 1 : 0)\n\t          .call(y1Axis);\n\t\n\t\n\t      y2Axis\n\t        .scale(y2)\n\t        .ticks( availableHeight / 36 )\n\t        .tickSize(dataBars.length ? 0 : -availableWidth, 0); // Show the y2 rules only if y1 has none\n\t\n\t      g.select('.nv-y2.nv-axis')\n\t          .style('opacity', dataLines.length ? 1 : 0)\n\t          .attr('transform', 'translate(' + availableWidth + ',0)');\n\t          //.attr('transform', 'translate(' + x.range()[1] + ',0)');\n\t\n\t      d3.transition(g.select('.nv-y2.nv-axis'))\n\t          .call(y2Axis);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t      legend.dispatch.on('stateChange', function(newState) { \n\t        state = newState;\n\t        dispatch.stateChange(state);\n\t        chart.update();\n\t      });\n\t\n\t      dispatch.on('tooltipShow', function(e) {\n\t        if (tooltips) showTooltip(e, that.parentNode);\n\t      });\n\t\n\t\n\t      // Update chart from a state object passed to event handler\n\t      dispatch.on('changeState', function(e) {\n\t\n\t        if (typeof e.disabled !== 'undefined') {\n\t          data.forEach(function(series,i) {\n\t            series.disabled = e.disabled[i];\n\t          });\n\t\n\t          state.disabled = e.disabled;\n\t        }\n\t\n\t        chart.update();\n\t      });\n\t\n\t      //============================================================\n\t\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  lines.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  lines.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  bars.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  bars.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.dispatch = dispatch;\n\t  chart.legend = legend;\n\t  chart.lines = lines;\n\t  chart.bars = bars;\n\t  chart.xAxis = xAxis;\n\t  chart.y1Axis = y1Axis;\n\t  chart.y2Axis = y2Axis;\n\t\n\t  d3.rebind(chart, lines, 'defined', 'size', 'clipVoronoi', 'interpolate');\n\t  //TODO: consider rebinding x, y and some other stuff, and simply do soemthign lile bars.x(lines.x()), etc.\n\t  //d3.rebind(chart, lines, 'x', 'y', 'size', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi', 'id');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  chart.x = function(_) {\n\t    if (!arguments.length) return getX;\n\t    getX = _;\n\t    lines.x(_);\n\t    bars.x(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.y = function(_) {\n\t    if (!arguments.length) return getY;\n\t    getY = _;\n\t    lines.y(_);\n\t    bars.y(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    legend.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.showLegend = function(_) {\n\t    if (!arguments.length) return showLegend;\n\t    showLegend = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.state = function(_) {\n\t    if (!arguments.length) return state;\n\t    state = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.defaultState = function(_) {\n\t    if (!arguments.length) return defaultState;\n\t    defaultState = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\tnv.models.lineWithFocusChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var lines = nv.models.line()\n\t    , lines2 = nv.models.line()\n\t    , xAxis = nv.models.axis()\n\t    , yAxis = nv.models.axis()\n\t    , x2Axis = nv.models.axis()\n\t    , y2Axis = nv.models.axis()\n\t    , legend = nv.models.legend()\n\t    , brush = d3.svg.brush()\n\t    ;\n\t\n\t  var margin = {top: 30, right: 30, bottom: 30, left: 60}\n\t    , margin2 = {top: 0, right: 30, bottom: 20, left: 60}\n\t    , color = nv.utils.defaultColor()\n\t    , width = null\n\t    , height = null\n\t    , height2 = 100\n\t    , x\n\t    , y\n\t    , x2\n\t    , y2\n\t    , showLegend = true\n\t    , brushExtent = null\n\t    , tooltips = true\n\t    , tooltip = function(key, x, y, e, graph) {\n\t        return '<h3>' + key + '</h3>' +\n\t               '<p>' +  y + ' at ' + x + '</p>'\n\t      }\n\t    , noData = \"No Data Available.\"\n\t    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'brush')\n\t    , transitionDuration = 0\n\t    ;\n\t\n\t  lines\n\t    .clipEdge(true)\n\t    ;\n\t  lines2\n\t    .interactive(false)\n\t    ;\n\t  xAxis\n\t    .orient('bottom')\n\t    .tickPadding(5)\n\t    ;\n\t  yAxis\n\t    .orient('left')\n\t    ;\n\t  x2Axis\n\t    .orient('bottom')\n\t    .tickPadding(5)\n\t    ;\n\t  y2Axis\n\t    .orient('left')\n\t    ;\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t        x = xAxis.tickFormat()(lines.x()(e.point, e.pointIndex)),\n\t        y = yAxis.tickFormat()(lines.y()(e.point, e.pointIndex)),\n\t        content = tooltip(e.series.key, x, y, e, chart);\n\t\n\t    nv.tooltip.show([left, top], content, null, null, offsetElement);\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this),\n\t          that = this;\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight1 = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom - height2,\n\t          availableHeight2 = height2 - margin2.top - margin2.bottom;\n\t\n\t      chart.update = function() { container.call(chart) };\n\t      chart.container = this;\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Display No Data message if there's nothing to show.\n\t\n\t      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', margin.top + availableHeight1 / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x = lines.xScale();\n\t      y = lines.yScale();\n\t      x2 = lines2.xScale();\n\t      y2 = lines2.yScale();\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-lineWithFocusChart').data([data]);\n\t      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-lineWithFocusChart').append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-legendWrap');\n\t\n\t      var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n\t      focusEnter.append('g').attr('class', 'nv-x nv-axis');\n\t      focusEnter.append('g').attr('class', 'nv-y nv-axis');\n\t      focusEnter.append('g').attr('class', 'nv-linesWrap');\n\t\n\t      var contextEnter = gEnter.append('g').attr('class', 'nv-context');\n\t      contextEnter.append('g').attr('class', 'nv-x nv-axis');\n\t      contextEnter.append('g').attr('class', 'nv-y nv-axis');\n\t      contextEnter.append('g').attr('class', 'nv-linesWrap');\n\t      contextEnter.append('g').attr('class', 'nv-brushBackground');\n\t      contextEnter.append('g').attr('class', 'nv-x nv-brush');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Legend\n\t\n\t      if (showLegend) {\n\t        legend.width(availableWidth);\n\t\n\t        g.select('.nv-legendWrap')\n\t            .datum(data)\n\t            .call(legend);\n\t\n\t        if ( margin.top != legend.height()) {\n\t          margin.top = legend.height();\n\t          availableHeight1 = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom - height2;\n\t        }\n\t\n\t        g.select('.nv-legendWrap')\n\t            .attr('transform', 'translate(0,' + (-margin.top) +')')\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Main Chart Component(s)\n\t\n\t      lines\n\t        .width(availableWidth)\n\t        .height(availableHeight1)\n\t        .color(\n\t          data\n\t            .map(function(d,i) {\n\t              return d.color || color(d, i);\n\t            })\n\t            .filter(function(d,i) {\n\t              return !data[i].disabled;\n\t          })\n\t        );\n\t\n\t      lines2\n\t        .defined(lines.defined())\n\t        .width(availableWidth)\n\t        .height(availableHeight2)\n\t        .color(\n\t          data\n\t            .map(function(d,i) {\n\t              return d.color || color(d, i);\n\t            })\n\t            .filter(function(d,i) {\n\t              return !data[i].disabled;\n\t          })\n\t        );\n\t\n\t      g.select('.nv-context')\n\t          .attr('transform', 'translate(0,' + ( availableHeight1 + margin.bottom + margin2.top) + ')')\n\t\n\t      var contextLinesWrap = g.select('.nv-context .nv-linesWrap')\n\t          .datum(data.filter(function(d) { return !d.disabled }))\n\t\n\t      d3.transition(contextLinesWrap).call(lines2);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      /*\n\t      var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n\t          .datum(data.filter(function(d) { return !d.disabled }))\n\t\n\t      d3.transition(focusLinesWrap).call(lines);\n\t     */\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Main (Focus) Axes\n\t\n\t      xAxis\n\t        .scale(x)\n\t        .ticks( availableWidth / 100 )\n\t        .tickSize(-availableHeight1, 0);\n\t\n\t      yAxis\n\t        .scale(y)\n\t        .ticks( availableHeight1 / 36 )\n\t        .tickSize( -availableWidth, 0);\n\t\n\t      g.select('.nv-focus .nv-x.nv-axis')\n\t          .attr('transform', 'translate(0,' + availableHeight1 + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Brush\n\t\n\t      brush\n\t        .x(x2)\n\t        .on('brush', function() {\n\t            //When brushing, turn off transitions because chart needs to change immediately.\n\t            var oldTransition = chart.transitionDuration();\n\t            chart.transitionDuration(0); \n\t            onBrush();\n\t            chart.transitionDuration(oldTransition);\n\t        });\n\t\n\t      if (brushExtent) brush.extent(brushExtent);\n\t\n\t      var brushBG = g.select('.nv-brushBackground').selectAll('g')\n\t          .data([brushExtent || brush.extent()])\n\t\n\t      var brushBGenter = brushBG.enter()\n\t          .append('g');\n\t\n\t      brushBGenter.append('rect')\n\t          .attr('class', 'left')\n\t          .attr('x', 0)\n\t          .attr('y', 0)\n\t          .attr('height', availableHeight2);\n\t\n\t      brushBGenter.append('rect')\n\t          .attr('class', 'right')\n\t          .attr('x', 0)\n\t          .attr('y', 0)\n\t          .attr('height', availableHeight2);\n\t\n\t      var gBrush = g.select('.nv-x.nv-brush')\n\t          .call(brush);\n\t      gBrush.selectAll('rect')\n\t          //.attr('y', -5)\n\t          .attr('height', availableHeight2);\n\t      gBrush.selectAll('.resize').append('path').attr('d', resizePath);\n\t\n\t      onBrush();\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Secondary (Context) Axes\n\t\n\t      x2Axis\n\t        .scale(x2)\n\t        .ticks( availableWidth / 100 )\n\t        .tickSize(-availableHeight2, 0);\n\t\n\t      g.select('.nv-context .nv-x.nv-axis')\n\t          .attr('transform', 'translate(0,' + y2.range()[0] + ')');\n\t      d3.transition(g.select('.nv-context .nv-x.nv-axis'))\n\t          .call(x2Axis);\n\t\n\t\n\t      y2Axis\n\t        .scale(y2)\n\t        .ticks( availableHeight2 / 36 )\n\t        .tickSize( -availableWidth, 0);\n\t\n\t      d3.transition(g.select('.nv-context .nv-y.nv-axis'))\n\t          .call(y2Axis);\n\t\n\t      g.select('.nv-context .nv-x.nv-axis')\n\t          .attr('transform', 'translate(0,' + y2.range()[0] + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t      legend.dispatch.on('stateChange', function(newState) { \n\t        chart.update();\n\t      });\n\t\n\t      dispatch.on('tooltipShow', function(e) {\n\t        if (tooltips) showTooltip(e, that.parentNode);\n\t      });\n\t\n\t      //============================================================\n\t\n\t\n\t      //============================================================\n\t      // Functions\n\t      //------------------------------------------------------------\n\t\n\t      // Taken from crossfilter (http://square.github.com/crossfilter/)\n\t      function resizePath(d) {\n\t        var e = +(d == 'e'),\n\t            x = e ? 1 : -1,\n\t            y = availableHeight2 / 3;\n\t        return 'M' + (.5 * x) + ',' + y\n\t            + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n\t            + 'V' + (2 * y - 6)\n\t            + 'A6,6 0 0 ' + e + ' ' + (.5 * x) + ',' + (2 * y)\n\t            + 'Z'\n\t            + 'M' + (2.5 * x) + ',' + (y + 8)\n\t            + 'V' + (2 * y - 8)\n\t            + 'M' + (4.5 * x) + ',' + (y + 8)\n\t            + 'V' + (2 * y - 8);\n\t      }\n\t\n\t\n\t      function updateBrushBG() {\n\t        if (!brush.empty()) brush.extent(brushExtent);\n\t        brushBG\n\t            .data([brush.empty() ? x2.domain() : brushExtent])\n\t            .each(function(d,i) {\n\t              var leftWidth = x2(d[0]) - x.range()[0],\n\t                  rightWidth = x.range()[1] - x2(d[1]);\n\t              d3.select(this).select('.left')\n\t                .attr('width',  leftWidth < 0 ? 0 : leftWidth);\n\t\n\t              d3.select(this).select('.right')\n\t                .attr('x', x2(d[1]))\n\t                .attr('width', rightWidth < 0 ? 0 : rightWidth);\n\t            });\n\t      }\n\t\n\t\n\t      function onBrush() {\n\t        brushExtent = brush.empty() ? null : brush.extent();\n\t        var extent = brush.empty() ? x2.domain() : brush.extent();\n\t\n\t        //The brush extent cannot be less than one.  If it is, don't update the line chart.\n\t        if (Math.abs(extent[0] - extent[1]) <= 1) {\n\t          return;\n\t        }\n\t\n\t        dispatch.brush({extent: extent, brush: brush});\n\t\n\t\n\t        updateBrushBG();\n\t\n\t        // Update Main (Focus)\n\t        var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n\t            .datum(\n\t              data\n\t                .filter(function(d) { return !d.disabled })\n\t                .map(function(d,i) {\n\t                  return {\n\t                    key: d.key,\n\t                    values: d.values.filter(function(d,i) {\n\t                      return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n\t                    })\n\t                  }\n\t                })\n\t            );\n\t        focusLinesWrap.call(lines);\n\t\n\t\n\t        // Update Main (Focus) Axes\n\t        g.select('.nv-focus .nv-x.nv-axis')\n\t            .call(xAxis);\n\t        g.select('.nv-focus .nv-y.nv-axis')\n\t            .call(yAxis);\n\t      }\n\t\n\t      //============================================================\n\t\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  lines.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  lines.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.dispatch = dispatch;\n\t  chart.legend = legend;\n\t  chart.lines = lines;\n\t  chart.lines2 = lines2;\n\t  chart.xAxis = xAxis;\n\t  chart.yAxis = yAxis;\n\t  chart.x2Axis = x2Axis;\n\t  chart.y2Axis = y2Axis;\n\t\n\t  d3.rebind(chart, lines, 'defined', 'isArea', 'size', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi', 'id');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  chart.x = function(_) {\n\t    if (!arguments.length) return lines.x;\n\t    lines.x(_);\n\t    lines2.x(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.y = function(_) {\n\t    if (!arguments.length) return lines.y;\n\t    lines.y(_);\n\t    lines2.y(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.margin2 = function(_) {\n\t    if (!arguments.length) return margin2;\n\t    margin2 = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height2 = function(_) {\n\t    if (!arguments.length) return height2;\n\t    height2 = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color =nv.utils.getColor(_);\n\t    legend.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.showLegend = function(_) {\n\t    if (!arguments.length) return showLegend;\n\t    showLegend = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.interpolate = function(_) {\n\t    if (!arguments.length) return lines.interpolate();\n\t    lines.interpolate(_);\n\t    lines2.interpolate(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  // Chart has multiple similar Axes, to prevent code duplication, probably need to link all axis functions manually like below\n\t  chart.xTickFormat = function(_) {\n\t    if (!arguments.length) return xAxis.tickFormat();\n\t    xAxis.tickFormat(_);\n\t    x2Axis.tickFormat(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.yTickFormat = function(_) {\n\t    if (!arguments.length) return yAxis.tickFormat();\n\t    yAxis.tickFormat(_);\n\t    y2Axis.tickFormat(_);\n\t    return chart;\n\t  };\n\t  \n\t  chart.brushExtent = function(_) {\n\t    if (!arguments.length) return brushExtent;\n\t    brushExtent = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.transitionDuration = function(_) {\n\t    if (!arguments.length) return transitionDuration;\n\t    transitionDuration = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.linePlusBarWithFocusChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var lines = nv.models.line()\n\t    , lines2 = nv.models.line()\n\t    , bars = nv.models.historicalBar()\n\t    , bars2 = nv.models.historicalBar()\n\t    , xAxis = nv.models.axis()\n\t    , x2Axis = nv.models.axis()\n\t    , y1Axis = nv.models.axis()\n\t    , y2Axis = nv.models.axis()\n\t    , y3Axis = nv.models.axis()\n\t    , y4Axis = nv.models.axis()\n\t    , legend = nv.models.legend()\n\t    , brush = d3.svg.brush()\n\t    ;\n\t\n\t  var margin = {top: 30, right: 30, bottom: 30, left: 60}\n\t    , margin2 = {top: 0, right: 30, bottom: 20, left: 60}\n\t    , width = null\n\t    , height = null\n\t    , height2 = 100\n\t    , getX = function(d) { return d.x }\n\t    , getY = function(d) { return d.y }\n\t    , color = nv.utils.defaultColor()\n\t    , showLegend = true\n\t    , extent\n\t    , brushExtent = null\n\t    , tooltips = true\n\t    , tooltip = function(key, x, y, e, graph) {\n\t        return '<h3>' + key + '</h3>' +\n\t               '<p>' +  y + ' at ' + x + '</p>';\n\t      }\n\t    , x\n\t    , x2\n\t    , y1\n\t    , y2\n\t    , y3\n\t    , y4\n\t    , noData = \"No Data Available.\"\n\t    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'brush')\n\t    , transitionDuration = 0\n\t    ;\n\t\n\t  lines\n\t    .clipEdge(true)\n\t    ;\n\t  lines2\n\t    .interactive(false)\n\t    ;\n\t  xAxis\n\t    .orient('bottom')\n\t    .tickPadding(5)\n\t    ;\n\t  y1Axis\n\t    .orient('left')\n\t    ;\n\t  y2Axis\n\t    .orient('right')\n\t    ;\n\t  x2Axis\n\t    .orient('bottom')\n\t    .tickPadding(5)\n\t    ;\n\t  y3Axis\n\t    .orient('left')\n\t    ;\n\t  y4Axis\n\t    .orient('right')\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t    if (extent) {\n\t        e.pointIndex += Math.ceil(extent[0]);\n\t    }\n\t    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t        x = xAxis.tickFormat()(lines.x()(e.point, e.pointIndex)),\n\t        y = (e.series.bar ? y1Axis : y2Axis).tickFormat()(lines.y()(e.point, e.pointIndex)),\n\t        content = tooltip(e.series.key, x, y, e, chart);\n\t\n\t    nv.tooltip.show([left, top], content, e.value < 0 ? 'n' : 's', null, offsetElement);\n\t  };\n\t\n\t  //------------------------------------------------------------\n\t\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this),\n\t          that = this;\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight1 = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom - height2,\n\t          availableHeight2 = height2 - margin2.top - margin2.bottom;\n\t\n\t      chart.update = function() { container.call(chart); };\n\t      chart.container = this;\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Display No Data message if there's nothing to show.\n\t\n\t      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', margin.top + availableHeight1 / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      var dataBars = data.filter(function(d) { return !d.disabled && d.bar });\n\t      var dataLines = data.filter(function(d) { return !d.bar }); // removed the !d.disabled clause here to fix Issue #240\n\t\n\t      x = bars.xScale();\n\t      x2 = x2Axis.scale();\n\t      y1 = bars.yScale();\n\t      y2 = lines.yScale();\n\t      y3 = bars2.yScale();\n\t      y4 = lines2.yScale();\n\t\n\t      var series1 = data\n\t        .filter(function(d) { return !d.disabled && d.bar })\n\t        .map(function(d) {\n\t          return d.values.map(function(d,i) {\n\t            return { x: getX(d,i), y: getY(d,i) }\n\t          })\n\t        });\n\t\n\t      var series2 = data\n\t        .filter(function(d) { return !d.disabled && !d.bar })\n\t        .map(function(d) {\n\t          return d.values.map(function(d,i) {\n\t            return { x: getX(d,i), y: getY(d,i) }\n\t          })\n\t        });\n\t\n\t      x   .range([0, availableWidth]);\n\t      \n\t      x2  .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x } ))\n\t          .range([0, availableWidth]);\n\t\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-linePlusBar').data([data]);\n\t      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-linePlusBar').append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-legendWrap');\n\t      \n\t      var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n\t      focusEnter.append('g').attr('class', 'nv-x nv-axis');\n\t      focusEnter.append('g').attr('class', 'nv-y1 nv-axis');\n\t      focusEnter.append('g').attr('class', 'nv-y2 nv-axis');\n\t      focusEnter.append('g').attr('class', 'nv-barsWrap');\n\t      focusEnter.append('g').attr('class', 'nv-linesWrap');\n\t\n\t      var contextEnter = gEnter.append('g').attr('class', 'nv-context');\n\t      contextEnter.append('g').attr('class', 'nv-x nv-axis');\n\t      contextEnter.append('g').attr('class', 'nv-y1 nv-axis');\n\t      contextEnter.append('g').attr('class', 'nv-y2 nv-axis');\n\t      contextEnter.append('g').attr('class', 'nv-barsWrap');\n\t      contextEnter.append('g').attr('class', 'nv-linesWrap');\n\t      contextEnter.append('g').attr('class', 'nv-brushBackground');\n\t      contextEnter.append('g').attr('class', 'nv-x nv-brush');\n\t\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Legend\n\t\n\t      if (showLegend) {\n\t        legend.width( availableWidth / 2 );\n\t\n\t        g.select('.nv-legendWrap')\n\t            .datum(data.map(function(series) {\n\t              series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n\t              series.key = series.originalKey + (series.bar ? ' (left axis)' : ' (right axis)');\n\t              return series;\n\t            }))\n\t          .call(legend);\n\t\n\t        if ( margin.top != legend.height()) {\n\t          margin.top = legend.height();\n\t          availableHeight1 = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom - height2;\n\t        }\n\t\n\t        g.select('.nv-legendWrap')\n\t            .attr('transform', 'translate(' + ( availableWidth / 2 ) + ',' + (-margin.top) +')');\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Context Components\n\t\n\t      bars2\n\t        .width(availableWidth)\n\t        .height(availableHeight2)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color(d, i);\n\t        }).filter(function(d,i) { return !data[i].disabled && data[i].bar }));\n\t\n\t      lines2\n\t        .width(availableWidth)\n\t        .height(availableHeight2)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color(d, i);\n\t        }).filter(function(d,i) { return !data[i].disabled && !data[i].bar }));\n\t        \n\t      var bars2Wrap = g.select('.nv-context .nv-barsWrap')\n\t          .datum(dataBars.length ? dataBars : [{values:[]}]);\n\t\n\t      var lines2Wrap = g.select('.nv-context .nv-linesWrap')\n\t          .datum(!dataLines[0].disabled ? dataLines : [{values:[]}]);\n\t          \n\t      g.select('.nv-context')\n\t          .attr('transform', 'translate(0,' + ( availableHeight1 + margin.bottom + margin2.top) + ')')\n\t\n\t      bars2Wrap.call(bars2);\n\t      lines2Wrap.call(lines2);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Brush\n\t\n\t      brush\n\t        .x(x2)\n\t        .on('brush', onBrush);\n\t\n\t      if (brushExtent) brush.extent(brushExtent);\n\t\n\t      var brushBG = g.select('.nv-brushBackground').selectAll('g')\n\t          .data([brushExtent || brush.extent()])\n\t\n\t      var brushBGenter = brushBG.enter()\n\t          .append('g');\n\t\n\t      brushBGenter.append('rect')\n\t          .attr('class', 'left')\n\t          .attr('x', 0)\n\t          .attr('y', 0)\n\t          .attr('height', availableHeight2);\n\t\n\t      brushBGenter.append('rect')\n\t          .attr('class', 'right')\n\t          .attr('x', 0)\n\t          .attr('y', 0)\n\t          .attr('height', availableHeight2);\n\t\n\t      var gBrush = g.select('.nv-x.nv-brush')\n\t          .call(brush);\n\t      gBrush.selectAll('rect')\n\t          //.attr('y', -5)\n\t          .attr('height', availableHeight2);\n\t      gBrush.selectAll('.resize').append('path').attr('d', resizePath);\n\t\n\t      //------------------------------------------------------------\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Secondary (Context) Axes\n\t\n\t      x2Axis\n\t        .ticks( availableWidth / 100 )\n\t        .tickSize(-availableHeight2, 0);\n\t\n\t      g.select('.nv-context .nv-x.nv-axis')\n\t          .attr('transform', 'translate(0,' + y3.range()[0] + ')');\n\t      g.select('.nv-context .nv-x.nv-axis')\n\t          .call(x2Axis);\n\t\n\t\n\t      y3Axis\n\t        .scale(y3)\n\t        .ticks( availableHeight2 / 36 )\n\t        .tickSize( -availableWidth, 0);\n\t\n\t      g.select('.nv-context .nv-y1.nv-axis')\n\t          .style('opacity', dataBars.length ? 1 : 0)\n\t          .attr('transform', 'translate(0,' + x2.range()[0] + ')');\n\t          \n\t      g.select('.nv-context .nv-y1.nv-axis')\n\t          .call(y3Axis);\n\t          \n\t\n\t      y4Axis\n\t        .scale(y4)\n\t        .ticks( availableHeight2 / 36 )\n\t        .tickSize(dataBars.length ? 0 : -availableWidth, 0); // Show the y2 rules only if y1 has none\n\t\n\t      g.select('.nv-context .nv-y2.nv-axis')\n\t          .style('opacity', dataLines.length ? 1 : 0)\n\t          .attr('transform', 'translate(' + x2.range()[1] + ',0)');\n\t\n\t      g.select('.nv-context .nv-y2.nv-axis')\n\t          .call(y4Axis);\n\t          \n\t      //------------------------------------------------------------\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t      legend.dispatch.on('stateChange', function(newState) { \n\t        chart.update();\n\t      });\n\t\n\t      dispatch.on('tooltipShow', function(e) {\n\t        if (tooltips) showTooltip(e, that.parentNode);\n\t      });\n\t\n\t      //============================================================\n\t\n\t\n\t      //============================================================\n\t      // Functions\n\t      //------------------------------------------------------------\n\t\n\t      // Taken from crossfilter (http://square.github.com/crossfilter/)\n\t      function resizePath(d) {\n\t        var e = +(d == 'e'),\n\t            x = e ? 1 : -1,\n\t            y = availableHeight2 / 3;\n\t        return 'M' + (.5 * x) + ',' + y\n\t            + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n\t            + 'V' + (2 * y - 6)\n\t            + 'A6,6 0 0 ' + e + ' ' + (.5 * x) + ',' + (2 * y)\n\t            + 'Z'\n\t            + 'M' + (2.5 * x) + ',' + (y + 8)\n\t            + 'V' + (2 * y - 8)\n\t            + 'M' + (4.5 * x) + ',' + (y + 8)\n\t            + 'V' + (2 * y - 8);\n\t      }\n\t\n\t\n\t      function updateBrushBG() {\n\t        if (!brush.empty()) brush.extent(brushExtent);\n\t        brushBG\n\t            .data([brush.empty() ? x2.domain() : brushExtent])\n\t            .each(function(d,i) {\n\t              var leftWidth = x2(d[0]) - x2.range()[0],\n\t                  rightWidth = x2.range()[1] - x2(d[1]);\n\t              d3.select(this).select('.left')\n\t                .attr('width',  leftWidth < 0 ? 0 : leftWidth);\n\t\n\t              d3.select(this).select('.right')\n\t                .attr('x', x2(d[1]))\n\t                .attr('width', rightWidth < 0 ? 0 : rightWidth);\n\t            });\n\t      }\n\t\n\t\n\t      function onBrush() {\n\t        brushExtent = brush.empty() ? null : brush.extent();\n\t        extent = brush.empty() ? x2.domain() : brush.extent();\n\t\n\t\n\t        dispatch.brush({extent: extent, brush: brush});\n\t\n\t        updateBrushBG();\n\t\n\t\n\t        //------------------------------------------------------------\n\t        // Prepare Main (Focus) Bars and Lines\n\t        \n\t        bars\n\t        .width(availableWidth)\n\t        .height(availableHeight1)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color(d, i);\n\t        }).filter(function(d,i) { return !data[i].disabled && data[i].bar }));\n\t\n\t\n\t        lines\n\t        .width(availableWidth)\n\t        .height(availableHeight1)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color(d, i);\n\t        }).filter(function(d,i) { return !data[i].disabled && !data[i].bar }));\n\t\n\t        var focusBarsWrap = g.select('.nv-focus .nv-barsWrap')\n\t            .datum(!dataBars.length ? [{values:[]}] :\n\t              dataBars\n\t                .map(function(d,i) {\n\t                  return {\n\t                    key: d.key,\n\t                    values: d.values.filter(function(d,i) {\n\t                      return bars.x()(d,i) >= extent[0] && bars.x()(d,i) <= extent[1];\n\t                    })\n\t                  }\n\t                })\n\t            );\n\t        \n\t        var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n\t            .datum(dataLines[0].disabled ? [{values:[]}] :\n\t              dataLines\n\t                .map(function(d,i) {\n\t                  return {\n\t                    key: d.key,\n\t                    values: d.values.filter(function(d,i) {\n\t                      return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n\t                    })\n\t                  }\n\t                })\n\t             );\n\t                 \n\t        //------------------------------------------------------------\n\t        \n\t        \n\t        //------------------------------------------------------------\n\t        // Update Main (Focus) X Axis\n\t\n\t        if (dataBars.length) {\n\t            x = bars.xScale();\n\t        } else {\n\t            x = lines.xScale();\n\t        }\n\t        \n\t        xAxis\n\t        .scale(x)\n\t        .ticks( availableWidth / 100 )\n\t        .tickSize(-availableHeight1, 0);\n\t\n\t        xAxis.domain([Math.ceil(extent[0]), Math.floor(extent[1])]);\n\t        \n\t        g.select('.nv-x.nv-axis')\n\t          .call(xAxis);\n\t        //------------------------------------------------------------\n\t        \n\t        \n\t        //------------------------------------------------------------\n\t        // Update Main (Focus) Bars and Lines\n\t\n\t        focusBarsWrap.call(bars);\n\t        focusLinesWrap.call(lines);\n\t        \n\t        //------------------------------------------------------------\n\t        \n\t          \n\t        //------------------------------------------------------------\n\t        // Setup and Update Main (Focus) Y Axes\n\t        \n\t        g.select('.nv-focus .nv-x.nv-axis')\n\t          .attr('transform', 'translate(0,' + y1.range()[0] + ')');\n\t\n\t\n\t        y1Axis\n\t        .scale(y1)\n\t        .ticks( availableHeight1 / 36 )\n\t        .tickSize(-availableWidth, 0);\n\t\n\t        g.select('.nv-focus .nv-y1.nv-axis')\n\t          .style('opacity', dataBars.length ? 1 : 0);\n\t\n\t\n\t        y2Axis\n\t        .scale(y2)\n\t        .ticks( availableHeight1 / 36 )\n\t        .tickSize(dataBars.length ? 0 : -availableWidth, 0); // Show the y2 rules only if y1 has none\n\t\n\t        g.select('.nv-focus .nv-y2.nv-axis')\n\t          .style('opacity', dataLines.length ? 1 : 0)\n\t          .attr('transform', 'translate(' + x.range()[1] + ',0)');\n\t\n\t        g.select('.nv-focus .nv-y1.nv-axis')\n\t            .call(y1Axis);\n\t        g.select('.nv-focus .nv-y2.nv-axis')\n\t            .call(y2Axis);\n\t      }\n\t\n\t      //============================================================\n\t\n\t      onBrush();\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  lines.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  lines.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  bars.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  bars.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.dispatch = dispatch;\n\t  chart.legend = legend;\n\t  chart.lines = lines;\n\t  chart.lines2 = lines2;\n\t  chart.bars = bars;\n\t  chart.bars2 = bars2;\n\t  chart.xAxis = xAxis;\n\t  chart.x2Axis = x2Axis;\n\t  chart.y1Axis = y1Axis;\n\t  chart.y2Axis = y2Axis;\n\t  chart.y3Axis = y3Axis;\n\t  chart.y4Axis = y4Axis;\n\t\n\t  d3.rebind(chart, lines, 'defined', 'size', 'clipVoronoi', 'interpolate');\n\t  //TODO: consider rebinding x, y and some other stuff, and simply do soemthign lile bars.x(lines.x()), etc.\n\t  //d3.rebind(chart, lines, 'x', 'y', 'size', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi', 'id');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  chart.x = function(_) {\n\t    if (!arguments.length) return getX;\n\t    getX = _;\n\t    lines.x(_);\n\t    bars.x(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.y = function(_) {\n\t    if (!arguments.length) return getY;\n\t    getY = _;\n\t    lines.y(_);\n\t    bars.y(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    legend.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.showLegend = function(_) {\n\t    if (!arguments.length) return showLegend;\n\t    showLegend = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.brushExtent = function(_) {\n\t    if (!arguments.length) return brushExtent;\n\t    brushExtent = _;\n\t    return chart;\n\t  };\n\t\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.multiBar = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t    , width = 960\n\t    , height = 500\n\t    , x = d3.scale.ordinal()\n\t    , y = d3.scale.linear()\n\t    , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n\t    , getX = function(d) { return d.x }\n\t    , getY = function(d) { return d.y }\n\t    , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n\t    , clipEdge = true\n\t    , stacked = false\n\t    , stackOffset = 'zero' // options include 'silhouette', 'wiggle', 'expand', 'zero', or a custom function\n\t    , color = nv.utils.defaultColor()\n\t    , hideable = false\n\t    , barColor = null // adding the ability to set the color for each rather than the whole group\n\t    , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled\n\t    , delay = 1200\n\t    , xDomain\n\t    , yDomain\n\t    , xRange\n\t    , yRange\n\t    , groupSpacing = 0.1\n\t    , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout')\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var x0, y0 //used to store previous scales\n\t      ;\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var availableWidth = width - margin.left - margin.right,\n\t          availableHeight = height - margin.top - margin.bottom,\n\t          container = d3.select(this);\n\t\n\t      if(hideable && data.length) hideable = [{\n\t        values: data[0].values.map(function(d) {\n\t        return {\n\t          x: d.x,\n\t          y: 0,\n\t          series: d.series,\n\t          size: 0.01\n\t        };}\n\t      )}];\n\t\n\t      if (stacked)\n\t        data = d3.layout.stack()\n\t                 .offset(stackOffset)\n\t                 .values(function(d){ return d.values })\n\t                 .y(getY)\n\t                 (!data.length && hideable ? hideable : data);\n\t\n\t\n\t      //add series index to each data point for reference\n\t      data.forEach(function(series, i) {\n\t        series.values.forEach(function(point) {\n\t          point.series = i;\n\t        });\n\t      });\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // HACK for negative value stacking\n\t      if (stacked)\n\t        data[0].values.map(function(d,i) {\n\t          var posBase = 0, negBase = 0;\n\t          data.map(function(d) {\n\t            var f = d.values[i]\n\t            f.size = Math.abs(f.y);\n\t            if (f.y<0)  {\n\t              f.y1 = negBase;\n\t              negBase = negBase - f.size;\n\t            } else\n\t            {\n\t              f.y1 = f.size + posBase;\n\t              posBase = posBase + f.size;\n\t            }\n\t          });\n\t        });\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      // remap and flatten the data for use in calculating the scales' domains\n\t      var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n\t            data.map(function(d) {\n\t              return d.values.map(function(d,i) {\n\t                return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1 }\n\t              })\n\t            });\n\t\n\t      x   .domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n\t          .rangeBands(xRange || [0, availableWidth], groupSpacing);\n\t\n\t      //y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return d.y + (stacked ? d.y1 : 0) }).concat(forceY)))\n\t      y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return stacked ? (d.y > 0 ? d.y1 : d.y1 + d.y ) : d.y }).concat(forceY)))\n\t          .range(yRange || [availableHeight, 0]);\n\t\n\t      // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n\t      if (x.domain()[0] === x.domain()[1])\n\t        x.domain()[0] ?\n\t            x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n\t          : x.domain([-1,1]);\n\t\n\t      if (y.domain()[0] === y.domain()[1])\n\t        y.domain()[0] ?\n\t            y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n\t          : y.domain([-1,1]);\n\t\n\t\n\t      x0 = x0 || x;\n\t      y0 = y0 || y;\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-multibar').data([data]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibar');\n\t      var defsEnter = wrapEnter.append('defs');\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g')\n\t\n\t      gEnter.append('g').attr('class', 'nv-groups');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t\n\t      defsEnter.append('clipPath')\n\t          .attr('id', 'nv-edge-clip-' + id)\n\t        .append('rect');\n\t      wrap.select('#nv-edge-clip-' + id + ' rect')\n\t          .attr('width', availableWidth)\n\t          .attr('height', availableHeight);\n\t\n\t      g   .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\t\n\t\n\t\n\t      var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n\t          .data(function(d) { return d }, function(d,i) { return i });\n\t      groups.enter().append('g')\n\t          .style('stroke-opacity', 1e-6)\n\t          .style('fill-opacity', 1e-6);\n\t      groups.exit()\n\t        .selectAll('rect.nv-bar')\n\t          .attr('y', function(d) { return stacked ? y0(d.y0) : y0(0) })\n\t          .attr('height', 0)\n\t          .remove();\n\t      groups\n\t          .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n\t          .classed('hover', function(d) { return d.hover })\n\t          .style('fill', function(d,i){ return color(d, i) })\n\t          .style('stroke', function(d,i){ return color(d, i) });\n\t      groups\n\t          .style('stroke-opacity', 1)\n\t          .style('fill-opacity', .75);\n\t\n\t\n\t      var bars = groups.selectAll('rect.nv-bar')\n\t          .data(function(d) { return (hideable && !data.length) ? hideable.values : d.values });\n\t\n\t      bars.exit().remove();\n\t\n\t\n\t      var barsEnter = bars.enter().append('rect')\n\t          .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n\t          .attr('x', function(d,i,j) {\n\t              return stacked ? 0 : (j * x.rangeBand() / data.length )\n\t          })\n\t          .attr('y', function(d) { return y0(stacked ? d.y0 : 0) })\n\t          .attr('height', 0)\n\t          .attr('width', x.rangeBand() / (stacked ? 1 : data.length) )\n\t          .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })\n\t          ;\n\t      bars\n\t          .style('fill', function(d,i,j){ return color(d, j, i);  })\n\t          .style('stroke', function(d,i,j){ return color(d, j, i); })\n\t          .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n\t            d3.select(this).classed('hover', true);\n\t            dispatch.elementMouseover({\n\t              value: getY(d,i),\n\t              point: d,\n\t              series: data[d.series],\n\t              pos: [x(getX(d,i)) + (x.rangeBand() * (stacked ? data.length / 2 : d.series + .5) / data.length), y(getY(d,i) + (stacked ? d.y0 : 0))],  // TODO: Figure out why the value appears to be shifted\n\t              pointIndex: i,\n\t              seriesIndex: d.series,\n\t              e: d3.event\n\t            });\n\t          })\n\t          .on('mouseout', function(d,i) {\n\t            d3.select(this).classed('hover', false);\n\t            dispatch.elementMouseout({\n\t              value: getY(d,i),\n\t              point: d,\n\t              series: data[d.series],\n\t              pointIndex: i,\n\t              seriesIndex: d.series,\n\t              e: d3.event\n\t            });\n\t          })\n\t          .on('click', function(d,i) {\n\t            dispatch.elementClick({\n\t              value: getY(d,i),\n\t              point: d,\n\t              series: data[d.series],\n\t              pos: [x(getX(d,i)) + (x.rangeBand() * (stacked ? data.length / 2 : d.series + .5) / data.length), y(getY(d,i) + (stacked ? d.y0 : 0))],  // TODO: Figure out why the value appears to be shifted\n\t              pointIndex: i,\n\t              seriesIndex: d.series,\n\t              e: d3.event\n\t            });\n\t            d3.event.stopPropagation();\n\t          })\n\t          .on('dblclick', function(d,i) {\n\t            dispatch.elementDblClick({\n\t              value: getY(d,i),\n\t              point: d,\n\t              series: data[d.series],\n\t              pos: [x(getX(d,i)) + (x.rangeBand() * (stacked ? data.length / 2 : d.series + .5) / data.length), y(getY(d,i) + (stacked ? d.y0 : 0))],  // TODO: Figure out why the value appears to be shifted\n\t              pointIndex: i,\n\t              seriesIndex: d.series,\n\t              e: d3.event\n\t            });\n\t            d3.event.stopPropagation();\n\t          });\n\t      bars\n\t          .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n\t          \n\t          .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })\n\t\n\t      if (barColor) {\n\t        if (!disabled) disabled = data.map(function() { return true });\n\t        bars\n\t          .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })\n\t          .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });\n\t      }\n\t\n\t\n\t      if (stacked)\n\t          bars\n\t            .attr('y', function(d,i) {\n\t\n\t              return y((stacked ? d.y1 : 0));\n\t            })\n\t            .attr('height', function(d,i) {\n\t              return Math.max(Math.abs(y(d.y + (stacked ? d.y0 : 0)) - y((stacked ? d.y0 : 0))),1);\n\t            })\n\t            .attr('x', function(d,i) {\n\t                  return stacked ? 0 : (d.series * x.rangeBand() / data.length )\n\t            })\n\t            .attr('width', x.rangeBand() / (stacked ? 1 : data.length) );\n\t      else\n\t          bars\n\t            .attr('x', function(d,i) {\n\t              return d.series * x.rangeBand() / data.length\n\t            })\n\t            .attr('width', x.rangeBand() / data.length)\n\t            .attr('y', function(d,i) {\n\t                return getY(d,i) < 0 ?\n\t                        y(0) :\n\t                        y(0) - y(getY(d,i)) < 1 ?\n\t                          y(0) - 1 :\n\t                        y(getY(d,i)) || 0;\n\t            })\n\t            .attr('height', function(d,i) {\n\t                return Math.max(Math.abs(y(getY(d,i)) - y(0)),1) || 0;\n\t            });\n\t\n\t\n\t\n\t      //store old scales for use in transitions on update\n\t      x0 = x.copy();\n\t      y0 = y.copy();\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  chart.dispatch = dispatch;\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.x = function(_) {\n\t    if (!arguments.length) return getX;\n\t    getX = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.y = function(_) {\n\t    if (!arguments.length) return getY;\n\t    getY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xScale = function(_) {\n\t    if (!arguments.length) return x;\n\t    x = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yScale = function(_) {\n\t    if (!arguments.length) return y;\n\t    y = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xDomain = function(_) {\n\t    if (!arguments.length) return xDomain;\n\t    xDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yDomain = function(_) {\n\t    if (!arguments.length) return yDomain;\n\t    yDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xRange = function(_) {\n\t    if (!arguments.length) return xRange;\n\t    xRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yRange = function(_) {\n\t    if (!arguments.length) return yRange;\n\t    yRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.forceY = function(_) {\n\t    if (!arguments.length) return forceY;\n\t    forceY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.stacked = function(_) {\n\t    if (!arguments.length) return stacked;\n\t    stacked = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.stackOffset = function(_) {\n\t    if (!arguments.length) return stackOffset;\n\t    stackOffset = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.clipEdge = function(_) {\n\t    if (!arguments.length) return clipEdge;\n\t    clipEdge = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.barColor = function(_) {\n\t    if (!arguments.length) return barColor;\n\t    barColor = nv.utils.getColor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.disabled = function(_) {\n\t    if (!arguments.length) return disabled;\n\t    disabled = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.id = function(_) {\n\t    if (!arguments.length) return id;\n\t    id = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.hideable = function(_) {\n\t    if (!arguments.length) return hideable;\n\t    hideable = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.delay = function(_) {\n\t    if (!arguments.length) return delay;\n\t    delay = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.groupSpacing = function(_) {\n\t    if (!arguments.length) return groupSpacing;\n\t    groupSpacing = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.multiBarChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var multibar = nv.models.multiBar()\n\t    , xAxis = nv.models.axis()\n\t    , yAxis = nv.models.axis()\n\t    , legend = nv.models.legend()\n\t    , controls = nv.models.legend()\n\t    ;\n\t\n\t  var margin = {top: 30, right: 20, bottom: 50, left: 60}\n\t    , width = null\n\t    , height = null\n\t    , color = nv.utils.defaultColor()\n\t    , showControls = true\n\t    , showLegend = true\n\t    , showXAxis = true\n\t    , showYAxis = true\n\t    , rightAlignYAxis = false\n\t    , reduceXTicks = true // if false a tick will show for every data point\n\t    , staggerLabels = false\n\t    , rotateLabels = 0\n\t    , tooltips = true\n\t    , tooltip = function(key, x, y, e, graph) {\n\t        return '<h3>' + key + '</h3>' +\n\t               '<p>' +  y + ' on ' + x + '</p>'\n\t      }\n\t    , x //can be accessed via chart.xScale()\n\t    , y //can be accessed via chart.yScale()\n\t    , state = { stacked: false }\n\t    , defaultState = null\n\t    , noData = \"No Data Available.\"\n\t    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n\t    , controlWidth = function() { return showControls ? 180 : 0 }\n\t    , transitionDuration = 0\n\t    ;\n\t\n\t  multibar\n\t    .stacked(false)\n\t    ;\n\t  xAxis\n\t    .orient('bottom')\n\t    .tickPadding(7)\n\t    .highlightZero(true)\n\t    .showMaxMin(false)\n\t    .tickFormat(function(d) { return d })\n\t    ;\n\t  yAxis\n\t    .orient((rightAlignYAxis) ? 'right' : 'left')\n\t    .tickFormat(d3.format(',.1f'))\n\t    ;\n\t\n\t  controls.updateState(false);\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t        x = xAxis.tickFormat()(multibar.x()(e.point, e.pointIndex)),\n\t        y = yAxis.tickFormat()(multibar.y()(e.point, e.pointIndex)),\n\t        content = tooltip(e.series.key, x, y, e, chart);\n\t\n\t    nv.tooltip.show([left, top], content, e.value < 0 ? 'n' : 's', null, offsetElement);\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this),\n\t          that = this;\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t\n\t      chart.update = function() { container.call(chart) };\n\t      chart.container = this;\n\t\n\t      //set state.disabled\n\t      state.disabled = data.map(function(d) { return !!d.disabled });\n\t\n\t      if (!defaultState) {\n\t        var key;\n\t        defaultState = {};\n\t        for (key in state) {\n\t          if (state[key] instanceof Array)\n\t            defaultState[key] = state[key].slice(0);\n\t          else\n\t            defaultState[key] = state[key];\n\t        }\n\t      }\n\t      //------------------------------------------------------------\n\t      // Display noData message if there's nothing to show.\n\t\n\t      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', margin.top + availableHeight / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x = multibar.xScale();\n\t      y = multibar.yScale();\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-multiBarWithLegend').data([data]);\n\t      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarWithLegend').append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-x nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-y nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-barsWrap');\n\t      gEnter.append('g').attr('class', 'nv-legendWrap');\n\t      gEnter.append('g').attr('class', 'nv-controlsWrap');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Legend\n\t\n\t      if (showLegend) {\n\t        legend.width(availableWidth - controlWidth());\n\t\n\t        if (multibar.barColor())\n\t          data.forEach(function(series,i) {\n\t            series.color = d3.rgb('#ccc').darker(i * 1.5).toString();\n\t          })\n\t\n\t        g.select('.nv-legendWrap')\n\t            .datum(data)\n\t            .call(legend);\n\t\n\t        if ( margin.top != legend.height()) {\n\t          margin.top = legend.height();\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t        }\n\t\n\t        g.select('.nv-legendWrap')\n\t            .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Controls\n\t\n\t      if (showControls) {\n\t        var controlsData = [\n\t          { key: 'Grouped', disabled: multibar.stacked() },\n\t          { key: 'Stacked', disabled: !multibar.stacked() }\n\t        ];\n\t\n\t        controls.width(controlWidth()).color(['#444', '#444', '#444']);\n\t        g.select('.nv-controlsWrap')\n\t            .datum(controlsData)\n\t            .attr('transform', 'translate(0,' + (-margin.top) +')')\n\t            .call(controls);\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      if (rightAlignYAxis) {\n\t          g.select(\".nv-y.nv-axis\")\n\t              .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t      // Main Chart Component(s)\n\t\n\t      multibar\n\t        .disabled(data.map(function(series) { return series.disabled }))\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color(d, i);\n\t        }).filter(function(d,i) { return !data[i].disabled }))\n\t\n\t\n\t      var barsWrap = g.select('.nv-barsWrap')\n\t          .datum(data.filter(function(d) { return !d.disabled }))\n\t\n\t      barsWrap.call(multibar);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Axes\n\t\n\t      if (showXAxis) {\n\t          xAxis\n\t            .scale(x)\n\t            .ticks( availableWidth / 100 )\n\t            .tickSize(-availableHeight, 0);\n\t\n\t          g.select('.nv-x.nv-axis')\n\t              .attr('transform', 'translate(0,' + y.range()[0] + ')');\n\t          g.select('.nv-x.nv-axis')\n\t              .call(xAxis);\n\t\n\t          var xTicks = g.select('.nv-x.nv-axis > g').selectAll('g');\n\t\n\t          xTicks\n\t              .selectAll('line, text')\n\t              .style('opacity', 1)\n\t\n\t          if (staggerLabels) {\n\t              var getTranslate = function(x,y) {\n\t                  return \"translate(\" + x + \",\" + y + \")\";\n\t              };\n\t\n\t              var staggerUp = 5, staggerDown = 17;  //pixels to stagger by\n\t              // Issue #140\n\t              xTicks\n\t                .selectAll(\"text\")\n\t                .attr('transform', function(d,i,j) { \n\t                    return  getTranslate(0, (j % 2 == 0 ? staggerUp : staggerDown));\n\t                  });\n\t\n\t              var totalInBetweenTicks = d3.selectAll(\".nv-x.nv-axis .nv-wrap g g text\")[0].length;\n\t              g.selectAll(\".nv-x.nv-axis .nv-axisMaxMin text\")\n\t                .attr(\"transform\", function(d,i) {\n\t                    return getTranslate(0, (i === 0 || totalInBetweenTicks % 2 !== 0) ? staggerDown : staggerUp);\n\t                });\n\t          }\n\t\n\t          if (reduceXTicks)\n\t            xTicks\n\t              .filter(function(d,i) {\n\t                  return i % Math.ceil(data[0].values.length / (availableWidth / 100)) !== 0;\n\t                })\n\t              .selectAll('text, line')\n\t              .style('opacity', 0);\n\t\n\t          if(rotateLabels)\n\t            xTicks\n\t              .selectAll('.tick text')\n\t              .attr('transform', 'rotate(' + rotateLabels + ' 0,0)')\n\t              .style('text-anchor', rotateLabels > 0 ? 'start' : 'end');\n\t          \n\t          g.select('.nv-x.nv-axis').selectAll('g.nv-axisMaxMin text')\n\t              .style('opacity', 1);\n\t      }\n\t\n\t\n\t      if (showYAxis) {      \n\t          yAxis\n\t            .scale(y)\n\t            .ticks( availableHeight / 36 )\n\t            .tickSize( -availableWidth, 0);\n\t\n\t          g.select('.nv-y.nv-axis')\n\t              .call(yAxis);\n\t      }\n\t\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t      legend.dispatch.on('stateChange', function(newState) { \n\t        state = newState;\n\t        dispatch.stateChange(state);\n\t        chart.update();\n\t      });\n\t\n\t      controls.dispatch.on('legendClick', function(d,i) {\n\t        if (!d.disabled) return;\n\t        controlsData = controlsData.map(function(s) {\n\t          s.disabled = true;\n\t          return s;\n\t        });\n\t        d.disabled = false;\n\t\n\t        switch (d.key) {\n\t          case 'Grouped':\n\t            multibar.stacked(false);\n\t            break;\n\t          case 'Stacked':\n\t            multibar.stacked(true);\n\t            break;\n\t        }\n\t\n\t        state.stacked = multibar.stacked();\n\t        dispatch.stateChange(state);\n\t\n\t        chart.update();\n\t      });\n\t\n\t      dispatch.on('tooltipShow', function(e) {\n\t        if (tooltips) showTooltip(e, that.parentNode)\n\t      });\n\t\n\t      // Update chart from a state object passed to event handler\n\t      dispatch.on('changeState', function(e) {\n\t\n\t        if (typeof e.disabled !== 'undefined') {\n\t          data.forEach(function(series,i) {\n\t            series.disabled = e.disabled[i];\n\t          });\n\t\n\t          state.disabled = e.disabled;\n\t        }\n\t\n\t        if (typeof e.stacked !== 'undefined') {\n\t          multibar.stacked(e.stacked);\n\t          state.stacked = e.stacked;\n\t        }\n\t\n\t        chart.update();\n\t      });\n\t\n\t      //============================================================\n\t\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  multibar.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  multibar.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.dispatch = dispatch;\n\t  chart.multibar = multibar;\n\t  chart.legend = legend;\n\t  chart.xAxis = xAxis;\n\t  chart.yAxis = yAxis;\n\t\n\t  d3.rebind(chart, multibar, 'x', 'y', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'clipEdge',\n\t   'id', 'stacked', 'stackOffset', 'delay', 'barColor','groupSpacing');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    legend.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.showControls = function(_) {\n\t    if (!arguments.length) return showControls;\n\t    showControls = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showLegend = function(_) {\n\t    if (!arguments.length) return showLegend;\n\t    showLegend = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showXAxis = function(_) {\n\t    if (!arguments.length) return showXAxis;\n\t    showXAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showYAxis = function(_) {\n\t    if (!arguments.length) return showYAxis;\n\t    showYAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.rightAlignYAxis = function(_) {\n\t    if(!arguments.length) return rightAlignYAxis;\n\t    rightAlignYAxis = _;\n\t    yAxis.orient( (_) ? 'right' : 'left');\n\t    return chart;\n\t  };\n\t\n\t  chart.reduceXTicks= function(_) {\n\t    if (!arguments.length) return reduceXTicks;\n\t    reduceXTicks = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.rotateLabels = function(_) {\n\t    if (!arguments.length) return rotateLabels;\n\t    rotateLabels = _;\n\t    return chart;\n\t  }\n\t\n\t  chart.staggerLabels = function(_) {\n\t    if (!arguments.length) return staggerLabels;\n\t    staggerLabels = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltip = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.state = function(_) {\n\t    if (!arguments.length) return state;\n\t    state = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.defaultState = function(_) {\n\t    if (!arguments.length) return defaultState;\n\t    defaultState = _;\n\t    return chart;\n\t  };\n\t  \n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.transitionDuration = function(_) {\n\t    if (!arguments.length) return transitionDuration;\n\t    transitionDuration = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.multiBarHorizontal = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t    , width = 960\n\t    , height = 500\n\t    , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n\t    , x = d3.scale.ordinal()\n\t    , y = d3.scale.linear()\n\t    , getX = function(d) { return d.x }\n\t    , getY = function(d) { return d.y }\n\t    , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n\t    , color = nv.utils.defaultColor()\n\t    , barColor = null // adding the ability to set the color for each rather than the whole group\n\t    , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled\n\t    , stacked = false\n\t    , showValues = false\n\t    , showBarLabels = false\n\t    , valuePadding = 60\n\t    , valueFormat = d3.format(',.2f')\n\t    , delay = 1200\n\t    , xDomain\n\t    , yDomain\n\t    , xRange\n\t    , yRange\n\t    , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout')\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var x0, y0 //used to store previous scales\n\t      ;\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var availableWidth = width - margin.left - margin.right,\n\t          availableHeight = height - margin.top - margin.bottom,\n\t          container = d3.select(this);\n\t\n\t\n\t      if (stacked)\n\t        data = d3.layout.stack()\n\t                 .offset('zero')\n\t                 .values(function(d){ return d.values })\n\t                 .y(getY)\n\t                 (data);\n\t\n\t\n\t      //add series index to each data point for reference\n\t      data.forEach(function(series, i) {\n\t        series.values.forEach(function(point) {\n\t          point.series = i;\n\t        });\n\t      });\n\t\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // HACK for negative value stacking\n\t      if (stacked)\n\t        data[0].values.map(function(d,i) {\n\t          var posBase = 0, negBase = 0;\n\t          data.map(function(d) {\n\t            var f = d.values[i]\n\t            f.size = Math.abs(f.y);\n\t            if (f.y<0)  {\n\t              f.y1 = negBase - f.size;\n\t              negBase = negBase - f.size;\n\t            } else\n\t            {\n\t              f.y1 = posBase;\n\t              posBase = posBase + f.size;\n\t            }\n\t          });\n\t        });\n\t\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      // remap and flatten the data for use in calculating the scales' domains\n\t      var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n\t            data.map(function(d) {\n\t              return d.values.map(function(d,i) {\n\t                return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1 }\n\t              })\n\t            });\n\t\n\t      x   .domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n\t          .rangeBands(xRange || [0, availableHeight], .1);\n\t\n\t      //y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return d.y + (stacked ? d.y0 : 0) }).concat(forceY)))\n\t      y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return stacked ? (d.y > 0 ? d.y1 + d.y : d.y1 ) : d.y }).concat(forceY)))\n\t\n\t      if (showValues && !stacked)\n\t        y.range(yRange || [(y.domain()[0] < 0 ? valuePadding : 0), availableWidth - (y.domain()[1] > 0 ? valuePadding : 0) ]);\n\t      else\n\t        y.range(yRange || [0, availableWidth]);\n\t\n\t      x0 = x0 || x;\n\t      y0 = y0 || d3.scale.linear().domain(y.domain()).range([y(0),y(0)]);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = d3.select(this).selectAll('g.nv-wrap.nv-multibarHorizontal').data([data]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibarHorizontal');\n\t      var defsEnter = wrapEnter.append('defs');\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-groups');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t\n\t      var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n\t          .data(function(d) { return d }, function(d,i) { return i });\n\t      groups.enter().append('g')\n\t          .style('stroke-opacity', 1e-6)\n\t          .style('fill-opacity', 1e-6);\n\t      groups.exit()\n\t          .style('stroke-opacity', 1e-6)\n\t          .style('fill-opacity', 1e-6)\n\t          .remove();\n\t      groups\n\t          .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n\t          .classed('hover', function(d) { return d.hover })\n\t          .style('fill', function(d,i){ return color(d, i) })\n\t          .style('stroke', function(d,i){ return color(d, i) });\n\t      groups\n\t          .style('stroke-opacity', 1)\n\t          .style('fill-opacity', .75);\n\t\n\t\n\t      var bars = groups.selectAll('g.nv-bar')\n\t          .data(function(d) { return d.values });\n\t\n\t      bars.exit().remove();\n\t\n\t\n\t      var barsEnter = bars.enter().append('g')\n\t          .attr('transform', function(d,i,j) {\n\t              return 'translate(' + y0(stacked ? d.y0 : 0) + ',' + (stacked ? 0 : (j * x.rangeBand() / data.length ) + x(getX(d,i))) + ')'\n\t          });\n\t\n\t      barsEnter.append('rect')\n\t          .attr('width', 0)\n\t          .attr('height', x.rangeBand() / (stacked ? 1 : data.length) )\n\t\n\t      bars\n\t          .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n\t            d3.select(this).classed('hover', true);\n\t            dispatch.elementMouseover({\n\t              value: getY(d,i),\n\t              point: d,\n\t              series: data[d.series],\n\t              pos: [ y(getY(d,i) + (stacked ? d.y0 : 0)), x(getX(d,i)) + (x.rangeBand() * (stacked ? data.length / 2 : d.series + .5) / data.length) ],\n\t              pointIndex: i,\n\t              seriesIndex: d.series,\n\t              e: d3.event\n\t            });\n\t          })\n\t          .on('mouseout', function(d,i) {\n\t            d3.select(this).classed('hover', false);\n\t            dispatch.elementMouseout({\n\t              value: getY(d,i),\n\t              point: d,\n\t              series: data[d.series],\n\t              pointIndex: i,\n\t              seriesIndex: d.series,\n\t              e: d3.event\n\t            });\n\t          })\n\t          .on('click', function(d,i) {\n\t            dispatch.elementClick({\n\t              value: getY(d,i),\n\t              point: d,\n\t              series: data[d.series],\n\t              pos: [x(getX(d,i)) + (x.rangeBand() * (stacked ? data.length / 2 : d.series + .5) / data.length), y(getY(d,i) + (stacked ? d.y0 : 0))],  // TODO: Figure out why the value appears to be shifted\n\t              pointIndex: i,\n\t              seriesIndex: d.series,\n\t              e: d3.event\n\t            });\n\t            d3.event.stopPropagation();\n\t          })\n\t          .on('dblclick', function(d,i) {\n\t            dispatch.elementDblClick({\n\t              value: getY(d,i),\n\t              point: d,\n\t              series: data[d.series],\n\t              pos: [x(getX(d,i)) + (x.rangeBand() * (stacked ? data.length / 2 : d.series + .5) / data.length), y(getY(d,i) + (stacked ? d.y0 : 0))],  // TODO: Figure out why the value appears to be shifted\n\t              pointIndex: i,\n\t              seriesIndex: d.series,\n\t              e: d3.event\n\t            });\n\t            d3.event.stopPropagation();\n\t          });\n\t\n\t\n\t      barsEnter.append('text');\n\t\n\t      if (showValues && !stacked) {\n\t        bars.select('text')\n\t            .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'end' : 'start' })\n\t            .attr('y', x.rangeBand() / (data.length * 2))\n\t            .attr('dy', '.32em')\n\t            .text(function(d,i) { return valueFormat(getY(d,i)) })\n\t        bars\n\t          .select('text')\n\t            .attr('x', function(d,i) { return getY(d,i) < 0 ? -4 : y(getY(d,i)) - y(0) + 4 })\n\t      } else {\n\t        bars.selectAll('text').text('');\n\t      }\n\t\n\t      if (showBarLabels && !stacked) {\n\t        barsEnter.append('text').classed('nv-bar-label',true);\n\t        bars.select('text.nv-bar-label')\n\t            .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'start' : 'end' })\n\t            .attr('y', x.rangeBand() / (data.length * 2))\n\t            .attr('dy', '.32em')\n\t            .text(function(d,i) { return getX(d,i) });\n\t        bars\n\t          .select('text.nv-bar-label')\n\t            .attr('x', function(d,i) { return getY(d,i) < 0 ? y(0) - y(getY(d,i)) + 4 : -4 });\n\t      }\n\t      else {\n\t        bars.selectAll('text.nv-bar-label').text('');\n\t      }\n\t\n\t      bars\n\t          .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n\t\n\t      if (barColor) {\n\t        if (!disabled) disabled = data.map(function() { return true });\n\t        bars\n\t          .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })\n\t          .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });\n\t      }\n\t\n\t      if (stacked)\n\t        bars\n\t            .attr('transform', function(d,i) {\n\t              return 'translate(' + y(d.y1) + ',' + x(getX(d,i)) + ')'\n\t            })\n\t          .select('rect')\n\t            .attr('width', function(d,i) {\n\t              return Math.abs(y(getY(d,i) + d.y0) - y(d.y0))\n\t            })\n\t            .attr('height', x.rangeBand() );\n\t      else\n\t        bars\n\t            .attr('transform', function(d,i) {\n\t              //TODO: stacked must be all positive or all negative, not both?\n\t              return 'translate(' +\n\t              (getY(d,i) < 0 ? y(getY(d,i)) : y(0))\n\t              + ',' +\n\t              (d.series * x.rangeBand() / data.length\n\t              +\n\t              x(getX(d,i)) )\n\t              + ')'\n\t            })\n\t          .select('rect')\n\t            .attr('height', x.rangeBand() / data.length )\n\t            .attr('width', function(d,i) {\n\t              return Math.max(Math.abs(y(getY(d,i)) - y(0)),1)\n\t            });\n\t\n\t\n\t      //store old scales for use in transitions on update\n\t      x0 = x.copy();\n\t      y0 = y.copy();\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  chart.dispatch = dispatch;\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.x = function(_) {\n\t    if (!arguments.length) return getX;\n\t    getX = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.y = function(_) {\n\t    if (!arguments.length) return getY;\n\t    getY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xScale = function(_) {\n\t    if (!arguments.length) return x;\n\t    x = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yScale = function(_) {\n\t    if (!arguments.length) return y;\n\t    y = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xDomain = function(_) {\n\t    if (!arguments.length) return xDomain;\n\t    xDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yDomain = function(_) {\n\t    if (!arguments.length) return yDomain;\n\t    yDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xRange = function(_) {\n\t    if (!arguments.length) return xRange;\n\t    xRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yRange = function(_) {\n\t    if (!arguments.length) return yRange;\n\t    yRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.forceY = function(_) {\n\t    if (!arguments.length) return forceY;\n\t    forceY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.stacked = function(_) {\n\t    if (!arguments.length) return stacked;\n\t    stacked = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.barColor = function(_) {\n\t    if (!arguments.length) return barColor;\n\t    barColor = nv.utils.getColor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.disabled = function(_) {\n\t    if (!arguments.length) return disabled;\n\t    disabled = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.id = function(_) {\n\t    if (!arguments.length) return id;\n\t    id = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.delay = function(_) {\n\t    if (!arguments.length) return delay;\n\t    delay = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showValues = function(_) {\n\t    if (!arguments.length) return showValues;\n\t    showValues = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showBarLabels = function(_) {\n\t    if (!arguments.length) return showBarLabels;\n\t    showBarLabels = _;\n\t    return chart;\n\t  };\n\t\n\t\n\t  chart.valueFormat= function(_) {\n\t    if (!arguments.length) return valueFormat;\n\t    valueFormat = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.valuePadding = function(_) {\n\t    if (!arguments.length) return valuePadding;\n\t    valuePadding = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.multiBarHorizontalChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var multibar = nv.models.multiBarHorizontal()\n\t    , xAxis = nv.models.axis()\n\t    , yAxis = nv.models.axis()\n\t    , legend = nv.models.legend().height(30)\n\t    , controls = nv.models.legend().height(30)\n\t    ;\n\t\n\t  var margin = {top: 30, right: 20, bottom: 50, left: 60}\n\t    , width = null\n\t    , height = null\n\t    , color = nv.utils.defaultColor()\n\t    , showControls = true\n\t    , showLegend = true\n\t    , showXAxis = true\n\t    , showYAxis = true\n\t    , stacked = false\n\t    , tooltips = true\n\t    , tooltip = function(key, x, y, e, graph) {\n\t        return '<h3>' + key + ' - ' + x + '</h3>' +\n\t               '<p>' +  y + '</p>'\n\t      }\n\t    , x //can be accessed via chart.xScale()\n\t    , y //can be accessed via chart.yScale()\n\t    , state = { stacked: stacked }\n\t    , defaultState = null\n\t    , noData = 'No Data Available.'\n\t    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n\t    , controlWidth = function() { return showControls ? 180 : 0 }\n\t    , transitionDuration = 0\n\t    ;\n\t\n\t  multibar\n\t    .stacked(stacked)\n\t    ;\n\t  xAxis\n\t    .orient('left')\n\t    .tickPadding(5)\n\t    .highlightZero(false)\n\t    .showMaxMin(false)\n\t    .tickFormat(function(d) { return d })\n\t    ;\n\t  yAxis\n\t    .orient('bottom')\n\t    .tickFormat(d3.format(',.1f'))\n\t    ;\n\t\n\t  controls.updateState(false);\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t        x = xAxis.tickFormat()(multibar.x()(e.point, e.pointIndex)),\n\t        y = yAxis.tickFormat()(multibar.y()(e.point, e.pointIndex)),\n\t        content = tooltip(e.series.key, x, y, e, chart);\n\t\n\t    nv.tooltip.show([left, top], content, e.value < 0 ? 'e' : 'w', null, offsetElement);\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this),\n\t          that = this;\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t\n\t      chart.update = function() { container.call(chart) };\n\t      chart.container = this;\n\t\n\t      //set state.disabled\n\t      state.disabled = data.map(function(d) { return !!d.disabled });\n\t\n\t      if (!defaultState) {\n\t        var key;\n\t        defaultState = {};\n\t        for (key in state) {\n\t          if (state[key] instanceof Array)\n\t            defaultState[key] = state[key].slice(0);\n\t          else\n\t            defaultState[key] = state[key];\n\t        }\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t      // Display No Data message if there's nothing to show.\n\t\n\t      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', margin.top + availableHeight / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x = multibar.xScale();\n\t      y = multibar.yScale();\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-multiBarHorizontalChart').data([data]);\n\t      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarHorizontalChart').append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-x nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-y nv-axis')\n\t            .append('g').attr('class', 'nv-zeroLine')\n\t            .append('line');\n\t      gEnter.append('g').attr('class', 'nv-barsWrap');\n\t      gEnter.append('g').attr('class', 'nv-legendWrap');\n\t      gEnter.append('g').attr('class', 'nv-controlsWrap');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Legend\n\t\n\t      if (showLegend) {\n\t        legend.width(availableWidth - controlWidth());\n\t\n\t        if (multibar.barColor())\n\t          data.forEach(function(series,i) {\n\t            series.color = d3.rgb('#ccc').darker(i * 1.5).toString();\n\t          })\n\t\n\t        g.select('.nv-legendWrap')\n\t            .datum(data)\n\t            .call(legend);\n\t\n\t        if ( margin.top != legend.height()) {\n\t          margin.top = legend.height();\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t        }\n\t\n\t        g.select('.nv-legendWrap')\n\t            .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Controls\n\t\n\t      if (showControls) {\n\t        var controlsData = [\n\t          { key: 'Grouped', disabled: multibar.stacked() },\n\t          { key: 'Stacked', disabled: !multibar.stacked() }\n\t        ];\n\t\n\t        controls.width(controlWidth()).color(['#444', '#444', '#444']);\n\t        g.select('.nv-controlsWrap')\n\t            .datum(controlsData)\n\t            .attr('transform', 'translate(0,' + (-margin.top) +')')\n\t            .call(controls);\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Main Chart Component(s)\n\t\n\t      multibar\n\t        .disabled(data.map(function(series) { return series.disabled }))\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color(d, i);\n\t        }).filter(function(d,i) { return !data[i].disabled }))\n\t\n\t\n\t      var barsWrap = g.select('.nv-barsWrap')\n\t          .datum(data.filter(function(d) { return !d.disabled }))\n\t\n\t      barsWrap.call(multibar);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Axes\n\t\n\t      if (showXAxis) {\n\t          xAxis\n\t            .scale(x)\n\t            .ticks( availableHeight / 24 )\n\t            .tickSize(-availableWidth, 0);\n\t\n\t          g.select('.nv-x.nv-axis')\n\t              .call(xAxis);\n\t\n\t          var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n\t\n\t          xTicks\n\t              .selectAll('line, text');\n\t      }\n\t\n\t      if (showYAxis) {\n\t          yAxis\n\t            .scale(y)\n\t            .ticks( availableWidth / 100 )\n\t            .tickSize( -availableHeight, 0);\n\t\n\t          g.select('.nv-y.nv-axis')\n\t              .attr('transform', 'translate(0,' + availableHeight + ')');\n\t          g.select('.nv-y.nv-axis')\n\t              .call(yAxis);\n\t      }\n\t\n\t      // Zero line\n\t      g.select(\".nv-zeroLine line\")\n\t        .attr(\"x1\", y(0))\n\t        .attr(\"x2\", y(0))\n\t        .attr(\"y1\", 0)\n\t        .attr(\"y2\", -availableHeight)\n\t        ;\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t      legend.dispatch.on('stateChange', function(newState) {\n\t        state = newState;\n\t        dispatch.stateChange(state);\n\t        chart.update();\n\t      });\n\t\n\t      controls.dispatch.on('legendClick', function(d,i) {\n\t        if (!d.disabled) return;\n\t        controlsData = controlsData.map(function(s) {\n\t          s.disabled = true;\n\t          return s;\n\t        });\n\t        d.disabled = false;\n\t\n\t        switch (d.key) {\n\t          case 'Grouped':\n\t            multibar.stacked(false);\n\t            break;\n\t          case 'Stacked':\n\t            multibar.stacked(true);\n\t            break;\n\t        }\n\t\n\t        state.stacked = multibar.stacked();\n\t        dispatch.stateChange(state);\n\t\n\t        chart.update();\n\t      });\n\t\n\t      dispatch.on('tooltipShow', function(e) {\n\t        if (tooltips) showTooltip(e, that.parentNode);\n\t      });\n\t\n\t      // Update chart from a state object passed to event handler\n\t      dispatch.on('changeState', function(e) {\n\t\n\t        if (typeof e.disabled !== 'undefined') {\n\t          data.forEach(function(series,i) {\n\t            series.disabled = e.disabled[i];\n\t          });\n\t\n\t          state.disabled = e.disabled;\n\t        }\n\t\n\t        if (typeof e.stacked !== 'undefined') {\n\t          multibar.stacked(e.stacked);\n\t          state.stacked = e.stacked;\n\t        }\n\t\n\t        chart.update();\n\t      });\n\t      //============================================================\n\t\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  multibar.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  multibar.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.dispatch = dispatch;\n\t  chart.multibar = multibar;\n\t  chart.legend = legend;\n\t  chart.xAxis = xAxis;\n\t  chart.yAxis = yAxis;\n\t\n\t  d3.rebind(chart, multibar, 'x', 'y', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY',\n\t    'clipEdge', 'id', 'delay', 'showValues','showBarLabels', 'valueFormat', 'stacked', 'barColor');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    legend.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.showControls = function(_) {\n\t    if (!arguments.length) return showControls;\n\t    showControls = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showLegend = function(_) {\n\t    if (!arguments.length) return showLegend;\n\t    showLegend = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showXAxis = function(_) {\n\t    if (!arguments.length) return showXAxis;\n\t    showXAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showYAxis = function(_) {\n\t    if (!arguments.length) return showYAxis;\n\t    showYAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltip = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.state = function(_) {\n\t    if (!arguments.length) return state;\n\t    state = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.defaultState = function(_) {\n\t    if (!arguments.length) return defaultState;\n\t    defaultState = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.transitionDuration = function(_) {\n\t    if (!arguments.length) return transitionDuration;\n\t    transitionDuration = _;\n\t    return chart;\n\t  };\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\tnv.models.multiChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var margin = {top: 30, right: 20, bottom: 50, left: 60},\n\t      color = d3.scale.category20().range(),\n\t      width = null, \n\t      height = null,\n\t      showLegend = true,\n\t      tooltips = true,\n\t      tooltip = function(key, x, y, e, graph) {\n\t        return '<h3>' + key + '</h3>' +\n\t               '<p>' +  y + ' at ' + x + '</p>'\n\t      },\n\t      x,\n\t      y,\n\t      yDomain1,\n\t      yDomain2\n\t      ; //can be accessed via chart.lines.[x/y]Scale()\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var x = d3.scale.linear(),\n\t      yScale1 = d3.scale.linear(),\n\t      yScale2 = d3.scale.linear(),\n\t\n\t      lines1 = nv.models.line().yScale(yScale1),\n\t      lines2 = nv.models.line().yScale(yScale2),\n\t\n\t      bars1 = nv.models.multiBar().stacked(false).yScale(yScale1),\n\t      bars2 = nv.models.multiBar().stacked(false).yScale(yScale2),\n\t\n\t      stack1 = nv.models.stackedArea().yScale(yScale1),\n\t      stack2 = nv.models.stackedArea().yScale(yScale2),\n\t\n\t      xAxis = nv.models.axis().scale(x).orient('bottom').tickPadding(5),\n\t      yAxis1 = nv.models.axis().scale(yScale1).orient('left'),\n\t      yAxis2 = nv.models.axis().scale(yScale2).orient('right'),\n\t\n\t      legend = nv.models.legend().height(30),\n\t      dispatch = d3.dispatch('tooltipShow', 'tooltipHide');\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t        x = xAxis.tickFormat()(lines1.x()(e.point, e.pointIndex)),\n\t        y = ((e.series.yAxis == 2) ? yAxis2 : yAxis1).tickFormat()(lines1.y()(e.point, e.pointIndex)),\n\t        content = tooltip(e.series.key, x, y, e, chart);\n\t\n\t    nv.tooltip.show([left, top], content, undefined, undefined, offsetElement.offsetParent);\n\t  };\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this),\n\t          that = this;\n\t\n\t      chart.update = function() { container.call(chart); };\n\t      chart.container = this;\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t\n\t      var dataLines1 = data.filter(function(d) {return !d.disabled && d.type == 'line' && d.yAxis == 1})\n\t      var dataLines2 = data.filter(function(d) {return !d.disabled && d.type == 'line' && d.yAxis == 2})\n\t      var dataBars1 = data.filter(function(d) {return !d.disabled && d.type == 'bar' && d.yAxis == 1})\n\t      var dataBars2 = data.filter(function(d) {return !d.disabled && d.type == 'bar' && d.yAxis == 2})\n\t      var dataStack1 = data.filter(function(d) {return !d.disabled && d.type == 'area' && d.yAxis == 1})\n\t      var dataStack2 = data.filter(function(d) {return !d.disabled && d.type == 'area' && d.yAxis == 2})\n\t\n\t      var series1 = data.filter(function(d) {return !d.disabled && d.yAxis == 1})\n\t            .map(function(d) {\n\t              return d.values.map(function(d,i) {\n\t                return { x: d.x, y: d.y }\n\t              })\n\t            })\n\t\n\t      var series2 = data.filter(function(d) {return !d.disabled && d.yAxis == 2})\n\t            .map(function(d) {\n\t              return d.values.map(function(d,i) {\n\t                return { x: d.x, y: d.y }\n\t              })\n\t            })\n\t\n\t      x   .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x } ))\n\t          .range([0, availableWidth]);\n\t\n\t      var wrap = container.selectAll('g.wrap.multiChart').data([data]);\n\t      var gEnter = wrap.enter().append('g').attr('class', 'wrap nvd3 multiChart').append('g');\n\t\n\t      gEnter.append('g').attr('class', 'x axis');\n\t      gEnter.append('g').attr('class', 'y1 axis');\n\t      gEnter.append('g').attr('class', 'y2 axis');\n\t      gEnter.append('g').attr('class', 'lines1Wrap');\n\t      gEnter.append('g').attr('class', 'lines2Wrap');\n\t      gEnter.append('g').attr('class', 'bars1Wrap');\n\t      gEnter.append('g').attr('class', 'bars2Wrap');\n\t      gEnter.append('g').attr('class', 'stack1Wrap');\n\t      gEnter.append('g').attr('class', 'stack2Wrap');\n\t      gEnter.append('g').attr('class', 'legendWrap');\n\t\n\t      var g = wrap.select('g');\n\t\n\t      if (showLegend) {\n\t        legend.width( availableWidth / 2 );\n\t\n\t        g.select('.legendWrap')\n\t            .datum(data.map(function(series) { \n\t              series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n\t              series.key = series.originalKey + (series.yAxis == 1 ? '' : ' (right axis)');\n\t              return series;\n\t            }))\n\t          .call(legend);\n\t\n\t        if ( margin.top != legend.height()) {\n\t          margin.top = legend.height();\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t        }\n\t\n\t        g.select('.legendWrap')\n\t            .attr('transform', 'translate(' + ( availableWidth / 2 ) + ',' + (-margin.top) +')');\n\t      }\n\t\n\t\n\t      lines1\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t        .interpolate(\"monotone\")\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color[i % color.length];\n\t        }).filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'line'}));\n\t\n\t      lines2\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t        .interpolate(\"monotone\")\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color[i % color.length];\n\t        }).filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'line'}));\n\t\n\t      bars1\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color[i % color.length];\n\t        }).filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'bar'}));\n\t\n\t      bars2\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color[i % color.length];\n\t        }).filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'bar'}));\n\t\n\t      stack1\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color[i % color.length];\n\t        }).filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'area'}));\n\t\n\t      stack2\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color[i % color.length];\n\t        }).filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'area'}));\n\t\n\t      g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t\n\t      var lines1Wrap = g.select('.lines1Wrap')\n\t          .datum(dataLines1)\n\t      var bars1Wrap = g.select('.bars1Wrap')\n\t          .datum(dataBars1)\n\t      var stack1Wrap = g.select('.stack1Wrap')\n\t          .datum(dataStack1)\n\t\n\t      var lines2Wrap = g.select('.lines2Wrap')\n\t          .datum(dataLines2)\n\t      var bars2Wrap = g.select('.bars2Wrap')\n\t          .datum(dataBars2)\n\t      var stack2Wrap = g.select('.stack2Wrap')\n\t          .datum(dataStack2)\n\t\n\t      var extraValue1 = dataStack1.length ? dataStack1.map(function(a){return a.values}).reduce(function(a,b){\n\t        return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})\n\t      }).concat([{x:0, y:0}]) : []\n\t      var extraValue2 = dataStack2.length ? dataStack2.map(function(a){return a.values}).reduce(function(a,b){\n\t        return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})\n\t      }).concat([{x:0, y:0}]) : []\n\t\n\t      yScale1 .domain(yDomain1 || d3.extent(d3.merge(series1).concat(extraValue1), function(d) { return d.y } ))\n\t              .range([0, availableHeight])\n\t\n\t      yScale2 .domain(yDomain2 || d3.extent(d3.merge(series2).concat(extraValue2), function(d) { return d.y } ))\n\t              .range([0, availableHeight])\n\t\n\t      lines1.yDomain(yScale1.domain())\n\t      bars1.yDomain(yScale1.domain())\n\t      stack1.yDomain(yScale1.domain())\n\t\n\t      lines2.yDomain(yScale2.domain())\n\t      bars2.yDomain(yScale2.domain())\n\t      stack2.yDomain(yScale2.domain())\n\t\n\t      if(dataStack1.length){d3.transition(stack1Wrap).call(stack1);}\n\t      if(dataStack2.length){d3.transition(stack2Wrap).call(stack2);}\n\t\n\t      if(dataBars1.length){d3.transition(bars1Wrap).call(bars1);}\n\t      if(dataBars2.length){d3.transition(bars2Wrap).call(bars2);}\n\t\n\t      if(dataLines1.length){d3.transition(lines1Wrap).call(lines1);}\n\t      if(dataLines2.length){d3.transition(lines2Wrap).call(lines2);}\n\t      \n\t\n\t\n\t      xAxis\n\t        .ticks( availableWidth / 100 )\n\t        .tickSize(-availableHeight, 0);\n\t\n\t      g.select('.x.axis')\n\t          .attr('transform', 'translate(0,' + availableHeight + ')');\n\t      d3.transition(g.select('.x.axis'))\n\t          .call(xAxis);\n\t\n\t      yAxis1\n\t        .ticks( availableHeight / 36 )\n\t        .tickSize( -availableWidth, 0);\n\t\n\t\n\t      d3.transition(g.select('.y1.axis'))\n\t          .call(yAxis1);\n\t\n\t      yAxis2\n\t        .ticks( availableHeight / 36 )\n\t        .tickSize( -availableWidth, 0);\n\t\n\t      d3.transition(g.select('.y2.axis'))\n\t          .call(yAxis2);\n\t\n\t      g.select('.y2.axis')\n\t          .style('opacity', series2.length ? 1 : 0)\n\t          .attr('transform', 'translate(' + x.range()[1] + ',0)');\n\t\n\t      legend.dispatch.on('stateChange', function(newState) { \n\t        chart.update();\n\t      });\n\t     \n\t      dispatch.on('tooltipShow', function(e) {\n\t        if (tooltips) showTooltip(e, that.parentNode);\n\t      });\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  lines1.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  lines1.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  lines2.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  lines2.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  bars1.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  bars1.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  bars2.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  bars2.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  stack1.dispatch.on('tooltipShow', function(e) {\n\t    //disable tooltips when value ~= 0\n\t    //// TODO: consider removing points from voronoi that have 0 value instead of this hack\n\t    if (!Math.round(stack1.y()(e.point) * 100)) {  // 100 will not be good for very small numbers... will have to think about making this valu dynamic, based on data range\n\t      setTimeout(function() { d3.selectAll('.point.hover').classed('hover', false) }, 0);\n\t      return false;\n\t    }\n\t\n\t    e.pos = [e.pos[0] + margin.left, e.pos[1] + margin.top],\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  stack1.dispatch.on('tooltipHide', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  stack2.dispatch.on('tooltipShow', function(e) {\n\t    //disable tooltips when value ~= 0\n\t    //// TODO: consider removing points from voronoi that have 0 value instead of this hack\n\t    if (!Math.round(stack2.y()(e.point) * 100)) {  // 100 will not be good for very small numbers... will have to think about making this valu dynamic, based on data range\n\t      setTimeout(function() { d3.selectAll('.point.hover').classed('hover', false) }, 0);\n\t      return false;\n\t    }\n\t\n\t    e.pos = [e.pos[0] + margin.left, e.pos[1] + margin.top],\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  stack2.dispatch.on('tooltipHide', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t    lines1.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  lines1.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  lines2.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  lines2.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t\n\t\n\t  //============================================================\n\t  // Global getters and setters\n\t  //------------------------------------------------------------\n\t\n\t  chart.dispatch = dispatch;\n\t  chart.lines1 = lines1;\n\t  chart.lines2 = lines2;\n\t  chart.bars1 = bars1;\n\t  chart.bars2 = bars2;\n\t  chart.stack1 = stack1;\n\t  chart.stack2 = stack2;\n\t  chart.xAxis = xAxis;\n\t  chart.yAxis1 = yAxis1;\n\t  chart.yAxis2 = yAxis2;\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.x = function(_) {\n\t    if (!arguments.length) return getX;\n\t    getX = _;\n\t    lines1.x(_);\n\t    bars1.x(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.y = function(_) {\n\t    if (!arguments.length) return getY;\n\t    getY = _;\n\t    lines1.y(_);\n\t    bars1.y(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.yDomain1 = function(_) {\n\t    if (!arguments.length) return yDomain1;\n\t    yDomain1 = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yDomain2 = function(_) {\n\t    if (!arguments.length) return yDomain2;\n\t    yDomain2 = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = _;\n\t    legend.color(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.showLegend = function(_) {\n\t    if (!arguments.length) return showLegend;\n\t    showLegend = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  return chart;\n\t}\n\t\n\t\n\tnv.models.ohlcBar = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t    , width = 960\n\t    , height = 500\n\t    , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n\t    , x = d3.scale.linear()\n\t    , y = d3.scale.linear()\n\t    , getX = function(d) { return d.x }\n\t    , getY = function(d) { return d.y }\n\t    , getOpen = function(d) { return d.open }\n\t    , getClose = function(d) { return d.close }\n\t    , getHigh = function(d) { return d.high }\n\t    , getLow = function(d) { return d.low }\n\t    , forceX = []\n\t    , forceY = []\n\t    , padData     = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n\t    , clipEdge = true\n\t    , color = nv.utils.defaultColor()\n\t    , xDomain\n\t    , yDomain\n\t    , xRange\n\t    , yRange\n\t    , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout')\n\t    ;\n\t\n\t  //============================================================\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  //TODO: store old scales for transitions\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var availableWidth = width - margin.left - margin.right,\n\t          availableHeight = height - margin.top - margin.bottom,\n\t          container = d3.select(this);\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x   .domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\t\n\t      if (padData)\n\t        x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n\t      else\n\t        x.range(xRange || [0, availableWidth]);\n\t\n\t      y   .domain(yDomain || [\n\t            d3.min(data[0].values.map(getLow).concat(forceY)),\n\t            d3.max(data[0].values.map(getHigh).concat(forceY))\n\t          ])\n\t          .range(yRange || [availableHeight, 0]);\n\t\n\t      // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n\t      if (x.domain()[0] === x.domain()[1])\n\t        x.domain()[0] ?\n\t            x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n\t          : x.domain([-1,1]);\n\t\n\t      if (y.domain()[0] === y.domain()[1])\n\t        y.domain()[0] ?\n\t            y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n\t          : y.domain([-1,1]);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = d3.select(this).selectAll('g.nv-wrap.nv-ohlcBar').data([data[0].values]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-ohlcBar');\n\t      var defsEnter = wrapEnter.append('defs');\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-ticks');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      container\n\t          .on('click', function(d,i) {\n\t            dispatch.chartClick({\n\t                data: d,\n\t                index: i,\n\t                pos: d3.event,\n\t                id: id\n\t            });\n\t          });\n\t\n\t\n\t      defsEnter.append('clipPath')\n\t          .attr('id', 'nv-chart-clip-path-' + id)\n\t        .append('rect');\n\t\n\t      wrap.select('#nv-chart-clip-path-' + id + ' rect')\n\t          .attr('width', availableWidth)\n\t          .attr('height', availableHeight);\n\t\n\t      g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\t\n\t\n\t\n\t      var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick')\n\t          .data(function(d) { return d });\n\t\n\t      ticks.exit().remove();\n\t\n\t\n\t      var ticksEnter = ticks.enter().append('path')\n\t          .attr('class', function(d,i,j) { return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i })\n\t          .attr('d', function(d,i) {\n\t            var w = (availableWidth / data[0].values.length) * .9;\n\t            return 'm0,0l0,'\n\t                 + (y(getOpen(d,i))\n\t                 - y(getHigh(d,i)))\n\t                 + 'l'\n\t                 + (-w/2)\n\t                 + ',0l'\n\t                 + (w/2)\n\t                 + ',0l0,'\n\t                 + (y(getLow(d,i)) - y(getOpen(d,i)))\n\t                 + 'l0,'\n\t                 + (y(getClose(d,i))\n\t                 - y(getLow(d,i)))\n\t                 + 'l'\n\t                 + (w/2)\n\t                 + ',0l'\n\t                 + (-w/2)\n\t                 + ',0z';\n\t          })\n\t          .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })\n\t          //.attr('fill', function(d,i) { return color[0]; })\n\t          //.attr('stroke', function(d,i) { return color[0]; })\n\t          //.attr('x', 0 )\n\t          //.attr('y', function(d,i) {  return y(Math.max(0, getY(d,i))) })\n\t          //.attr('height', function(d,i) { return Math.abs(y(getY(d,i)) - y(0)) })\n\t          .on('mouseover', function(d,i) {\n\t            d3.select(this).classed('hover', true);\n\t            dispatch.elementMouseover({\n\t                point: d,\n\t                series: data[0],\n\t                pos: [x(getX(d,i)), y(getY(d,i))],  // TODO: Figure out why the value appears to be shifted\n\t                pointIndex: i,\n\t                seriesIndex: 0,\n\t                e: d3.event\n\t            });\n\t\n\t          })\n\t          .on('mouseout', function(d,i) {\n\t                d3.select(this).classed('hover', false);\n\t                dispatch.elementMouseout({\n\t                    point: d,\n\t                    series: data[0],\n\t                    pointIndex: i,\n\t                    seriesIndex: 0,\n\t                    e: d3.event\n\t                });\n\t          })\n\t          .on('click', function(d,i) {\n\t                dispatch.elementClick({\n\t                    //label: d[label],\n\t                    value: getY(d,i),\n\t                    data: d,\n\t                    index: i,\n\t                    pos: [x(getX(d,i)), y(getY(d,i))],\n\t                    e: d3.event,\n\t                    id: id\n\t                });\n\t              d3.event.stopPropagation();\n\t          })\n\t          .on('dblclick', function(d,i) {\n\t              dispatch.elementDblClick({\n\t                  //label: d[label],\n\t                  value: getY(d,i),\n\t                  data: d,\n\t                  index: i,\n\t                  pos: [x(getX(d,i)), y(getY(d,i))],\n\t                  e: d3.event,\n\t                  id: id\n\t              });\n\t              d3.event.stopPropagation();\n\t          });\n\t\n\t      ticks\n\t          .attr('class', function(d,i,j) { return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i })\n\t      d3.transition(ticks)\n\t          .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })\n\t          .attr('d', function(d,i) {\n\t            var w = (availableWidth / data[0].values.length) * .9;\n\t            return 'm0,0l0,'\n\t                 + (y(getOpen(d,i))\n\t                 - y(getHigh(d,i)))\n\t                 + 'l'\n\t                 + (-w/2)\n\t                 + ',0l'\n\t                 + (w/2)\n\t                 + ',0l0,'\n\t                 + (y(getLow(d,i))\n\t                 - y(getOpen(d,i)))\n\t                 + 'l0,'\n\t                 + (y(getClose(d,i))\n\t                 - y(getLow(d,i)))\n\t                 + 'l'\n\t                 + (w/2)\n\t                 + ',0l'\n\t                 + (-w/2)\n\t                 + ',0z';\n\t          })\n\t          //.attr('width', (availableWidth / data[0].values.length) * .9 )\n\t\n\t\n\t      //d3.transition(ticks)\n\t          //.attr('y', function(d,i) {  return y(Math.max(0, getY(d,i))) })\n\t          //.attr('height', function(d,i) { return Math.abs(y(getY(d,i)) - y(0)) });\n\t          //.order();  // not sure if this makes any sense for this model\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  chart.dispatch = dispatch;\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.x = function(_) {\n\t    if (!arguments.length) return getX;\n\t    getX = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.y = function(_) {\n\t    if (!arguments.length) return getY;\n\t    getY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.open = function(_) {\n\t    if (!arguments.length) return getOpen;\n\t    getOpen = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.close = function(_) {\n\t    if (!arguments.length) return getClose;\n\t    getClose = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.high = function(_) {\n\t    if (!arguments.length) return getHigh;\n\t    getHigh = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.low = function(_) {\n\t    if (!arguments.length) return getLow;\n\t    getLow = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xScale = function(_) {\n\t    if (!arguments.length) return x;\n\t    x = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yScale = function(_) {\n\t    if (!arguments.length) return y;\n\t    y = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xDomain = function(_) {\n\t    if (!arguments.length) return xDomain;\n\t    xDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yDomain = function(_) {\n\t    if (!arguments.length) return yDomain;\n\t    yDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xRange = function(_) {\n\t    if (!arguments.length) return xRange;\n\t    xRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yRange = function(_) {\n\t    if (!arguments.length) return yRange;\n\t    yRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.forceX = function(_) {\n\t    if (!arguments.length) return forceX;\n\t    forceX = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.forceY = function(_) {\n\t    if (!arguments.length) return forceY;\n\t    forceY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.padData = function(_) {\n\t    if (!arguments.length) return padData;\n\t    padData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.clipEdge = function(_) {\n\t    if (!arguments.length) return clipEdge;\n\t    clipEdge = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.id = function(_) {\n\t    if (!arguments.length) return id;\n\t    id = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\tnv.models.pie = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t    , width = 500\n\t    , height = 500\n\t    , getX = function(d) { return d.x }\n\t    , getY = function(d) { return d.y }\n\t    , getDescription = function(d) { return d.description }\n\t    , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n\t    , color = nv.utils.defaultColor()\n\t    , valueFormat = d3.format(',.2f')\n\t    , showLabels = true\n\t    , pieLabelsOutside = true\n\t    , donutLabelsOutside = false\n\t    , labelType = \"key\"\n\t    , labelThreshold = .02 //if slice percentage is under this, don't show label\n\t    , donut = false\n\t    , labelSunbeamLayout = false\n\t    , startAngle = false\n\t    , endAngle = false\n\t    , donutRatio = 0.5\n\t    , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout')\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var availableWidth = width - margin.left - margin.right,\n\t          availableHeight = height - margin.top - margin.bottom,\n\t          radius = Math.min(availableWidth, availableHeight) / 2,\n\t          arcRadius = radius-(radius / 5),\n\t          container = d3.select(this);\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      //var wrap = container.selectAll('.nv-wrap.nv-pie').data([data]);\n\t      var wrap = container.selectAll('.nv-wrap.nv-pie').data(data);\n\t      var wrapEnter = wrap.enter().append('g').attr('class','nvd3 nv-wrap nv-pie nv-chart-' + id);\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-pie');\n\t      gEnter.append('g').attr('class', 'nv-pieLabels');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t      g.select('.nv-pie').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');\n\t      g.select('.nv-pieLabels').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      container\n\t          .on('click', function(d,i) {\n\t              dispatch.chartClick({\n\t                  data: d,\n\t                  index: i,\n\t                  pos: d3.event,\n\t                  id: id\n\t              });\n\t          });\n\t\n\t\n\t      var arc = d3.svg.arc()\n\t                  .outerRadius(arcRadius);\n\t\n\t      if (startAngle) arc.startAngle(startAngle)\n\t      if (endAngle) arc.endAngle(endAngle);\n\t      if (donut) arc.innerRadius(radius * donutRatio);\n\t\n\t      // Setup the Pie chart and choose the data element\n\t      var pie = d3.layout.pie()\n\t          .sort(null)\n\t          .value(function(d) { return d.disabled ? 0 : getY(d) });\n\t\n\t      var slices = wrap.select('.nv-pie').selectAll('.nv-slice')\n\t          .data(pie);\n\t\n\t      var pieLabels = wrap.select('.nv-pieLabels').selectAll('.nv-label')\n\t          .data(pie);\n\t\n\t      slices.exit().remove();\n\t      pieLabels.exit().remove();\n\t\n\t      var ae = slices.enter().append('g')\n\t              .attr('class', 'nv-slice')\n\t              .on('mouseover', function(d,i){\n\t                d3.select(this).classed('hover', true);\n\t                dispatch.elementMouseover({\n\t                    label: getX(d.data),\n\t                    value: getY(d.data),\n\t                    point: d.data,\n\t                    pointIndex: i,\n\t                    pos: [d3.event.pageX, d3.event.pageY],\n\t                    id: id\n\t                });\n\t              })\n\t              .on('mouseout', function(d,i){\n\t                d3.select(this).classed('hover', false);\n\t                dispatch.elementMouseout({\n\t                    label: getX(d.data),\n\t                    value: getY(d.data),\n\t                    point: d.data,\n\t                    index: i,\n\t                    id: id\n\t                });\n\t              })\n\t              .on('click', function(d,i) {\n\t                dispatch.elementClick({\n\t                    label: getX(d.data),\n\t                    value: getY(d.data),\n\t                    point: d.data,\n\t                    index: i,\n\t                    pos: d3.event,\n\t                    id: id\n\t                });\n\t                d3.event.stopPropagation();\n\t              })\n\t              .on('dblclick', function(d,i) {\n\t                dispatch.elementDblClick({\n\t                    label: getX(d.data),\n\t                    value: getY(d.data),\n\t                    point: d.data,\n\t                    index: i,\n\t                    pos: d3.event,\n\t                    id: id\n\t                });\n\t                d3.event.stopPropagation();\n\t              });\n\t\n\t        slices.attr('fill', function(d,i) { return color(d, i); })\n\t            .attr('stroke', function(d,i) { return color(d, i); });\n\t\n\t        var paths = ae.append('path')\n\t            .each(function(d) { this._current = d; });\n\t            //.attr('d', arc);\n\t\n\t        slices.select('path')\n\t            .attr('d', arc);\n\t            \n\t        if (showLabels) {\n\t          // This does the normal label\n\t          var labelsArc = d3.svg.arc().innerRadius(0);\n\t\n\t          if (pieLabelsOutside){ labelsArc = arc; }\n\t\n\t          if (donutLabelsOutside) { labelsArc = d3.svg.arc().outerRadius(arc.outerRadius()); }\n\t\n\t          pieLabels.enter().append(\"g\").classed(\"nv-label\",true)\n\t            .each(function(d,i) {\n\t                var group = d3.select(this);\n\t\n\t                group\n\t                  .attr('transform', function(d) {\n\t                       if (labelSunbeamLayout) {\n\t                         d.outerRadius = arcRadius + 10; // Set Outer Coordinate\n\t                         d.innerRadius = arcRadius + 15; // Set Inner Coordinate\n\t                         var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);\n\t                         if ((d.startAngle+d.endAngle)/2 < Math.PI) {\n\t                           rotateAngle -= 90;\n\t                         } else {\n\t                           rotateAngle += 90;\n\t                         }\n\t                         return 'translate(' + labelsArc.centroid(d) + ') rotate(' + rotateAngle + ')';\n\t                       } else {\n\t                         d.outerRadius = radius + 10; // Set Outer Coordinate\n\t                         d.innerRadius = radius + 15; // Set Inner Coordinate\n\t                         return 'translate(' + labelsArc.centroid(d) + ')'\n\t                       }\n\t                  });\n\t\n\t                group.append('rect')\n\t                    .style('stroke', '#fff')\n\t                    .style('fill', '#fff')\n\t                    .attr(\"rx\", 3)\n\t                    .attr(\"ry\", 3);\n\t\n\t                group.append('text')\n\t                    .style('text-anchor', labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle') //center the text on it's origin or begin/end if orthogonal aligned\n\t                    .style('fill', '#000')\n\t\n\t            });\n\t\n\t          var labelLocationHash = {};\n\t          var avgHeight = 14;\n\t          var avgWidth = 140;\n\t          var createHashKey = function(coordinates) {\n\t\n\t              return Math.floor(coordinates[0]/avgWidth) * avgWidth + ',' + Math.floor(coordinates[1]/avgHeight) * avgHeight;\n\t          };\n\t          pieLabels\n\t                .attr('transform', function(d) {\n\t                  if (labelSunbeamLayout) {\n\t                      d.outerRadius = arcRadius + 10; // Set Outer Coordinate\n\t                      d.innerRadius = arcRadius + 15; // Set Inner Coordinate\n\t                      var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);\n\t                      if ((d.startAngle+d.endAngle)/2 < Math.PI) {\n\t                        rotateAngle -= 90;\n\t                      } else {\n\t                        rotateAngle += 90;\n\t                      }\n\t                      return 'translate(' + labelsArc.centroid(d) + ') rotate(' + rotateAngle + ')';\n\t                    } else {\n\t                      d.outerRadius = radius + 10; // Set Outer Coordinate\n\t                      d.innerRadius = radius + 15; // Set Inner Coordinate\n\t\n\t                      /*\n\t                      Overlapping pie labels are not good. What this attempts to do is, prevent overlapping.\n\t                      Each label location is hashed, and if a hash collision occurs, we assume an overlap.\n\t                      Adjust the label's y-position to remove the overlap.\n\t                      */\n\t                      var center = labelsArc.centroid(d);\n\t                      var hashKey = createHashKey(center);\n\t                      if (labelLocationHash[hashKey]) {\n\t                        center[1] -= avgHeight;\n\t                      }\n\t                      labelLocationHash[createHashKey(center)] = true;\n\t                      return 'translate(' + center + ')'\n\t                    }\n\t                });\n\t          pieLabels.select(\".nv-label text\")\n\t                .style('text-anchor', labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle') //center the text on it's origin or begin/end if orthogonal aligned\n\t                .text(function(d, i) {\n\t                  var percent = (d.endAngle - d.startAngle) / (2 * Math.PI);\n\t                  var labelTypes = {\n\t                    \"key\" : getX(d.data),\n\t                    \"value\": getY(d.data),\n\t                    \"percent\": d3.format('%')(percent)\n\t                  };\n\t                  return (d.value && percent > labelThreshold) ? labelTypes[labelType] : '';\n\t                });\n\t        }\n\t\n\t\n\t        // Computes the angle of an arc, converting from radians to degrees.\n\t        function angle(d) {\n\t          var a = (d.startAngle + d.endAngle) * 90 / Math.PI - 90;\n\t          return a > 90 ? a - 180 : a;\n\t        }\n\t\n\t        function arcTween(a) {\n\t          a.endAngle = isNaN(a.endAngle) ? 0 : a.endAngle;\n\t          a.startAngle = isNaN(a.startAngle) ? 0 : a.startAngle;\n\t          if (!donut) a.innerRadius = 0;\n\t          var i = d3.interpolate(this._current, a);\n\t          this._current = i(0);\n\t          return function(t) {\n\t            return arc(i(t));\n\t          };\n\t        }\n\t\n\t        function tweenPie(b) {\n\t          b.innerRadius = 0;\n\t          var i = d3.interpolate({startAngle: 0, endAngle: 0}, b);\n\t          return function(t) {\n\t              return arc(i(t));\n\t          };\n\t        }\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  chart.dispatch = dispatch;\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.values = function(_) {\n\t    nv.log(\"pie.values() is no longer supported.\");\n\t    return chart;\n\t  };\n\t\n\t  chart.x = function(_) {\n\t    if (!arguments.length) return getX;\n\t    getX = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.y = function(_) {\n\t    if (!arguments.length) return getY;\n\t    getY = d3.functor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.description = function(_) {\n\t    if (!arguments.length) return getDescription;\n\t    getDescription = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showLabels = function(_) {\n\t    if (!arguments.length) return showLabels;\n\t    showLabels = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.labelSunbeamLayout = function(_) {\n\t    if (!arguments.length) return labelSunbeamLayout;\n\t    labelSunbeamLayout = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.donutLabelsOutside = function(_) {\n\t    if (!arguments.length) return donutLabelsOutside;\n\t    donutLabelsOutside = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.pieLabelsOutside = function(_) {\n\t    if (!arguments.length) return pieLabelsOutside;\n\t    pieLabelsOutside = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.labelType = function(_) {\n\t    if (!arguments.length) return labelType;\n\t    labelType = _;\n\t    labelType = labelType || \"key\";\n\t    return chart;\n\t  };\n\t\n\t  chart.donut = function(_) {\n\t    if (!arguments.length) return donut;\n\t    donut = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.donutRatio = function(_) {\n\t    if (!arguments.length) return donutRatio;\n\t    donutRatio = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.startAngle = function(_) {\n\t    if (!arguments.length) return startAngle;\n\t    startAngle = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.endAngle = function(_) {\n\t    if (!arguments.length) return endAngle;\n\t    endAngle = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.id = function(_) {\n\t    if (!arguments.length) return id;\n\t    id = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.valueFormat = function(_) {\n\t    if (!arguments.length) return valueFormat;\n\t    valueFormat = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.labelThreshold = function(_) {\n\t    if (!arguments.length) return labelThreshold;\n\t    labelThreshold = _;\n\t    return chart;\n\t  };\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\tnv.models.pieChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var pie = nv.models.pie()\n\t    , legend = nv.models.legend()\n\t    ;\n\t\n\t  var margin = {top: 30, right: 20, bottom: 20, left: 20}\n\t    , width = null\n\t    , height = null\n\t    , showLegend = true\n\t    , color = nv.utils.defaultColor()\n\t    , tooltips = true\n\t    , tooltip = function(key, y, e, graph) {\n\t        return '<h3>' + key + '</h3>' +\n\t               '<p>' +  y + '</p>'\n\t      }\n\t    , state = {}\n\t    , defaultState = null\n\t    , noData = \"No Data Available.\"\n\t    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t    var tooltipLabel = pie.description()(e.point) || pie.x()(e.point)\n\t    var left = e.pos[0] + ( (offsetElement && offsetElement.offsetLeft) || 0 ),\n\t        top = e.pos[1] + ( (offsetElement && offsetElement.offsetTop) || 0),\n\t        y = pie.valueFormat()(pie.y()(e.point)),\n\t        content = tooltip(tooltipLabel, y, e, chart);\n\t\n\t    nv.tooltip.show([left, top], content, e.value < 0 ? 'n' : 's', null, offsetElement);\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this),\n\t          that = this;\n\t\n\t      var availableWidth = (width || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t\n\t      chart.update = function() { container.call(chart); };\n\t      chart.container = this;\n\t\n\t      //set state.disabled\n\t      state.disabled = data.map(function(d) { return !!d.disabled });\n\t\n\t      if (!defaultState) {\n\t        var key;\n\t        defaultState = {};\n\t        for (key in state) {\n\t          if (state[key] instanceof Array)\n\t            defaultState[key] = state[key].slice(0);\n\t          else\n\t            defaultState[key] = state[key];\n\t        }\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t      // Display No Data message if there's nothing to show.\n\t\n\t      if (!data || !data.length) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', margin.top + availableHeight / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-pieChart').data([data]);\n\t      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-pieChart').append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-pieWrap');\n\t      gEnter.append('g').attr('class', 'nv-legendWrap');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Legend\n\t\n\t      if (showLegend) {\n\t        legend\n\t          .width( availableWidth )\n\t          .key(pie.x());\n\t\n\t        wrap.select('.nv-legendWrap')\n\t            .datum(data)\n\t            .call(legend);\n\t\n\t        if ( margin.top != legend.height()) {\n\t          margin.top = legend.height();\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t        }\n\t\n\t        wrap.select('.nv-legendWrap')\n\t            .attr('transform', 'translate(0,' + (-margin.top) +')');\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Main Chart Component(s)\n\t\n\t      pie\n\t        .width(availableWidth)\n\t        .height(availableHeight);\n\t\n\t\n\t      var pieWrap = g.select('.nv-pieWrap')\n\t          .datum([data]);\n\t\n\t      d3.transition(pieWrap).call(pie);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t      legend.dispatch.on('stateChange', function(newState) {\n\t        state = newState;\n\t        dispatch.stateChange(state);\n\t        chart.update();\n\t      });\n\t\n\t      pie.dispatch.on('elementMouseout.tooltip', function(e) {\n\t        dispatch.tooltipHide(e);\n\t      });\n\t\n\t      // Update chart from a state object passed to event handler\n\t      dispatch.on('changeState', function(e) {\n\t\n\t        if (typeof e.disabled !== 'undefined') {\n\t          data.forEach(function(series,i) {\n\t            series.disabled = e.disabled[i];\n\t          });\n\t\n\t          state.disabled = e.disabled;\n\t        }\n\t\n\t        chart.update();\n\t      });\n\t\n\t      //============================================================\n\t\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  pie.dispatch.on('elementMouseover.tooltip', function(e) {\n\t    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  dispatch.on('tooltipShow', function(e) {\n\t    if (tooltips) showTooltip(e);\n\t  });\n\t\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.legend = legend;\n\t  chart.dispatch = dispatch;\n\t  chart.pie = pie;\n\t\n\t  d3.rebind(chart, pie, 'valueFormat', 'values', 'x', 'y', 'description', 'id', 'showLabels', 'donutLabelsOutside', 'pieLabelsOutside', 'labelType', 'donut', 'donutRatio', 'labelThreshold');\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    legend.color(color);\n\t    pie.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.showLegend = function(_) {\n\t    if (!arguments.length) return showLegend;\n\t    showLegend = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.state = function(_) {\n\t    if (!arguments.length) return state;\n\t    state = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.defaultState = function(_) {\n\t    if (!arguments.length) return defaultState;\n\t    defaultState = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.scatter = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var margin       = {top: 0, right: 0, bottom: 0, left: 0}\n\t    , width        = 960\n\t    , height       = 500\n\t    , color        = nv.utils.defaultColor() // chooses color\n\t    , id           = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't select one\n\t    , x            = d3.scale.linear()\n\t    , y            = d3.scale.linear()\n\t    , z            = d3.scale.linear() //linear because d3.svg.shape.size is treated as area\n\t    , getX         = function(d) { return d.x } // accessor to get the x value\n\t    , getY         = function(d) { return d.y } // accessor to get the y value\n\t    , getSize      = function(d) { return d.size || 1} // accessor to get the point size\n\t    , getShape     = function(d) { return d.shape || 'circle' } // accessor to get point shape\n\t    , onlyCircles  = true // Set to false to use shapes\n\t    , forceX       = [] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)\n\t    , forceY       = [] // List of numbers to Force into the Y scale\n\t    , forceSize    = [] // List of numbers to Force into the Size scale\n\t    , interactive  = true // If true, plots a voronoi overlay for advanced point intersection\n\t    , pointKey     = null\n\t    , pointActive  = function(d) { return !d.notActive } // any points that return false will be filtered out\n\t    , padData      = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n\t    , padDataOuter = .1 //outerPadding to imitate ordinal scale outer padding\n\t    , clipEdge     = false // if true, masks points within x and y scale\n\t    , clipVoronoi  = true // if true, masks each point with a circle... can turn off to slightly increase performance\n\t    , clipRadius   = function() { return 25 } // function to get the radius for voronoi point clips\n\t    , xDomain      = null // Override x domain (skips the calculation from data)\n\t    , yDomain      = null // Override y domain\n\t    , xRange       = null // Override x range\n\t    , yRange       = null // Override y range\n\t    , sizeDomain   = null // Override point size domain\n\t    , sizeRange    = null\n\t    , singlePoint  = false\n\t    , dispatch     = d3.dispatch('elementClick', 'elementMouseover', 'elementMouseout')\n\t    , useVoronoi   = true\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var x0, y0, z0 // used to store previous scales\n\t    , timeoutID\n\t    , needsUpdate = false // Flag for when the points are visually updating, but the interactive layer is behind, to disable tooltips\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var availableWidth = width - margin.left - margin.right,\n\t          availableHeight = height - margin.top - margin.bottom,\n\t          container = d3.select(this);\n\t\n\t      //add series index to each data point for reference\n\t      data.forEach(function(series, i) {\n\t        series.values.forEach(function(point) {\n\t          point.series = i;\n\t        });\n\t      });\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      // remap and flatten the data for use in calculating the scales' domains\n\t      var seriesData = (xDomain && yDomain && sizeDomain) ? [] : // if we know xDomain and yDomain and sizeDomain, no need to calculate.... if Size is constant remember to set sizeDomain to speed up performance\n\t            d3.merge(\n\t              data.map(function(d) {\n\t                return d.values.map(function(d,i) {\n\t                  return { x: getX(d,i), y: getY(d,i), size: getSize(d,i) }\n\t                })\n\t              })\n\t            );\n\t\n\t      x   .domain(xDomain || d3.extent(seriesData.map(function(d) { return d.x; }).concat(forceX)))\n\t\n\t      if (padData && data[0])\n\t        x.range(xRange || [(availableWidth * padDataOuter +  availableWidth) / (2 *data[0].values.length), availableWidth - availableWidth * (1 + padDataOuter) / (2 * data[0].values.length)  ]);\n\t        //x.range([availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n\t      else\n\t        x.range(xRange || [0, availableWidth]);\n\t\n\t      y   .domain(yDomain || d3.extent(seriesData.map(function(d) { return d.y }).concat(forceY)))\n\t          .range(yRange || [availableHeight, 0]);\n\t\n\t      z   .domain(sizeDomain || d3.extent(seriesData.map(function(d) { return d.size }).concat(forceSize)))\n\t          .range(sizeRange || [16, 256]);\n\t\n\t      // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n\t      if (x.domain()[0] === x.domain()[1] || y.domain()[0] === y.domain()[1]) singlePoint = true;\n\t      if (x.domain()[0] === x.domain()[1])\n\t        x.domain()[0] ?\n\t            x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n\t          : x.domain([-1,1]);\n\t\n\t      if (y.domain()[0] === y.domain()[1])\n\t        y.domain()[0] ?\n\t            y.domain([y.domain()[0] - y.domain()[0] * 0.01, y.domain()[1] + y.domain()[1] * 0.01])\n\t          : y.domain([-1,1]);\n\t\n\t      if ( isNaN(x.domain()[0])) {\n\t          x.domain([-1,1]);\n\t      }\n\t\n\t      if ( isNaN(y.domain()[0])) {\n\t          y.domain([-1,1]);\n\t      }\n\t\n\t\n\t      x0 = x0 || x;\n\t      y0 = y0 || y;\n\t      z0 = z0 || z;\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-scatter').data([data]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatter nv-chart-' + id + (singlePoint ? ' nv-single-point' : ''));\n\t      var defsEnter = wrapEnter.append('defs');\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-groups');\n\t      gEnter.append('g').attr('class', 'nv-point-paths');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      defsEnter.append('clipPath')\n\t          .attr('id', 'nv-edge-clip-' + id)\n\t        .append('rect');\n\t\n\t      wrap.select('#nv-edge-clip-' + id + ' rect')\n\t          .attr('width', availableWidth)\n\t          .attr('height', (availableHeight > 0) ? availableHeight : 0);\n\t\n\t      g   .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\t\n\t\n\t      function updateInteractiveLayer() {\n\t\n\t        if (!interactive) return false;\n\t\n\t        var eventElements;\n\t\n\t        var vertices = d3.merge(data.map(function(group, groupIndex) {\n\t            return group.values\n\t              .map(function(point, pointIndex) {\n\t                // *Adding noise to make duplicates very unlikely\n\t                // *Injecting series and point index for reference\n\t                /* *Adding a 'jitter' to the points, because there's an issue in d3.geom.voronoi.\n\t                */\n\t                var pX = getX(point,pointIndex);\n\t                var pY = getY(point,pointIndex);\n\t\n\t                return [x(pX),\n\t                        y(pY),\n\t                        groupIndex,\n\t                        pointIndex, point];\n\t              })\n\t              .filter(function(pointArray, pointIndex) {\n\t                return pointActive(pointArray[4], pointIndex); // Issue #237.. move filter to after map, so pointIndex is correct!\n\t              })\n\t          })\n\t        );\n\t\n\t\n\t\n\t        //inject series and point index for reference into voronoi\n\t        if (useVoronoi === true) {\n\t\n\t          if (clipVoronoi) {\n\t            var pointClipsEnter = wrap.select('defs').selectAll('.nv-point-clips')\n\t                .data([id])\n\t              .enter();\n\t\n\t            pointClipsEnter.append('clipPath')\n\t                  .attr('class', 'nv-point-clips')\n\t                  .attr('id', 'nv-points-clip-' + id);\n\t\n\t            var pointClips = wrap.select('#nv-points-clip-' + id).selectAll('circle')\n\t                .data(vertices);\n\t            pointClips.enter().append('circle')\n\t                .attr('r', clipRadius);\n\t            pointClips.exit().remove();\n\t            pointClips\n\t                .attr('cx', function(d) { return d[0] })\n\t                .attr('cy', function(d) { return d[1] });\n\t\n\t            wrap.select('.nv-point-paths')\n\t                .attr('clip-path', 'url(#nv-points-clip-' + id + ')');\n\t          }\n\t\n\t\n\t          if(vertices.length) {\n\t            // Issue #283 - Adding 2 dummy points to the voronoi b/c voronoi requires min 3 points to work\n\t            vertices.push([x.range()[0] - 20, y.range()[0] - 20, null, null]);\n\t            vertices.push([x.range()[1] + 20, y.range()[1] + 20, null, null]);\n\t            vertices.push([x.range()[0] - 20, y.range()[0] + 20, null, null]);\n\t            vertices.push([x.range()[1] + 20, y.range()[1] - 20, null, null]);\n\t          }\n\t\n\t          var bounds = d3.geom.polygon([\n\t              [-10,-10],\n\t              [-10,height + 10],\n\t              [width + 10,height + 10],\n\t              [width + 10,-10]\n\t          ]);\n\t\n\t          // delete duplicates from vertices - essential assumption for d3.geom.voronoi\n\t          var epsilon = 1e-6; // d3 uses 1e-6 to determine equivalence.\n\t          vertices = vertices.sort(function(a,b){return ((a[0] - b[0]) || (a[1] - b[1]))});\n\t          for (var i = 0; i < vertices.length - 1; ) {\n\t              if ((Math.abs(vertices[i][0] - vertices[i+1][0]) < epsilon) &&\n\t                  (Math.abs(vertices[i][1] - vertices[i+1][1]) < epsilon)) {\n\t                      vertices.splice(i+1, 1);\n\t              } else {\n\t                  i++;\n\t              }\n\t          }\n\t \n\t          var voronoi = d3.geom.voronoi(vertices).map(function(d, i) {\n\t              return {\n\t                'data': bounds.clip(d),\n\t                'series': vertices[i][2],\n\t                'point': vertices[i][3]\n\t              }\n\t            });\n\t\n\t\n\t          var pointPaths = wrap.select('.nv-point-paths').selectAll('path')\n\t              .data(voronoi);\n\t          pointPaths.enter().append('path')\n\t              .attr('class', function(d,i) { return 'nv-path-'+i; });\n\t          pointPaths.exit().remove();\n\t          pointPaths\n\t              .attr('d', function(d) {\n\t                if (!d || !d.data || d.data.length === 0)\n\t                    return 'M 0 0';\n\t                else\n\t                    return 'M' + d.data.join('L') + 'Z';\n\t              });\n\t\n\t          var mouseEventCallback = function(d,mDispatch) {\n\t                if (needsUpdate) return 0;\n\t                var series = data[d.series];\n\t                if (typeof series === 'undefined') return;\n\t\n\t                var point  = series.values[d.point];\n\t\n\t                mDispatch({\n\t                  point: point,\n\t                  series: series,\n\t                  pos: [x(getX(point, d.point)) + margin.left, y(getY(point, d.point)) + margin.top],\n\t                  seriesIndex: d.series,\n\t                  pointIndex: d.point\n\t                });\n\t          };\n\t\n\t          pointPaths\n\t              .on('click', function(d) {\n\t                mouseEventCallback(d, dispatch.elementClick);\n\t              })\n\t              .on('mouseover', function(d) {\n\t                mouseEventCallback(d, dispatch.elementMouseover);\n\t              })\n\t              .on('mouseout', function(d, i) {\n\t                mouseEventCallback(d, dispatch.elementMouseout);\n\t              });\n\t\n\t\n\t        } else {\n\t          /*\n\t          // bring data in form needed for click handlers\n\t          var dataWithPoints = vertices.map(function(d, i) {\n\t              return {\n\t                'data': d,\n\t                'series': vertices[i][2],\n\t                'point': vertices[i][3]\n\t              }\n\t            });\n\t           */\n\t\n\t          // add event handlers to points instead voronoi paths\n\t          wrap.select('.nv-groups').selectAll('.nv-group')\n\t            .selectAll('.nv-point')\n\t              //.data(dataWithPoints)\n\t              //.style('pointer-events', 'auto') // recativate events, disabled by css\n\t              .on('click', function(d,i) {\n\t                //nv.log('test', d, i);\n\t                if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n\t                var series = data[d.series],\n\t                    point  = series.values[i];\n\t\n\t                dispatch.elementClick({\n\t                  point: point,\n\t                  series: series,\n\t                  pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n\t                  seriesIndex: d.series,\n\t                  pointIndex: i\n\t                });\n\t              })\n\t              .on('mouseover', function(d,i) {\n\t                if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n\t                var series = data[d.series],\n\t                    point  = series.values[i];\n\t\n\t                dispatch.elementMouseover({\n\t                  point: point,\n\t                  series: series,\n\t                  pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n\t                  seriesIndex: d.series,\n\t                  pointIndex: i\n\t                });\n\t              })\n\t              .on('mouseout', function(d,i) {\n\t                if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n\t                var series = data[d.series],\n\t                    point  = series.values[i];\n\t\n\t                dispatch.elementMouseout({\n\t                  point: point,\n\t                  series: series,\n\t                  seriesIndex: d.series,\n\t                  pointIndex: i\n\t                });\n\t              });\n\t          }\n\t\n\t          needsUpdate = false;\n\t      }\n\t\n\t      needsUpdate = true;\n\t\n\t      var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n\t          .data(function(d) { return d }, function(d) { return d.key });\n\t      groups.enter().append('g')\n\t          .style('stroke-opacity', 1e-6)\n\t          .style('fill-opacity', 1e-6);\n\t      groups.exit()\n\t          .remove();\n\t      groups\n\t          .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n\t          .classed('hover', function(d) { return d.hover });\n\t      groups\n\t          \n\t          .style('fill', function(d,i) { return color(d, i) })\n\t          .style('stroke', function(d,i) { return color(d, i) })\n\t          .style('stroke-opacity', 1)\n\t          .style('fill-opacity', .5);\n\t\n\t\n\t      if (onlyCircles) {\n\t\n\t        var points = groups.selectAll('circle.nv-point')\n\t            .data(function(d) { return d.values }, pointKey);\n\t        points.enter().append('circle')\n\t            .style('fill', function (d,i) { return d.color })\n\t            .style('stroke', function (d,i) { return d.color })\n\t            .attr('cx', function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n\t            .attr('cy', function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n\t            .attr('r', function(d,i) { return Math.sqrt(z(getSize(d,i))/Math.PI) });\n\t        points.exit().remove();\n\t        groups.exit().selectAll('path.nv-point')\n\t            .attr('cx', function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n\t            .attr('cy', function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n\t            .remove();\n\t        points.each(function(d,i) {\n\t          d3.select(this)\n\t            .classed('nv-point', true)\n\t            .classed('nv-point-' + i, true)\n\t            .classed('hover',false)\n\t            ;\n\t        });\n\t        points\n\t            .attr('cx', function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n\t            .attr('cy', function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n\t            .attr('r', function(d,i) { return Math.sqrt(z(getSize(d,i))/Math.PI) });\n\t\n\t      } else {\n\t\n\t        var points = groups.selectAll('path.nv-point')\n\t            .data(function(d) { return d.values });\n\t        points.enter().append('path')\n\t            .style('fill', function (d,i) { return d.color })\n\t            .style('stroke', function (d,i) { return d.color })\n\t            .attr('transform', function(d,i) {\n\t              return 'translate(' + x0(getX(d,i)) + ',' + y0(getY(d,i)) + ')'\n\t            })\n\t            .attr('d',\n\t              d3.svg.symbol()\n\t                .type(getShape)\n\t                .size(function(d,i) { return z(getSize(d,i)) })\n\t            );\n\t        points.exit().remove();\n\t        groups.exit().selectAll('path.nv-point')\n\t            \n\t            .attr('transform', function(d,i) {\n\t              return 'translate(' + x(getX(d,i)) + ',' + y(getY(d,i)) + ')'\n\t            })\n\t            .remove();\n\t        points.each(function(d,i) {\n\t          d3.select(this)\n\t            .classed('nv-point', true)\n\t            .classed('nv-point-' + i, true)\n\t            .classed('hover',false)\n\t            ;\n\t        });\n\t        points\n\t            .attr('transform', function(d,i) {\n\t              //nv.log(d,i,getX(d,i), x(getX(d,i)));\n\t              return 'translate(' + x(getX(d,i)) + ',' + y(getY(d,i)) + ')'\n\t            })\n\t            .attr('d',\n\t              d3.svg.symbol()\n\t                .type(getShape)\n\t                .size(function(d,i) { return z(getSize(d,i)) })\n\t            );\n\t      }\n\t\n\t\n\t      // Delay updating the invisible interactive layer for smoother animation\n\t      clearTimeout(timeoutID); // stop repeat calls to updateInteractiveLayer\n\t      timeoutID = setTimeout(updateInteractiveLayer, 300);\n\t      //updateInteractiveLayer();\n\t\n\t      //store old scales for use in transitions on update\n\t      x0 = x.copy();\n\t      y0 = y.copy();\n\t      z0 = z.copy();\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t  chart.clearHighlights = function() {\n\t      //Remove the 'hover' class from all highlighted points.\n\t      d3.selectAll(\".nv-chart-\" + id + \" .nv-point.hover\").classed(\"hover\",false);\n\t  };\n\t\n\t  chart.highlightPoint = function(seriesIndex,pointIndex,isHoverOver) {\n\t      d3.select(\".nv-chart-\" + id + \" .nv-series-\" + seriesIndex + \" .nv-point-\" + pointIndex)\n\t          .classed(\"hover\",isHoverOver);\n\t  };\n\t\n\t\n\t  dispatch.on('elementMouseover.point', function(d) {\n\t     if (interactive) chart.highlightPoint(d.seriesIndex,d.pointIndex,true);\n\t  });\n\t\n\t  dispatch.on('elementMouseout.point', function(d) {\n\t     if (interactive) chart.highlightPoint(d.seriesIndex,d.pointIndex,false);\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  chart.dispatch = dispatch;\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.x = function(_) {\n\t    if (!arguments.length) return getX;\n\t    getX = d3.functor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.y = function(_) {\n\t    if (!arguments.length) return getY;\n\t    getY = d3.functor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.size = function(_) {\n\t    if (!arguments.length) return getSize;\n\t    getSize = d3.functor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xScale = function(_) {\n\t    if (!arguments.length) return x;\n\t    x = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yScale = function(_) {\n\t    if (!arguments.length) return y;\n\t    y = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.zScale = function(_) {\n\t    if (!arguments.length) return z;\n\t    z = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xDomain = function(_) {\n\t    if (!arguments.length) return xDomain;\n\t    xDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yDomain = function(_) {\n\t    if (!arguments.length) return yDomain;\n\t    yDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.sizeDomain = function(_) {\n\t    if (!arguments.length) return sizeDomain;\n\t    sizeDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xRange = function(_) {\n\t    if (!arguments.length) return xRange;\n\t    xRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yRange = function(_) {\n\t    if (!arguments.length) return yRange;\n\t    yRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.sizeRange = function(_) {\n\t    if (!arguments.length) return sizeRange;\n\t    sizeRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.forceX = function(_) {\n\t    if (!arguments.length) return forceX;\n\t    forceX = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.forceY = function(_) {\n\t    if (!arguments.length) return forceY;\n\t    forceY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.forceSize = function(_) {\n\t    if (!arguments.length) return forceSize;\n\t    forceSize = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.interactive = function(_) {\n\t    if (!arguments.length) return interactive;\n\t    interactive = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.pointKey = function(_) {\n\t    if (!arguments.length) return pointKey;\n\t    pointKey = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.pointActive = function(_) {\n\t    if (!arguments.length) return pointActive;\n\t    pointActive = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.padData = function(_) {\n\t    if (!arguments.length) return padData;\n\t    padData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.padDataOuter = function(_) {\n\t    if (!arguments.length) return padDataOuter;\n\t    padDataOuter = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.clipEdge = function(_) {\n\t    if (!arguments.length) return clipEdge;\n\t    clipEdge = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.clipVoronoi= function(_) {\n\t    if (!arguments.length) return clipVoronoi;\n\t    clipVoronoi = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.useVoronoi= function(_) {\n\t    if (!arguments.length) return useVoronoi;\n\t    useVoronoi = _;\n\t    if (useVoronoi === false) {\n\t        clipVoronoi = false;\n\t    }\n\t    return chart;\n\t  };\n\t\n\t  chart.clipRadius = function(_) {\n\t    if (!arguments.length) return clipRadius;\n\t    clipRadius = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.shape = function(_) {\n\t    if (!arguments.length) return getShape;\n\t    getShape = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.onlyCircles = function(_) {\n\t    if (!arguments.length) return onlyCircles;\n\t    onlyCircles = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.id = function(_) {\n\t    if (!arguments.length) return id;\n\t    id = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.singlePoint = function(_) {\n\t    if (!arguments.length) return singlePoint;\n\t    singlePoint = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\tnv.models.scatterChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var scatter      = nv.models.scatter()\n\t    , xAxis        = nv.models.axis()\n\t    , yAxis        = nv.models.axis()\n\t    , legend       = nv.models.legend()\n\t    , controls     = nv.models.legend()\n\t    , distX        = nv.models.distribution()\n\t    , distY        = nv.models.distribution()\n\t    ;\n\t\n\t  var margin       = {top: 30, right: 20, bottom: 50, left: 75}\n\t    , width        = null\n\t    , height       = null\n\t    , color        = nv.utils.defaultColor()\n\t    , x            = d3.fisheye ? d3.fisheye.scale(d3.scale.linear).distortion(0) : scatter.xScale()\n\t    , y            = d3.fisheye ? d3.fisheye.scale(d3.scale.linear).distortion(0) : scatter.yScale()\n\t    , xPadding     = 0\n\t    , yPadding     = 0\n\t    , showDistX    = false\n\t    , showDistY    = false\n\t    , showLegend   = true\n\t    , showXAxis    = true\n\t    , showYAxis    = true\n\t    , rightAlignYAxis = false\n\t    , showControls = !!d3.fisheye\n\t    , fisheye      = 0\n\t    , pauseFisheye = false\n\t    , tooltips     = true\n\t    , tooltipX     = function(key, x, y) { return '<strong>' + x + '</strong>' }\n\t    , tooltipY     = function(key, x, y) { return '<strong>' + y + '</strong>' }\n\t    , tooltip      = null\n\t    , state = {}\n\t    , defaultState = null\n\t    , dispatch     = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n\t    , noData       = \"No Data Available.\"\n\t    , transitionDuration = 0\n\t    ;\n\t\n\t  scatter\n\t    .xScale(x)\n\t    .yScale(y)\n\t    ;\n\t  xAxis\n\t    .orient('bottom')\n\t    .tickPadding(10)\n\t    ;\n\t  yAxis\n\t    .orient((rightAlignYAxis) ? 'right' : 'left')\n\t    .tickPadding(10)\n\t    ;\n\t  distX\n\t    .axis('x')\n\t    ;\n\t  distY\n\t    .axis('y')\n\t    ;\n\t\n\t  controls.updateState(false);\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var x0, y0;\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t    //TODO: make tooltip style an option between single or dual on axes (maybe on all charts with axes?)\n\t\n\t    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t        leftX = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t        topX = y.range()[0] + margin.top + ( offsetElement.offsetTop || 0),\n\t        leftY = x.range()[0] + margin.left + ( offsetElement.offsetLeft || 0 ),\n\t        topY = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t        xVal = xAxis.tickFormat()(scatter.x()(e.point, e.pointIndex)),\n\t        yVal = yAxis.tickFormat()(scatter.y()(e.point, e.pointIndex));\n\t\n\t      if( tooltipX != null )\n\t          nv.tooltip.show([leftX, topX], tooltipX(e.series.key, xVal, yVal, e, chart), 'n', 1, offsetElement, 'x-nvtooltip');\n\t      if( tooltipY != null )\n\t          nv.tooltip.show([leftY, topY], tooltipY(e.series.key, xVal, yVal, e, chart), 'e', 1, offsetElement, 'y-nvtooltip');\n\t      if( tooltip != null )\n\t          nv.tooltip.show([left, top], tooltip(e.series.key, xVal, yVal, e, chart), e.value < 0 ? 'n' : 's', null, offsetElement);\n\t  };\n\t\n\t  var controlsData = [\n\t    { key: 'Magnify', disabled: true }\n\t  ];\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this),\n\t          that = this;\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t\n\t      chart.update = function() { container.call(chart); };\n\t      chart.container = this;\n\t\n\t      //set state.disabled\n\t      state.disabled = data.map(function(d) { return !!d.disabled });\n\t\n\t      if (!defaultState) {\n\t        var key;\n\t        defaultState = {};\n\t        for (key in state) {\n\t          if (state[key] instanceof Array)\n\t            defaultState[key] = state[key].slice(0);\n\t          else\n\t            defaultState[key] = state[key];\n\t        }\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t      // Display noData message if there's nothing to show.\n\t\n\t      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', margin.top + availableHeight / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x0 = x0 || x;\n\t      y0 = y0 || y;\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-scatterChart').data([data]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatterChart nv-chart-' + scatter.id());\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g');\n\t\n\t      // background for pointer events\n\t      gEnter.append('rect').attr('class', 'nvd3 nv-background');\n\t\n\t      gEnter.append('g').attr('class', 'nv-x nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-y nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-scatterWrap');\n\t      gEnter.append('g').attr('class', 'nv-distWrap');\n\t      gEnter.append('g').attr('class', 'nv-legendWrap');\n\t      gEnter.append('g').attr('class', 'nv-controlsWrap');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Legend\n\t\n\t      if (showLegend) {\n\t        var legendWidth = (showControls) ? availableWidth / 2 : availableWidth;\n\t        legend.width(legendWidth);\n\t\n\t        wrap.select('.nv-legendWrap')\n\t            .datum(data)\n\t            .call(legend);\n\t\n\t        if ( margin.top != legend.height()) {\n\t          margin.top = legend.height();\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t        }\n\t\n\t        wrap.select('.nv-legendWrap')\n\t            .attr('transform', 'translate(' + (availableWidth - legendWidth) + ',' + (-margin.top) +')');\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Controls\n\t\n\t      if (showControls) {\n\t        controls.width(180).color(['#444']);\n\t        g.select('.nv-controlsWrap')\n\t            .datum(controlsData)\n\t            .attr('transform', 'translate(0,' + (-margin.top) +')')\n\t            .call(controls);\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      if (rightAlignYAxis) {\n\t          g.select(\".nv-y.nv-axis\")\n\t              .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t      // Main Chart Component(s)\n\t\n\t      scatter\n\t          .width(availableWidth)\n\t          .height(availableHeight)\n\t          .color(data.map(function(d,i) {\n\t            return d.color || color(d, i);\n\t          }).filter(function(d,i) { return !data[i].disabled }));\n\t\n\t      if (xPadding !== 0)\n\t        scatter.xDomain(null);\n\t\n\t      if (yPadding !== 0)\n\t        scatter.yDomain(null);\n\t\n\t      wrap.select('.nv-scatterWrap')\n\t          .datum(data.filter(function(d) { return !d.disabled }))\n\t          .call(scatter);\n\t\n\t      //Adjust for x and y padding\n\t      if (xPadding !== 0) {\n\t        var xRange = x.domain()[1] - x.domain()[0];\n\t        scatter.xDomain([x.domain()[0] - (xPadding * xRange), x.domain()[1] + (xPadding * xRange)]);\n\t      }\n\t\n\t      if (yPadding !== 0) {\n\t        var yRange = y.domain()[1] - y.domain()[0];\n\t        scatter.yDomain([y.domain()[0] - (yPadding * yRange), y.domain()[1] + (yPadding * yRange)]);\n\t      }\n\t\n\t      //Only need to update the scatter again if x/yPadding changed the domain.\n\t      if (yPadding !== 0 || xPadding !== 0) {\n\t        wrap.select('.nv-scatterWrap')\n\t            .datum(data.filter(function(d) { return !d.disabled }))\n\t            .call(scatter);\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Axes\n\t      if (showXAxis) {\n\t        xAxis\n\t            .scale(x)\n\t            .ticks( xAxis.ticks() && xAxis.ticks().length ? xAxis.ticks() : availableWidth / 100 )\n\t            .tickSize( -availableHeight , 0);\n\t\n\t        g.select('.nv-x.nv-axis')\n\t            .attr('transform', 'translate(0,' + y.range()[0] + ')')\n\t            .call(xAxis);\n\t\n\t      }\n\t\n\t      if (showYAxis) {\n\t        yAxis\n\t            .scale(y)\n\t            .ticks( yAxis.ticks() && yAxis.ticks().length ? yAxis.ticks() : availableHeight / 36 )\n\t            .tickSize( -availableWidth, 0);\n\t\n\t        g.select('.nv-y.nv-axis')\n\t            .call(yAxis);\n\t      }\n\t\n\t\n\t      if (showDistX) {\n\t        distX\n\t            .getData(scatter.x())\n\t            .scale(x)\n\t            .width(availableWidth)\n\t            .color(data.map(function(d,i) {\n\t              return d.color || color(d, i);\n\t            }).filter(function(d,i) { return !data[i].disabled }));\n\t        gEnter.select('.nv-distWrap').append('g')\n\t            .attr('class', 'nv-distributionX');\n\t        g.select('.nv-distributionX')\n\t            .attr('transform', 'translate(0,' + y.range()[0] + ')')\n\t            .datum(data.filter(function(d) { return !d.disabled }))\n\t            .call(distX);\n\t      }\n\t\n\t      if (showDistY) {\n\t        distY\n\t            .getData(scatter.y())\n\t            .scale(y)\n\t            .width(availableHeight)\n\t            .color(data.map(function(d,i) {\n\t              return d.color || color(d, i);\n\t            }).filter(function(d,i) { return !data[i].disabled }));\n\t        gEnter.select('.nv-distWrap').append('g')\n\t            .attr('class', 'nv-distributionY');\n\t        g.select('.nv-distributionY')\n\t            .attr('transform', \n\t              'translate(' + (rightAlignYAxis ? availableWidth : -distY.size() ) + ',0)')\n\t            .datum(data.filter(function(d) { return !d.disabled }))\n\t            .call(distY);\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t\n\t\n\t      if (d3.fisheye) {\n\t        g.select('.nv-background')\n\t            .attr('width', availableWidth)\n\t            .attr('height', availableHeight);\n\t\n\t        g.select('.nv-background').on('mousemove', updateFisheye);\n\t        g.select('.nv-background').on('click', function() { pauseFisheye = !pauseFisheye;});\n\t        scatter.dispatch.on('elementClick.freezeFisheye', function() {\n\t          pauseFisheye = !pauseFisheye;\n\t        });\n\t      }\n\t\n\t\n\t      function updateFisheye() {\n\t        if (pauseFisheye) {\n\t          g.select('.nv-point-paths').style('pointer-events', 'all');\n\t          return false;\n\t        }\n\t\n\t        g.select('.nv-point-paths').style('pointer-events', 'none' );\n\t\n\t        var mouse = d3.mouse(this);\n\t        x.distortion(fisheye).focus(mouse[0]);\n\t        y.distortion(fisheye).focus(mouse[1]);\n\t\n\t        g.select('.nv-scatterWrap')\n\t            .call(scatter);\n\t\n\t        if (showXAxis)\n\t          g.select('.nv-x.nv-axis').call(xAxis);\n\t        \n\t        if (showYAxis)\n\t          g.select('.nv-y.nv-axis').call(yAxis);\n\t        \n\t        g.select('.nv-distributionX')\n\t            .datum(data.filter(function(d) { return !d.disabled }))\n\t            .call(distX);\n\t        g.select('.nv-distributionY')\n\t            .datum(data.filter(function(d) { return !d.disabled }))\n\t            .call(distY);\n\t      }\n\t\n\t\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t      controls.dispatch.on('legendClick', function(d,i) {\n\t        d.disabled = !d.disabled;\n\t\n\t        fisheye = d.disabled ? 0 : 2.5;\n\t        g.select('.nv-background') .style('pointer-events', d.disabled ? 'none' : 'all');\n\t        g.select('.nv-point-paths').style('pointer-events', d.disabled ? 'all' : 'none' );\n\t\n\t        if (d.disabled) {\n\t          x.distortion(fisheye).focus(0);\n\t          y.distortion(fisheye).focus(0);\n\t\n\t          g.select('.nv-scatterWrap').call(scatter);\n\t          g.select('.nv-x.nv-axis').call(xAxis);\n\t          g.select('.nv-y.nv-axis').call(yAxis);\n\t        } else {\n\t          pauseFisheye = false;\n\t        }\n\t\n\t        chart.update();\n\t      });\n\t\n\t      legend.dispatch.on('stateChange', function(newState) {\n\t        state.disabled = newState.disabled;\n\t        dispatch.stateChange(state);\n\t        chart.update();\n\t      });\n\t\n\t      scatter.dispatch.on('elementMouseover.tooltip', function(e) {\n\t        d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-distx-' + e.pointIndex)\n\t            .attr('y1', function(d,i) { return e.pos[1] - availableHeight;});\n\t        d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-disty-' + e.pointIndex)\n\t            .attr('x2', e.pos[0] + distX.size());\n\t\n\t        e.pos = [e.pos[0] + margin.left, e.pos[1] + margin.top];\n\t        dispatch.tooltipShow(e);\n\t      });\n\t\n\t      dispatch.on('tooltipShow', function(e) {\n\t        if (tooltips) showTooltip(e, that.parentNode);\n\t      });\n\t\n\t      // Update chart from a state object passed to event handler\n\t      dispatch.on('changeState', function(e) {\n\t\n\t        if (typeof e.disabled !== 'undefined') {\n\t          data.forEach(function(series,i) {\n\t            series.disabled = e.disabled[i];\n\t          });\n\t\n\t          state.disabled = e.disabled;\n\t        }\n\t\n\t        chart.update();\n\t      });\n\t\n\t      //============================================================\n\t\n\t\n\t      //store old scales for use in transitions on update\n\t      x0 = x.copy();\n\t      y0 = y.copy();\n\t\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  scatter.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t\n\t    d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-distx-' + e.pointIndex)\n\t        .attr('y1', 0);\n\t    d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-disty-' + e.pointIndex)\n\t        .attr('x2', distY.size());\n\t  });\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.dispatch = dispatch;\n\t  chart.scatter = scatter;\n\t  chart.legend = legend;\n\t  chart.controls = controls;\n\t  chart.xAxis = xAxis;\n\t  chart.yAxis = yAxis;\n\t  chart.distX = distX;\n\t  chart.distY = distY;\n\t\n\t  d3.rebind(chart, scatter, 'id', 'interactive', 'pointActive', 'x', 'y', 'shape', 'size', 'xScale', 'yScale', 'zScale', 'xDomain', 'yDomain', 'xRange', 'yRange', 'sizeDomain', 'sizeRange', 'forceX', 'forceY', 'forceSize', 'clipVoronoi', 'clipRadius', 'useVoronoi');\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    legend.color(color);\n\t    distX.color(color);\n\t    distY.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.showDistX = function(_) {\n\t    if (!arguments.length) return showDistX;\n\t    showDistX = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showDistY = function(_) {\n\t    if (!arguments.length) return showDistY;\n\t    showDistY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showControls = function(_) {\n\t    if (!arguments.length) return showControls;\n\t    showControls = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showLegend = function(_) {\n\t    if (!arguments.length) return showLegend;\n\t    showLegend = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showXAxis = function(_) {\n\t    if (!arguments.length) return showXAxis;\n\t    showXAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showYAxis = function(_) {\n\t    if (!arguments.length) return showYAxis;\n\t    showYAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.rightAlignYAxis = function(_) {\n\t    if(!arguments.length) return rightAlignYAxis;\n\t    rightAlignYAxis = _;\n\t    yAxis.orient( (_) ? 'right' : 'left');\n\t    return chart;\n\t  };\n\t\n\t\n\t  chart.fisheye = function(_) {\n\t    if (!arguments.length) return fisheye;\n\t    fisheye = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xPadding = function(_) {\n\t    if (!arguments.length) return xPadding;\n\t    xPadding = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yPadding = function(_) {\n\t    if (!arguments.length) return yPadding;\n\t    yPadding = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipXContent = function(_) {\n\t    if (!arguments.length) return tooltipX;\n\t    tooltipX = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipYContent = function(_) {\n\t    if (!arguments.length) return tooltipY;\n\t    tooltipY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.state = function(_) {\n\t    if (!arguments.length) return state;\n\t    state = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.defaultState = function(_) {\n\t    if (!arguments.length) return defaultState;\n\t    defaultState = _;\n\t    return chart;\n\t  };\n\t  \n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.transitionDuration = function(_) {\n\t    if (!arguments.length) return transitionDuration;\n\t    transitionDuration = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.scatterPlusLineChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var scatter      = nv.models.scatter()\n\t    , xAxis        = nv.models.axis()\n\t    , yAxis        = nv.models.axis()\n\t    , legend       = nv.models.legend()\n\t    , controls     = nv.models.legend()\n\t    , distX        = nv.models.distribution()\n\t    , distY        = nv.models.distribution()\n\t    ;\n\t\n\t  var margin       = {top: 30, right: 20, bottom: 50, left: 75}\n\t    , width        = null\n\t    , height       = null\n\t    , color        = nv.utils.defaultColor()\n\t    , x            = d3.fisheye ? d3.fisheye.scale(d3.scale.linear).distortion(0) : scatter.xScale()\n\t    , y            = d3.fisheye ? d3.fisheye.scale(d3.scale.linear).distortion(0) : scatter.yScale()\n\t    , showDistX    = false\n\t    , showDistY    = false\n\t    , showLegend   = true\n\t    , showXAxis    = true\n\t    , showYAxis    = true\n\t    , rightAlignYAxis = false\n\t    , showControls = !!d3.fisheye\n\t    , fisheye      = 0\n\t    , pauseFisheye = false\n\t    , tooltips     = true\n\t    , tooltipX     = function(key, x, y) { return '<strong>' + x + '</strong>' }\n\t    , tooltipY     = function(key, x, y) { return '<strong>' + y + '</strong>' }\n\t    , tooltip      = function(key, x, y, date) { return '<h3>' + key + '</h3>' \n\t                                                      + '<p>' + date + '</p>' }\n\t    , state = {}\n\t    , defaultState = null\n\t    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n\t    , noData       = \"No Data Available.\"\n\t    , transitionDuration = 0\n\t    ;\n\t\n\t  scatter\n\t    .xScale(x)\n\t    .yScale(y)\n\t    ;\n\t  xAxis\n\t    .orient('bottom')\n\t    .tickPadding(10)\n\t    ;\n\t  yAxis\n\t    .orient((rightAlignYAxis) ? 'right' : 'left')\n\t    .tickPadding(10)\n\t    ;\n\t  distX\n\t    .axis('x')\n\t    ;\n\t  distY\n\t    .axis('y')\n\t    ;\n\t  \n\t  controls.updateState(false);\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var x0, y0;\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t    //TODO: make tooltip style an option between single or dual on axes (maybe on all charts with axes?)\n\t\n\t    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t        leftX = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t        topX = y.range()[0] + margin.top + ( offsetElement.offsetTop || 0),\n\t        leftY = x.range()[0] + margin.left + ( offsetElement.offsetLeft || 0 ),\n\t        topY = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t        xVal = xAxis.tickFormat()(scatter.x()(e.point, e.pointIndex)),\n\t        yVal = yAxis.tickFormat()(scatter.y()(e.point, e.pointIndex));\n\t\n\t      if( tooltipX != null )\n\t          nv.tooltip.show([leftX, topX], tooltipX(e.series.key, xVal, yVal, e, chart), 'n', 1, offsetElement, 'x-nvtooltip');\n\t      if( tooltipY != null )\n\t          nv.tooltip.show([leftY, topY], tooltipY(e.series.key, xVal, yVal, e, chart), 'e', 1, offsetElement, 'y-nvtooltip');\n\t      if( tooltip != null )\n\t          nv.tooltip.show([left, top], tooltip(e.series.key, xVal, yVal, e.point.tooltip, e, chart), e.value < 0 ? 'n' : 's', null, offsetElement);\n\t  };\n\t\n\t  var controlsData = [\n\t    { key: 'Magnify', disabled: true }\n\t  ];\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this),\n\t          that = this;\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t\n\t      chart.update = function() { container.call(chart); };\n\t      chart.container = this;\n\t\n\t      //set state.disabled\n\t      state.disabled = data.map(function(d) { return !!d.disabled });\n\t\n\t      if (!defaultState) {\n\t        var key;\n\t        defaultState = {};\n\t        for (key in state) {\n\t          if (state[key] instanceof Array)\n\t            defaultState[key] = state[key].slice(0);\n\t          else\n\t            defaultState[key] = state[key];\n\t        }\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t      // Display noData message if there's nothing to show.\n\t\n\t      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', margin.top + availableHeight / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x = scatter.xScale();\n\t      y = scatter.yScale();\n\t\n\t      x0 = x0 || x;\n\t      y0 = y0 || y;\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-scatterChart').data([data]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatterChart nv-chart-' + scatter.id());\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g')\n\t\n\t      // background for pointer events\n\t      gEnter.append('rect').attr('class', 'nvd3 nv-background').style(\"pointer-events\",\"none\");\n\t\n\t      gEnter.append('g').attr('class', 'nv-x nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-y nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-scatterWrap');\n\t      gEnter.append('g').attr('class', 'nv-regressionLinesWrap');\n\t      gEnter.append('g').attr('class', 'nv-distWrap');\n\t      gEnter.append('g').attr('class', 'nv-legendWrap');\n\t      gEnter.append('g').attr('class', 'nv-controlsWrap');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      if (rightAlignYAxis) {\n\t          g.select(\".nv-y.nv-axis\")\n\t              .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Legend\n\t\n\t      if (showLegend) {\n\t        legend.width( availableWidth / 2 );\n\t\n\t        wrap.select('.nv-legendWrap')\n\t            .datum(data)\n\t            .call(legend);\n\t\n\t        if ( margin.top != legend.height()) {\n\t          margin.top = legend.height();\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t        }\n\t\n\t        wrap.select('.nv-legendWrap')\n\t            .attr('transform', 'translate(' + (availableWidth / 2) + ',' + (-margin.top) +')');\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Controls\n\t\n\t      if (showControls) {\n\t        controls.width(180).color(['#444']);\n\t        g.select('.nv-controlsWrap')\n\t            .datum(controlsData)\n\t            .attr('transform', 'translate(0,' + (-margin.top) +')')\n\t            .call(controls);\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Main Chart Component(s)\n\t\n\t      scatter\n\t          .width(availableWidth)\n\t          .height(availableHeight)\n\t          .color(data.map(function(d,i) {\n\t            return d.color || color(d, i);\n\t          }).filter(function(d,i) { return !data[i].disabled }))\n\t\n\t      wrap.select('.nv-scatterWrap')\n\t          .datum(data.filter(function(d) { return !d.disabled }))\n\t          .call(scatter);\n\t\n\t      wrap.select('.nv-regressionLinesWrap')\n\t          .attr('clip-path', 'url(#nv-edge-clip-' + scatter.id() + ')');\n\t\n\t      var regWrap = wrap.select('.nv-regressionLinesWrap').selectAll('.nv-regLines')\n\t                      .data(function(d) {return d });\n\t      \n\t      regWrap.enter().append('g').attr('class', 'nv-regLines');\n\t\n\t      var regLine = regWrap.selectAll('.nv-regLine').data(function(d){return [d]});\n\t      var regLineEnter = regLine.enter()\n\t                       .append('line').attr('class', 'nv-regLine')\n\t                       .style('stroke-opacity', 0);\n\t\n\t      regLine\n\t          \n\t          .attr('x1', x.range()[0])\n\t          .attr('x2', x.range()[1])\n\t          .attr('y1', function(d,i) {return y(x.domain()[0] * d.slope + d.intercept) })\n\t          .attr('y2', function(d,i) { return y(x.domain()[1] * d.slope + d.intercept) })\n\t          .style('stroke', function(d,i,j) { return color(d,j) })\n\t          .style('stroke-opacity', function(d,i) {\n\t            return (d.disabled || typeof d.slope === 'undefined' || typeof d.intercept === 'undefined') ? 0 : 1 \n\t          });\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Axes\n\t\n\t      if (showXAxis) {\n\t        xAxis\n\t            .scale(x)\n\t            .ticks( xAxis.ticks() ? xAxis.ticks() : availableWidth / 100 )\n\t            .tickSize( -availableHeight , 0);\n\t\n\t        g.select('.nv-x.nv-axis')\n\t            .attr('transform', 'translate(0,' + y.range()[0] + ')')\n\t            .call(xAxis);\n\t      }\n\t\n\t      if (showYAxis) {\n\t        yAxis\n\t            .scale(y)\n\t            .ticks( yAxis.ticks() ? yAxis.ticks() : availableHeight / 36 )\n\t            .tickSize( -availableWidth, 0);\n\t\n\t        g.select('.nv-y.nv-axis')\n\t            .call(yAxis);\n\t      }\n\t\n\t\n\t      if (showDistX) {\n\t        distX\n\t            .getData(scatter.x())\n\t            .scale(x)\n\t            .width(availableWidth)\n\t            .color(data.map(function(d,i) {\n\t              return d.color || color(d, i);\n\t            }).filter(function(d,i) { return !data[i].disabled }));\n\t        gEnter.select('.nv-distWrap').append('g')\n\t            .attr('class', 'nv-distributionX');\n\t        g.select('.nv-distributionX')\n\t            .attr('transform', 'translate(0,' + y.range()[0] + ')')\n\t            .datum(data.filter(function(d) { return !d.disabled }))\n\t            .call(distX);\n\t      }\n\t\n\t      if (showDistY) {\n\t        distY\n\t            .getData(scatter.y())\n\t            .scale(y)\n\t            .width(availableHeight)\n\t            .color(data.map(function(d,i) {\n\t              return d.color || color(d, i);\n\t            }).filter(function(d,i) { return !data[i].disabled }));\n\t        gEnter.select('.nv-distWrap').append('g')\n\t            .attr('class', 'nv-distributionY');\n\t        g.select('.nv-distributionY')\n\t            .attr('transform', 'translate(' + (rightAlignYAxis ? availableWidth : -distY.size() ) + ',0)')\n\t            .datum(data.filter(function(d) { return !d.disabled }))\n\t            .call(distY);\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t\n\t\n\t      if (d3.fisheye) {\n\t        g.select('.nv-background')\n\t            .attr('width', availableWidth)\n\t            .attr('height', availableHeight)\n\t            ;\n\t\n\t        g.select('.nv-background').on('mousemove', updateFisheye);\n\t        g.select('.nv-background').on('click', function() { pauseFisheye = !pauseFisheye;});\n\t        scatter.dispatch.on('elementClick.freezeFisheye', function() {\n\t          pauseFisheye = !pauseFisheye;\n\t        });\n\t      }\n\t\n\t\n\t      function updateFisheye() {\n\t        if (pauseFisheye) {\n\t          g.select('.nv-point-paths').style('pointer-events', 'all');\n\t          return false;\n\t        }\n\t\n\t        g.select('.nv-point-paths').style('pointer-events', 'none' );\n\t\n\t        var mouse = d3.mouse(this);\n\t        x.distortion(fisheye).focus(mouse[0]);\n\t        y.distortion(fisheye).focus(mouse[1]);\n\t\n\t        g.select('.nv-scatterWrap')\n\t            .datum(data.filter(function(d) { return !d.disabled }))\n\t            .call(scatter);\n\t\n\t        if (showXAxis)\n\t          g.select('.nv-x.nv-axis').call(xAxis);\n\t\n\t        if (showYAxis)\n\t          g.select('.nv-y.nv-axis').call(yAxis);\n\t        \n\t        g.select('.nv-distributionX')\n\t            .datum(data.filter(function(d) { return !d.disabled }))\n\t            .call(distX);\n\t        g.select('.nv-distributionY')\n\t            .datum(data.filter(function(d) { return !d.disabled }))\n\t            .call(distY);\n\t      }\n\t\n\t\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t      controls.dispatch.on('legendClick', function(d,i) {\n\t        d.disabled = !d.disabled;\n\t\n\t        fisheye = d.disabled ? 0 : 2.5;\n\t        g.select('.nv-background') .style('pointer-events', d.disabled ? 'none' : 'all');\n\t        g.select('.nv-point-paths').style('pointer-events', d.disabled ? 'all' : 'none' );\n\t\n\t        if (d.disabled) {\n\t          x.distortion(fisheye).focus(0);\n\t          y.distortion(fisheye).focus(0);\n\t\n\t          g.select('.nv-scatterWrap').call(scatter);\n\t          g.select('.nv-x.nv-axis').call(xAxis);\n\t          g.select('.nv-y.nv-axis').call(yAxis);\n\t        } else {\n\t          pauseFisheye = false;\n\t        }\n\t\n\t        chart.update();\n\t      });\n\t\n\t      legend.dispatch.on('stateChange', function(newState) { \n\t        state = newState;\n\t        dispatch.stateChange(state);\n\t        chart.update();\n\t      });\n\t\n\t\n\t      scatter.dispatch.on('elementMouseover.tooltip', function(e) {\n\t        d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-distx-' + e.pointIndex)\n\t            .attr('y1', e.pos[1] - availableHeight);\n\t        d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-disty-' + e.pointIndex)\n\t            .attr('x2', e.pos[0] + distX.size());\n\t\n\t        e.pos = [e.pos[0] + margin.left, e.pos[1] + margin.top];\n\t        dispatch.tooltipShow(e);\n\t      });\n\t\n\t      dispatch.on('tooltipShow', function(e) {\n\t        if (tooltips) showTooltip(e, that.parentNode);\n\t      });\n\t\n\t      // Update chart from a state object passed to event handler\n\t      dispatch.on('changeState', function(e) {\n\t\n\t        if (typeof e.disabled !== 'undefined') {\n\t          data.forEach(function(series,i) {\n\t            series.disabled = e.disabled[i];\n\t          });\n\t\n\t          state.disabled = e.disabled;\n\t        }\n\t\n\t        chart.update();\n\t      });\n\t\n\t      //============================================================\n\t\n\t\n\t      //store old scales for use in transitions on update\n\t      x0 = x.copy();\n\t      y0 = y.copy();\n\t\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  scatter.dispatch.on('elementMouseout.tooltip', function(e) {\n\t    dispatch.tooltipHide(e);\n\t\n\t    d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-distx-' + e.pointIndex)\n\t        .attr('y1', 0);\n\t    d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-disty-' + e.pointIndex)\n\t        .attr('x2', distY.size());\n\t  });\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.dispatch = dispatch;\n\t  chart.scatter = scatter;\n\t  chart.legend = legend;\n\t  chart.controls = controls;\n\t  chart.xAxis = xAxis;\n\t  chart.yAxis = yAxis;\n\t  chart.distX = distX;\n\t  chart.distY = distY;\n\t\n\t  d3.rebind(chart, scatter, 'id', 'interactive', 'pointActive', 'x', 'y', 'shape', 'size', 'xScale', 'yScale', 'zScale', 'xDomain', 'yDomain', 'xRange', 'yRange', 'sizeDomain', 'sizeRange', 'forceX', 'forceY', 'forceSize', 'clipVoronoi', 'clipRadius', 'useVoronoi');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    legend.color(color);\n\t    distX.color(color);\n\t    distY.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.showDistX = function(_) {\n\t    if (!arguments.length) return showDistX;\n\t    showDistX = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showDistY = function(_) {\n\t    if (!arguments.length) return showDistY;\n\t    showDistY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showControls = function(_) {\n\t    if (!arguments.length) return showControls;\n\t    showControls = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showLegend = function(_) {\n\t    if (!arguments.length) return showLegend;\n\t    showLegend = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showXAxis = function(_) {\n\t    if (!arguments.length) return showXAxis;\n\t    showXAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showYAxis = function(_) {\n\t    if (!arguments.length) return showYAxis;\n\t    showYAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.rightAlignYAxis = function(_) {\n\t    if(!arguments.length) return rightAlignYAxis;\n\t    rightAlignYAxis = _;\n\t    yAxis.orient( (_) ? 'right' : 'left');\n\t    return chart;\n\t  };\n\t\n\t  chart.fisheye = function(_) {\n\t    if (!arguments.length) return fisheye;\n\t    fisheye = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipXContent = function(_) {\n\t    if (!arguments.length) return tooltipX;\n\t    tooltipX = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipYContent = function(_) {\n\t    if (!arguments.length) return tooltipY;\n\t    tooltipY = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.state = function(_) {\n\t    if (!arguments.length) return state;\n\t    state = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.defaultState = function(_) {\n\t    if (!arguments.length) return defaultState;\n\t    defaultState = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.transitionDuration = function(_) {\n\t    if (!arguments.length) return transitionDuration;\n\t    transitionDuration = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.sparkline = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var margin = {top: 2, right: 0, bottom: 2, left: 0}\n\t    , width = 400\n\t    , height = 32\n\t    , animate = true\n\t    , x = d3.scale.linear()\n\t    , y = d3.scale.linear()\n\t    , getX = function(d) { return d.x }\n\t    , getY = function(d) { return d.y }\n\t    , color = nv.utils.getColor(['#000'])\n\t    , xDomain\n\t    , yDomain\n\t    , xRange\n\t    , yRange\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var availableWidth = width - margin.left - margin.right,\n\t          availableHeight = height - margin.top - margin.bottom,\n\t          container = d3.select(this);\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x   .domain(xDomain || d3.extent(data, getX ))\n\t          .range(xRange || [0, availableWidth]);\n\t\n\t      y   .domain(yDomain || d3.extent(data, getY ))\n\t          .range(yRange || [availableHeight, 0]);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-sparkline').data([data]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparkline');\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      var paths = wrap.selectAll('path')\n\t          .data(function(d) { return [d] });\n\t      paths.enter().append('path');\n\t      paths.exit().remove();\n\t      paths\n\t          .style('stroke', function(d,i) { return d.color || color(d, i) })\n\t          .attr('d', d3.svg.line()\n\t            .x(function(d,i) { return x(getX(d,i)) })\n\t            .y(function(d,i) { return y(getY(d,i)) })\n\t          );\n\t\n\t\n\t      // TODO: Add CURRENT data point (Need Min, Mac, Current / Most recent)\n\t      var points = wrap.selectAll('circle.nv-point')\n\t          .data(function(data) {\n\t              var yValues = data.map(function(d, i) { return getY(d,i); });\n\t              function pointIndex(index) {\n\t                  if (index != -1) {\n\t\t              var result = data[index];\n\t                      result.pointIndex = index;\n\t                      return result;\n\t                  } else {\n\t                      return null;\n\t                  }\n\t              }\n\t              var maxPoint = pointIndex(yValues.lastIndexOf(y.domain()[1])),\n\t                  minPoint = pointIndex(yValues.indexOf(y.domain()[0])),\n\t                  currentPoint = pointIndex(yValues.length - 1);\n\t              return [minPoint, maxPoint, currentPoint].filter(function (d) {return d != null;});\n\t          });\n\t      points.enter().append('circle');\n\t      points.exit().remove();\n\t      points\n\t          .attr('cx', function(d,i) { return x(getX(d,d.pointIndex)) })\n\t          .attr('cy', function(d,i) { return y(getY(d,d.pointIndex)) })\n\t          .attr('r', 2)\n\t          .attr('class', function(d,i) {\n\t            return getX(d, d.pointIndex) == x.domain()[1] ? 'nv-point nv-currentValue' :\n\t                   getY(d, d.pointIndex) == y.domain()[0] ? 'nv-point nv-minValue' : 'nv-point nv-maxValue'\n\t          });\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.x = function(_) {\n\t    if (!arguments.length) return getX;\n\t    getX = d3.functor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.y = function(_) {\n\t    if (!arguments.length) return getY;\n\t    getY = d3.functor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.xScale = function(_) {\n\t    if (!arguments.length) return x;\n\t    x = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yScale = function(_) {\n\t    if (!arguments.length) return y;\n\t    y = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xDomain = function(_) {\n\t    if (!arguments.length) return xDomain;\n\t    xDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yDomain = function(_) {\n\t    if (!arguments.length) return yDomain;\n\t    yDomain = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xRange = function(_) {\n\t    if (!arguments.length) return xRange;\n\t    xRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yRange = function(_) {\n\t    if (!arguments.length) return yRange;\n\t    yRange = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.animate = function(_) {\n\t    if (!arguments.length) return animate;\n\t    animate = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.sparklinePlus = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var sparkline = nv.models.sparkline();\n\t\n\t  var margin = {top: 15, right: 100, bottom: 10, left: 50}\n\t    , width = null\n\t    , height = null\n\t    , x\n\t    , y\n\t    , index = []\n\t    , paused = false\n\t    , xTickFormat = d3.format(',r')\n\t    , yTickFormat = d3.format(',.2f')\n\t    , showValue = true\n\t    , alignValue = true\n\t    , rightAlignValue = false\n\t    , noData = \"No Data Available.\"\n\t    ;\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this);\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t\n\t      \n\t\n\t      chart.update = function() { chart(selection) };\n\t      chart.container = this;\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Display No Data message if there's nothing to show.\n\t\n\t      if (!data || !data.length) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', margin.top + availableHeight / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      var currentValue = sparkline.y()(data[data.length-1], data.length-1);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x = sparkline.xScale();\n\t      y = sparkline.yScale();\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-sparklineplus').data([data]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparklineplus');\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-sparklineWrap');\n\t      gEnter.append('g').attr('class', 'nv-valueWrap');\n\t      gEnter.append('g').attr('class', 'nv-hoverArea');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Main Chart Component(s)\n\t\n\t      var sparklineWrap = g.select('.nv-sparklineWrap');\n\t\n\t      sparkline\n\t        .width(availableWidth)\n\t        .height(availableHeight);\n\t\n\t      sparklineWrap\n\t          .call(sparkline);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      var valueWrap = g.select('.nv-valueWrap');\n\t      \n\t      var value = valueWrap.selectAll('.nv-currentValue')\n\t          .data([currentValue]);\n\t\n\t      value.enter().append('text').attr('class', 'nv-currentValue')\n\t          .attr('dx', rightAlignValue ? -8 : 8)\n\t          .attr('dy', '.9em')\n\t          .style('text-anchor', rightAlignValue ? 'end' : 'start');\n\t\n\t      value\n\t          .attr('x', availableWidth + (rightAlignValue ? margin.right : 0))\n\t          .attr('y', alignValue ? function(d) { return y(d) } : 0)\n\t          .style('fill', sparkline.color()(data[data.length-1], data.length-1))\n\t          .text(yTickFormat(currentValue));\n\t\n\t\n\t\n\t      gEnter.select('.nv-hoverArea').append('rect')\n\t          .on('mousemove', sparklineHover)\n\t          .on('click', function() { paused = !paused })\n\t          .on('mouseout', function() { index = []; updateValueLine(); });\n\t          //.on('mouseout', function() { index = null; updateValueLine(); });\n\t\n\t      g.select('.nv-hoverArea rect')\n\t          .attr('transform', function(d) { return 'translate(' + -margin.left + ',' + -margin.top + ')' })\n\t          .attr('width', availableWidth + margin.left + margin.right)\n\t          .attr('height', availableHeight + margin.top);\n\t\n\t\n\t\n\t      function updateValueLine() { //index is currently global (within the chart), may or may not keep it that way\n\t        if (paused) return;\n\t\n\t        var hoverValue = g.selectAll('.nv-hoverValue').data(index)\n\t\n\t        var hoverEnter = hoverValue.enter()\n\t          .append('g').attr('class', 'nv-hoverValue')\n\t            .style('stroke-opacity', 0)\n\t            .style('fill-opacity', 0);\n\t\n\t        hoverValue.exit()\n\t          \n\t            .style('stroke-opacity', 0)\n\t            .style('fill-opacity', 0)\n\t            .remove();\n\t\n\t        hoverValue\n\t            .attr('transform', function(d) { return 'translate(' + x(sparkline.x()(data[d],d)) + ',0)' })\n\t          \n\t            .style('stroke-opacity', 1)\n\t            .style('fill-opacity', 1);\n\t\n\t        if (!index.length) return;\n\t\n\t        hoverEnter.append('line')\n\t            .attr('x1', 0)\n\t            .attr('y1', -margin.top)\n\t            .attr('x2', 0)\n\t            .attr('y2', availableHeight);\n\t\n\t\n\t        hoverEnter.append('text').attr('class', 'nv-xValue')\n\t            .attr('x', -6)\n\t            .attr('y', -margin.top)\n\t            .attr('text-anchor', 'end')\n\t            .attr('dy', '.9em')\n\t\n\t\n\t        g.select('.nv-hoverValue .nv-xValue')\n\t            .text(xTickFormat(sparkline.x()(data[index[0]], index[0])));\n\t\n\t        hoverEnter.append('text').attr('class', 'nv-yValue')\n\t            .attr('x', 6)\n\t            .attr('y', -margin.top)\n\t            .attr('text-anchor', 'start')\n\t            .attr('dy', '.9em')\n\t\n\t        g.select('.nv-hoverValue .nv-yValue')\n\t            .text(yTickFormat(sparkline.y()(data[index[0]], index[0])));\n\t\n\t      }\n\t\n\t\n\t      function sparklineHover() {\n\t        if (paused) return;\n\t\n\t        var pos = d3.mouse(this)[0] - margin.left;\n\t\n\t        function getClosestIndex(data, x) {\n\t          var distance = Math.abs(sparkline.x()(data[0], 0) - x);\n\t          var closestIndex = 0;\n\t          for (var i = 0; i < data.length; i++){\n\t            if (Math.abs(sparkline.x()(data[i], i) - x) < distance) {\n\t              distance = Math.abs(sparkline.x()(data[i], i) - x);\n\t              closestIndex = i;\n\t            }\n\t          }\n\t          return closestIndex;\n\t        }\n\t\n\t        index = [getClosestIndex(data, Math.round(x.invert(pos)))];\n\t\n\t        updateValueLine();\n\t      }\n\t\n\t    });\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.sparkline = sparkline;\n\t\n\t  d3.rebind(chart, sparkline, 'x', 'y', 'xScale', 'yScale', 'color');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t  \n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.xTickFormat = function(_) {\n\t    if (!arguments.length) return xTickFormat;\n\t    xTickFormat = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.yTickFormat = function(_) {\n\t    if (!arguments.length) return yTickFormat;\n\t    yTickFormat = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showValue = function(_) {\n\t    if (!arguments.length) return showValue;\n\t    showValue = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.alignValue = function(_) {\n\t    if (!arguments.length) return alignValue;\n\t    alignValue = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.rightAlignValue = function(_) {\n\t    if (!arguments.length) return rightAlignValue;\n\t    rightAlignValue = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.stackedArea = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t    , width = 960\n\t    , height = 500\n\t    , color = nv.utils.defaultColor() // a function that computes the color\n\t    , id = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't selet one\n\t    , getX = function(d) { return d.x } // accessor to get the x value from a data point\n\t    , getY = function(d) { return d.y } // accessor to get the y value from a data point\n\t    , style = 'stack'\n\t    , offset = 'zero'\n\t    , order = 'default'\n\t    , interpolate = 'linear'  // controls the line interpolation\n\t    , clipEdge = false // if true, masks lines within x and y scale\n\t    , x //can be accessed via chart.xScale()\n\t    , y //can be accessed via chart.yScale()\n\t    , scatter = nv.models.scatter()\n\t    , dispatch =  d3.dispatch('tooltipShow', 'tooltipHide', 'areaClick', 'areaMouseover', 'areaMouseout')\n\t    ;\n\t\n\t  scatter\n\t    .size(2.2) // default size\n\t    .sizeDomain([2.2,2.2]) // all the same size by default\n\t    ;\n\t\n\t  /************************************\n\t   * offset:\n\t   *   'wiggle' (stream)\n\t   *   'zero' (stacked)\n\t   *   'expand' (normalize to 100%)\n\t   *   'silhouette' (simple centered)\n\t   *\n\t   * order:\n\t   *   'inside-out' (stream)\n\t   *   'default' (input order)\n\t   ************************************/\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var availableWidth = width - margin.left - margin.right,\n\t          availableHeight = height - margin.top - margin.bottom,\n\t          container = d3.select(this);\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x = scatter.xScale();\n\t      y = scatter.yScale();\n\t\n\t      //------------------------------------------------------------\n\t\n\t      var dataRaw = data;\n\t      // Injecting point index into each point because d3.layout.stack().out does not give index\n\t      data.forEach(function(aseries, i) {\n\t        aseries.seriesIndex = i;\n\t        aseries.values = aseries.values.map(function(d, j) {\n\t          d.index = j;\n\t          d.seriesIndex = i;\n\t          return d;\n\t        });\n\t      });\n\t\n\t      var dataFiltered = data.filter(function(series) {\n\t            return !series.disabled;\n\t      });\n\t\n\t      data = d3.layout.stack()\n\t               .order(order)\n\t               .offset(offset)\n\t               .values(function(d) { return d.values })  //TODO: make values customizeable in EVERY model in this fashion\n\t               .x(getX)\n\t               .y(getY)\n\t               .out(function(d, y0, y) {\n\t                    var yHeight = (getY(d) === 0) ? 0 : y;\n\t                    d.display = {\n\t                      y: yHeight,\n\t                     y0: y0\n\t                    };\n\t                })\n\t              (dataFiltered);\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-stackedarea').data([data]);\n\t      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedarea');\n\t      var defsEnter = wrapEnter.append('defs');\n\t      var gEnter = wrapEnter.append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append('g').attr('class', 'nv-areaWrap');\n\t      gEnter.append('g').attr('class', 'nv-scatterWrap');\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      scatter\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t        .x(getX)\n\t        .y(function(d) { return d.display.y + d.display.y0 })\n\t        .forceY([0])\n\t        .color(data.map(function(d,i) {\n\t          return d.color || color(d, d.seriesIndex);\n\t        }));\n\t\n\t\n\t      var scatterWrap = g.select('.nv-scatterWrap')\n\t          .datum(data);\n\t\n\t      scatterWrap.call(scatter);\n\t\n\t      defsEnter.append('clipPath')\n\t          .attr('id', 'nv-edge-clip-' + id)\n\t        .append('rect');\n\t\n\t      wrap.select('#nv-edge-clip-' + id + ' rect')\n\t          .attr('width', availableWidth)\n\t          .attr('height', availableHeight);\n\t\n\t      g   .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\t\n\t      var area = d3.svg.area()\n\t          .x(function(d,i)  { return x(getX(d,i)) })\n\t          .y0(function(d) {\n\t              return y(d.display.y0)\n\t          })\n\t          .y1(function(d) {\n\t              return y(d.display.y + d.display.y0)\n\t          })\n\t          .interpolate(interpolate);\n\t\n\t      var zeroArea = d3.svg.area()\n\t          .x(function(d,i)  { return x(getX(d,i)) })\n\t          .y0(function(d) { return y(d.display.y0) })\n\t          .y1(function(d) { return y(d.display.y0) });\n\t\n\t\n\t      var path = g.select('.nv-areaWrap').selectAll('path.nv-area')\n\t          .data(function(d) { return d });\n\t\n\t      path.enter().append('path').attr('class', function(d,i) { return 'nv-area nv-area-' + i })\n\t          .attr('d', function(d,i){\n\t            return zeroArea(d.values, d.seriesIndex);\n\t          })\n\t          .on('mouseover', function(d,i) {\n\t            d3.select(this).classed('hover', true);\n\t            dispatch.areaMouseover({\n\t              point: d,\n\t              series: d.key,\n\t              pos: [d3.event.pageX, d3.event.pageY],\n\t              seriesIndex: d.seriesIndex\n\t            });\n\t          })\n\t          .on('mouseout', function(d,i) {\n\t            d3.select(this).classed('hover', false);\n\t            dispatch.areaMouseout({\n\t              point: d,\n\t              series: d.key,\n\t              pos: [d3.event.pageX, d3.event.pageY],\n\t              seriesIndex: d.seriesIndex\n\t            });\n\t          })\n\t          .on('click', function(d,i) {\n\t            d3.select(this).classed('hover', false);\n\t            dispatch.areaClick({\n\t              point: d,\n\t              series: d.key,\n\t              pos: [d3.event.pageX, d3.event.pageY],\n\t              seriesIndex: d.seriesIndex\n\t            });\n\t          })\n\t\n\t      path.exit().remove();\n\t\n\t      path\n\t          .style('fill', function(d,i){\n\t            return d.color || color(d, d.seriesIndex)\n\t          })\n\t          .style('stroke', function(d,i){ return d.color || color(d, d.seriesIndex) });\n\t      path\n\t          .attr('d', function(d,i) {\n\t            return area(d.values,i)\n\t          });\n\t\n\t\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t      scatter.dispatch.on('elementMouseover.area', function(e) {\n\t        g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', true);\n\t      });\n\t      scatter.dispatch.on('elementMouseout.area', function(e) {\n\t        g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', false);\n\t      });\n\t\n\t      //============================================================\n\t      //Special offset functions\n\t      chart.d3_stackedOffset_stackPercent = function(stackData) {\n\t          var n = stackData.length,    //How many series\n\t          m = stackData[0].length,     //how many points per series\n\t          k = 1 / n,\n\t           i,\n\t           j,\n\t           o,\n\t           y0 = [];\n\t\n\t          for (j = 0; j < m; ++j) { //Looping through all points\n\t            for (i = 0, o = 0; i < dataRaw.length; i++)  //looping through series'\n\t                o += getY(dataRaw[i].values[j])   //total value of all points at a certian point in time.\n\t\n\t            if (o) for (i = 0; i < n; i++)\n\t               stackData[i][j][1] /= o;\n\t            else\n\t              for (i = 0; i < n; i++)\n\t               stackData[i][j][1] = k;\n\t          }\n\t          for (j = 0; j < m; ++j) y0[j] = 0;\n\t          return y0;\n\t      };\n\t\n\t    });\n\t\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  scatter.dispatch.on('elementClick.area', function(e) {\n\t    dispatch.areaClick(e);\n\t  })\n\t  scatter.dispatch.on('elementMouseover.tooltip', function(e) {\n\t        e.pos = [e.pos[0] + margin.left, e.pos[1] + margin.top],\n\t        dispatch.tooltipShow(e);\n\t  });\n\t  scatter.dispatch.on('elementMouseout.tooltip', function(e) {\n\t        dispatch.tooltipHide(e);\n\t  });\n\t\n\t  //============================================================\n\t\n\t  //============================================================\n\t  // Global getters and setters\n\t  //------------------------------------------------------------\n\t\n\t  chart.dispatch = dispatch;\n\t  chart.scatter = scatter;\n\t\n\t  d3.rebind(chart, scatter, 'interactive', 'size', 'xScale', 'yScale', 'zScale', 'xDomain', 'yDomain', 'xRange', 'yRange',\n\t    'sizeDomain', 'forceX', 'forceY', 'forceSize', 'clipVoronoi', 'useVoronoi','clipRadius','highlightPoint','clearHighlights');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.x = function(_) {\n\t    if (!arguments.length) return getX;\n\t    getX = d3.functor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.y = function(_) {\n\t    if (!arguments.length) return getY;\n\t    getY = d3.functor(_);\n\t    return chart;\n\t  }\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.clipEdge = function(_) {\n\t    if (!arguments.length) return clipEdge;\n\t    clipEdge = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    return chart;\n\t  };\n\t\n\t  chart.offset = function(_) {\n\t    if (!arguments.length) return offset;\n\t    offset = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.order = function(_) {\n\t    if (!arguments.length) return order;\n\t    order = _;\n\t    return chart;\n\t  };\n\t\n\t  //shortcut for offset + order\n\t  chart.style = function(_) {\n\t    if (!arguments.length) return style;\n\t    style = _;\n\t\n\t    switch (style) {\n\t      case 'stack':\n\t        chart.offset('zero');\n\t        chart.order('default');\n\t        break;\n\t      case 'stream':\n\t        chart.offset('wiggle');\n\t        chart.order('inside-out');\n\t        break;\n\t      case 'stream-center':\n\t          chart.offset('silhouette');\n\t          chart.order('inside-out');\n\t          break;\n\t      case 'expand':\n\t        chart.offset('expand');\n\t        chart.order('default');\n\t        break;\n\t      case 'stack_percent':\n\t        chart.offset(chart.d3_stackedOffset_stackPercent);\n\t        chart.order('default');\n\t        break;\n\t    }\n\t\n\t    return chart;\n\t  };\n\t\n\t  chart.interpolate = function(_) {\n\t\t    if (!arguments.length) return interpolate;\n\t\t    interpolate = _;\n\t\t    return chart;\n\t  };\n\t  //============================================================\n\t\n\t\n\t  return chart;\n\t}\n\t\n\tnv.models.stackedAreaChart = function() {\n\t  \"use strict\";\n\t  //============================================================\n\t  // Public Variables with Default Settings\n\t  //------------------------------------------------------------\n\t\n\t  var stacked = nv.models.stackedArea()\n\t    , xAxis = nv.models.axis()\n\t    , yAxis = nv.models.axis()\n\t    , legend = nv.models.legend()\n\t    , controls = nv.models.legend()\n\t    , interactiveLayer = nv.interactiveGuideline()\n\t    ;\n\t\n\t  var margin = {top: 30, right: 25, bottom: 50, left: 60}\n\t    , width = null\n\t    , height = null\n\t    , color = nv.utils.defaultColor() // a function that takes in d, i and returns color\n\t    , showControls = true\n\t    , showLegend = true\n\t    , showXAxis = true\n\t    , showYAxis = true\n\t    , rightAlignYAxis = false\n\t    , useInteractiveGuideline = false\n\t    , tooltips = true\n\t    , tooltip = function(key, x, y, e, graph) {\n\t        return '<h3>' + key + '</h3>' +\n\t               '<p>' +  y + ' on ' + x + '</p>'\n\t      }\n\t    , x //can be accessed via chart.xScale()\n\t    , y //can be accessed via chart.yScale()\n\t    , yAxisTickFormat = d3.format(',.2f')\n\t    , state = { style: stacked.style() }\n\t    , defaultState = null\n\t    , noData = 'No Data Available.'\n\t    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n\t    , controlWidth = 250\n\t    , cData = ['Stacked','Stream','Expanded']\n\t    , controlLabels = {}\n\t    , transitionDuration = 0\n\t    ;\n\t\n\t  xAxis\n\t    .orient('bottom')\n\t    .tickPadding(7)\n\t    ;\n\t  yAxis\n\t    .orient((rightAlignYAxis) ? 'right' : 'left')\n\t    ;\n\t\n\t  controls.updateState(false);\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Private Variables\n\t  //------------------------------------------------------------\n\t\n\t  var showTooltip = function(e, offsetElement) {\n\t    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n\t        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n\t        x = xAxis.tickFormat()(stacked.x()(e.point, e.pointIndex)),\n\t        y = yAxis.tickFormat()(stacked.y()(e.point, e.pointIndex)),\n\t        content = tooltip(e.series.key, x, y, e, chart);\n\t\n\t    nv.tooltip.show([left, top], content, e.value < 0 ? 'n' : 's', null, offsetElement);\n\t  };\n\t\n\t  //============================================================\n\t\n\t\n\t  function chart(selection) {\n\t    selection.each(function(data) {\n\t      var container = d3.select(this),\n\t          that = this;\n\t\n\t      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n\t                             - margin.left - margin.right,\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t\n\t      chart.update = function() { container.call(chart); };\n\t      chart.container = this;\n\t\n\t      //set state.disabled\n\t      state.disabled = data.map(function(d) { return !!d.disabled });\n\t\n\t      if (!defaultState) {\n\t        var key;\n\t        defaultState = {};\n\t        for (key in state) {\n\t          if (state[key] instanceof Array)\n\t            defaultState[key] = state[key].slice(0);\n\t          else\n\t            defaultState[key] = state[key];\n\t        }\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t      // Display No Data message if there's nothing to show.\n\t\n\t      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t        noDataText.enter().append('text')\n\t          .attr('class', 'nvd3 nv-noData')\n\t          .attr('dy', '-.7em')\n\t          .style('text-anchor', 'middle');\n\t\n\t        noDataText\n\t          .attr('x', margin.left + availableWidth / 2)\n\t          .attr('y', margin.top + availableHeight / 2)\n\t          .text(function(d) { return d });\n\t\n\t        return chart;\n\t      } else {\n\t        container.selectAll('.nv-noData').remove();\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Scales\n\t\n\t      x = stacked.xScale();\n\t      y = stacked.yScale();\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup containers and skeleton of chart\n\t\n\t      var wrap = container.selectAll('g.nv-wrap.nv-stackedAreaChart').data([data]);\n\t      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedAreaChart').append('g');\n\t      var g = wrap.select('g');\n\t\n\t      gEnter.append(\"rect\").style(\"opacity\",0);\n\t      gEnter.append('g').attr('class', 'nv-x nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-y nv-axis');\n\t      gEnter.append('g').attr('class', 'nv-stackedWrap');\n\t      gEnter.append('g').attr('class', 'nv-legendWrap');\n\t      gEnter.append('g').attr('class', 'nv-controlsWrap');\n\t      gEnter.append('g').attr('class', 'nv-interactive');\n\t\n\t      g.select(\"rect\").attr(\"width\",availableWidth).attr(\"height\",availableHeight);\n\t      //------------------------------------------------------------\n\t      // Legend\n\t\n\t      if (showLegend) {\n\t        var legendWidth = (showControls) ? availableWidth - controlWidth : availableWidth;\n\t        legend\n\t          .width(legendWidth);\n\t\n\t        g.select('.nv-legendWrap')\n\t            .datum(data)\n\t            .call(legend);\n\t\n\t        if ( margin.top != legend.height()) {\n\t          margin.top = legend.height();\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t        }\n\t\n\t        g.select('.nv-legendWrap')\n\t            .attr('transform', 'translate(' + (availableWidth-legendWidth) + ',' + (-margin.top) +')');\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Controls\n\t\n\t      if (showControls) {\n\t        var controlsData = [\n\t          {\n\t            key: controlLabels.stacked || 'Stacked',\n\t            metaKey: 'Stacked',\n\t            disabled: stacked.style() != 'stack',\n\t            style: 'stack'\n\t          },\n\t          {\n\t            key: controlLabels.stream || 'Stream',\n\t            metaKey: 'Stream',\n\t            disabled: stacked.style() != 'stream',\n\t            style: 'stream'\n\t          },\n\t          {\n\t            key: controlLabels.expanded || 'Expanded',\n\t            metaKey: 'Expanded',\n\t            disabled: stacked.style() != 'expand',\n\t            style: 'expand'\n\t          },\n\t          {\n\t            key: controlLabels.stack_percent || 'Stack %',\n\t            metaKey: 'Stack_Percent',\n\t            disabled: stacked.style() != 'stack_percent',\n\t            style: 'stack_percent'\n\t          }\n\t        ];\n\t\n\t        controlWidth = (cData.length/3) * 260;\n\t\n\t        controlsData = controlsData.filter(function(d) {\n\t          return cData.indexOf(d.metaKey) !== -1;\n\t        })\n\t\n\t        controls\n\t          .width( controlWidth )\n\t          .color(['#444', '#444', '#444']);\n\t\n\t        g.select('.nv-controlsWrap')\n\t            .datum(controlsData)\n\t            .call(controls);\n\t\n\t\n\t        if ( margin.top != Math.max(controls.height(), legend.height()) ) {\n\t          margin.top = Math.max(controls.height(), legend.height());\n\t          availableHeight = (height || parseInt(container.style('height')) || 400)\n\t                             - margin.top - margin.bottom;\n\t        }\n\t\n\t\n\t        g.select('.nv-controlsWrap')\n\t            .attr('transform', 'translate(0,' + (-margin.top) +')');\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t      if (rightAlignYAxis) {\n\t          g.select(\".nv-y.nv-axis\")\n\t              .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t      // Main Chart Component(s)\n\t\n\t      //------------------------------------------------------------\n\t      //Set up interactive layer\n\t      if (useInteractiveGuideline) {\n\t        interactiveLayer\n\t           .width(availableWidth)\n\t           .height(availableHeight)\n\t           .margin({left: margin.left, top: margin.top})\n\t           .svgContainer(container)\n\t           .xScale(x);\n\t        wrap.select(\".nv-interactive\").call(interactiveLayer);\n\t      }\n\t\n\t      stacked\n\t        .width(availableWidth)\n\t        .height(availableHeight)\n\t\n\t      var stackedWrap = g.select('.nv-stackedWrap')\n\t          .datum(data);\n\t\n\t      stackedWrap.call(stacked);\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //------------------------------------------------------------\n\t      // Setup Axes\n\t\n\t      if (showXAxis) {\n\t        xAxis\n\t          .scale(x)\n\t          .ticks( availableWidth / 100 )\n\t          .tickSize( -availableHeight, 0);\n\t\n\t        g.select('.nv-x.nv-axis')\n\t            .attr('transform', 'translate(0,' + availableHeight + ')');\n\t\n\t        g.select('.nv-x.nv-axis')\n\t          \n\t            .call(xAxis);\n\t      }\n\t\n\t      if (showYAxis) {\n\t        yAxis\n\t          .scale(y)\n\t          .ticks(stacked.offset() == 'wiggle' ? 0 : availableHeight / 36)\n\t          .tickSize(-availableWidth, 0)\n\t          .setTickFormat( (stacked.style() == 'expand' || stacked.style() == 'stack_percent')\n\t                ? d3.format('%') : yAxisTickFormat);\n\t\n\t        g.select('.nv-y.nv-axis')\n\t          \n\t            .call(yAxis);\n\t      }\n\t\n\t      //------------------------------------------------------------\n\t\n\t\n\t      //============================================================\n\t      // Event Handling/Dispatching (in chart's scope)\n\t      //------------------------------------------------------------\n\t\n\t      stacked.dispatch.on('areaClick.toggle', function(e) {\n\t        if (data.filter(function(d) { return !d.disabled }).length === 1)\n\t          data.forEach(function(d) {\n\t            d.disabled = false;\n\t          });\n\t        else\n\t          data.forEach(function(d,i) {\n\t            d.disabled = (i != e.seriesIndex);\n\t          });\n\t\n\t        state.disabled = data.map(function(d) { return !!d.disabled });\n\t        dispatch.stateChange(state);\n\t\n\t        chart.update();\n\t      });\n\t\n\t      legend.dispatch.on('stateChange', function(newState) {\n\t        state.disabled = newState.disabled;\n\t        dispatch.stateChange(state);\n\t        chart.update();\n\t      });\n\t\n\t      controls.dispatch.on('legendClick', function(d,i) {\n\t        if (!d.disabled) return;\n\t\n\t        controlsData = controlsData.map(function(s) {\n\t          s.disabled = true;\n\t          return s;\n\t        });\n\t        d.disabled = false;\n\t\n\t        stacked.style(d.style);\n\t\n\t\n\t        state.style = stacked.style();\n\t        dispatch.stateChange(state);\n\t\n\t        chart.update();\n\t      });\n\t\n\t\n\t      interactiveLayer.dispatch.on('elementMousemove', function(e) {\n\t          stacked.clearHighlights();\n\t          var singlePoint, pointIndex, pointXLocation, allData = [];\n\t          data\n\t          .filter(function(series, i) {\n\t            series.seriesIndex = i;\n\t            return !series.disabled;\n\t          })\n\t          .forEach(function(series,i) {\n\t              pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n\t              stacked.highlightPoint(i, pointIndex, true);\n\t              var point = series.values[pointIndex];\n\t              if (typeof point === 'undefined') return;\n\t              if (typeof singlePoint === 'undefined') singlePoint = point;\n\t              if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n\t\n\t              //If we are in 'expand' mode, use the stacked percent value instead of raw value.\n\t              var tooltipValue = (stacked.style() == 'expand') ? point.display.y : chart.y()(point,pointIndex);\n\t              allData.push({\n\t                  key: series.key,\n\t                  value: tooltipValue,\n\t                  color: color(series,series.seriesIndex),\n\t                  stackedValue: point.display\n\t              });\n\t          });\n\t\n\t          allData.reverse();\n\t\n\t          //Highlight the tooltip entry based on which stack the mouse is closest to.\n\t          if (allData.length > 2) {\n\t            var yValue = chart.yScale().invert(e.mouseY);\n\t            var yDistMax = Infinity, indexToHighlight = null;\n\t            allData.forEach(function(series,i) {\n\t\n\t               //To handle situation where the stacked area chart is negative, we need to use absolute values\n\t               //when checking if the mouse Y value is within the stack area.\n\t               yValue = Math.abs(yValue);\n\t               var stackedY0 = Math.abs(series.stackedValue.y0);\n\t               var stackedY = Math.abs(series.stackedValue.y);\n\t               if ( yValue >= stackedY0 && yValue <= (stackedY + stackedY0))\n\t               {\n\t                  indexToHighlight = i;\n\t                  return;\n\t               }\n\t            });\n\t            if (indexToHighlight != null)\n\t               allData[indexToHighlight].highlight = true;\n\t          }\n\t\n\t          var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex));\n\t\n\t          //If we are in 'expand' mode, force the format to be a percentage.\n\t          var valueFormatter = (stacked.style() == 'expand') ?\n\t               function(d,i) {return d3.format(\".1%\")(d);} :\n\t               function(d,i) {return yAxis.tickFormat()(d); };\n\t          interactiveLayer.tooltip\n\t                  .position({left: pointXLocation + margin.left, top: e.mouseY + margin.top})\n\t                  .chartContainer(that.parentNode)\n\t                  .enabled(tooltips)\n\t                  .valueFormatter(valueFormatter)\n\t                  .data(\n\t                      {\n\t                        value: xValue,\n\t                        series: allData\n\t                      }\n\t                  )();\n\t\n\t          interactiveLayer.renderGuideLine(pointXLocation);\n\t\n\t      });\n\t\n\t      interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n\t          dispatch.tooltipHide();\n\t          stacked.clearHighlights();\n\t      });\n\t\n\t\n\t      dispatch.on('tooltipShow', function(e) {\n\t        if (tooltips) showTooltip(e, that.parentNode);\n\t      });\n\t\n\t      // Update chart from a state object passed to event handler\n\t      dispatch.on('changeState', function(e) {\n\t\n\t        if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {\n\t          data.forEach(function(series,i) {\n\t            series.disabled = e.disabled[i];\n\t          });\n\t\n\t          state.disabled = e.disabled;\n\t        }\n\t\n\t        if (typeof e.style !== 'undefined') {\n\t          stacked.style(e.style);\n\t        }\n\t\n\t        chart.update();\n\t      });\n\t\n\t    });\n\t\n\t\n\t    return chart;\n\t  }\n\t\n\t\n\t  //============================================================\n\t  // Event Handling/Dispatching (out of chart's scope)\n\t  //------------------------------------------------------------\n\t\n\t  stacked.dispatch.on('tooltipShow', function(e) {\n\t    //disable tooltips when value ~= 0\n\t    //// TODO: consider removing points from voronoi that have 0 value instead of this hack\n\t    /*\n\t    if (!Math.round(stacked.y()(e.point) * 100)) {  // 100 will not be good for very small numbers... will have to think about making this valu dynamic, based on data range\n\t      setTimeout(function() { d3.selectAll('.point.hover').classed('hover', false) }, 0);\n\t      return false;\n\t    }\n\t   */\n\t\n\t    e.pos = [e.pos[0] + margin.left, e.pos[1] + margin.top],\n\t    dispatch.tooltipShow(e);\n\t  });\n\t\n\t  stacked.dispatch.on('tooltipHide', function(e) {\n\t    dispatch.tooltipHide(e);\n\t  });\n\t\n\t  dispatch.on('tooltipHide', function() {\n\t    if (tooltips) nv.tooltip.cleanup();\n\t  });\n\t\n\t  //============================================================\n\t\n\t\n\t  //============================================================\n\t  // Expose Public Variables\n\t  //------------------------------------------------------------\n\t\n\t  // expose chart's sub-components\n\t  chart.dispatch = dispatch;\n\t  chart.stacked = stacked;\n\t  chart.legend = legend;\n\t  chart.controls = controls;\n\t  chart.xAxis = xAxis;\n\t  chart.yAxis = yAxis;\n\t  chart.interactiveLayer = interactiveLayer;\n\t\n\t  d3.rebind(chart, stacked, 'x', 'y', 'size', 'xScale', 'yScale', 'xDomain', 'yDomain', 'xRange', 'yRange', 'sizeDomain', 'interactive', 'useVoronoi', 'offset', 'order', 'style', 'clipEdge', 'forceX', 'forceY', 'forceSize', 'interpolate');\n\t\n\t  chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t  chart.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return chart;\n\t  };\n\t\n\t  chart.width = function(_) {\n\t    if (!arguments.length) return width;\n\t    width = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.height = function(_) {\n\t    if (!arguments.length) return height;\n\t    height = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.color = function(_) {\n\t    if (!arguments.length) return color;\n\t    color = nv.utils.getColor(_);\n\t    legend.color(color);\n\t    stacked.color(color);\n\t    return chart;\n\t  };\n\t\n\t  chart.showControls = function(_) {\n\t    if (!arguments.length) return showControls;\n\t    showControls = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showLegend = function(_) {\n\t    if (!arguments.length) return showLegend;\n\t    showLegend = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showXAxis = function(_) {\n\t    if (!arguments.length) return showXAxis;\n\t    showXAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.showYAxis = function(_) {\n\t    if (!arguments.length) return showYAxis;\n\t    showYAxis = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.rightAlignYAxis = function(_) {\n\t    if(!arguments.length) return rightAlignYAxis;\n\t    rightAlignYAxis = _;\n\t    yAxis.orient( (_) ? 'right' : 'left');\n\t    return chart;\n\t  };\n\t\n\t  chart.useInteractiveGuideline = function(_) {\n\t    if(!arguments.length) return useInteractiveGuideline;\n\t    useInteractiveGuideline = _;\n\t    if (_ === true) {\n\t       chart.interactive(false);\n\t       chart.useVoronoi(false);\n\t    }\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltip = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltips = function(_) {\n\t    if (!arguments.length) return tooltips;\n\t    tooltips = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.tooltipContent = function(_) {\n\t    if (!arguments.length) return tooltip;\n\t    tooltip = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.state = function(_) {\n\t    if (!arguments.length) return state;\n\t    state = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.defaultState = function(_) {\n\t    if (!arguments.length) return defaultState;\n\t    defaultState = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.noData = function(_) {\n\t    if (!arguments.length) return noData;\n\t    noData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.transitionDuration = function(_) {\n\t    if (!arguments.length) return transitionDuration;\n\t    transitionDuration = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.controlsData = function(_) {\n\t    if (!arguments.length) return cData;\n\t    cData = _;\n\t    return chart;\n\t  };\n\t\n\t  chart.controlLabels = function(_) {\n\t    if (!arguments.length) return controlLabels;\n\t    if (typeof _ !== 'object') return controlLabels;\n\t    controlLabels = _;\n\t    return chart;\n\t  };\n\t\n\t  yAxis.setTickFormat = yAxis.tickFormat;\n\t\n\t  yAxis.tickFormat = function(_) {\n\t    if (!arguments.length) return yAxisTickFormat;\n\t    yAxisTickFormat = _;\n\t    return yAxis;\n\t  };\n\t\n\t\n\t  //============================================================\n\t\n\t  return chart;\n\t}\n\t})();\n\n\n/***/ }\n/******/ ])});;\n\n\n/** WEBPACK FOOTER **\n ** nvd3_pie.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap e3622d0033a89edad914\n **/","/** Pie chart wrapper */\ndefine( [ 'utilities/utils', 'visualizations/utilities/tabular-datasets', 'plugins/nvd3/nv.d3', 'style!css!plugins/nvd3/nv.d3.css' ], function( Utils, Datasets ) {\n    return Backbone.View.extend({\n        initialize: function( options ) {\n            var self = this;\n            var chart = options.chart;\n            var targets = options.targets;\n            var process = options.process;\n            Datasets.request({\n                dataset_id      : chart.get( 'dataset_id' ),\n                dataset_groups  : chart.groups,\n                success         : function( groups ) {\n                    for ( var group_index in groups ) {\n                        var group = groups[ group_index ];\n                        self._drawGroup( chart, group, targets[ group_index ] );\n                    }\n                    chart.state('ok', 'Pie chart has been drawn.');\n                    process.resolve();\n                }\n            });\n        },\n\n        /** Draw group */\n        _drawGroup: function( chart, group, canvas_id ) {\n            try {\n                var self = this;\n                var canvas = d3.select( '#' + canvas_id );\n                var title = canvas.append( 'text' );\n                this._fixTitle( chart, canvas, title, group.key );\n                var pie_data = [];\n                _.each( group.values, function( value ) {\n                    pie_data.push( { y : value.y, x : value.label } );\n                });\n\n                // add graph to screen\n                nv.addGraph(function() {\n                    var legend_visible = chart.settings.get( 'show_legend' ) == 'true';\n                    var label_outside = chart.settings.get( 'label_outside' ) == 'true';\n                    var label_type = chart.settings.get( 'label_type' );\n                    var donut_ratio = parseFloat( chart.settings.get( 'donut_ratio' ) );\n                    var chart_3d = nv.models.pieChart()\n                        .donut( true )\n                        .labelThreshold( .05 )\n                        .showLegend( legend_visible )\n                        .labelType( label_type )\n                        .donutRatio( donut_ratio )\n                        .donutLabelsOutside( label_outside );\n                    canvas.datum( pie_data ).call( chart_3d );\n                    nv.utils.windowResize( function() {\n                        chart_3d.update();\n                        self._fixTitle( chart, canvas, title, group.key );\n                    });\n                });\n            } catch ( err ) {\n                console.log( err );\n            }\n        },\n\n        /** Fix title */\n        _fixTitle: function( chart, canvas, title_element, title_text ) {\n            var width = parseInt( canvas.style( 'width' ) );\n            var height = parseInt( canvas.style( 'height' ) );\n            title_element.attr( 'x', width / 2 )\n                         .attr( 'y', height - 10 )\n                         .attr( 'text-anchor', 'middle' )\n                         .text( title_text );\n        }\n    });\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./static/repository/visualizations/nvd3/pie/wrapper.js\n ** module id = 0\n ** module chunks = 19\n **/","/** Useful helper functions */\ndefine( [], function() {\n\n    /** Clone */\n    function clone( obj ) {\n        return JSON.parse( JSON.stringify( obj ) || null );\n    };\n\n    /**\n     * Check if a string is a json string\n     * @param{String}   text - Content to be validated\n     */\n    function isJSON(text) {\n        return /^[\\],:{}\\s]*$/.test(text.replace(/\\\\[\"\\\\\\/bfnrtu]/g, '@').\n            replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']').\n            replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''));\n    };\n\n    /**\n     * Request handler for GET\n     * @param{String}   url     - Url request is made to\n     * @param{Function} success - Callback on success\n     * @param{Function} error   - Callback on error\n     * @param{Boolean}  cache   - Use cached data if available\n     */\n    function get (options) {\n        top.__utils__get__ = top.__utils__get__ || {};\n        var cache_key = JSON.stringify( options );\n        if (options.cache && top.__utils__get__[cache_key]) {\n            options.success && options.success(top.__utils__get__[cache_key]);\n            window.console.debug('utils.js::get() - Fetching from cache [' + options.url + '].');\n        } else {\n            request({\n                url     : options.url,\n                data    : options.data,\n                success : function(response) {\n                    top.__utils__get__[cache_key] = response;\n                    options.success && options.success(response);\n                },\n                error : function(response) {\n                    options.error && options.error(response);\n                }\n            });\n        }\n    };\n\n    /**\n     * Request handler\n     * @param{String}   method  - Request method ['GET', 'POST', 'DELETE', 'PUT']\n     * @param{String}   url     - Url request is made to\n     * @param{Object}   data    - Data send to url\n     * @param{Function} success - Callback on success\n     * @param{Function} error   - Callback on error\n     */\n    function request (options) {\n        var ajaxConfig = {\n            contentType : 'application/json',\n            type        : options.type || 'GET',\n            data        : options.data || {},\n            url         : options.url\n        }\n        if ( ajaxConfig.type == 'GET' || ajaxConfig.type == 'DELETE' ) {\n            if ( !$.isEmptyObject(ajaxConfig.data) ) {\n                ajaxConfig.url += ajaxConfig.url.indexOf('?') == -1 ? '?' : '&';\n                ajaxConfig.url += $.param(ajaxConfig.data, true);\n            }\n            ajaxConfig.data = null;\n        } else {\n            ajaxConfig.dataType = 'json';\n            ajaxConfig.url      = ajaxConfig.url;\n            ajaxConfig.data     = JSON.stringify( ajaxConfig.data );\n        }\n        $.ajax( ajaxConfig ).done( function( response ) {\n            if ( typeof response === 'string' && isJSON( response ) ) {\n                try {\n                    response = response.replace( 'Infinity,', '\"Infinity\",' );\n                    response = jQuery.parseJSON( response );\n                } catch ( e ) {\n                    console.debug( e );\n                }\n            }\n            options.success && options.success( response );\n        }).fail( function( response ) {\n            var response_text = null;\n            try {\n                response_text = jQuery.parseJSON( response.responseText );\n            } catch (e) {\n                response_text = response.responseText;\n            }\n            options.error && options.error( response_text, response );\n        }).always( function() {\n            options.complete && options.complete();\n        });\n    };\n\n    /**\n     * Safely merge to dictionaries\n     * @param{Object}   options         - Target dictionary\n     * @param{Object}   optionsDefault  - Source dictionary\n     */\n    function merge (options, optionsDefault) {\n        if (options) {\n            return _.defaults(options, optionsDefault);\n        } else {\n            return optionsDefault;\n        }\n    };\n\n    /** Create a unique id */\n    function uid(){\n        top.__utils__uid__ = top.__utils__uid__ || 0;\n        return 'uid-' + top.__utils__uid__++;\n    };\n\n    return {\n        get     : get,\n        merge   : merge,\n        uid     : uid,\n        request : request,\n        clone   : clone,\n        isJSON  : isJSON\n    };\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./static/repository/utilities/utils.js\n ** module id = 1\n ** module chunks = 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n **/","/** This class handles, formats and caches datasets. */\ndefine( [ 'utilities/utils' ], function( Utils ) {\n    /** Fills request dictionary with data from cache/response */\n    var _cache = {};\n    var request = function( options ) {\n        var groups      = options.dataset_groups;\n        var dataset_id  = options.dataset_id;\n        // identify columns needed to fulfill request\n        var column_list = [];\n        groups.each( function( group ) {\n            _.each( group.get( '__data_columns' ), function( column_def, column_name ) {\n                var column = group.get( column_name );\n                var block_id = _block_id( dataset_id, column );\n                if ( column_list.indexOf( column ) === -1 && !_cache[ block_id ] && column != 'auto' && column != 'zero' && column !== undefined ) {\n                    column_list.push( column );\n                }\n            });\n        });\n        if ( column_list.length == 0 ) {\n            _fillFromCache( options );\n            return;\n        }\n        // Fetch data columns into dataset object\n        Utils.get({\n            url     : Galaxy.root + 'api/datasets/' + dataset_id,\n            data    : {\n                data_type   : 'raw_data',\n                provider    : 'dataset-column',\n                indeces     : column_list.toString()\n            },\n            success : function( response ) {\n                var results = new Array( column_list.length );\n                for ( var i = 0; i < results.length; i++ ) {\n                    results[ i ] = [];\n                }\n                for ( var i in response.data ) {\n                    var row = response.data[ i ];\n                    for ( var j in row ) {\n                        var v = row[ j ];\n                        if ( v !== undefined && v != 2147483647 ) {\n                            results[ j ].push( v );\n                        }\n                    }\n                }\n                console.debug( 'tabular-datasets::_fetch() - Fetching complete.' );\n                for ( var i in results ) {\n                    var column = column_list[ i ];\n                    var block_id = _block_id( dataset_id, column );\n                    _cache[ block_id ] = results[ i ];\n                }\n                _fillFromCache( options );\n            }\n        });\n    };\n\n    /** Fill data from cache */\n    var _fillFromCache = function( options ) {\n        var groups      = options.dataset_groups;\n        var dataset_id  = options.dataset_id;\n        console.debug( 'tabular-datasets::_fillFromCache() - Filling request from cache.' );\n        var limit = 0;\n        groups.each( function( group ) {\n            _.each( group.get( '__data_columns' ), function( column_def, column_name ) {\n                var column = group.get( column_name );\n                var block_id = _block_id( dataset_id, column );\n                var column_data = _cache[ block_id ];\n                if ( column_data ) {\n                    limit = Math.max( limit, column_data.length );\n                }\n            });\n        });\n        if ( limit == 0 ) {\n            console.debug( 'tabular-datasets::_fillFromCache() - No data available.' );\n        }\n        var results = [];\n        groups.each( function( group, group_index ) {\n            var dict = Utils.merge( { key: ( group_index ) + ':' + group.get( 'key' ), values: [] }, group.attributes );\n            for ( var j = 0; j < limit; j++ ) {\n                dict.values[ j ] = { x : parseInt( j ) };\n            }\n            results.push( dict );\n        });\n        groups.each( function( group, group_index ) {\n            var values = results[ group_index ].values;\n            _.each( group.get( '__data_columns' ), function( column_def, column_name ) {\n                var column = group.get( column_name );\n                switch ( column ) {\n                    case 'auto':\n                        for ( var j = 0; j < limit; j++ ) {\n                            values[ j ][ column_name ] = parseInt( j );\n                        }\n                        break;\n                    case 'zero':\n                        for ( var j = 0; j < limit; j++ ) {\n                            values[ j ][ column_name ] = 0;\n                        }\n                        break;\n                    default:\n                        var block_id = _block_id( dataset_id, column );\n                        var column_data = _cache[ block_id ];\n                        for ( var j = 0; j < limit; j++ ) {\n                            var value = values[ j ];\n                            var v = column_data[ j ];\n                            if ( isNaN( v ) && !column_def.is_label ) {\n                                v = 0;\n                            }\n                            value[ column_name ] = v;\n                        }\n                }\n            });\n        });\n        options.success( results );\n    };\n\n    /** Get block id */\n    var _block_id = function ( dataset_id, column ) {\n        return dataset_id + '_' + '_' + column;\n    };\n\n    return { request: request };\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./static/repository/visualizations/utilities/tabular-datasets.js\n ** module id = 5\n ** module chunks = 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 24\n **/","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-loader/lib/css-base.js\n ** module id = 6\n ** module chunks = 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n **/","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nvar stylesInDom = {},\r\n\tmemoize = function(fn) {\r\n\t\tvar memo;\r\n\t\treturn function () {\r\n\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\treturn memo;\r\n\t\t};\r\n\t},\r\n\tisOldIE = memoize(function() {\r\n\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t}),\r\n\tgetHeadElement = memoize(function () {\r\n\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t}),\r\n\tsingletonElement = null,\r\n\tsingletonCounter = 0,\r\n\tstyleElementsInsertedAtTop = [];\r\n\r\nmodule.exports = function(list, options) {\r\n\tif(typeof DEBUG !== \"undefined\" && DEBUG) {\r\n\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t}\r\n\r\n\toptions = options || {};\r\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t// tags it will allow on a page\r\n\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\r\n\t// By default, add <style> tags to the bottom of <head>.\r\n\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\r\n\r\n\tvar styles = listToStyles(list);\r\n\taddStylesToDom(styles, options);\r\n\r\n\treturn function update(newList) {\r\n\t\tvar mayRemove = [];\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tdomStyle.refs--;\r\n\t\t\tmayRemove.push(domStyle);\r\n\t\t}\r\n\t\tif(newList) {\r\n\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\taddStylesToDom(newStyles, options);\r\n\t\t}\r\n\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction addStylesToDom(styles, options) {\r\n\tfor(var i = 0; i < styles.length; i++) {\r\n\t\tvar item = styles[i];\r\n\t\tvar domStyle = stylesInDom[item.id];\r\n\t\tif(domStyle) {\r\n\t\t\tdomStyle.refs++;\r\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t}\r\n\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvar parts = [];\r\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction listToStyles(list) {\r\n\tvar styles = [];\r\n\tvar newStyles = {};\r\n\tfor(var i = 0; i < list.length; i++) {\r\n\t\tvar item = list[i];\r\n\t\tvar id = item[0];\r\n\t\tvar css = item[1];\r\n\t\tvar media = item[2];\r\n\t\tvar sourceMap = item[3];\r\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\tif(!newStyles[id])\r\n\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\telse\r\n\t\t\tnewStyles[id].parts.push(part);\r\n\t}\r\n\treturn styles;\r\n}\r\n\r\nfunction insertStyleElement(options, styleElement) {\r\n\tvar head = getHeadElement();\r\n\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\r\n\tif (options.insertAt === \"top\") {\r\n\t\tif(!lastStyleElementInsertedAtTop) {\r\n\t\t\thead.insertBefore(styleElement, head.firstChild);\r\n\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\r\n\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\r\n\t\t} else {\r\n\t\t\thead.appendChild(styleElement);\r\n\t\t}\r\n\t\tstyleElementsInsertedAtTop.push(styleElement);\r\n\t} else if (options.insertAt === \"bottom\") {\r\n\t\thead.appendChild(styleElement);\r\n\t} else {\r\n\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\r\n\t}\r\n}\r\n\r\nfunction removeStyleElement(styleElement) {\r\n\tstyleElement.parentNode.removeChild(styleElement);\r\n\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\r\n\tif(idx >= 0) {\r\n\t\tstyleElementsInsertedAtTop.splice(idx, 1);\r\n\t}\r\n}\r\n\r\nfunction createStyleElement(options) {\r\n\tvar styleElement = document.createElement(\"style\");\r\n\tstyleElement.type = \"text/css\";\r\n\tinsertStyleElement(options, styleElement);\r\n\treturn styleElement;\r\n}\r\n\r\nfunction createLinkElement(options) {\r\n\tvar linkElement = document.createElement(\"link\");\r\n\tlinkElement.rel = \"stylesheet\";\r\n\tinsertStyleElement(options, linkElement);\r\n\treturn linkElement;\r\n}\r\n\r\nfunction addStyle(obj, options) {\r\n\tvar styleElement, update, remove;\r\n\r\n\tif (options.singleton) {\r\n\t\tvar styleIndex = singletonCounter++;\r\n\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\r\n\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t} else if(obj.sourceMap &&\r\n\t\ttypeof URL === \"function\" &&\r\n\t\ttypeof URL.createObjectURL === \"function\" &&\r\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\r\n\t\ttypeof Blob === \"function\" &&\r\n\t\ttypeof btoa === \"function\") {\r\n\t\tstyleElement = createLinkElement(options);\r\n\t\tupdate = updateLink.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tremoveStyleElement(styleElement);\r\n\t\t\tif(styleElement.href)\r\n\t\t\t\tURL.revokeObjectURL(styleElement.href);\r\n\t\t};\r\n\t} else {\r\n\t\tstyleElement = createStyleElement(options);\r\n\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tremoveStyleElement(styleElement);\r\n\t\t};\r\n\t}\r\n\r\n\tupdate(obj);\r\n\r\n\treturn function updateStyle(newObj) {\r\n\t\tif(newObj) {\r\n\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\treturn;\r\n\t\t\tupdate(obj = newObj);\r\n\t\t} else {\r\n\t\t\tremove();\r\n\t\t}\r\n\t};\r\n}\r\n\r\nvar replaceText = (function () {\r\n\tvar textStore = [];\r\n\r\n\treturn function (index, replacement) {\r\n\t\ttextStore[index] = replacement;\r\n\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t};\r\n})();\r\n\r\nfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\tvar css = remove ? \"\" : obj.css;\r\n\r\n\tif (styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t} else {\r\n\t\tvar cssNode = document.createTextNode(css);\r\n\t\tvar childNodes = styleElement.childNodes;\r\n\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\tif (childNodes.length) {\r\n\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t} else {\r\n\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction applyToTag(styleElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar media = obj.media;\r\n\r\n\tif(media) {\r\n\t\tstyleElement.setAttribute(\"media\", media)\r\n\t}\r\n\r\n\tif(styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = css;\r\n\t} else {\r\n\t\twhile(styleElement.firstChild) {\r\n\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t}\r\n\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t}\r\n}\r\n\r\nfunction updateLink(linkElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar sourceMap = obj.sourceMap;\r\n\r\n\tif(sourceMap) {\r\n\t\t// http://stackoverflow.com/a/26603875\r\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t}\r\n\r\n\tvar blob = new Blob([css], { type: \"text/css\" });\r\n\r\n\tvar oldSrc = linkElement.href;\r\n\r\n\tlinkElement.href = URL.createObjectURL(blob);\r\n\r\n\tif(oldSrc)\r\n\t\tURL.revokeObjectURL(oldSrc);\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/style-loader/addStyles.js\n ** module id = 7\n ** module chunks = 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n **/","exports = module.exports = require(\"./../../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".chartWrap{margin:0;padding:0;overflow:hidden}.nvtooltip.with-3d-shadow,.with-3d-shadow .nvtooltip{box-shadow:0 5px 10px rgba(0,0,0,.2);border-radius:6px}.nvtooltip{position:absolute;background-color:#fff;padding:1px;border:1px solid rgba(0,0,0,.2);z-index:10000;font-family:Arial;font-size:13px;text-align:left;pointer-events:none;white-space:nowrap;-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.nvtooltip.with-transitions,.with-transitions .nvtooltip{transition:opacity .25s linear;-moz-transition:opacity .25s linear;-webkit-transition:opacity .25s linear;transition-delay:.25s;-moz-transition-delay:.25s;-webkit-transition-delay:.25s}.nvtooltip.x-nvtooltip,.nvtooltip.y-nvtooltip{padding:8px}.nvtooltip h3{margin:0;padding:4px 14px;line-height:18px;font-weight:400;background-color:hsla(0,0%,97%,.75);text-align:center;border-bottom:1px solid #ebebeb;border-radius:5px 5px 0 0}.nvtooltip p{margin:0;padding:5px 14px;text-align:center}.nvtooltip span{display:inline-block;margin:2px 0}.nvtooltip table{margin:6px;border-spacing:0}.nvtooltip table td{padding:2px 9px 2px 0;vertical-align:middle}.nvtooltip table td.key{font-weight:400}.nvtooltip table td.value{text-align:right;font-weight:700}.nvtooltip table tr.highlight td{padding:1px 9px 1px 0;border-bottom-style:solid;border-bottom-width:1px;border-top-style:solid;border-top-width:1px}.nvtooltip table td.legend-color-guide div{width:8px;height:8px;vertical-align:middle}.nvtooltip .footer{padding:3px;text-align:center}.nvtooltip-pending-removal{position:absolute;pointer-events:none}svg{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:block;width:100%;height:100%}svg text{font:400 12px Arial}svg .title{font:700 14px Arial}.nvd3 .nv-background{fill:#fff;fill-opacity:0}.nvd3.nv-noData{font-size:18px;font-weight:700}.nv-brush .extent{fill-opacity:.125;shape-rendering:crispEdges}.nvd3 .nv-legend .nv-series{cursor:pointer}.nvd3 .nv-legend .disabled circle{fill-opacity:0}.nvd3 .nv-axis{pointer-events:none}.nvd3 .nv-axis path{fill:none;stroke:#000;stroke-opacity:.75;shape-rendering:crispEdges}.nvd3 .nv-axis path.domain{stroke-opacity:.75}.nvd3 .nv-axis.nv-x path.domain{stroke-opacity:0}.nvd3 .nv-axis text{font-size:11px}.nv-axis line{fill:none;stroke:#e5e5e5;shape-rendering:crispEdges}.nvd3 .nv-axis .zero line,.nvd3 .nv-axis line.zero{stroke-opacity:.75}.nvd3 .nv-axis .nv-axisMaxMin text{font-weight:700}.nvd3 .x2 .nv-axis .nv-axisMaxMin text,.nvd3 .x3 .nv-axis .nv-axisMaxMin text,.nvd3 .x .nv-axis .nv-axisMaxMin text{text-anchor:middle}.nv-brush .resize path{fill:#eee;stroke:#666}.nvd3 .nv-bars .negative rect{zfill:brown}.nvd3 .nv-bars rect{zfill:#4682b4;fill-opacity:.75;transition:fill-opacity .25s linear;-moz-transition:fill-opacity .25s linear;-webkit-transition:fill-opacity .25s linear}.nvd3 .nv-bars rect.hover{fill-opacity:1}.nvd3 .nv-bars .hover rect{fill:#add8e6}.nvd3 .nv-bars text{fill:transparent}.nvd3 .nv-bars .hover text{fill:#000}.nvd3 .nv-discretebar .nv-groups rect,.nvd3 .nv-multibar .nv-groups rect,.nvd3 .nv-multibarHorizontal .nv-groups rect{stroke-opacity:0;transition:fill-opacity .25s linear;-moz-transition:fill-opacity .25s linear;-webkit-transition:fill-opacity .25s linear}.nvd3 .nv-discretebar .nv-groups rect:hover,.nvd3 .nv-multibar .nv-groups rect:hover,.nvd3 .nv-multibarHorizontal .nv-groups rect:hover{fill-opacity:1}.nvd3 .nv-discretebar .nv-groups text,.nvd3 .nv-multibarHorizontal .nv-groups text{font-weight:700;fill:#000;stroke:transparent}.nvd3.nv-pie path{stroke-opacity:0;transition:fill-opacity .25s linear,stroke-width .25s linear,stroke-opacity .25s linear;-moz-transition:fill-opacity .25s linear,stroke-width .25s linear,stroke-opacity .25s linear;-webkit-transition:fill-opacity .25s linear,stroke-width .25s linear,stroke-opacity .25s linear}.nvd3.nv-pie .nv-slice text{stroke:#000;stroke-width:0}.nvd3.nv-pie path{stroke:#fff;stroke-width:1px;stroke-opacity:1}.nvd3.nv-pie .hover path{fill-opacity:.7}.nvd3.nv-pie .nv-label{pointer-events:none}.nvd3.nv-pie .nv-label rect{fill-opacity:0;stroke-opacity:0}.nvd3 .nv-groups path.nv-line{fill:none;stroke-width:1.5px}.nvd3 .nv-groups path.nv-line.nv-thin-line{stroke-width:1px}.nvd3 .nv-groups path.nv-area{stroke:none}.nvd3 .nv-line.hover path{stroke-width:6px}.nvd3.nv-line .nvd3.nv-scatter .nv-groups .nv-point{fill-opacity:0;stroke-opacity:0}.nvd3.nv-scatter.nv-single-point .nv-groups .nv-point{fill-opacity:.5!important;stroke-opacity:.5!important}.with-transitions .nvd3 .nv-groups .nv-point{transition:stroke-width .25s linear,stroke-opacity .25s linear;-moz-transition:stroke-width .25s linear,stroke-opacity .25s linear;-webkit-transition:stroke-width .25s linear,stroke-opacity .25s linear}.nvd3 .nv-groups .nv-point.hover,.nvd3.nv-scatter .nv-groups .nv-point.hover{stroke-width:7px;fill-opacity:.95!important;stroke-opacity:.95!important}.nvd3 .nv-point-paths path{stroke:#aaa;stroke-opacity:0;fill:#eee;fill-opacity:0}.nvd3 .nv-indexLine{cursor:ew-resize}.nvd3 .nv-distribution{pointer-events:none}.nvd3 .nv-groups .nv-point.hover{stroke-width:20px;stroke-opacity:.5}.nvd3 .nv-scatter .nv-point.hover{fill-opacity:1}.nvd3.nv-stackedarea path.nv-area{fill-opacity:.7;stroke-opacity:0;transition:fill-opacity .25s linear,stroke-opacity .25s linear;-moz-transition:fill-opacity .25s linear,stroke-opacity .25s linear;-webkit-transition:fill-opacity .25s linear,stroke-opacity .25s linear}.nvd3.nv-stackedarea path.nv-area.hover{fill-opacity:.9}.nvd3.nv-stackedarea .nv-groups .nv-point{stroke-opacity:0;fill-opacity:0}.nvd3.nv-linePlusBar .nv-bar rect{fill-opacity:.75}.nvd3.nv-linePlusBar .nv-bar rect:hover{fill-opacity:1}.nvd3.nv-bullet{font:10px sans-serif}.nvd3.nv-bullet .nv-measure{fill-opacity:.8}.nvd3.nv-bullet .nv-measure:hover{fill-opacity:1}.nvd3.nv-bullet .nv-marker{stroke:#000;stroke-width:2px}.nvd3.nv-bullet .nv-markerTriangle{stroke:#000;fill:#fff;stroke-width:1.5px}.nvd3.nv-bullet .nv-tick line{stroke:#666;stroke-width:.5px}.nvd3.nv-bullet .nv-range.nv-s0{fill:#eee}.nvd3.nv-bullet .nv-range.nv-s1{fill:#ddd}.nvd3.nv-bullet .nv-range.nv-s2{fill:#ccc}.nvd3.nv-bullet .nv-title{font-size:14px;font-weight:700}.nvd3.nv-bullet .nv-subtitle{fill:#999}.nvd3.nv-bullet .nv-range{fill:#bababa;fill-opacity:.4}.nvd3.nv-bullet .nv-range:hover{fill-opacity:.7}.nvd3.nv-sparkline path{fill:none}.nvd3.nv-sparklineplus g.nv-hoverValue{pointer-events:none}.nvd3.nv-sparklineplus .nv-hoverValue line{stroke:#333;stroke-width:1.5px}.nvd3.nv-sparklineplus,.nvd3.nv-sparklineplus g{pointer-events:all}.nvd3 .nv-hoverArea{fill-opacity:0;stroke-opacity:0}.nvd3.nv-sparklineplus .nv-xValue,.nvd3.nv-sparklineplus .nv-yValue{stroke-width:0;font-size:.9em;font-weight:400}.nvd3.nv-sparklineplus .nv-yValue{stroke:#f66}.nvd3.nv-sparklineplus .nv-maxValue{stroke:#2ca02c;fill:#2ca02c}.nvd3.nv-sparklineplus .nv-minValue{stroke:#d62728;fill:#d62728}.nvd3.nv-sparklineplus .nv-currentValue{font-weight:700;font-size:1.1em}.nvd3.nv-ohlcBar .nv-ticks .nv-tick{stroke-width:2px}.nvd3.nv-ohlcBar .nv-ticks .nv-tick.hover{stroke-width:4px}.nvd3.nv-ohlcBar .nv-ticks .nv-tick.positive{stroke:#2ca02c}.nvd3.nv-ohlcBar .nv-ticks .nv-tick.negative{stroke:#d62728}.nvd3.nv-historicalStockChart .nv-axis .nv-axislabel{font-weight:700}.nvd3.nv-historicalStockChart .nv-dragTarget{fill-opacity:0;stroke:none;cursor:move}.nvd3 .nv-brush .extent{fill-opacity:0!important}.nvd3 .nv-brushBackground rect{stroke:#000;stroke-width:.4;fill:#fff;fill-opacity:.7}.nvd3.nv-indentedtree .name{margin-left:5px}.nvd3.nv-indentedtree .clickable{color:#08c;cursor:pointer}.nvd3.nv-indentedtree span.clickable:hover{color:#005580;text-decoration:underline}.nvd3.nv-indentedtree .nv-childrenCount{display:inline-block;margin-left:5px}.nvd3.nv-indentedtree .nv-treeicon,.nvd3.nv-indentedtree .nv-treeicon.nv-folded{cursor:pointer}.nvd3 .background path{fill:none;stroke:#ccc;stroke-opacity:.4;shape-rendering:crispEdges}.nvd3 .foreground path{fill:none;stroke:#4682b4;stroke-opacity:.7}.nvd3 .brush .extent{fill-opacity:.3;stroke:#fff;shape-rendering:crispEdges}.axis path,.nvd3 .axis line{fill:none;stroke:#000;shape-rendering:crispEdges}.nvd3 .axis text{text-shadow:0 1px 0 #fff}.nvd3 .nv-interactiveGuideLine{pointer-events:none}.nvd3 line.nv-guideline{stroke:#ccc}\", \"\"]);\n\n// exports\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-loader!./static/repository/plugins/nvd3/nv.d3.css\n ** module id = 8\n ** module chunks = 7 8 9 10 11 12 13 14 15 16 17 18 19\n **/","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./../../../../node_modules/css-loader/index.js!./nv.d3.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../../../../node_modules/css-loader/index.js!./nv.d3.css\", function() {\n\t\t\tvar newContent = require(\"!!./../../../../node_modules/css-loader/index.js!./nv.d3.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/style-loader!./~/css-loader!./static/repository/plugins/nvd3/nv.d3.css\n ** module id = 9\n ** module chunks = 7 8 9 10 11 12 13 14 15 16 17 18 19\n **/","(function(){\n\nvar nv = window.nv || {};\n\n\nnv.version = '1.1.15b';\nnv.dev = true //set false when in production\n\nwindow.nv = nv;\n\nnv.tooltip = nv.tooltip || {}; // For the tooltip system\nnv.utils = nv.utils || {}; // Utility subsystem\nnv.models = nv.models || {}; //stores all the possible models/components\nnv.charts = {}; //stores all the ready to use charts\nnv.graphs = []; //stores all the graphs currently on the page\nnv.logs = {}; //stores some statistics and potential error messages\n\nnv.dispatch = d3.dispatch('render_start', 'render_end');\n\n// *************************************************************************\n//  Development render timers - disabled if dev = false\n\nif (nv.dev) {\n  nv.dispatch.on('render_start', function(e) {\n    nv.logs.startTime = +new Date();\n  });\n\n  nv.dispatch.on('render_end', function(e) {\n    nv.logs.endTime = +new Date();\n    nv.logs.totalTime = nv.logs.endTime - nv.logs.startTime;\n    nv.log('total', nv.logs.totalTime); // used for development, to keep track of graph generation times\n  });\n}\n\n// ********************************************\n//  Public Core NV functions\n\n// Logs all arguments, and returns the last so you can test things in place\n// Note: in IE8 console.log is an object not a function, and if modernizr is used\n// then calling Function.prototype.bind with with anything other than a function\n// causes a TypeError to be thrown.\nnv.log = function() {\n  if (nv.dev && console.log && console.log.apply)\n    console.log.apply(console, arguments)\n  else if (nv.dev && typeof console.log == \"function\" && Function.prototype.bind) {\n    var log = Function.prototype.bind.call(console.log, console);\n    log.apply(console, arguments);\n  }\n  return arguments[arguments.length - 1];\n};\n\n\nnv.render = function render(step) {\n  step = step || 1; // number of graphs to generate in each timeout loop\n\n  nv.render.active = true;\n  nv.dispatch.render_start();\n\n  setTimeout(function() {\n    var chart, graph;\n\n    for (var i = 0; i < step && (graph = nv.render.queue[i]); i++) {\n      chart = graph.generate();\n      if (typeof graph.callback == typeof(Function)) graph.callback(chart);\n      nv.graphs.push(chart);\n    }\n\n    nv.render.queue.splice(0, i);\n\n    if (nv.render.queue.length) setTimeout(arguments.callee, 0);\n    else {\n      nv.dispatch.render_end();\n      nv.render.active = false;\n    }\n  }, 0);\n};\n\nnv.render.active = false;\nnv.render.queue = [];\n\nnv.addGraph = function(obj) {\n  if (typeof arguments[0] === typeof(Function))\n    obj = {generate: arguments[0], callback: arguments[1]};\n\n  nv.render.queue.push(obj);\n\n  if (!nv.render.active) nv.render();\n};\n\nnv.identity = function(d) { return d; };\n\nnv.strip = function(s) { return s.replace(/(\\s|&)/g,''); };\n\nfunction daysInMonth(month,year) {\n  return (new Date(year, month+1, 0)).getDate();\n}\n\nfunction d3_time_range(floor, step, number) {\n  return function(t0, t1, dt) {\n    var time = floor(t0), times = [];\n    if (time < t0) step(time);\n    if (dt > 1) {\n      while (time < t1) {\n        var date = new Date(+time);\n        if ((number(date) % dt === 0)) times.push(date);\n        step(time);\n      }\n    } else {\n      while (time < t1) { times.push(new Date(+time)); step(time); }\n    }\n    return times;\n  };\n}\n\nd3.time.monthEnd = function(date) {\n  return new Date(date.getFullYear(), date.getMonth(), 0);\n};\n\nd3.time.monthEnds = d3_time_range(d3.time.monthEnd, function(date) {\n    date.setUTCDate(date.getUTCDate() + 1);\n    date.setDate(daysInMonth(date.getMonth() + 1, date.getFullYear()));\n  }, function(date) {\n    return date.getMonth();\n  }\n);\n\n/* Utility class to handle creation of an interactive layer.\nThis places a rectangle on top of the chart. When you mouse move over it, it sends a dispatch\ncontaining the X-coordinate. It can also render a vertical line where the mouse is located.\n\ndispatch.elementMousemove is the important event to latch onto.  It is fired whenever the mouse moves over\nthe rectangle. The dispatch is given one object which contains the mouseX/Y location.\nIt also has 'pointXValue', which is the conversion of mouseX to the x-axis scale.\n*/\nnv.interactiveGuideline = function() {\n\t\"use strict\";\n\tvar tooltip = nv.models.tooltip();\n\t//Public settings\n\tvar width = null\n\t, height = null\n    //Please pass in the bounding chart's top and left margins\n    //This is important for calculating the correct mouseX/Y positions.\n\t, margin = {left: 0, top: 0}\n\t, xScale = d3.scale.linear()\n\t, yScale = d3.scale.linear()\n\t, dispatch = d3.dispatch('elementMousemove', 'elementMouseout','elementDblclick')\n\t, showGuideLine = true\n\t, svgContainer = null  \n    //Must pass in the bounding chart's <svg> container.\n    //The mousemove event is attached to this container.\n\t;\n\n\t//Private variables\n\tvar isMSIE = navigator.userAgent.indexOf(\"MSIE\") !== -1  //Check user-agent for Microsoft Internet Explorer.\n\t;\n\n\n\tfunction layer(selection) {\n\t\tselection.each(function(data) {\n\t\t\t\tvar container = d3.select(this);\n\t\t\t\t\n\t\t\t\tvar availableWidth = (width || 960), availableHeight = (height || 400);\n\n\t\t\t\tvar wrap = container.selectAll(\"g.nv-wrap.nv-interactiveLineLayer\").data([data]);\n\t\t\t\tvar wrapEnter = wrap.enter()\n\t\t\t\t\t\t\t\t.append(\"g\").attr(\"class\", \" nv-wrap nv-interactiveLineLayer\");\n\t\t\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\twrapEnter.append(\"g\").attr(\"class\",\"nv-interactiveGuideLine\");\n\t\t\t\t\n\t\t\t\tif (!svgContainer) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n                function mouseHandler() {\n                      var d3mouse = d3.mouse(this);\n                      var mouseX = d3mouse[0];\n                      var mouseY = d3mouse[1];\n                      var subtractMargin = true;\n                      var mouseOutAnyReason = false;\n                      if (isMSIE) {\n                         /*\n                            D3.js (or maybe SVG.getScreenCTM) has a nasty bug in Internet Explorer 10.\n                            d3.mouse() returns incorrect X,Y mouse coordinates when mouse moving\n                            over a rect in IE 10.\n                            However, d3.event.offsetX/Y also returns the mouse coordinates\n                            relative to the triggering <rect>. So we use offsetX/Y on IE.  \n                         */\n                         mouseX = d3.event.offsetX;\n                         mouseY = d3.event.offsetY;\n\n                         /*\n                            On IE, if you attach a mouse event listener to the <svg> container,\n                            it will actually trigger it for all the child elements (like <path>, <circle>, etc).\n                            When this happens on IE, the offsetX/Y is set to where ever the child element\n                            is located.\n                            As a result, we do NOT need to subtract margins to figure out the mouse X/Y\n                            position under this scenario. Removing the line below *will* cause \n                            the interactive layer to not work right on IE.\n                         */\n                         if(d3.event.target.tagName !== \"svg\")\n                            subtractMargin = false;\n\n                         if (d3.event.target.className.baseVal.match(\"nv-legend\"))\n                         \tmouseOutAnyReason = true;\n                          \n                      }\n\n                      if(subtractMargin) {\n                         mouseX -= margin.left;\n                         mouseY -= margin.top;\n                      }\n\n                      /* If mouseX/Y is outside of the chart's bounds,\n                      trigger a mouseOut event.\n                      */\n                      if (mouseX < 0 || mouseY < 0 \n                        || mouseX > availableWidth || mouseY > availableHeight\n                        || (d3.event.relatedTarget && d3.event.relatedTarget.ownerSVGElement === undefined)\n                        || mouseOutAnyReason\n                        ) \n                      {\n                      \t\tif (isMSIE) {\n                      \t\t\tif (d3.event.relatedTarget \n                      \t\t\t\t&& d3.event.relatedTarget.ownerSVGElement === undefined\n                      \t\t\t\t&& d3.event.relatedTarget.className.match(tooltip.nvPointerEventsClass)) {\n                      \t\t\t\treturn;\n                      \t\t\t}\n                      \t\t}\n                            dispatch.elementMouseout({\n                               mouseX: mouseX,\n                               mouseY: mouseY\n                            });\n                            layer.renderGuideLine(null); //hide the guideline\n                            return;\n                      }\n                      \n                      var pointXValue = xScale.invert(mouseX);\n                      dispatch.elementMousemove({\n                            mouseX: mouseX,\n                            mouseY: mouseY,\n                            pointXValue: pointXValue\n                      });\n\n                      //If user double clicks the layer, fire a elementDblclick dispatch.\n                      if (d3.event.type === \"dblclick\") {\n                        dispatch.elementDblclick({\n                            mouseX: mouseX,\n                            mouseY: mouseY,\n                            pointXValue: pointXValue\n                        });\n                      }\n                }\n\n\t\t\t\tsvgContainer\n\t\t\t\t      .on(\"mousemove\",mouseHandler, true)\n\t\t\t\t      .on(\"mouseout\" ,mouseHandler,true)\n                      .on(\"dblclick\" ,mouseHandler)\n\t\t\t\t      ;\n\n\t\t\t\t //Draws a vertical guideline at the given X postion.\n\t\t\t\tlayer.renderGuideLine = function(x) {\n\t\t\t\t \tif (!showGuideLine) return;\n\t\t\t\t \tvar line = wrap.select(\".nv-interactiveGuideLine\")\n\t\t\t\t \t      .selectAll(\"line\")\n\t\t\t\t \t      .data((x != null) ? [nv.utils.NaNtoZero(x)] : [], String);\n\n\t\t\t\t \tline.enter()\n\t\t\t\t \t\t.append(\"line\")\n\t\t\t\t \t\t.attr(\"class\", \"nv-guideline\")\n\t\t\t\t \t\t.attr(\"x1\", function(d) { return d;})\n\t\t\t\t \t\t.attr(\"x2\", function(d) { return d;})\n\t\t\t\t \t\t.attr(\"y1\", availableHeight)\n\t\t\t\t \t\t.attr(\"y2\",0)\n\t\t\t\t \t\t;\n\t\t\t\t \tline.exit().remove();\n\n\t\t\t\t}\n\t\t});\n\t}\n\n\tlayer.dispatch = dispatch;\n\tlayer.tooltip = tooltip;\n\n\tlayer.margin = function(_) {\n\t    if (!arguments.length) return margin;\n\t    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t    return layer;\n    };\n\n\tlayer.width = function(_) {\n\t\tif (!arguments.length) return width;\n\t\twidth = _;\n\t\treturn layer;\n\t};\n\n\tlayer.height = function(_) {\n\t\tif (!arguments.length) return height;\n\t\theight = _;\n\t\treturn layer;\n\t};\n\n\tlayer.xScale = function(_) {\n\t\tif (!arguments.length) return xScale;\n\t\txScale = _;\n\t\treturn layer;\n\t};\n\n\tlayer.showGuideLine = function(_) {\n\t\tif (!arguments.length) return showGuideLine;\n\t\tshowGuideLine = _;\n\t\treturn layer;\n\t};\n\n\tlayer.svgContainer = function(_) {\n\t\tif (!arguments.length) return svgContainer;\n\t\tsvgContainer = _;\n\t\treturn layer;\n\t};\n\n\n\treturn layer;\n};\n\n/* Utility class that uses d3.bisect to find the index in a given array, where a search value can be inserted.\nThis is different from normal bisectLeft; this function finds the nearest index to insert the search value.\n\nFor instance, lets say your array is [1,2,3,5,10,30], and you search for 28. \nNormal d3.bisectLeft will return 4, because 28 is inserted after the number 10.  But interactiveBisect will return 5\nbecause 28 is closer to 30 than 10.\n\nUnit tests can be found in: interactiveBisectTest.html\n\nHas the following known issues:\n   * Will not work if the data points move backwards (ie, 10,9,8,7, etc) or if the data points are in random order.\n   * Won't work if there are duplicate x coordinate values.\n*/\nnv.interactiveBisect = function (values, searchVal, xAccessor) {\n\t  \"use strict\";\n      if (! values instanceof Array) return null;\n      if (typeof xAccessor !== 'function') xAccessor = function(d,i) { return d.x;}\n\n      var bisect = d3.bisector(xAccessor).left;\n      var index = d3.max([0, bisect(values,searchVal) - 1]);\n      var currentValue = xAccessor(values[index], index);\n      if (typeof currentValue === 'undefined') currentValue = index;\n\n      if (currentValue === searchVal) return index;  //found exact match\n\n      var nextIndex = d3.min([index+1, values.length - 1]);\n      var nextValue = xAccessor(values[nextIndex], nextIndex);\n      if (typeof nextValue === 'undefined') nextValue = nextIndex;\n\n      if (Math.abs(nextValue - searchVal) >= Math.abs(currentValue - searchVal))\n          return index;\n      else\n          return nextIndex\n};\n\n/*\nReturns the index in the array \"values\" that is closest to searchVal.\nOnly returns an index if searchVal is within some \"threshold\".\nOtherwise, returns null.\n*/\nnv.nearestValueIndex = function (values, searchVal, threshold) {\n      \"use strict\";\n      var yDistMax = Infinity, indexToHighlight = null;\n      values.forEach(function(d,i) {\n         var delta = Math.abs(searchVal - d);\n         if ( delta <= yDistMax && delta < threshold) {\n            yDistMax = delta;\n            indexToHighlight = i;\n         }\n      });\n      return indexToHighlight;\n};/* Tooltip rendering model for nvd3 charts.\nwindow.nv.models.tooltip is the updated,new way to render tooltips.\n\nwindow.nv.tooltip.show is the old tooltip code.\nwindow.nv.tooltip.* also has various helper methods.\n*/\n(function() {\n  \"use strict\";\n  window.nv.tooltip = {};\n\n  /* Model which can be instantiated to handle tooltip rendering.\n    Example usage: \n    var tip = nv.models.tooltip().gravity('w').distance(23)\n                .data(myDataObject);\n\n        tip();    //just invoke the returned function to render tooltip.\n  */\n  window.nv.models.tooltip = function() {\n        var content = null    //HTML contents of the tooltip.  If null, the content is generated via the data variable.\n        ,   data = null     /* Tooltip data. If data is given in the proper format, a consistent tooltip is generated.\n        Format of data:\n        {\n            key: \"Date\",\n            value: \"August 2009\", \n            series: [\n                    {\n                        key: \"Series 1\",\n                        value: \"Value 1\",\n                        color: \"#000\"\n                    },\n                    {\n                        key: \"Series 2\",\n                        value: \"Value 2\",\n                        color: \"#00f\"\n                    }\n            ]\n\n        }\n\n        */\n        ,   gravity = 'w'   //Can be 'n','s','e','w'. Determines how tooltip is positioned.\n        ,   distance = 50   //Distance to offset tooltip from the mouse location.\n        ,   snapDistance = 25   //Tolerance allowed before tooltip is moved from its current position (creates 'snapping' effect)\n        ,   fixedTop = null //If not null, this fixes the top position of the tooltip.\n        ,   classes = null  //Attaches additional CSS classes to the tooltip DIV that is created.\n        ,   chartContainer = null   //Parent DIV, of the SVG Container that holds the chart.\n        ,   tooltipElem = null  //actual DOM element representing the tooltip.\n        ,   position = {left: null, top: null}      //Relative position of the tooltip inside chartContainer.\n        ,   enabled = true  //True -> tooltips are rendered. False -> don't render tooltips.\n        //Generates a unique id when you create a new tooltip() object\n        ,   id = \"nvtooltip-\" + Math.floor(Math.random() * 100000)\n        ;\n\n        //CSS class to specify whether element should not have mouse events.\n        var  nvPointerEventsClass = \"nv-pointer-events-none\";\n\n        //Format function for the tooltip values column\n        var valueFormatter = function(d,i) {\n            return d;\n        };\n\n        //Format function for the tooltip header value.\n        var headerFormatter = function(d) {\n            return d;\n        };\n\n        //By default, the tooltip model renders a beautiful table inside a DIV.\n        //You can override this function if a custom tooltip is desired.\n        var contentGenerator = function(d) {\n            if (content != null) return content;\n\n            if (d == null) return '';\n\n            var table = d3.select(document.createElement(\"table\"));\n            var theadEnter = table.selectAll(\"thead\")\n                .data([d])\n                .enter().append(\"thead\");\n            theadEnter.append(\"tr\")\n                .append(\"td\")\n                .attr(\"colspan\",3)\n                .append(\"strong\")\n                    .classed(\"x-value\",true)\n                    .html(headerFormatter(d.value));\n\n            var tbodyEnter = table.selectAll(\"tbody\")\n                .data([d])\n                .enter().append(\"tbody\");\n            var trowEnter = tbodyEnter.selectAll(\"tr\")\n                .data(function(p) { return p.series})\n                .enter()\n                .append(\"tr\")\n                .classed(\"highlight\", function(p) { return p.highlight})\n                ;\n\n            trowEnter.append(\"td\")\n                .classed(\"legend-color-guide\",true)\n                .append(\"div\")\n                    .style(\"background-color\", function(p) { return p.color});\n            trowEnter.append(\"td\")\n                .classed(\"key\",true)\n                .html(function(p) {return p.key});\n            trowEnter.append(\"td\")\n                .classed(\"value\",true)\n                .html(function(p,i) { return valueFormatter(p.value,i) });\n\n\n            trowEnter.selectAll(\"td\").each(function(p) {\n                if (p.highlight) {\n                    var opacityScale = d3.scale.linear().domain([0,1]).range([\"#fff\",p.color]);\n                    var opacity = 0.6;\n                    d3.select(this)\n                        .style(\"border-bottom-color\", opacityScale(opacity))\n                        .style(\"border-top-color\", opacityScale(opacity))\n                        ;\n                }\n            });\n\n            var html = table.node().outerHTML;\n            if (d.footer !== undefined)\n                html += \"<div class='footer'>\" + d.footer + \"</div>\";\n            return html;\n\n        };\n\n        var dataSeriesExists = function(d) {\n            if (d && d.series && d.series.length > 0) return true;\n\n            return false;\n        };\n\n        //In situations where the chart is in a 'viewBox', re-position the tooltip based on how far chart is zoomed.\n        function convertViewBoxRatio() {\n            if (chartContainer) {\n              var svg = d3.select(chartContainer);\n              if (svg.node().tagName !== \"svg\") {\n                 svg = svg.select(\"svg\");\n              }\n              var viewBox = (svg.node()) ? svg.attr('viewBox') : null;\n              if (viewBox) {\n                viewBox = viewBox.split(' ');\n                var ratio = parseInt(svg.style('width')) / viewBox[2];\n                \n                position.left = position.left * ratio;\n                position.top  = position.top * ratio;\n              }\n            }\n        }\n\n        //Creates new tooltip container, or uses existing one on DOM.\n        function getTooltipContainer(newContent) {\n            var body;\n            if (chartContainer)\n                body = d3.select(chartContainer);\n            else\n                body = d3.select(\"body\");\n\n            var container = body.select(\".nvtooltip\");\n            if (container.node() === null) {\n                //Create new tooltip div if it doesn't exist on DOM.\n                container = body.append(\"div\")\n                    .attr(\"class\", \"nvtooltip \" + (classes? classes: \"xy-tooltip\"))\n                    .attr(\"id\",id)\n                    ;\n            }\n        \n\n            container.node().innerHTML = newContent;\n            container.style(\"top\",0).style(\"left\",0).style(\"opacity\",0);\n            container.selectAll(\"div, table, td, tr\").classed(nvPointerEventsClass,true)\n            container.classed(nvPointerEventsClass,true);\n            return container.node();\n        }\n\n        \n\n        //Draw the tooltip onto the DOM.\n        function nvtooltip() {\n            if (!enabled) return;\n            if (!dataSeriesExists(data)) return;\n\n            convertViewBoxRatio();\n\n            var left = position.left;\n            var top = (fixedTop != null) ? fixedTop : position.top;\n            var container = getTooltipContainer(contentGenerator(data));\n            tooltipElem = container;\n            if (chartContainer) {\n                var svgComp = chartContainer.getElementsByTagName(\"svg\")[0];\n                var boundRect = (svgComp) ? svgComp.getBoundingClientRect() : chartContainer.getBoundingClientRect();\n                var svgOffset = {left:0,top:0};\n                if (svgComp) {\n                    var svgBound = svgComp.getBoundingClientRect();\n                    var chartBound = chartContainer.getBoundingClientRect();\n                    var svgBoundTop = svgBound.top;\n                    \n                    //Defensive code. Sometimes, svgBoundTop can be a really negative\n                    //  number, like -134254. That's a bug. \n                    //  If such a number is found, use zero instead. FireFox bug only\n                    if (svgBoundTop < 0) {\n                        var containerBound = chartContainer.getBoundingClientRect();\n                        svgBoundTop = (Math.abs(svgBoundTop) > containerBound.height) ? 0 : svgBoundTop;\n                    } \n                    svgOffset.top = Math.abs(svgBoundTop - chartBound.top);\n                    svgOffset.left = Math.abs(svgBound.left - chartBound.left);\n                }\n                //If the parent container is an overflow <div> with scrollbars, subtract the scroll offsets.\n                //You need to also add any offset between the <svg> element and its containing <div>\n                //Finally, add any offset of the containing <div> on the whole page.\n                left += chartContainer.offsetLeft + svgOffset.left - 2*chartContainer.scrollLeft;\n                top += chartContainer.offsetTop + svgOffset.top - 2*chartContainer.scrollTop;\n            }\n\n            if (snapDistance && snapDistance > 0) {\n                top = Math.floor(top/snapDistance) * snapDistance;\n            }\n\n            nv.tooltip.calcTooltipPosition([left,top], gravity, distance, container);\n            return nvtooltip;\n        };\n\n        nvtooltip.nvPointerEventsClass = nvPointerEventsClass;\n        \n        nvtooltip.content = function(_) {\n            if (!arguments.length) return content;\n            content = _;\n            return nvtooltip;\n        };\n\n        //Returns tooltipElem...not able to set it.\n        nvtooltip.tooltipElem = function() {\n            return tooltipElem;\n        };\n\n        nvtooltip.contentGenerator = function(_) {\n            if (!arguments.length) return contentGenerator;\n            if (typeof _ === 'function') {\n                contentGenerator = _;\n            }\n            return nvtooltip;\n        };\n\n        nvtooltip.data = function(_) {\n            if (!arguments.length) return data;\n            data = _;\n            return nvtooltip;\n        };\n\n        nvtooltip.gravity = function(_) {\n            if (!arguments.length) return gravity;\n            gravity = _;\n            return nvtooltip;\n        };\n\n        nvtooltip.distance = function(_) {\n            if (!arguments.length) return distance;\n            distance = _;\n            return nvtooltip;\n        };\n\n        nvtooltip.snapDistance = function(_) {\n            if (!arguments.length) return snapDistance;\n            snapDistance = _;\n            return nvtooltip;\n        };\n\n        nvtooltip.classes = function(_) {\n            if (!arguments.length) return classes;\n            classes = _;\n            return nvtooltip;\n        };\n\n        nvtooltip.chartContainer = function(_) {\n            if (!arguments.length) return chartContainer;\n            chartContainer = _;\n            return nvtooltip;\n        };\n\n        nvtooltip.position = function(_) {\n            if (!arguments.length) return position;\n            position.left = (typeof _.left !== 'undefined') ? _.left : position.left;\n            position.top = (typeof _.top !== 'undefined') ? _.top : position.top;\n            return nvtooltip;\n        };\n\n        nvtooltip.fixedTop = function(_) {\n            if (!arguments.length) return fixedTop;\n            fixedTop = _;\n            return nvtooltip;\n        };\n\n        nvtooltip.enabled = function(_) {\n            if (!arguments.length) return enabled;\n            enabled = _;\n            return nvtooltip;\n        };\n\n        nvtooltip.valueFormatter = function(_) {\n            if (!arguments.length) return valueFormatter;\n            if (typeof _ === 'function') {\n                valueFormatter = _;\n            }\n            return nvtooltip;\n        };\n\n        nvtooltip.headerFormatter = function(_) {\n            if (!arguments.length) return headerFormatter;\n            if (typeof _ === 'function') {\n                headerFormatter = _;\n            }\n            return nvtooltip;\n        };\n\n        //id() is a read-only function. You can't use it to set the id.\n        nvtooltip.id = function() {\n            return id;\n        };\n\n\n        return nvtooltip;\n  };\n\n\n  //Original tooltip.show function. Kept for backward compatibility.\n  // pos = [left,top]\n  nv.tooltip.show = function(pos, content, gravity, dist, parentContainer, classes) {\n      \n        //Create new tooltip div if it doesn't exist on DOM.\n        var   container = document.createElement('div');\n        container.className = 'nvtooltip ' + (classes ? classes : 'xy-tooltip');\n\n        var body = parentContainer;\n        if ( !parentContainer || parentContainer.tagName.match(/g|svg/i)) {\n            //If the parent element is an SVG element, place tooltip in the <body> element.\n            body = document.getElementsByTagName('body')[0];\n        }\n   \n        container.style.left = 0;\n        container.style.top = 0;\n        container.style.opacity = 0;\n        container.innerHTML = content;\n        body.appendChild(container);\n        \n        //If the parent container is an overflow <div> with scrollbars, subtract the scroll offsets.\n        if (parentContainer) {\n           pos[0] = pos[0] - parentContainer.scrollLeft;\n           pos[1] = pos[1] - parentContainer.scrollTop;\n        }\n        nv.tooltip.calcTooltipPosition(pos, gravity, dist, container);\n  };\n\n  //Looks up the ancestry of a DOM element, and returns the first NON-svg node.\n  nv.tooltip.findFirstNonSVGParent = function(Elem) {\n            while(Elem.tagName.match(/^g|svg$/i) !== null) {\n                Elem = Elem.parentNode;\n            }\n            return Elem;\n  };\n\n  //Finds the total offsetTop of a given DOM element.\n  //Looks up the entire ancestry of an element, up to the first relatively positioned element.\n  nv.tooltip.findTotalOffsetTop = function ( Elem, initialTop ) {\n                var offsetTop = initialTop;\n                \n                do {\n                    if( !isNaN( Elem.offsetTop ) ) {\n                        offsetTop += (Elem.offsetTop);\n                    }\n                } while( Elem = Elem.offsetParent );\n                return offsetTop;\n  };\n\n  //Finds the total offsetLeft of a given DOM element.\n  //Looks up the entire ancestry of an element, up to the first relatively positioned element.\n  nv.tooltip.findTotalOffsetLeft = function ( Elem, initialLeft) {\n                var offsetLeft = initialLeft;\n                \n                do {\n                    if( !isNaN( Elem.offsetLeft ) ) {\n                        offsetLeft += (Elem.offsetLeft);\n                    }\n                } while( Elem = Elem.offsetParent );\n                return offsetLeft;\n  };\n\n  //Global utility function to render a tooltip on the DOM.\n  //pos = [left,top] coordinates of where to place the tooltip, relative to the SVG chart container.\n  //gravity = how to orient the tooltip\n  //dist = how far away from the mouse to place tooltip\n  //container = tooltip DIV\n  nv.tooltip.calcTooltipPosition = function(pos, gravity, dist, container) {\n\n            var height = parseInt(container.offsetHeight),\n                width = parseInt(container.offsetWidth),\n                windowWidth = nv.utils.windowSize().width,\n                windowHeight = nv.utils.windowSize().height,\n                scrollTop = window.pageYOffset,\n                scrollLeft = window.pageXOffset,\n                left, top;\n\n            windowHeight = window.innerWidth >= document.body.scrollWidth ? windowHeight : windowHeight - 16;\n            windowWidth = window.innerHeight >= document.body.scrollHeight ? windowWidth : windowWidth - 16;\n\n            gravity = gravity || 's';\n            dist = dist || 20;\n\n            var tooltipTop = function ( Elem ) {\n                return nv.tooltip.findTotalOffsetTop(Elem, top);\n            };\n\n            var tooltipLeft = function ( Elem ) {\n                return nv.tooltip.findTotalOffsetLeft(Elem,left);\n            };\n\n            switch (gravity) {\n              case 'e':\n                left = pos[0] - width - dist;\n                top = pos[1] - (height / 2);\n                var tLeft = tooltipLeft(container);\n                var tTop = tooltipTop(container);\n                if (tLeft < scrollLeft) left = pos[0] + dist > scrollLeft ? pos[0] + dist : scrollLeft - tLeft + left;\n                if (tTop < scrollTop) top = scrollTop - tTop + top;\n                if (tTop + height > scrollTop + windowHeight) top = scrollTop + windowHeight - tTop + top - height;\n                break;\n              case 'w':\n                left = pos[0] + dist;\n                top = pos[1] - (height / 2);\n                var tLeft = tooltipLeft(container);\n                var tTop = tooltipTop(container);\n                if (tLeft + width > windowWidth) left = pos[0] - width - dist;\n                if (tTop < scrollTop) top = scrollTop + 5;\n                if (tTop + height > scrollTop + windowHeight) top = scrollTop + windowHeight - tTop + top - height;\n                break;\n              case 'n':\n                left = pos[0] - (width / 2) - 5;\n                top = pos[1] + dist;\n                var tLeft = tooltipLeft(container);\n                var tTop = tooltipTop(container);\n                if (tLeft < scrollLeft) left = scrollLeft + 5;\n                if (tLeft + width > windowWidth) left = left - width/2 + 5;\n                if (tTop + height > scrollTop + windowHeight) top = scrollTop + windowHeight - tTop + top - height;\n                break;\n              case 's':\n                left = pos[0] - (width / 2);\n                top = pos[1] - height - dist;\n                var tLeft = tooltipLeft(container);\n                var tTop = tooltipTop(container);\n                if (tLeft < scrollLeft) left = scrollLeft + 5;\n                if (tLeft + width > windowWidth) left = left - width/2 + 5;\n                if (scrollTop > tTop) top = scrollTop;\n                break;\n              case 'none':\n                left = pos[0];\n                top = pos[1] - dist;\n                var tLeft = tooltipLeft(container);\n                var tTop = tooltipTop(container);\n                break;\n            }\n\n\n            container.style.left = left+'px';\n            container.style.top = top+'px';\n            container.style.opacity = 1;\n            container.style.position = 'absolute'; \n\n            return container;\n    };\n\n    //Global utility function to remove tooltips from the DOM.\n    nv.tooltip.cleanup = function() {\n\n              // Find the tooltips, mark them for removal by this class (so others cleanups won't find it)\n              var tooltips = document.getElementsByClassName('nvtooltip');\n              var purging = [];\n              while(tooltips.length) {\n                purging.push(tooltips[0]);\n                tooltips[0].style.transitionDelay = '0 !important';\n                tooltips[0].style.opacity = 0;\n                tooltips[0].className = 'nvtooltip-pending-removal';\n              }\n\n              setTimeout(function() {\n\n                  while (purging.length) {\n                     var removeMe = purging.pop();\n                      removeMe.parentNode.removeChild(removeMe);\n                  }\n            }, 500);\n    };\n\n})();\n\nnv.utils.windowSize = function() {\n    // Sane defaults\n    var size = {width: 640, height: 480};\n\n    // Earlier IE uses Doc.body\n    if (document.body && document.body.offsetWidth) {\n        size.width = document.body.offsetWidth;\n        size.height = document.body.offsetHeight;\n    }\n\n    // IE can use depending on mode it is in\n    if (document.compatMode=='CSS1Compat' &&\n        document.documentElement &&\n        document.documentElement.offsetWidth ) {\n        size.width = document.documentElement.offsetWidth;\n        size.height = document.documentElement.offsetHeight;\n    }\n\n    // Most recent browsers use\n    if (window.innerWidth && window.innerHeight) {\n        size.width = window.innerWidth;\n        size.height = window.innerHeight;\n    }\n    return (size);\n};\n\n\n\n// Easy way to bind multiple functions to window.onresize\n// TODO: give a way to remove a function after its bound, other than removing all of them\nnv.utils.windowResize = function(fun){\n  if (fun === undefined) return;\n  var oldresize = window.onresize;\n\n  window.onresize = function(e) {\n    if (typeof oldresize == 'function') oldresize(e);\n    fun(e);\n  }\n}\n\n// Backwards compatible way to implement more d3-like coloring of graphs.\n// If passed an array, wrap it in a function which implements the old default\n// behavior\nnv.utils.getColor = function(color) {\n    if (!arguments.length) return nv.utils.defaultColor(); //if you pass in nothing, get default colors back\n\n    if( Object.prototype.toString.call( color ) === '[object Array]' )\n        return function(d, i) { return d.color || color[i % color.length]; };\n    else\n        return color;\n        //can't really help it if someone passes rubbish as color\n}\n\n// Default color chooser uses the index of an object as before.\nnv.utils.defaultColor = function() {\n    var colors = d3.scale.category20().range();\n    return function(d, i) { return d.color || colors[i % colors.length] };\n}\n\n\n// Returns a color function that takes the result of 'getKey' for each series and\n// looks for a corresponding color from the dictionary,\nnv.utils.customTheme = function(dictionary, getKey, defaultColors) {\n  getKey = getKey || function(series) { return series.key }; // use default series.key if getKey is undefined\n  defaultColors = defaultColors || d3.scale.category20().range(); //default color function\n\n  var defIndex = defaultColors.length; //current default color (going in reverse)\n\n  return function(series, index) {\n    var key = getKey(series);\n\n    if (!defIndex) defIndex = defaultColors.length; //used all the default colors, start over\n\n    if (typeof dictionary[key] !== \"undefined\")\n      return (typeof dictionary[key] === \"function\") ? dictionary[key]() : dictionary[key];\n    else\n      return defaultColors[--defIndex]; // no match in dictionary, use default color\n  }\n}\n\n\n\n// From the PJAX example on d3js.org, while this is not really directly needed\n// it's a very cool method for doing pjax, I may expand upon it a little bit,\n// open to suggestions on anything that may be useful\nnv.utils.pjax = function(links, content) {\n  d3.selectAll(links).on(\"click\", function() {\n    history.pushState(this.href, this.textContent, this.href);\n    load(this.href);\n    d3.event.preventDefault();\n  });\n\n  function load(href) {\n    d3.html(href, function(fragment) {\n      var target = d3.select(content).node();\n      target.parentNode.replaceChild(d3.select(fragment).select(content).node(), target);\n      nv.utils.pjax(links, content);\n    });\n  }\n\n  d3.select(window).on(\"popstate\", function() {\n    if (d3.event.state) load(d3.event.state);\n  });\n}\n\n/* For situations where we want to approximate the width in pixels for an SVG:text element.\nMost common instance is when the element is in a display:none; container.\nForumla is : text.length * font-size * constant_factor\n*/\nnv.utils.calcApproxTextWidth = function (svgTextElem) {\n    if (typeof svgTextElem.style === 'function'\n        && typeof svgTextElem.text === 'function') {\n        var fontSize = parseInt(svgTextElem.style(\"font-size\").replace(\"px\",\"\"));\n        var textLength = svgTextElem.text().length;\n\n        return textLength * fontSize * 0.5;\n    }\n    return 0;\n};\n\n/* Numbers that are undefined, null or NaN, convert them to zeros.\n*/\nnv.utils.NaNtoZero = function(n) {\n    if (typeof n !== 'number'\n        || isNaN(n)\n        || n === null\n        || n === Infinity) return 0;\n\n    return n;\n};\n\n/*\nSnippet of code you can insert into each nv.models.* to give you the ability to\ndo things like:\nchart.options({\n  showXAxis: true,\n  tooltips: true\n});\n\nTo enable in the chart:\nchart.options = nv.utils.optionsFunc.bind(chart);\n*/\nnv.utils.optionsFunc = function(args) {\n    if (args) {\n      d3.map(args).forEach((function(key,value) {\n        if (typeof this[key] === \"function\") {\n           this[key](value);\n        }\n      }).bind(this));\n    }\n    return this;\n};nv.models.axis = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var axis = d3.svg.axis()\n    ;\n\n  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n    , width = 75 //only used for tickLabel currently\n    , height = 60 //only used for tickLabel currently\n    , scale = d3.scale.linear()\n    , axisLabelText = null\n    , showMaxMin = true //TODO: showMaxMin should be disabled on all ordinal scaled axes\n    , highlightZero = true\n    , rotateLabels = 0\n    , rotateYLabel = true\n    , staggerLabels = false\n    , isOrdinal = false\n    , ticks = null\n    , axisLabelDistance = 12 //The larger this number is, the closer the axis label is to the axis.\n    ;\n\n  axis\n    .scale(scale)\n    .orient('bottom')\n    .tickFormat(function(d) { return d })\n    ;\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var scale0;\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this);\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-axis').data([data]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-axis');\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g')\n\n      //------------------------------------------------------------\n\n\n      if (ticks !== null)\n        axis.ticks(ticks);\n      else if (axis.orient() == 'top' || axis.orient() == 'bottom')\n        axis.ticks(Math.abs(scale.range()[1] - scale.range()[0]) / 100);\n\n\n      //TODO: consider calculating width/height based on whether or not label is added, for reference in charts using this component\n\n\n      g.call(axis);\n\n      scale0 = scale0 || axis.scale();\n\n      var fmt = axis.tickFormat();\n      if (fmt == null) {\n        fmt = scale0.tickFormat();\n      }\n\n      var axisLabel = g.selectAll('text.nv-axislabel')\n          .data([axisLabelText || null]);\n      axisLabel.exit().remove();\n      switch (axis.orient()) {\n        case 'top':\n          axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n          var w = (scale.range().length==2) ? scale.range()[1] : (scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]));\n          axisLabel\n              .attr('text-anchor', 'middle')\n              .attr('y', 0)\n              .attr('x', w/2);\n          if (showMaxMin) {\n            var axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                           .data(scale.domain());\n            axisMaxMin.enter().append('g').attr('class', 'nv-axisMaxMin').append('text');\n            axisMaxMin.exit().remove();\n            axisMaxMin\n                .attr('transform', function(d,i) {\n                  return 'translate(' + scale(d) + ',0)'\n                })\n              .select('text')\n                .attr('dy', '-0.5em')\n                .attr('y', -axis.tickPadding())\n                .attr('text-anchor', 'middle')\n                .text(function(d,i) {\n                  var v = fmt(d);\n                  return ('' + v).match('NaN') ? '' : v;\n                });\n            axisMaxMin\n                .attr('transform', function(d,i) {\n                  return 'translate(' + scale.range()[i] + ',0)'\n                });\n          }\n          break;\n        case 'bottom':\n          var xLabelMargin = 36;\n          var maxTextWidth = 30;\n          var xTicks = g.selectAll('g').select(\"text\");\n          if (rotateLabels%360) {\n            //Calculate the longest xTick width\n            xTicks.each(function(d,i){\n              var width = this.getBBox().width;\n              if(width > maxTextWidth) maxTextWidth = width;\n            });\n            //Convert to radians before calculating sin. Add 30 to margin for healthy padding.\n            var sin = Math.abs(Math.sin(rotateLabels*Math.PI/180));\n            var xLabelMargin = (sin ? sin*maxTextWidth : maxTextWidth)+30;\n            //Rotate all xTicks\n            xTicks\n              .attr('transform', function(d,i,j) { return 'rotate(' + rotateLabels + ' 0,0)' })\n              .style('text-anchor', rotateLabels%360 > 0 ? 'start' : 'end');\n          }\n          axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n          var w = (scale.range().length==2) ? scale.range()[1] : (scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]));\n          axisLabel\n              .attr('text-anchor', 'middle')\n              .attr('y', xLabelMargin)\n              .attr('x', w/2);\n          if (showMaxMin) {\n          //if (showMaxMin && !isOrdinal) {\n            var axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                           //.data(scale.domain())\n                           .data([scale.domain()[0], scale.domain()[scale.domain().length - 1]]);\n            axisMaxMin.enter().append('g').attr('class', 'nv-axisMaxMin').append('text');\n            axisMaxMin.exit().remove();\n            axisMaxMin\n                .attr('transform', function(d,i) {\n                  return 'translate(' + (scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0)) + ',0)'\n                })\n              .select('text')\n                .attr('dy', '.71em')\n                .attr('y', axis.tickPadding())\n                .attr('transform', function(d,i,j) { return 'rotate(' + rotateLabels + ' 0,0)' })\n                .style('text-anchor', rotateLabels ? (rotateLabels%360 > 0 ? 'start' : 'end') : 'middle')\n                .text(function(d,i) {\n                  var v = fmt(d);\n                  return ('' + v).match('NaN') ? '' : v;\n                });\n            axisMaxMin\n                .attr('transform', function(d,i) {\n                  //return 'translate(' + scale.range()[i] + ',0)'\n                  //return 'translate(' + scale(d) + ',0)'\n                  return 'translate(' + (scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0)) + ',0)'\n                });\n          }\n          if (staggerLabels)\n            xTicks\n                .attr('transform', function(d,i) { return 'translate(0,' + (i % 2 == 0 ? '0' : '12') + ')' });\n\n          break;\n        case 'right':\n          axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n          axisLabel\n              .style('text-anchor', rotateYLabel ? 'middle' : 'begin')\n              .attr('transform', rotateYLabel ? 'rotate(90)' : '')\n              .attr('y', rotateYLabel ? (-Math.max(margin.right,width) + 12) : -10) //TODO: consider calculating this based on largest tick width... OR at least expose this on chart\n              .attr('x', rotateYLabel ? (scale.range()[0] / 2) : axis.tickPadding());\n          if (showMaxMin) {\n            var axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                           .data(scale.domain());\n            axisMaxMin.enter().append('g').attr('class', 'nv-axisMaxMin').append('text')\n                .style('opacity', 0);\n            axisMaxMin.exit().remove();\n            axisMaxMin\n                .attr('transform', function(d,i) {\n                  return 'translate(0,' + scale(d) + ')'\n                })\n              .select('text')\n                .attr('dy', '.32em')\n                .attr('y', 0)\n                .attr('x', axis.tickPadding())\n                .style('text-anchor', 'start')\n                .text(function(d,i) {\n                  var v = fmt(d);\n                  return ('' + v).match('NaN') ? '' : v;\n                });\n            axisMaxMin\n                .attr('transform', function(d,i) {\n                  return 'translate(0,' + scale.range()[i] + ')'\n                })\n              .select('text')\n                .style('opacity', 1);\n          }\n          break;\n        case 'left':\n          /*\n          //For dynamically placing the label. Can be used with dynamically-sized chart axis margins\n          var yTicks = g.selectAll('g').select(\"text\");\n          yTicks.each(function(d,i){\n            var labelPadding = this.getBBox().width + axis.tickPadding() + 16;\n            if(labelPadding > width) width = labelPadding;\n          });\n          */\n          axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n          axisLabel\n              .style('text-anchor', rotateYLabel ? 'middle' : 'end')\n              .attr('transform', rotateYLabel ? 'rotate(-90)' : '')\n              .attr('y', rotateYLabel ? (-Math.max(margin.left,width) + axisLabelDistance) : -10) //TODO: consider calculating this based on largest tick width... OR at least expose this on chart\n              .attr('x', rotateYLabel ? (-scale.range()[0] / 2) : -axis.tickPadding());\n          if (showMaxMin) {\n            var axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                           .data(scale.domain());\n            axisMaxMin.enter().append('g').attr('class', 'nv-axisMaxMin').append('text')\n                .style('opacity', 0);\n            axisMaxMin.exit().remove();\n            axisMaxMin\n                .attr('transform', function(d,i) {\n                  return 'translate(0,' + scale0(d) + ')'\n                })\n              .select('text')\n                .attr('dy', '.32em')\n                .attr('y', 0)\n                .attr('x', -axis.tickPadding())\n                .attr('text-anchor', 'end')\n                .text(function(d,i) {\n                  var v = fmt(d);\n                  return ('' + v).match('NaN') ? '' : v;\n                });\n            axisMaxMin\n                .attr('transform', function(d,i) {\n                  return 'translate(0,' + scale.range()[i] + ')'\n                })\n              .select('text')\n                .style('opacity', 1);\n          }\n          break;\n      }\n      axisLabel\n          .text(function(d) { return d });\n\n\n      if (showMaxMin && (axis.orient() === 'left' || axis.orient() === 'right')) {\n        //check if max and min overlap other values, if so, hide the values that overlap\n        g.selectAll('g') // the g's wrapping each tick\n            .each(function(d,i) {\n              d3.select(this).select('text').attr('opacity', 1);\n              if (scale(d) < scale.range()[1] + 10 || scale(d) > scale.range()[0] - 10) { // 10 is assuming text height is 16... if d is 0, leave it!\n                if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL\n                  d3.select(this).attr('opacity', 0);\n\n                d3.select(this).select('text').attr('opacity', 0); // Don't remove the ZERO line!!\n              }\n            });\n\n        //if Max and Min = 0 only show min, Issue #281\n        if (scale.domain()[0] == scale.domain()[1] && scale.domain()[0] == 0)\n          wrap.selectAll('g.nv-axisMaxMin')\n            .style('opacity', function(d,i) { return !i ? 1 : 0 });\n\n      }\n\n      if (showMaxMin && (axis.orient() === 'top' || axis.orient() === 'bottom')) {\n        var maxMinRange = [];\n        wrap.selectAll('g.nv-axisMaxMin')\n            .each(function(d,i) {\n              try {\n                  if (i) // i== 1, max position\n                      maxMinRange.push(scale(d) - this.getBBox().width - 4)  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)\n                  else // i==0, min position\n                      maxMinRange.push(scale(d) + this.getBBox().width + 4)\n              }catch (err) {\n                  if (i) // i== 1, max position\n                      maxMinRange.push(scale(d) - 4)  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)\n                  else // i==0, min position\n                      maxMinRange.push(scale(d) + 4)\n              }\n            });\n        g.selectAll('g') // the g's wrapping each tick\n            .each(function(d,i) {\n              if (scale(d) < maxMinRange[0] || scale(d) > maxMinRange[1]) {\n                if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL\n                  d3.select(this).remove();\n                else\n                  d3.select(this).select('text').remove(); // Don't remove the ZERO line!!\n              }\n            });\n      }\n\n\n      //highlight zero line ... Maybe should not be an option and should just be in CSS?\n      if (highlightZero)\n        g.selectAll('.tick')\n          .filter(function(d) { return !parseFloat(Math.round(d.__data__*100000)/1000000) && (d.__data__ !== undefined) }) //this is because sometimes the 0 tick is a very small fraction, TODO: think of cleaner technique\n            .classed('zero', true);\n\n      //store old scales for use in transitions on update\n      scale0 = scale.copy();\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.axis = axis;\n\n  d3.rebind(chart, axis, 'orient', 'tickValues', 'tickSubdivide', 'tickSize', 'tickPadding', 'tickFormat');\n  d3.rebind(chart, scale, 'domain', 'range', 'rangeBand', 'rangeBands'); //these are also accessible by chart.scale(), but added common ones directly for ease of use\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.margin = function(_) {\n    if(!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  }\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.ticks = function(_) {\n    if (!arguments.length) return ticks;\n    ticks = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.axisLabel = function(_) {\n    if (!arguments.length) return axisLabelText;\n    axisLabelText = _;\n    return chart;\n  }\n\n  chart.showMaxMin = function(_) {\n    if (!arguments.length) return showMaxMin;\n    showMaxMin = _;\n    return chart;\n  }\n\n  chart.highlightZero = function(_) {\n    if (!arguments.length) return highlightZero;\n    highlightZero = _;\n    return chart;\n  }\n\n  chart.scale = function(_) {\n    if (!arguments.length) return scale;\n    scale = _;\n    axis.scale(scale);\n    isOrdinal = typeof scale.rangeBands === 'function';\n    d3.rebind(chart, scale, 'domain', 'range', 'rangeBand', 'rangeBands');\n    return chart;\n  }\n\n  chart.rotateYLabel = function(_) {\n    if(!arguments.length) return rotateYLabel;\n    rotateYLabel = _;\n    return chart;\n  }\n\n  chart.rotateLabels = function(_) {\n    if(!arguments.length) return rotateLabels;\n    rotateLabels = _;\n    return chart;\n  }\n\n  chart.staggerLabels = function(_) {\n    if (!arguments.length) return staggerLabels;\n    staggerLabels = _;\n    return chart;\n  };\n\n  chart.axisLabelDistance = function(_) {\n    if (!arguments.length) return axisLabelDistance;\n    axisLabelDistance = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n//TODO: consider deprecating and using multibar with single series for this\nnv.models.historicalBar = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n    , width = 960\n    , height = 500\n    , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n    , x = d3.scale.linear()\n    , y = d3.scale.linear()\n    , getX = function(d) { return d.x }\n    , getY = function(d) { return d.y }\n    , forceX = []\n    , forceY = [0]\n    , padData = false\n    , clipEdge = true\n    , color = nv.utils.defaultColor()\n    , xDomain\n    , yDomain\n    , xRange\n    , yRange\n    , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout')\n    , interactive = true\n    ;\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var availableWidth = width - margin.left - margin.right,\n          availableHeight = height - margin.top - margin.bottom,\n          container = d3.select(this);\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x   .domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ))\n\n      if (padData)\n        x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n      else\n        x.range(xRange || [0, availableWidth]);\n\n      y   .domain(yDomain || d3.extent(data[0].values.map(getY).concat(forceY) ))\n          .range(yRange || [availableHeight, 0]);\n\n      // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n\n      if (x.domain()[0] === x.domain()[1])\n        x.domain()[0] ?\n            x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n          : x.domain([-1,1]);\n\n      if (y.domain()[0] === y.domain()[1])\n        y.domain()[0] ?\n            y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n          : y.domain([-1,1]);\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-historicalBar-' + id).data([data[0].values]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBar-' + id);\n      var defsEnter = wrapEnter.append('defs');\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-bars');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      //------------------------------------------------------------\n\n\n      container\n          .on('click', function(d,i) {\n            dispatch.chartClick({\n                data: d,\n                index: i,\n                pos: d3.event,\n                id: id\n            });\n          });\n\n\n      defsEnter.append('clipPath')\n          .attr('id', 'nv-chart-clip-path-' + id)\n        .append('rect');\n\n      wrap.select('#nv-chart-clip-path-' + id + ' rect')\n          .attr('width', availableWidth)\n          .attr('height', availableHeight);\n\n      g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\n\n\n      var bars = wrap.select('.nv-bars').selectAll('.nv-bar')\n          .data(function(d) { return d }, function(d,i) {return getX(d,i)});\n\n      bars.exit().remove();\n\n\n      var barsEnter = bars.enter().append('rect')\n          //.attr('class', function(d,i,j) { return (getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive') + ' nv-bar-' + j + '-' + i })\n          .attr('x', 0 )\n          .attr('y', function(d,i) {  return nv.utils.NaNtoZero(y(Math.max(0, getY(d,i)))) })\n          .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.abs(y(getY(d,i)) - y(0))) })\n          .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; }) \n          .on('mouseover', function(d,i) {\n            if (!interactive) return;\n            d3.select(this).classed('hover', true);\n            dispatch.elementMouseover({\n                point: d,\n                series: data[0],\n                pos: [x(getX(d,i)), y(getY(d,i))],  // TODO: Figure out why the value appears to be shifted\n                pointIndex: i,\n                seriesIndex: 0,\n                e: d3.event\n            });\n\n          })\n          .on('mouseout', function(d,i) {\n                if (!interactive) return;\n                d3.select(this).classed('hover', false);\n                dispatch.elementMouseout({\n                    point: d,\n                    series: data[0],\n                    pointIndex: i,\n                    seriesIndex: 0,\n                    e: d3.event\n                });\n          })\n          .on('click', function(d,i) {\n                if (!interactive) return;\n                dispatch.elementClick({\n                    //label: d[label],\n                    value: getY(d,i),\n                    data: d,\n                    index: i,\n                    pos: [x(getX(d,i)), y(getY(d,i))],\n                    e: d3.event,\n                    id: id\n                });\n              d3.event.stopPropagation();\n          })\n          .on('dblclick', function(d,i) {\n              if (!interactive) return;\n              dispatch.elementDblClick({\n                  //label: d[label],\n                  value: getY(d,i),\n                  data: d,\n                  index: i,\n                  pos: [x(getX(d,i)), y(getY(d,i))],\n                  e: d3.event,\n                  id: id\n              });\n              d3.event.stopPropagation();\n          });\n\n      bars\n          .attr('fill', function(d,i) { return color(d, i); })\n          .attr('class', function(d,i,j) { return (getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive') + ' nv-bar-' + j + '-' + i })\n          \n          .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; }) \n           //TODO: better width calculations that don't assume always uniform data spacing;w\n          .attr('width', (availableWidth / data[0].values.length) * .9 );\n\n\n      bars\n          .attr('y', function(d,i) {\n            var rval = getY(d,i) < 0 ?\n                    y(0) :\n                    y(0) - y(getY(d,i)) < 1 ?\n                      y(0) - 1 :\n                      y(getY(d,i));\n            return nv.utils.NaNtoZero(rval);\n          })\n          .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.max(Math.abs(y(getY(d,i)) - y(0)),1)) });\n\n    });\n\n    return chart;\n  }\n\n  //Create methods to allow outside functions to highlight a specific bar.\n  chart.highlightPoint = function(pointIndex, isHoverOver) {\n      d3.select(\".nv-historicalBar-\" + id)\n        .select(\".nv-bars .nv-bar-0-\" + pointIndex)\n              .classed(\"hover\", isHoverOver)\n               ;\n  };\n\n  chart.clearHighlights = function() {\n      d3.select(\".nv-historicalBar-\" + id)\n        .select(\".nv-bars .nv-bar.hover\")\n              .classed(\"hover\", false)\n               ;\n  };\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  chart.dispatch = dispatch;\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  chart.x = function(_) {\n    if (!arguments.length) return getX;\n    getX = _;\n    return chart;\n  };\n\n  chart.y = function(_) {\n    if (!arguments.length) return getY;\n    getY = _;\n    return chart;\n  };\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.xScale = function(_) {\n    if (!arguments.length) return x;\n    x = _;\n    return chart;\n  };\n\n  chart.yScale = function(_) {\n    if (!arguments.length) return y;\n    y = _;\n    return chart;\n  };\n\n  chart.xDomain = function(_) {\n    if (!arguments.length) return xDomain;\n    xDomain = _;\n    return chart;\n  };\n\n  chart.yDomain = function(_) {\n    if (!arguments.length) return yDomain;\n    yDomain = _;\n    return chart;\n  };\n\n  chart.xRange = function(_) {\n    if (!arguments.length) return xRange;\n    xRange = _;\n    return chart;\n  };\n\n  chart.yRange = function(_) {\n    if (!arguments.length) return yRange;\n    yRange = _;\n    return chart;\n  };\n\n  chart.forceX = function(_) {\n    if (!arguments.length) return forceX;\n    forceX = _;\n    return chart;\n  };\n\n  chart.forceY = function(_) {\n    if (!arguments.length) return forceY;\n    forceY = _;\n    return chart;\n  };\n\n  chart.padData = function(_) {\n    if (!arguments.length) return padData;\n    padData = _;\n    return chart;\n  };\n\n  chart.clipEdge = function(_) {\n    if (!arguments.length) return clipEdge;\n    clipEdge = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    return chart;\n  };\n\n  chart.id = function(_) {\n    if (!arguments.length) return id;\n    id = _;\n    return chart;\n  };\n\n  chart.interactive = function(_) {\n    if(!arguments.length) return interactive;\n    interactive = false;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n\n// Chart design based on the recommendations of Stephen Few. Implementation\n// based on the work of Clint Ivy, Jamie Love, and Jason Davies.\n// http://projects.instantcognition.com/protovis/bulletchart/\n\nnv.models.bullet = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n    , orient = 'left' // TODO top & bottom\n    , reverse = false\n    , ranges = function(d) { return d.ranges }\n    , markers = function(d) { return d.markers }\n    , measures = function(d) { return d.measures }\n    , rangeLabels = function(d) { return d.rangeLabels ? d.rangeLabels : [] }\n    , markerLabels = function(d) { return d.markerLabels ? d.markerLabels : []  }\n    , measureLabels = function(d) { return d.measureLabels ? d.measureLabels : []  }\n    , forceX = [0] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)\n    , width = 380\n    , height = 30\n    , tickFormat = null\n    , color = nv.utils.getColor(['#1f77b4'])\n    , dispatch = d3.dispatch('elementMouseover', 'elementMouseout')\n    ;\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(d, i) {\n      var availableWidth = width - margin.left - margin.right,\n          availableHeight = height - margin.top - margin.bottom,\n          container = d3.select(this);\n\n      var rangez = ranges.call(this, d, i).slice().sort(d3.descending),\n          markerz = markers.call(this, d, i).slice().sort(d3.descending),\n          measurez = measures.call(this, d, i).slice().sort(d3.descending),\n          rangeLabelz = rangeLabels.call(this, d, i).slice(),\n          markerLabelz = markerLabels.call(this, d, i).slice(),\n          measureLabelz = measureLabels.call(this, d, i).slice();\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      // Compute the new x-scale.\n      var x1 = d3.scale.linear()\n          .domain( d3.extent(d3.merge([forceX, rangez])) )\n          .range(reverse ? [availableWidth, 0] : [0, availableWidth]);\n\n      // Retrieve the old x-scale, if this is an update.\n      var x0 = this.__chart__ || d3.scale.linear()\n          .domain([0, Infinity])\n          .range(x1.range());\n\n      // Stash the new scale.\n      this.__chart__ = x1;\n\n\n      var rangeMin = d3.min(rangez), //rangez[2]\n          rangeMax = d3.max(rangez), //rangez[0]\n          rangeAvg = rangez[1];\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-bullet').data([d]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bullet');\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('rect').attr('class', 'nv-range nv-rangeMax');\n      gEnter.append('rect').attr('class', 'nv-range nv-rangeAvg');\n      gEnter.append('rect').attr('class', 'nv-range nv-rangeMin');\n      gEnter.append('rect').attr('class', 'nv-measure');\n      gEnter.append('path').attr('class', 'nv-markerTriangle');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      //------------------------------------------------------------\n\n\n\n      var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)\n          w1 = function(d) { return Math.abs(x1(d) - x1(0)) };\n      var xp0 = function(d) { return d < 0 ? x0(d) : x0(0) },\n          xp1 = function(d) { return d < 0 ? x1(d) : x1(0) };\n\n\n      g.select('rect.nv-rangeMax')\n          .attr('height', availableHeight)\n          .attr('width', w1(rangeMax > 0 ? rangeMax : rangeMin))\n          .attr('x', xp1(rangeMax > 0 ? rangeMax : rangeMin))\n          .datum(rangeMax > 0 ? rangeMax : rangeMin)\n          /*\n          .attr('x', rangeMin < 0 ?\n                         rangeMax > 0 ?\n                             x1(rangeMin)\n                           : x1(rangeMax)\n                       : x1(0))\n                      */\n\n      g.select('rect.nv-rangeAvg')\n          .attr('height', availableHeight)\n          .attr('width', w1(rangeAvg))\n          .attr('x', xp1(rangeAvg))\n          .datum(rangeAvg)\n          /*\n          .attr('width', rangeMax <= 0 ?\n                             x1(rangeMax) - x1(rangeAvg)\n                           : x1(rangeAvg) - x1(rangeMin))\n          .attr('x', rangeMax <= 0 ?\n                         x1(rangeAvg)\n                       : x1(rangeMin))\n                      */\n\n      g.select('rect.nv-rangeMin')\n          .attr('height', availableHeight)\n          .attr('width', w1(rangeMax))\n          .attr('x', xp1(rangeMax))\n          .attr('width', w1(rangeMax > 0 ? rangeMin : rangeMax))\n          .attr('x', xp1(rangeMax > 0 ? rangeMin : rangeMax))\n          .datum(rangeMax > 0 ? rangeMin : rangeMax)\n          /*\n          .attr('width', rangeMax <= 0 ?\n                             x1(rangeAvg) - x1(rangeMin)\n                           : x1(rangeMax) - x1(rangeAvg))\n          .attr('x', rangeMax <= 0 ?\n                         x1(rangeMin)\n                       : x1(rangeAvg))\n                      */\n\n      g.select('rect.nv-measure')\n          .style('fill', color)\n          .attr('height', availableHeight / 3)\n          .attr('y', availableHeight / 3)\n          .attr('width', measurez < 0 ?\n                             x1(0) - x1(measurez[0])\n                           : x1(measurez[0]) - x1(0))\n          .attr('x', xp1(measurez))\n          .on('mouseover', function() {\n              dispatch.elementMouseover({\n                value: measurez[0],\n                label: measureLabelz[0] || 'Current',\n                pos: [x1(measurez[0]), availableHeight/2]\n              })\n          })\n          .on('mouseout', function() {\n              dispatch.elementMouseout({\n                value: measurez[0],\n                label: measureLabelz[0] || 'Current'\n              })\n          })\n\n      var h3 =  availableHeight / 6;\n      if (markerz[0]) {\n        g.selectAll('path.nv-markerTriangle')\n            .attr('transform', function(d) { return 'translate(' + x1(markerz[0]) + ',' + (availableHeight / 2) + ')' })\n            .attr('d', 'M0,' + h3 + 'L' + h3 + ',' + (-h3) + ' ' + (-h3) + ',' + (-h3) + 'Z')\n            .on('mouseover', function() {\n              dispatch.elementMouseover({\n                value: markerz[0],\n                label: markerLabelz[0] || 'Previous',\n                pos: [x1(markerz[0]), availableHeight/2]\n              })\n            })\n            .on('mouseout', function() {\n              dispatch.elementMouseout({\n                value: markerz[0],\n                label: markerLabelz[0] || 'Previous'\n              })\n            });\n      } else {\n        g.selectAll('path.nv-markerTriangle').remove();\n      }\n\n\n      wrap.selectAll('.nv-range')\n          .on('mouseover', function(d,i) {\n            var label = rangeLabelz[i] || (!i ? \"Maximum\" : i == 1 ? \"Mean\" : \"Minimum\");\n\n            dispatch.elementMouseover({\n              value: d,\n              label: label,\n              pos: [x1(d), availableHeight/2]\n            })\n          })\n          .on('mouseout', function(d,i) {\n            var label = rangeLabelz[i] || (!i ? \"Maximum\" : i == 1 ? \"Mean\" : \"Minimum\");\n\n            dispatch.elementMouseout({\n              value: d,\n              label: label\n            })\n          })\n\n/* // THIS IS THE PREVIOUS BULLET IMPLEMENTATION, WILL REMOVE SHORTLY\n      // Update the range rects.\n      var range = g.selectAll('rect.nv-range')\n          .data(rangez);\n\n      range.enter().append('rect')\n          .attr('class', function(d, i) { return 'nv-range nv-s' + i; })\n          .attr('width', w0)\n          .attr('height', availableHeight)\n          .attr('x', reverse ? x0 : 0)\n          .on('mouseover', function(d,i) { \n              dispatch.elementMouseover({\n                value: d,\n                label: (i <= 0) ? 'Maximum' : (i > 1) ? 'Minimum' : 'Mean', //TODO: make these labels a variable\n                pos: [x1(d), availableHeight/2]\n              })\n          })\n          .on('mouseout', function(d,i) { \n              dispatch.elementMouseout({\n                value: d,\n                label: (i <= 0) ? 'Minimum' : (i >=1) ? 'Maximum' : 'Mean' //TODO: make these labels a variable\n              })\n          })\n\n      d3.transition(range)\n          .attr('x', reverse ? x1 : 0)\n          .attr('width', w1)\n          .attr('height', availableHeight);\n\n\n      // Update the measure rects.\n      var measure = g.selectAll('rect.nv-measure')\n          .data(measurez);\n\n      measure.enter().append('rect')\n          .attr('class', function(d, i) { return 'nv-measure nv-s' + i; })\n          .style('fill', function(d,i) { return color(d,i ) })\n          .attr('width', w0)\n          .attr('height', availableHeight / 3)\n          .attr('x', reverse ? x0 : 0)\n          .attr('y', availableHeight / 3)\n          .on('mouseover', function(d) { \n              dispatch.elementMouseover({\n                value: d,\n                label: 'Current', //TODO: make these labels a variable\n                pos: [x1(d), availableHeight/2]\n              })\n          })\n          .on('mouseout', function(d) { \n              dispatch.elementMouseout({\n                value: d,\n                label: 'Current' //TODO: make these labels a variable\n              })\n          })\n\n      d3.transition(measure)\n          .attr('width', w1)\n          .attr('height', availableHeight / 3)\n          .attr('x', reverse ? x1 : 0)\n          .attr('y', availableHeight / 3);\n\n\n\n      // Update the marker lines.\n      var marker = g.selectAll('path.nv-markerTriangle')\n          .data(markerz);\n\n      var h3 =  availableHeight / 6;\n      marker.enter().append('path')\n          .attr('class', 'nv-markerTriangle')\n          .attr('transform', function(d) { return 'translate(' + x0(d) + ',' + (availableHeight / 2) + ')' })\n          .attr('d', 'M0,' + h3 + 'L' + h3 + ',' + (-h3) + ' ' + (-h3) + ',' + (-h3) + 'Z')\n          .on('mouseover', function(d,i) {\n              dispatch.elementMouseover({\n                value: d,\n                label: 'Previous',\n                pos: [x1(d), availableHeight/2]\n              })\n          })\n          .on('mouseout', function(d,i) {\n              dispatch.elementMouseout({\n                value: d,\n                label: 'Previous'\n              })\n          });\n\n      d3.transition(marker)\n          .attr('transform', function(d) { return 'translate(' + (x1(d) - x1(0)) + ',' + (availableHeight / 2) + ')' });\n\n      marker.exit().remove();\n*/\n\n    });\n\n    // d3.timer.flush();  // Not needed?\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  chart.dispatch = dispatch;\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  // left, right, top, bottom\n  chart.orient = function(_) {\n    if (!arguments.length) return orient;\n    orient = _;\n    reverse = orient == 'right' || orient == 'bottom';\n    return chart;\n  };\n\n  // ranges (bad, satisfactory, good)\n  chart.ranges = function(_) {\n    if (!arguments.length) return ranges;\n    ranges = _;\n    return chart;\n  };\n\n  // markers (previous, goal)\n  chart.markers = function(_) {\n    if (!arguments.length) return markers;\n    markers = _;\n    return chart;\n  };\n\n  // measures (actual, forecast)\n  chart.measures = function(_) {\n    if (!arguments.length) return measures;\n    measures = _;\n    return chart;\n  };\n\n  chart.forceX = function(_) {\n    if (!arguments.length) return forceX;\n    forceX = _;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.tickFormat = function(_) {\n    if (!arguments.length) return tickFormat;\n    tickFormat = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n};\n\n\n\n// Chart design based on the recommendations of Stephen Few. Implementation\n// based on the work of Clint Ivy, Jamie Love, and Jason Davies.\n// http://projects.instantcognition.com/protovis/bulletchart/\nnv.models.bulletChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var bullet = nv.models.bullet()\n    ;\n\n  var orient = 'left' // TODO top & bottom\n    , reverse = false\n    , margin = {top: 5, right: 40, bottom: 20, left: 120}\n    , ranges = function(d) { return d.ranges }\n    , markers = function(d) { return d.markers }\n    , measures = function(d) { return d.measures }\n    , width = null\n    , height = 55\n    , tickFormat = null\n    , tooltips = true\n    , tooltip = function(key, x, y, e, graph) {\n        return '<h3>' + x + '</h3>' +\n               '<p>' + y + '</p>'\n      }\n    , noData = 'No Data Available.'\n    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide')\n    ;\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var showTooltip = function(e, offsetElement) {\n    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ) + margin.left,\n        top = e.pos[1] + ( offsetElement.offsetTop || 0) + margin.top,\n        content = tooltip(e.key, e.label, e.value, e, chart);\n\n    nv.tooltip.show([left, top], content, e.value < 0 ? 'e' : 'w', null, offsetElement);\n  };\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(d, i) {\n      var container = d3.select(this);\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight = height - margin.top - margin.bottom,\n          that = this;\n\n\n      chart.update = function() { chart(selection) };\n      chart.container = this;\n\n      //------------------------------------------------------------\n      // Display No Data message if there's nothing to show.\n\n      if (!d || !ranges.call(this, d, i)) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', 18 + margin.top + availableHeight / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      //------------------------------------------------------------\n\n\n\n      var rangez = ranges.call(this, d, i).slice().sort(d3.descending),\n          markerz = markers.call(this, d, i).slice().sort(d3.descending),\n          measurez = measures.call(this, d, i).slice().sort(d3.descending);\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-bulletChart').data([d]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bulletChart');\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-bulletWrap');\n      gEnter.append('g').attr('class', 'nv-titles');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      //------------------------------------------------------------\n\n\n      // Compute the new x-scale.\n      var x1 = d3.scale.linear()\n          .domain([0, Math.max(rangez[0], markerz[0], measurez[0])])  // TODO: need to allow forceX and forceY, and xDomain, yDomain\n          .range(reverse ? [availableWidth, 0] : [0, availableWidth]);\n\n      // Retrieve the old x-scale, if this is an update.\n      var x0 = this.__chart__ || d3.scale.linear()\n          .domain([0, Infinity])\n          .range(x1.range());\n\n      // Stash the new scale.\n      this.__chart__ = x1;\n\n      /*\n      // Derive width-scales from the x-scales.\n      var w0 = bulletWidth(x0),\n          w1 = bulletWidth(x1);\n\n      function bulletWidth(x) {\n        var x0 = x(0);\n        return function(d) {\n          return Math.abs(x(d) - x(0));\n        };\n      }\n\n      function bulletTranslate(x) {\n        return function(d) {\n          return 'translate(' + x(d) + ',0)';\n        };\n      }\n      */\n\n      var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)\n          w1 = function(d) { return Math.abs(x1(d) - x1(0)) };\n\n\n      var title = gEnter.select('.nv-titles').append('g')\n          .attr('text-anchor', 'end')\n          .attr('transform', 'translate(-6,' + (height - margin.top - margin.bottom) / 2 + ')');\n      title.append('text')\n          .attr('class', 'nv-title')\n          .text(function(d) { return d.title; });\n\n      title.append('text')\n          .attr('class', 'nv-subtitle')\n          .attr('dy', '1em')\n          .text(function(d) { return d.subtitle; });\n\n\n\n      bullet\n        .width(availableWidth)\n        .height(availableHeight)\n\n      var bulletWrap = g.select('.nv-bulletWrap');\n\n      d3.transition(bulletWrap).call(bullet);\n\n\n\n      // Compute the tick format.\n      var format = tickFormat || x1.tickFormat( availableWidth / 100 );\n\n      // Update the tick groups.\n      var tick = g.selectAll('g.nv-tick')\n          .data(x1.ticks( availableWidth / 50 ), function(d) {\n            return this.textContent || format(d);\n          });\n\n      // Initialize the ticks with the old scale, x0.\n      var tickEnter = tick.enter().append('g')\n          .attr('class', 'nv-tick')\n          .attr('transform', function(d) { return 'translate(' + x0(d) + ',0)' })\n          .style('opacity', 1e-6);\n\n      tickEnter.append('line')\n          .attr('y1', availableHeight)\n          .attr('y2', availableHeight * 7 / 6);\n\n      tickEnter.append('text')\n          .attr('text-anchor', 'middle')\n          .attr('dy', '1em')\n          .attr('y', availableHeight * 7 / 6)\n          .text(format);\n\n\n      // Transition the updating ticks to the new scale, x1.\n      var tickUpdate = d3.transition(tick)\n          .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })\n          .style('opacity', 1);\n\n      tickUpdate.select('line')\n          .attr('y1', availableHeight)\n          .attr('y2', availableHeight * 7 / 6);\n\n      tickUpdate.select('text')\n          .attr('y', availableHeight * 7 / 6);\n\n      // Transition the exiting ticks to the new scale, x1.\n      d3.transition(tick.exit())\n          .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })\n          .style('opacity', 1e-6)\n          .remove();\n\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n      dispatch.on('tooltipShow', function(e) {\n        e.key = d.title;\n        if (tooltips) showTooltip(e, that.parentNode);\n      });\n\n      //============================================================\n\n    });\n\n    d3.timer.flush();\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  bullet.dispatch.on('elementMouseover.tooltip', function(e) {\n    dispatch.tooltipShow(e);\n  });\n\n  bullet.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  chart.dispatch = dispatch;\n  chart.bullet = bullet;\n\n  d3.rebind(chart, bullet, 'color');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  // left, right, top, bottom\n  chart.orient = function(x) {\n    if (!arguments.length) return orient;\n    orient = x;\n    reverse = orient == 'right' || orient == 'bottom';\n    return chart;\n  };\n\n  // ranges (bad, satisfactory, good)\n  chart.ranges = function(x) {\n    if (!arguments.length) return ranges;\n    ranges = x;\n    return chart;\n  };\n\n  // markers (previous, goal)\n  chart.markers = function(x) {\n    if (!arguments.length) return markers;\n    markers = x;\n    return chart;\n  };\n\n  // measures (actual, forecast)\n  chart.measures = function(x) {\n    if (!arguments.length) return measures;\n    measures = x;\n    return chart;\n  };\n\n  chart.width = function(x) {\n    if (!arguments.length) return width;\n    width = x;\n    return chart;\n  };\n\n  chart.height = function(x) {\n    if (!arguments.length) return height;\n    height = x;\n    return chart;\n  };\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.tickFormat = function(x) {\n    if (!arguments.length) return tickFormat;\n    tickFormat = x;\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n};\n\n\n\nnv.models.cumulativeLineChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var lines = nv.models.line()\n    , xAxis = nv.models.axis()\n    , yAxis = nv.models.axis()\n    , legend = nv.models.legend()\n    , controls = nv.models.legend()\n    , interactiveLayer = nv.interactiveGuideline()\n    ;\n\n  var margin = {top: 30, right: 30, bottom: 50, left: 60}\n    , color = nv.utils.defaultColor()\n    , width = null\n    , height = null\n    , showLegend = true\n    , showXAxis = true\n    , showYAxis = true\n    , rightAlignYAxis = false\n    , tooltips = true\n    , showControls = true\n    , useInteractiveGuideline = false\n    , rescaleY = true\n    , tooltip = function(key, x, y, e, graph) {\n        return '<h3>' + key + '</h3>' +\n               '<p>' +  y + ' at ' + x + '</p>'\n      }\n    , x //can be accessed via chart.xScale()\n    , y //can be accessed via chart.yScale()\n    , id = lines.id()\n    , state = { index: 0, rescaleY: rescaleY }\n    , defaultState = null\n    , noData = 'No Data Available.'\n    , average = function(d) { return d.average }\n    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n    , transitionDuration = 0\n    , noErrorCheck = false  //if set to TRUE, will bypass an error check in the indexify function.\n    ;\n\n  xAxis\n    .orient('bottom')\n    .tickPadding(7)\n    ;\n  yAxis\n    .orient((rightAlignYAxis) ? 'right' : 'left')\n    ;\n\n  //============================================================\n  controls.updateState(false);\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n   var dx = d3.scale.linear()\n     , index = {i: 0, x: 0}\n     ;\n\n  var showTooltip = function(e, offsetElement) {\n    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n        x = xAxis.tickFormat()(lines.x()(e.point, e.pointIndex)),\n        y = yAxis.tickFormat()(lines.y()(e.point, e.pointIndex)),\n        content = tooltip(e.series.key, x, y, e, chart);\n\n    nv.tooltip.show([left, top], content, null, null, offsetElement);\n  };\n\n  //============================================================\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this).classed('nv-chart-' + id, true),\n          that = this;\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n\n\n      chart.update = function() { container.call(chart) };\n      chart.container = this;\n\n      //set state.disabled\n      state.disabled = data.map(function(d) { return !!d.disabled });\n\n      if (!defaultState) {\n        var key;\n        defaultState = {};\n        for (key in state) {\n          if (state[key] instanceof Array)\n            defaultState[key] = state[key].slice(0);\n          else\n            defaultState[key] = state[key];\n        }\n      }\n\n      var indexDrag = d3.behavior.drag()\n                        .on('dragstart', dragStart)\n                        .on('drag', dragMove)\n                        .on('dragend', dragEnd);\n\n\n      function dragStart(d,i) {\n        d3.select(chart.container)\n            .style('cursor', 'ew-resize');\n      }\n\n      function dragMove(d,i) {\n        index.x = d3.event.x;\n        index.i = Math.round(dx.invert(index.x));\n        updateZero();\n      }\n\n      function dragEnd(d,i) {\n        d3.select(chart.container)\n            .style('cursor', 'auto');\n\n        // update state and send stateChange with new index\n        state.index = index.i;\n        dispatch.stateChange(state);\n      }\n\n      //------------------------------------------------------------\n      // Display No Data message if there's nothing to show.\n\n      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', margin.top + availableHeight / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x = lines.xScale();\n      y = lines.yScale();\n\n\n      if (!rescaleY) {\n        var seriesDomains = data\n          .filter(function(series) { return !series.disabled })\n          .map(function(series,i) {\n            var initialDomain = d3.extent(series.values, lines.y());\n\n            //account for series being disabled when losing 95% or more\n            if (initialDomain[0] < -.95) initialDomain[0] = -.95;\n\n            return [\n              (initialDomain[0] - initialDomain[1]) / (1 + initialDomain[1]),\n              (initialDomain[1] - initialDomain[0]) / (1 + initialDomain[0])\n            ];\n          });\n\n        var completeDomain = [\n          d3.min(seriesDomains, function(d) { return d[0] }),\n          d3.max(seriesDomains, function(d) { return d[1] })\n        ]\n\n        lines.yDomain(completeDomain);\n      } else {\n        lines.yDomain(null);\n      }\n\n\n      dx  .domain([0, data[0].values.length - 1]) //Assumes all series have same length\n          .range([0, availableWidth])\n          .clamp(true);\n\n      //------------------------------------------------------------\n\n\n      var data = indexify(index.i, data);\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n      var interactivePointerEvents = (useInteractiveGuideline) ? \"none\" : \"all\";\n      var wrap = container.selectAll('g.nv-wrap.nv-cumulativeLine').data([data]);\n      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-cumulativeLine').append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-interactive');\n      gEnter.append('g').attr('class', 'nv-x nv-axis').style(\"pointer-events\",\"none\");\n      gEnter.append('g').attr('class', 'nv-y nv-axis');\n      gEnter.append('g').attr('class', 'nv-background');\n      gEnter.append('g').attr('class', 'nv-linesWrap').style(\"pointer-events\",interactivePointerEvents);\n      gEnter.append('g').attr('class', 'nv-avgLinesWrap').style(\"pointer-events\",\"none\");\n      gEnter.append('g').attr('class', 'nv-legendWrap');\n      gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n\n      //------------------------------------------------------------\n      // Legend\n\n      if (showLegend) {\n        legend.width(availableWidth);\n\n        g.select('.nv-legendWrap')\n            .datum(data)\n            .call(legend);\n\n        if ( margin.top != legend.height()) {\n          margin.top = legend.height();\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n        }\n\n        g.select('.nv-legendWrap')\n            .attr('transform', 'translate(0,' + (-margin.top) +')')\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Controls\n\n      if (showControls) {\n        var controlsData = [\n          { key: 'Re-scale y-axis', disabled: !rescaleY }\n        ];\n\n        controls\n            .width(140)\n            .color(['#444', '#444', '#444'])\n            .rightAlign(false)\n            .margin({top: 5, right: 0, bottom: 5, left: 20})\n            ;\n\n        g.select('.nv-controlsWrap')\n            .datum(controlsData)\n            .attr('transform', 'translate(0,' + (-margin.top) +')')\n            .call(controls);\n      }\n\n      //------------------------------------------------------------\n\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      if (rightAlignYAxis) {\n          g.select(\".nv-y.nv-axis\")\n              .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n      }\n\n      // Show error if series goes below 100%\n      var tempDisabled = data.filter(function(d) { return d.tempDisabled });\n\n      wrap.select('.tempDisabled').remove(); //clean-up and prevent duplicates\n      if (tempDisabled.length) {\n        wrap.append('text').attr('class', 'tempDisabled')\n            .attr('x', availableWidth / 2)\n            .attr('y', '-.71em')\n            .style('text-anchor', 'end')\n            .text(tempDisabled.map(function(d) { return d.key }).join(', ') + ' values cannot be calculated for this time period.');\n      }\n\n      //------------------------------------------------------------\n      // Main Chart Component(s)\n\n      //------------------------------------------------------------\n      //Set up interactive layer\n      if (useInteractiveGuideline) {\n        interactiveLayer\n          .width(availableWidth)\n          .height(availableHeight)\n          .margin({left:margin.left,top:margin.top})\n          .svgContainer(container)\n          .xScale(x);\n        wrap.select(\".nv-interactive\").call(interactiveLayer);\n      }\n\n      gEnter.select('.nv-background')\n        .append('rect');\n\n      g.select('.nv-background rect')\n          .attr('width', availableWidth)\n          .attr('height', availableHeight);\n\n      lines\n        //.x(function(d) { return d.x })\n        .y(function(d) { return d.display.y })\n        .width(availableWidth)\n        .height(availableHeight)\n        .color(data.map(function(d,i) {\n          return d.color || color(d, i);\n        }).filter(function(d,i) { return !data[i].disabled && !data[i].tempDisabled; }));\n\n\n\n      var linesWrap = g.select('.nv-linesWrap')\n          .datum(data.filter(function(d) { return  !d.disabled && !d.tempDisabled }));\n\n      //d3.transition(linesWrap).call(lines);\n      linesWrap.call(lines);\n\n      /*Handle average lines [AN-612] ----------------------------*/\n\n      //Store a series index number in the data array.\n      data.forEach(function(d,i) {\n            d.seriesIndex = i;\n      });\n\n      var avgLineData = data.filter(function(d) {\n          return !d.disabled && !!average(d);\n      });\n\n      var avgLines = g.select(\".nv-avgLinesWrap\").selectAll(\"line\")\n              .data(avgLineData, function(d) { return d.key; });\n\n      var getAvgLineY = function(d) {\n          //If average lines go off the svg element, clamp them to the svg bounds.\n          var yVal = y(average(d));\n          if (yVal < 0) return 0;\n          if (yVal > availableHeight) return availableHeight;\n          return yVal;\n      };\n\n      avgLines.enter()\n              .append('line')\n              .style('stroke-width',2)\n              .style('stroke-dasharray','10,10')\n              .style('stroke',function (d,i) {\n                  return lines.color()(d,d.seriesIndex);\n              })\n              .attr('x1',0)\n              .attr('x2',availableWidth)\n              .attr('y1', getAvgLineY)\n              .attr('y2', getAvgLineY);\n\n      avgLines\n              .style('stroke-opacity',function(d){\n                  //If average lines go offscreen, make them transparent\n                  var yVal = y(average(d));\n                  if (yVal < 0 || yVal > availableHeight) return 0;\n                  return 1;\n              })\n              .attr('x1',0)\n              .attr('x2',availableWidth)\n              .attr('y1', getAvgLineY)\n              .attr('y2', getAvgLineY);\n\n      avgLines.exit().remove();\n\n      //Create index line -----------------------------------------\n\n      var indexLine = linesWrap.selectAll('.nv-indexLine')\n          .data([index]);\n      indexLine.enter().append('rect').attr('class', 'nv-indexLine')\n          .attr('width', 3)\n          .attr('x', -2)\n          .attr('fill', 'red')\n          .attr('fill-opacity', .5)\n          .style(\"pointer-events\",\"all\")\n          .call(indexDrag)\n\n      indexLine\n          .attr('transform', function(d) { return 'translate(' + dx(d.i) + ',0)' })\n          .attr('height', availableHeight)\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Axes\n\n      if (showXAxis) {\n        xAxis\n          .scale(x)\n          //Suggest how many ticks based on the chart width and D3 should listen (70 is the optimal number for MM/DD/YY dates)\n          .ticks( Math.min(data[0].values.length,availableWidth/70) )\n          .tickSize(-availableHeight, 0);\n\n        g.select('.nv-x.nv-axis')\n            .attr('transform', 'translate(0,' + y.range()[0] + ')');\n        d3.transition(g.select('.nv-x.nv-axis'))\n            .call(xAxis);\n      }\n\n\n      if (showYAxis) {\n        yAxis\n          .scale(y)\n          .ticks( availableHeight / 36 )\n          .tickSize( -availableWidth, 0);\n\n        d3.transition(g.select('.nv-y.nv-axis'))\n            .call(yAxis);\n      }\n      //------------------------------------------------------------\n\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n\n      function updateZero() {\n        indexLine\n          .data([index]);\n\n        //When dragging the index line, turn off line transitions.\n        // Then turn them back on when done dragging.\n        var oldDuration = chart.transitionDuration();\n        chart.transitionDuration(0);\n        chart.update();\n        chart.transitionDuration(oldDuration);\n      }\n\n      g.select('.nv-background rect')\n          .on('click', function() {\n            index.x = d3.mouse(this)[0];\n            index.i = Math.round(dx.invert(index.x));\n\n            // update state and send stateChange with new index\n            state.index = index.i;\n            dispatch.stateChange(state);\n\n            updateZero();\n          });\n\n      lines.dispatch.on('elementClick', function(e) {\n        index.i = e.pointIndex;\n        index.x = dx(index.i);\n\n        // update state and send stateChange with new index\n        state.index = index.i;\n        dispatch.stateChange(state);\n\n        updateZero();\n      });\n\n      controls.dispatch.on('legendClick', function(d,i) {\n        d.disabled = !d.disabled;\n        rescaleY = !d.disabled;\n\n        state.rescaleY = rescaleY;\n        dispatch.stateChange(state);\n        chart.update();\n      });\n\n\n      legend.dispatch.on('stateChange', function(newState) {\n        state.disabled = newState.disabled;\n        dispatch.stateChange(state);\n        chart.update();\n      });\n\n      interactiveLayer.dispatch.on('elementMousemove', function(e) {\n          lines.clearHighlights();\n          var singlePoint, pointIndex, pointXLocation, allData = [];\n\n\n          data\n          .filter(function(series, i) {\n            series.seriesIndex = i;\n            return !series.disabled;\n          })\n          .forEach(function(series,i) {\n              pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n              lines.highlightPoint(i, pointIndex, true);\n              var point = series.values[pointIndex];\n              if (typeof point === 'undefined') return;\n              if (typeof singlePoint === 'undefined') singlePoint = point;\n              if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n              allData.push({\n                  key: series.key,\n                  value: chart.y()(point, pointIndex),\n                  color: color(series,series.seriesIndex)\n              });\n          });\n\n          //Highlight the tooltip entry based on which point the mouse is closest to.\n          if (allData.length > 2) {\n            var yValue = chart.yScale().invert(e.mouseY);\n            var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);\n            var threshold = 0.03 * domainExtent;\n            var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value}),yValue,threshold);\n            if (indexToHighlight !== null)\n              allData[indexToHighlight].highlight = true;\n          }\n\n          var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex), pointIndex);\n          interactiveLayer.tooltip\n                  .position({left: pointXLocation + margin.left, top: e.mouseY + margin.top})\n                  .chartContainer(that.parentNode)\n                  .enabled(tooltips)\n                  .valueFormatter(function(d,i) {\n                     return yAxis.tickFormat()(d);\n                  })\n                  .data(\n                      {\n                        value: xValue,\n                        series: allData\n                      }\n                  )();\n\n          interactiveLayer.renderGuideLine(pointXLocation);\n\n      });\n\n      interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n          dispatch.tooltipHide();\n          lines.clearHighlights();\n      });\n\n      dispatch.on('tooltipShow', function(e) {\n        if (tooltips) showTooltip(e, that.parentNode);\n      });\n\n\n      // Update chart from a state object passed to event handler\n      dispatch.on('changeState', function(e) {\n\n        if (typeof e.disabled !== 'undefined') {\n          data.forEach(function(series,i) {\n            series.disabled = e.disabled[i];\n          });\n\n          state.disabled = e.disabled;\n        }\n\n\n        if (typeof e.index !== 'undefined') {\n          index.i = e.index;\n          index.x = dx(index.i);\n\n          state.index = e.index;\n\n          indexLine\n            .data([index]);\n        }\n\n\n        if (typeof e.rescaleY !== 'undefined') {\n          rescaleY = e.rescaleY;\n        }\n\n        chart.update();\n      });\n\n      //============================================================\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  lines.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  lines.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.dispatch = dispatch;\n  chart.lines = lines;\n  chart.legend = legend;\n  chart.xAxis = xAxis;\n  chart.yAxis = yAxis;\n  chart.interactiveLayer = interactiveLayer;\n\n  d3.rebind(chart, lines, 'defined', 'isArea', 'x', 'y', 'xScale','yScale', 'size', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi','useVoronoi',  'id');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    legend.color(color);\n    return chart;\n  };\n\n  chart.rescaleY = function(_) {\n    if (!arguments.length) return rescaleY;\n    rescaleY = _;\n    return chart;\n  };\n\n  chart.showControls = function(_) {\n    if (!arguments.length) return showControls;\n    showControls = _;\n    return chart;\n  };\n\n  chart.useInteractiveGuideline = function(_) {\n    if(!arguments.length) return useInteractiveGuideline;\n    useInteractiveGuideline = _;\n    if (_ === true) {\n       chart.interactive(false);\n       chart.useVoronoi(false);\n    }\n    return chart;\n  };\n\n  chart.showLegend = function(_) {\n    if (!arguments.length) return showLegend;\n    showLegend = _;\n    return chart;\n  };\n\n  chart.showXAxis = function(_) {\n    if (!arguments.length) return showXAxis;\n    showXAxis = _;\n    return chart;\n  };\n\n  chart.showYAxis = function(_) {\n    if (!arguments.length) return showYAxis;\n    showYAxis = _;\n    return chart;\n  };\n\n  chart.rightAlignYAxis = function(_) {\n    if(!arguments.length) return rightAlignYAxis;\n    rightAlignYAxis = _;\n    yAxis.orient( (_) ? 'right' : 'left');\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.state = function(_) {\n    if (!arguments.length) return state;\n    state = _;\n    return chart;\n  };\n\n  chart.defaultState = function(_) {\n    if (!arguments.length) return defaultState;\n    defaultState = _;\n    return chart;\n  };\n\n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  chart.average = function(_) {\n     if(!arguments.length) return average;\n     average = _;\n     return chart;\n  };\n\n  chart.transitionDuration = function(_) {\n    if (!arguments.length) return transitionDuration;\n    transitionDuration = _;\n    return chart;\n  };\n\n  chart.noErrorCheck = function(_) {\n    if (!arguments.length) return noErrorCheck;\n    noErrorCheck = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  //============================================================\n  // Functions\n  //------------------------------------------------------------\n\n  /* Normalize the data according to an index point. */\n  function indexify(idx, data) {\n    return data.map(function(line, i) {\n      if (!line.values) {\n         return line;\n      }\n      var indexValue = line.values[idx];\n      if (indexValue == null) {\n        return line;\n      }\n      var v = lines.y()(indexValue, idx);\n\n      //TODO: implement check below, and disable series if series loses 100% or more cause divide by 0 issue\n      if (v < -.95 && !noErrorCheck) {\n        //if a series loses more than 100%, calculations fail.. anything close can cause major distortion (but is mathematically correct till it hits 100)\n\n        line.tempDisabled = true;\n        return line;\n      }\n\n      line.tempDisabled = false;\n\n      line.values = line.values.map(function(point, pointIndex) {\n        point.display = {'y': (lines.y()(point, pointIndex) - v) / (1 + v) };\n        return point;\n      })\n\n      return line;\n    })\n  }\n\n  //============================================================\n\n\n  return chart;\n}\n//TODO: consider deprecating by adding necessary features to multiBar model\nnv.models.discreteBar = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n    , width = 960\n    , height = 500\n    , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n    , x = d3.scale.ordinal()\n    , y = d3.scale.linear()\n    , getX = function(d) { return d.x }\n    , getY = function(d) { return d.y }\n    , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n    , color = nv.utils.defaultColor()\n    , showValues = false\n    , valueFormat = d3.format(',.2f')\n    , xDomain\n    , yDomain\n    , xRange\n    , yRange\n    , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout')\n    , rectClass = 'discreteBar'\n    ;\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var x0, y0;\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var availableWidth = width - margin.left - margin.right,\n          availableHeight = height - margin.top - margin.bottom,\n          container = d3.select(this);\n\n\n      //add series index to each data point for reference\n      data.forEach(function(series, i) {\n        series.values.forEach(function(point) {\n          point.series = i;\n        });\n      });\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      // remap and flatten the data for use in calculating the scales' domains\n      var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n            data.map(function(d) {\n              return d.values.map(function(d,i) {\n                return { x: getX(d,i), y: getY(d,i), y0: d.y0 }\n              })\n            });\n\n      x   .domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n          .rangeBands(xRange || [0, availableWidth], .1);\n\n      y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return d.y }).concat(forceY)));\n\n\n      // If showValues, pad the Y axis range to account for label height\n      if (showValues) y.range(yRange || [availableHeight - (y.domain()[0] < 0 ? 12 : 0), y.domain()[1] > 0 ? 12 : 0]);\n      else y.range(yRange || [availableHeight, 0]);\n\n      //store old scales if they exist\n      x0 = x0 || x;\n      y0 = y0 || y.copy().range([y(0),y(0)]);\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-discretebar').data([data]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discretebar');\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-groups');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      //------------------------------------------------------------\n\n\n\n      //TODO: by definition, the discrete bar should not have multiple groups, will modify/remove later\n      var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n          .data(function(d) { return d }, function(d) { return d.key });\n      groups.enter().append('g')\n          .style('stroke-opacity', 1e-6)\n          .style('fill-opacity', 1e-6);\n      groups.exit()\n          \n          .style('stroke-opacity', 1e-6)\n          .style('fill-opacity', 1e-6)\n          .remove();\n      groups\n          .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n          .classed('hover', function(d) { return d.hover });\n      groups\n          \n          .style('stroke-opacity', 1)\n          .style('fill-opacity', .75);\n\n\n      var bars = groups.selectAll('g.nv-bar')\n          .data(function(d) { return d.values });\n\n      bars.exit().remove();\n\n\n      var barsEnter = bars.enter().append('g')\n          .attr('transform', function(d,i,j) {\n              return 'translate(' + (x(getX(d,i)) + x.rangeBand() * .05 ) + ', ' + y(0) + ')'\n          })\n          .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n            d3.select(this).classed('hover', true);\n            dispatch.elementMouseover({\n              value: getY(d,i),\n              point: d,\n              series: data[d.series],\n              pos: [x(getX(d,i)) + (x.rangeBand() * (d.series + .5) / data.length), y(getY(d,i))],  // TODO: Figure out why the value appears to be shifted\n              pointIndex: i,\n              seriesIndex: d.series,\n              e: d3.event\n            });\n          })\n          .on('mouseout', function(d,i) {\n            d3.select(this).classed('hover', false);\n            dispatch.elementMouseout({\n              value: getY(d,i),\n              point: d,\n              series: data[d.series],\n              pointIndex: i,\n              seriesIndex: d.series,\n              e: d3.event\n            });\n          })\n          .on('click', function(d,i) {\n            dispatch.elementClick({\n              value: getY(d,i),\n              point: d,\n              series: data[d.series],\n              pos: [x(getX(d,i)) + (x.rangeBand() * (d.series + .5) / data.length), y(getY(d,i))],  // TODO: Figure out why the value appears to be shifted\n              pointIndex: i,\n              seriesIndex: d.series,\n              e: d3.event\n            });\n            d3.event.stopPropagation();\n          })\n          .on('dblclick', function(d,i) {\n            dispatch.elementDblClick({\n              value: getY(d,i),\n              point: d,\n              series: data[d.series],\n              pos: [x(getX(d,i)) + (x.rangeBand() * (d.series + .5) / data.length), y(getY(d,i))],  // TODO: Figure out why the value appears to be shifted\n              pointIndex: i,\n              seriesIndex: d.series,\n              e: d3.event\n            });\n            d3.event.stopPropagation();\n          });\n\n      barsEnter.append('rect')\n          .attr('height', 0)\n          .attr('width', x.rangeBand() * .9 / data.length )\n\n      if (showValues) {\n        barsEnter.append('text')\n          .attr('text-anchor', 'middle')\n          ;\n\n        bars.select('text')\n          .text(function(d,i) { return valueFormat(getY(d,i)) })\n          \n          .attr('x', x.rangeBand() * .9 / 2)\n          .attr('y', function(d,i) { return getY(d,i) < 0 ? y(getY(d,i)) - y(0) + 12 : -4 })\n\n          ;\n      } else {\n        bars.selectAll('text').remove();\n      }\n\n      bars\n          .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive' })\n          .style('fill', function(d,i) { return d.color || color(d,i) })\n          .style('stroke', function(d,i) { return d.color || color(d,i) })\n        .select('rect')\n          .attr('class', rectClass)\n          \n          .attr('width', x.rangeBand() * .9 / data.length);\n      bars\n          .attr('transform', function(d,i) {\n            var left = x(getX(d,i)) + x.rangeBand() * .05,\n                top = getY(d,i) < 0 ?\n                        y(0) :\n                        y(0) - y(getY(d,i)) < 1 ?\n                          y(0) - 1 : //make 1 px positive bars show up above y=0\n                          y(getY(d,i));\n\n              return 'translate(' + left + ', ' + top + ')'\n          })\n        .select('rect')\n          .attr('height', function(d,i) {\n            return  Math.max(Math.abs(y(getY(d,i)) - y((yDomain && yDomain[0]) || 0)) || 1)\n          });\n\n\n      //store old scales for use in transitions on update\n      x0 = x.copy();\n      y0 = y.copy();\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  chart.dispatch = dispatch;\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.x = function(_) {\n    if (!arguments.length) return getX;\n    getX = _;\n    return chart;\n  };\n\n  chart.y = function(_) {\n    if (!arguments.length) return getY;\n    getY = _;\n    return chart;\n  };\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.xScale = function(_) {\n    if (!arguments.length) return x;\n    x = _;\n    return chart;\n  };\n\n  chart.yScale = function(_) {\n    if (!arguments.length) return y;\n    y = _;\n    return chart;\n  };\n\n  chart.xDomain = function(_) {\n    if (!arguments.length) return xDomain;\n    xDomain = _;\n    return chart;\n  };\n\n  chart.yDomain = function(_) {\n    if (!arguments.length) return yDomain;\n    yDomain = _;\n    return chart;\n  };\n\n  chart.xRange = function(_) {\n    if (!arguments.length) return xRange;\n    xRange = _;\n    return chart;\n  };\n\n  chart.yRange = function(_) {\n    if (!arguments.length) return yRange;\n    yRange = _;\n    return chart;\n  };\n\n  chart.forceY = function(_) {\n    if (!arguments.length) return forceY;\n    forceY = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    return chart;\n  };\n\n  chart.id = function(_) {\n    if (!arguments.length) return id;\n    id = _;\n    return chart;\n  };\n\n  chart.showValues = function(_) {\n    if (!arguments.length) return showValues;\n    showValues = _;\n    return chart;\n  };\n\n  chart.valueFormat= function(_) {\n    if (!arguments.length) return valueFormat;\n    valueFormat = _;\n    return chart;\n  };\n\n  chart.rectClass= function(_) {\n    if (!arguments.length) return rectClass;\n    rectClass = _;\n    return chart;\n  };\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.discreteBarChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var discretebar = nv.models.discreteBar()\n    , xAxis = nv.models.axis()\n    , yAxis = nv.models.axis()\n    ;\n\n  var margin = {top: 15, right: 10, bottom: 50, left: 60}\n    , width = null\n    , height = null\n    , color = nv.utils.getColor()\n    , showXAxis = true\n    , showYAxis = true\n    , rightAlignYAxis = false\n    , staggerLabels = false\n    , tooltips = true\n    , tooltip = function(key, x, y, e, graph) {\n        return '<h3>' + x + '</h3>' +\n               '<p>' +  y + '</p>'\n      }\n    , x\n    , y\n    , noData = \"No Data Available.\"\n    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'beforeUpdate')\n    , transitionDuration = 0\n    ;\n\n  xAxis\n    .orient('bottom')\n    .highlightZero(false)\n    .showMaxMin(false)\n    .tickFormat(function(d) { return d })\n    ;\n  yAxis\n    .orient((rightAlignYAxis) ? 'right' : 'left')\n    .tickFormat(d3.format(',.1f'))\n    ;\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var showTooltip = function(e, offsetElement) {\n    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n        x = xAxis.tickFormat()(discretebar.x()(e.point, e.pointIndex)),\n        y = yAxis.tickFormat()(discretebar.y()(e.point, e.pointIndex)),\n        content = tooltip(e.series.key, x, y, e, chart);\n\n    nv.tooltip.show([left, top], content, e.value < 0 ? 'n' : 's', null, offsetElement);\n  };\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this),\n          that = this;\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n\n\n      chart.update = function() { \n        dispatch.beforeUpdate(); \n        container.call(chart); \n      };\n      chart.container = this;\n\n\n      //------------------------------------------------------------\n      // Display No Data message if there's nothing to show.\n\n      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', margin.top + availableHeight / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x = discretebar.xScale();\n      y = discretebar.yScale().clamp(true);\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-discreteBarWithAxes').data([data]);\n      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discreteBarWithAxes').append('g');\n      var defsEnter = gEnter.append('defs');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-x nv-axis');\n      gEnter.append('g').attr('class', 'nv-y nv-axis')\n            .append('g').attr('class', 'nv-zeroLine')\n            .append('line');\n        \n      gEnter.append('g').attr('class', 'nv-barsWrap');\n\n      g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      if (rightAlignYAxis) {\n          g.select(\".nv-y.nv-axis\")\n              .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Main Chart Component(s)\n\n      discretebar\n        .width(availableWidth)\n        .height(availableHeight);\n\n\n      var barsWrap = g.select('.nv-barsWrap')\n          .datum(data.filter(function(d) { return !d.disabled }))\n\n      barsWrap.call(discretebar);\n\n      //------------------------------------------------------------\n\n\n\n      defsEnter.append('clipPath')\n          .attr('id', 'nv-x-label-clip-' + discretebar.id())\n        .append('rect');\n\n      g.select('#nv-x-label-clip-' + discretebar.id() + ' rect')\n          .attr('width', x.rangeBand() * (staggerLabels ? 2 : 1))\n          .attr('height', 16)\n          .attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2 ));\n\n\n      //------------------------------------------------------------\n      // Setup Axes\n\n      if (showXAxis) {\n          xAxis\n            .scale(x)\n            .ticks( availableWidth / 100 )\n            .tickSize(-availableHeight, 0);\n\n          g.select('.nv-x.nv-axis')\n              .attr('transform', 'translate(0,' + (y.range()[0] + ((discretebar.showValues() && y.domain()[0] < 0) ? 16 : 0)) + ')');\n          //d3.transition(g.select('.nv-x.nv-axis'))\n          g.select('.nv-x.nv-axis')\n              .call(xAxis);\n\n\n          var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n\n          if (staggerLabels) {\n            xTicks\n                .selectAll('text')\n                .attr('transform', function(d,i,j) { return 'translate(0,' + (j % 2 == 0 ? '5' : '17') + ')' })\n          }\n      }\n\n      if (showYAxis) {\n          yAxis\n            .scale(y)\n            .ticks( availableHeight / 36 )\n            .tickSize( -availableWidth, 0);\n\n          g.select('.nv-y.nv-axis')\n              .call(yAxis);\n      }\n\n      // Zero line\n      g.select(\".nv-zeroLine line\")\n        .attr(\"x1\",0)\n        .attr(\"x2\",availableWidth)\n        .attr(\"y1\", y(0))\n        .attr(\"y2\", y(0))\n        ;\n\n      //------------------------------------------------------------\n\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n      dispatch.on('tooltipShow', function(e) {\n        if (tooltips) showTooltip(e, that.parentNode);\n      });\n\n      //============================================================\n\n\n    });\n\n    return chart;\n  }\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  discretebar.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  discretebar.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.dispatch = dispatch;\n  chart.discretebar = discretebar;\n  chart.xAxis = xAxis;\n  chart.yAxis = yAxis;\n\n  d3.rebind(chart, discretebar, 'x', 'y', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'id', 'showValues', 'valueFormat');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    discretebar.color(color);\n    return chart;\n  };\n\n  chart.showXAxis = function(_) {\n    if (!arguments.length) return showXAxis;\n    showXAxis = _;\n    return chart;\n  };\n\n  chart.showYAxis = function(_) {\n    if (!arguments.length) return showYAxis;\n    showYAxis = _;\n    return chart;\n  };\n\n  chart.rightAlignYAxis = function(_) {\n    if(!arguments.length) return rightAlignYAxis;\n    rightAlignYAxis = _;\n    yAxis.orient( (_) ? 'right' : 'left');\n    return chart;\n  };\n\n  chart.staggerLabels = function(_) {\n    if (!arguments.length) return staggerLabels;\n    staggerLabels = _;\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  chart.transitionDuration = function(_) {\n    if (!arguments.length) return transitionDuration;\n    transitionDuration = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.distribution = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n    , width = 400 //technically width or height depending on x or y....\n    , size = 8\n    , axis = 'x' // 'x' or 'y'... horizontal or vertical\n    , getData = function(d) { return d[axis] }  // defaults d.x or d.y\n    , color = nv.utils.defaultColor()\n    , scale = d3.scale.linear()\n    , domain\n    ;\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var scale0;\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var availableLength = width - (axis === 'x' ? margin.left + margin.right : margin.top + margin.bottom),\n          naxis = axis == 'x' ? 'y' : 'x',\n          container = d3.select(this);\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      scale0 = scale0 || scale;\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-distribution').data([data]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-distribution');\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\n      //------------------------------------------------------------\n\n\n      var distWrap = g.selectAll('g.nv-dist')\n          .data(function(d) { return d }, function(d) { return d.key });\n\n      distWrap.enter().append('g');\n      distWrap\n          .attr('class', function(d,i) { return 'nv-dist nv-series-' + i })\n          .style('stroke', function(d,i) { return color(d, i) });\n\n      var dist = distWrap.selectAll('line.nv-dist' + axis)\n          .data(function(d) { return d.values })\n      dist.enter().append('line')\n          .attr(axis + '1', function(d,i) { return scale0(getData(d,i)) })\n          .attr(axis + '2', function(d,i) { return scale0(getData(d,i)) })\n      distWrap.exit().selectAll('line.nv-dist' + axis)\n          \n          .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })\n          .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })\n          .style('stroke-opacity', 0)\n          .remove();\n      dist\n          .attr('class', function(d,i) { return 'nv-dist' + axis + ' nv-dist' + axis + '-' + i })\n          .attr(naxis + '1', 0)\n          .attr(naxis + '2', size);\n      dist\n          \n          .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })\n          .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })\n\n\n      scale0 = scale.copy();\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.axis = function(_) {\n    if (!arguments.length) return axis;\n    axis = _;\n    return chart;\n  };\n\n  chart.size = function(_) {\n    if (!arguments.length) return size;\n    size = _;\n    return chart;\n  };\n\n  chart.getData = function(_) {\n    if (!arguments.length) return getData;\n    getData = d3.functor(_);\n    return chart;\n  };\n\n  chart.scale = function(_) {\n    if (!arguments.length) return scale;\n    scale = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    return chart;\n  };\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.historicalBarChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var bars = nv.models.historicalBar()\n    , xAxis = nv.models.axis()\n    , yAxis = nv.models.axis()\n    , legend = nv.models.legend()\n    ;\n\n\n  var margin = {top: 30, right: 90, bottom: 50, left: 90}\n    , color = nv.utils.defaultColor()\n    , width = null\n    , height = null\n    , showLegend = false\n    , showXAxis = true\n    , showYAxis = true\n    , rightAlignYAxis = false\n    , tooltips = true\n    , tooltip = function(key, x, y, e, graph) {\n        return '<h3>' + key + '</h3>' +\n               '<p>' +  y + ' at ' + x + '</p>'\n      }\n    , x\n    , y\n    , state = {}\n    , defaultState = null\n    , noData = 'No Data Available.'\n    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n    , transitionDuration = 0\n    ;\n\n  xAxis\n    .orient('bottom')\n    .tickPadding(7)\n    ;\n  yAxis\n    .orient( (rightAlignYAxis) ? 'right' : 'left')\n    ;\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var showTooltip = function(e, offsetElement) {\n\n    // New addition to calculate position if SVG is scaled with viewBox, may move TODO: consider implementing everywhere else\n    if (offsetElement) {\n      var svg = d3.select(offsetElement).select('svg');\n      var viewBox = (svg.node()) ? svg.attr('viewBox') : null;\n      if (viewBox) {\n        viewBox = viewBox.split(' ');\n        var ratio = parseInt(svg.style('width')) / viewBox[2];\n        e.pos[0] = e.pos[0] * ratio;\n        e.pos[1] = e.pos[1] * ratio;\n      }\n    }\n\n    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n        x = xAxis.tickFormat()(bars.x()(e.point, e.pointIndex)),\n        y = yAxis.tickFormat()(bars.y()(e.point, e.pointIndex)),\n        content = tooltip(e.series.key, x, y, e, chart);\n\n    nv.tooltip.show([left, top], content, null, null, offsetElement);\n  };\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this),\n          that = this;\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n\n\n      chart.update = function() { container.call(chart) };\n      chart.container = this;\n\n      //set state.disabled\n      state.disabled = data.map(function(d) { return !!d.disabled });\n\n      if (!defaultState) {\n        var key;\n        defaultState = {};\n        for (key in state) {\n          if (state[key] instanceof Array)\n            defaultState[key] = state[key].slice(0);\n          else\n            defaultState[key] = state[key];\n        }\n      }\n\n      //------------------------------------------------------------\n      // Display noData message if there's nothing to show.\n\n      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', margin.top + availableHeight / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x = bars.xScale();\n      y = bars.yScale();\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-historicalBarChart').data([data]);\n      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBarChart').append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-x nv-axis');\n      gEnter.append('g').attr('class', 'nv-y nv-axis');\n      gEnter.append('g').attr('class', 'nv-barsWrap');\n      gEnter.append('g').attr('class', 'nv-legendWrap');\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Legend\n\n      if (showLegend) {\n        legend.width(availableWidth);\n\n        g.select('.nv-legendWrap')\n            .datum(data)\n            .call(legend);\n\n        if ( margin.top != legend.height()) {\n          margin.top = legend.height();\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n        }\n\n        wrap.select('.nv-legendWrap')\n            .attr('transform', 'translate(0,' + (-margin.top) +')')\n      }\n\n      //------------------------------------------------------------\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      if (rightAlignYAxis) {\n        g.select(\".nv-y.nv-axis\")\n            .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n      }\n\n\n      //------------------------------------------------------------\n      // Main Chart Component(s)\n\n      bars\n        .width(availableWidth)\n        .height(availableHeight)\n        .color(data.map(function(d,i) {\n          return d.color || color(d, i);\n        }).filter(function(d,i) { return !data[i].disabled }));\n\n\n      var barsWrap = g.select('.nv-barsWrap')\n          .datum(data.filter(function(d) { return !d.disabled }))\n\n      barsWrap.call(bars);\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Axes\n\n      if (showXAxis) {\n        xAxis\n          .scale(x)\n          .tickSize(-availableHeight, 0);\n\n        g.select('.nv-x.nv-axis')\n            .attr('transform', 'translate(0,' + y.range()[0] + ')');\n        g.select('.nv-x.nv-axis')\n            \n            .call(xAxis);\n      }\n\n      if (showYAxis) {\n        yAxis\n          .scale(y)\n          .ticks( availableHeight / 36 )\n          .tickSize( -availableWidth, 0);\n\n        g.select('.nv-y.nv-axis')\n          \n            .call(yAxis);\n      }\n      //------------------------------------------------------------\n\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n      legend.dispatch.on('legendClick', function(d,i) {\n        d.disabled = !d.disabled;\n\n        if (!data.filter(function(d) { return !d.disabled }).length) {\n          data.map(function(d) {\n            d.disabled = false;\n            wrap.selectAll('.nv-series').classed('disabled', false);\n            return d;\n          });\n        }\n\n        state.disabled = data.map(function(d) { return !!d.disabled });\n        dispatch.stateChange(state);\n\n        selection.call(chart);\n      });\n\n      legend.dispatch.on('legendDblclick', function(d) {\n          //Double clicking should always enable current series, and disabled all others.\n          data.forEach(function(d) {\n             d.disabled = true;\n          });\n          d.disabled = false;\n\n          state.disabled = data.map(function(d) { return !!d.disabled });\n          dispatch.stateChange(state);\n          chart.update();\n      });\n\n      dispatch.on('tooltipShow', function(e) {\n        if (tooltips) showTooltip(e, that.parentNode);\n      });\n\n\n      dispatch.on('changeState', function(e) {\n\n        if (typeof e.disabled !== 'undefined') {\n          data.forEach(function(series,i) {\n            series.disabled = e.disabled[i];\n          });\n\n          state.disabled = e.disabled;\n        }\n\n        chart.update();\n      });\n\n      //============================================================\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  bars.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  bars.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.dispatch = dispatch;\n  chart.bars = bars;\n  chart.legend = legend;\n  chart.xAxis = xAxis;\n  chart.yAxis = yAxis;\n\n  d3.rebind(chart, bars, 'defined', 'isArea', 'x', 'y', 'size', 'xScale', 'yScale',\n    'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi', 'id', 'interpolate','highlightPoint','clearHighlights', 'interactive');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    legend.color(color);\n    return chart;\n  };\n\n  chart.showLegend = function(_) {\n    if (!arguments.length) return showLegend;\n    showLegend = _;\n    return chart;\n  };\n\n  chart.showXAxis = function(_) {\n    if (!arguments.length) return showXAxis;\n    showXAxis = _;\n    return chart;\n  };\n\n  chart.showYAxis = function(_) {\n    if (!arguments.length) return showYAxis;\n    showYAxis = _;\n    return chart;\n  };\n\n  chart.rightAlignYAxis = function(_) {\n    if(!arguments.length) return rightAlignYAxis;\n    rightAlignYAxis = _;\n    yAxis.orient( (_) ? 'right' : 'left');\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.state = function(_) {\n    if (!arguments.length) return state;\n    state = _;\n    return chart;\n  };\n\n  chart.defaultState = function(_) {\n    if (!arguments.length) return defaultState;\n    defaultState = _;\n    return chart;\n  };\n\n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  chart.transitionDuration = function(_) {\n    if (!arguments.length) return transitionDuration;\n    transitionDuration = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\nnv.models.indentedTree = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var margin = {top: 0, right: 0, bottom: 0, left: 0} //TODO: implement, maybe as margin on the containing div\n    , width = 960\n    , height = 500\n    , color = nv.utils.defaultColor()\n    , id = Math.floor(Math.random() * 10000)\n    , header = true\n    , filterZero = false\n    , noData = \"No Data Available.\"\n    , childIndent = 20\n    , columns = [{key:'key', label: 'Name', type:'text'}] //TODO: consider functions like chart.addColumn, chart.removeColumn, instead of a block like this\n    , tableClass = null\n    , iconOpen = 'images/grey-plus.png' //TODO: consider removing this and replacing with a '+' or '-' unless user defines images\n    , iconClose = 'images/grey-minus.png'\n    , dispatch = d3.dispatch('elementClick', 'elementDblclick', 'elementMouseover', 'elementMouseout')\n    , getUrl = function(d) { return d.url }\n    ;\n\n  //============================================================\n\n  var idx = 0;\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var depth = 1,\n          container = d3.select(this);\n\n      var tree = d3.layout.tree()\n          .children(function(d) { return d.values })\n          .size([height, childIndent]); //Not sure if this is needed now that the result is HTML\n\n      chart.update = function() { container.call(chart) };\n\n\n      //------------------------------------------------------------\n      // Display No Data message if there's nothing to show.\n      if (!data[0]) data[0] = {key: noData};\n\n      //------------------------------------------------------------\n\n\n      var nodes = tree.nodes(data[0]);\n\n      // nodes.map(function(d) {\n      //   d.id = i++;\n      // })\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = d3.select(this).selectAll('div').data([[nodes]]);\n      var wrapEnter = wrap.enter().append('div').attr('class', 'nvd3 nv-wrap nv-indentedtree');\n      var tableEnter = wrapEnter.append('table');\n      var table = wrap.select('table').attr('width', '100%').attr('class', tableClass);\n\n      //------------------------------------------------------------\n\n\n      if (header) {\n        var thead = tableEnter.append('thead');\n\n        var theadRow1 = thead.append('tr');\n\n        columns.forEach(function(column) {\n          theadRow1\n            .append('th')\n              .attr('width', column.width ? column.width : '10%')\n              .style('text-align', column.type == 'numeric' ? 'right' : 'left')\n            .append('span')\n              .text(column.label);\n        });\n      }\n\n\n      var tbody = table.selectAll('tbody')\n                    .data(function(d) { return d });\n      tbody.enter().append('tbody');\n\n\n\n      //compute max generations\n      depth = d3.max(nodes, function(node) { return node.depth });\n      tree.size([height, depth * childIndent]); //TODO: see if this is necessary at all\n\n\n      // Update the nodes…\n      var node = tbody.selectAll('tr')\n          // .data(function(d) { return d; }, function(d) { return d.id || (d.id == ++i)});\n          .data(function(d) { return d.filter(function(d) { return (filterZero && !d.children) ? filterZero(d) :  true; } )}, function(d,i) { return d.id || (d.id || ++idx)});\n          //.style('display', 'table-row'); //TODO: see if this does anything\n\n      node.exit().remove();\n\n      node.select('img.nv-treeicon')\n          .attr('src', icon)\n          .classed('folded', folded);\n\n      var nodeEnter = node.enter().append('tr');\n\n\n      columns.forEach(function(column, index) {\n\n        var nodeName = nodeEnter.append('td')\n            .style('padding-left', function(d) { return (index ? 0 : d.depth * childIndent + 12 + (icon(d) ? 0 : 16)) + 'px' }, 'important') //TODO: check why I did the ternary here\n            .style('text-align', column.type == 'numeric' ? 'right' : 'left');\n\n\n        if (index == 0) {\n          nodeName.append('img')\n              .classed('nv-treeicon', true)\n              .classed('nv-folded', folded)\n              .attr('src', icon)\n              .style('width', '14px')\n              .style('height', '14px')\n              .style('padding', '0 1px')\n              .style('display', function(d) { return icon(d) ? 'inline-block' : 'none'; })\n              .on('click', click);\n        }\n\n\n        nodeName.each(function(d) {\n          if (!index && getUrl(d))\n            d3.select(this)\n              .append('a')\n              .attr('href',getUrl)\n              .attr('class', d3.functor(column.classes))\n              .append('span')\n          else\n            d3.select(this)\n              .append('span')\n\n            d3.select(this).select('span')\n              .attr('class', d3.functor(column.classes) )\n              .text(function(d) { return column.format ? (d[column.key] ? column.format(d[column.key]) : '-') :  (d[column.key] || '-'); });\n          });\n\n        if  (column.showCount) {\n          nodeName.append('span')\n              .attr('class', 'nv-childrenCount');\n\n          node.selectAll('span.nv-childrenCount').text(function(d) {\n                return ((d.values && d.values.length) || (d._values && d._values.length)) ?                                   //If this is a parent\n                    '(' + ((d.values && (d.values.filter(function(d) { return filterZero ? filterZero(d) :  true; }).length)) //If children are in values check its children and filter\n                    || (d._values && d._values.filter(function(d) { return filterZero ? filterZero(d) :  true; }).length)     //Otherwise, do the same, but with the other name, _values...\n                    || 0) + ')'                                                                                               //This is the catch-all in case there are no children after a filter\n                    : ''                                                                                                     //If this is not a parent, just give an empty string\n            });\n        }\n\n        // if (column.click)\n        //   nodeName.select('span').on('click', column.click);\n\n      });\n\n      node\n        .order()\n        .on('click', function(d) { \n          dispatch.elementClick({\n            row: this, //TODO: decide whether or not this should be consistent with scatter/line events or should be an html link (a href)\n            data: d,\n            pos: [d.x, d.y]\n          });\n        })\n        .on('dblclick', function(d) { \n          dispatch.elementDblclick({\n            row: this,\n            data: d,\n            pos: [d.x, d.y]\n          });\n        })\n        .on('mouseover', function(d) { \n          dispatch.elementMouseover({\n            row: this,\n            data: d,\n            pos: [d.x, d.y]\n          });\n        })\n        .on('mouseout', function(d) { \n          dispatch.elementMouseout({\n            row: this,\n            data: d,\n            pos: [d.x, d.y]\n          });\n        });\n\n\n\n\n      // Toggle children on click.\n      function click(d, _, unshift) {\n        d3.event.stopPropagation();\n\n        if(d3.event.shiftKey && !unshift) {\n          //If you shift-click, it'll toggle fold all the children, instead of itself\n          d3.event.shiftKey = false;\n          d.values && d.values.forEach(function(node){\n            if (node.values || node._values) {\n              click(node, 0, true);\n            }\n          });\n          return true;\n        }\n        if(!hasChildren(d)) {\n          //download file\n          //window.location.href = d.url;\n          return true;\n        }\n        if (d.values) {\n          d._values = d.values;\n          d.values = null;\n        } else {\n          d.values = d._values;\n          d._values = null;\n        }\n        chart.update();\n      }\n\n\n      function icon(d) {\n        return (d._values && d._values.length) ? iconOpen : (d.values && d.values.length) ? iconClose : '';\n      }\n\n      function folded(d) {\n        return (d._values && d._values.length);\n      }\n\n      function hasChildren(d) {\n        var values = d.values || d._values;\n\n        return (values && values.length);\n      }\n\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    scatter.color(color);\n    return chart;\n  };\n\n  chart.id = function(_) {\n    if (!arguments.length) return id;\n    id = _;\n    return chart;\n  };\n\n  chart.header = function(_) {\n    if (!arguments.length) return header;\n    header = _;\n    return chart;\n  };\n\n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  chart.filterZero = function(_) {\n    if (!arguments.length) return filterZero;\n    filterZero = _;\n    return chart;\n  };\n\n  chart.columns = function(_) {\n    if (!arguments.length) return columns;\n    columns = _;\n    return chart;\n  };\n\n  chart.tableClass = function(_) {\n    if (!arguments.length) return tableClass;\n    tableClass = _;\n    return chart;\n  };\n\n  chart.iconOpen = function(_){\n     if (!arguments.length) return iconOpen;\n    iconOpen = _;\n    return chart;\n  }\n\n  chart.iconClose = function(_){\n     if (!arguments.length) return iconClose;\n    iconClose = _;\n    return chart;\n  }\n\n  chart.getUrl = function(_){\n     if (!arguments.length) return getUrl;\n    getUrl = _;\n    return chart;\n  }\n\n  //============================================================\n\n\n  return chart;\n};nv.models.legend = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var margin = {top: 5, right: 0, bottom: 5, left: 0}\n    , width = 400\n    , height = 20\n    , getKey = function(d) { return d.key }\n    , color = nv.utils.defaultColor()\n    , align = true\n    , rightAlign = true\n    , updateState = true   //If true, legend will update data.disabled and trigger a 'stateChange' dispatch.\n    , radioButtonMode = false   //If true, clicking legend items will cause it to behave like a radio button. (only one can be selected at a time)\n    , dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange')\n    ;\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var availableWidth = width - margin.left - margin.right,\n          container = d3.select(this);\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-legend').data([data]);\n      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');\n      var g = wrap.select('g');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      //------------------------------------------------------------\n\n\n      var series = g.selectAll('.nv-series')\n          .data(function(d) { return d });\n      var seriesEnter = series.enter().append('g').attr('class', 'nv-series')\n          .on('mouseover', function(d,i) {\n            dispatch.legendMouseover(d,i);  //TODO: Make consistent with other event objects\n          })\n          .on('mouseout', function(d,i) {\n            dispatch.legendMouseout(d,i);\n          })\n          .on('click', function(d,i) {\n            dispatch.legendClick(d,i);\n            if (updateState) {\n               if (radioButtonMode) {\n                   //Radio button mode: set every series to disabled,\n                   //  and enable the clicked series.\n                   data.forEach(function(series) { series.disabled = true});\n                   d.disabled = false;\n               }\n               else {\n                   d.disabled = !d.disabled;\n                   if (data.every(function(series) { return series.disabled})) {\n                       //the default behavior of NVD3 legends is, if every single series\n                       // is disabled, turn all series' back on.\n                       data.forEach(function(series) { series.disabled = false});\n                   }\n               }\n               dispatch.stateChange({\n                  disabled: data.map(function(d) { return !!d.disabled })\n               });\n            }\n          })\n          .on('dblclick', function(d,i) {\n            dispatch.legendDblclick(d,i);\n            if (updateState) {\n                //the default behavior of NVD3 legends, when double clicking one,\n                // is to set all other series' to false, and make the double clicked series enabled.\n                data.forEach(function(series) {\n                   series.disabled = true;\n                });\n                d.disabled = false;\n                dispatch.stateChange({\n                    disabled: data.map(function(d) { return !!d.disabled })\n                });\n            }\n          });\n      seriesEnter.append('circle')\n          .style('stroke-width', 2)\n          .attr('class','nv-legend-symbol')\n          .attr('r', 5);\n      seriesEnter.append('text')\n          .attr('text-anchor', 'start')\n          .attr('class','nv-legend-text')\n          .attr('dy', '.32em')\n          .attr('dx', '8');\n      series.classed('disabled', function(d) { return d.disabled });\n      series.exit().remove();\n      series.select('circle')\n          .style('fill', function(d,i) { return d.color || color(d,i)})\n          .style('stroke', function(d,i) { return d.color || color(d, i) });\n      series.select('text').text(getKey);\n\n\n      //TODO: implement fixed-width and max-width options (max-width is especially useful with the align option)\n\n      // NEW ALIGNING CODE, TODO: clean up\n      if (align) {\n\n        var seriesWidths = [];\n        series.each(function(d,i) {\n              var legendText = d3.select(this).select('text');\n              var nodeTextLength;\n              try {\n                nodeTextLength = legendText.getComputedTextLength();\n                // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead\n                if(nodeTextLength <= 0) throw Error();\n              }\n              catch(e) {\n                nodeTextLength = nv.utils.calcApproxTextWidth(legendText);\n              }\n\n              seriesWidths.push(nodeTextLength + 28); // 28 is ~ the width of the circle plus some padding\n            });\n\n        var seriesPerRow = 0;\n        var legendWidth = 0;\n        var columnWidths = [];\n\n        while ( legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {\n          columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];\n          legendWidth += seriesWidths[seriesPerRow++];\n        }\n        if (seriesPerRow === 0) seriesPerRow = 1; //minimum of one series per row\n\n\n        while ( legendWidth > availableWidth && seriesPerRow > 1 ) {\n          columnWidths = [];\n          seriesPerRow--;\n\n          for (var k = 0; k < seriesWidths.length; k++) {\n            if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0) )\n              columnWidths[k % seriesPerRow] = seriesWidths[k];\n          }\n\n          legendWidth = columnWidths.reduce(function(prev, cur, index, array) {\n                          return prev + cur;\n                        });\n        }\n\n        var xPositions = [];\n        for (var i = 0, curX = 0; i < seriesPerRow; i++) {\n            xPositions[i] = curX;\n            curX += columnWidths[i];\n        }\n\n        series\n            .attr('transform', function(d, i) {\n              return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * 20) + ')';\n            });\n\n        //position legend as far right as possible within the total width\n        if (rightAlign) {\n           g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')');\n        }\n        else {\n           g.attr('transform', 'translate(0' + ',' + margin.top + ')');\n        }\n\n        height = margin.top + margin.bottom + (Math.ceil(seriesWidths.length / seriesPerRow) * 20);\n\n      } else {\n\n        var ypos = 5,\n            newxpos = 5,\n            maxwidth = 0,\n            xpos;\n        series\n            .attr('transform', function(d, i) {\n              var length = d3.select(this).select('text').node().getComputedTextLength() + 28;\n              xpos = newxpos;\n\n              if (width < margin.left + margin.right + xpos + length) {\n                newxpos = xpos = 5;\n                ypos += 20;\n              }\n\n              newxpos += length;\n              if (newxpos > maxwidth) maxwidth = newxpos;\n\n              return 'translate(' + xpos + ',' + ypos + ')';\n            });\n\n        //position legend as far right as possible within the total width\n        g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');\n\n        height = margin.top + margin.bottom + ypos + 15;\n\n      }\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  chart.dispatch = dispatch;\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.key = function(_) {\n    if (!arguments.length) return getKey;\n    getKey = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    return chart;\n  };\n\n  chart.align = function(_) {\n    if (!arguments.length) return align;\n    align = _;\n    return chart;\n  };\n\n  chart.rightAlign = function(_) {\n    if (!arguments.length) return rightAlign;\n    rightAlign = _;\n    return chart;\n  };\n\n  chart.updateState = function(_) {\n    if (!arguments.length) return updateState;\n    updateState = _;\n    return chart;\n  };\n\n  chart.radioButtonMode = function(_) {\n    if (!arguments.length) return radioButtonMode;\n    radioButtonMode = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.line = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var  scatter = nv.models.scatter()\n    ;\n\n  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n    , width = 960\n    , height = 500\n    , color = nv.utils.defaultColor() // a function that returns a color\n    , getX = function(d) { return d.x } // accessor to get the x value from a data point\n    , getY = function(d) { return d.y } // accessor to get the y value from a data point\n    , defined = function(d,i) { return !isNaN(getY(d,i)) && getY(d,i) !== null } // allows a line to be not continuous when it is not defined\n    , isArea = function(d) { return d.area } // decides if a line is an area or just a line\n    , clipEdge = false // if true, masks lines within x and y scale\n    , x //can be accessed via chart.xScale()\n    , y //can be accessed via chart.yScale()\n    , interpolate = \"linear\" // controls the line interpolation\n    ;\n\n  scatter\n    .size(16) // default size\n    .sizeDomain([16,256]) //set to speed up calculation, needs to be unset if there is a custom size accessor\n    ;\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var x0, y0 //used to store previous scales\n      ;\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var availableWidth = width - margin.left - margin.right,\n          availableHeight = height - margin.top - margin.bottom,\n          container = d3.select(this);\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x = scatter.xScale();\n      y = scatter.yScale();\n\n      x0 = x0 || x;\n      y0 = y0 || y;\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-line').data([data]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-line');\n      var defsEnter = wrapEnter.append('defs');\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g')\n\n      gEnter.append('g').attr('class', 'nv-groups');\n      gEnter.append('g').attr('class', 'nv-scatterWrap');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      //------------------------------------------------------------\n\n\n\n\n      scatter\n        .width(availableWidth)\n        .height(availableHeight)\n\n      var scatterWrap = wrap.select('.nv-scatterWrap');\n          //.datum(data); // Data automatically trickles down from the wrap\n\n      scatterWrap.call(scatter);\n\n\n\n      defsEnter.append('clipPath')\n          .attr('id', 'nv-edge-clip-' + scatter.id())\n        .append('rect');\n\n      wrap.select('#nv-edge-clip-' + scatter.id() + ' rect')\n          .attr('width', availableWidth)\n          .attr('height', (availableHeight > 0) ? availableHeight : 0);\n\n      g   .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');\n      scatterWrap\n          .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');\n\n\n\n\n      var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n          .data(function(d) { return d }, function(d) { return d.key });\n      groups.enter().append('g')\n          .style('stroke-opacity', 1e-6)\n          .style('fill-opacity', 1e-6);\n\n      groups.exit().remove();\n\n      groups\n          .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n          .classed('hover', function(d) { return d.hover })\n          .style('fill', function(d,i){ return color(d, i) })\n          .style('stroke', function(d,i){ return color(d, i)});\n      groups\n          \n          .style('stroke-opacity', 1)\n          .style('fill-opacity', .5);\n\n\n\n      var areaPaths = groups.selectAll('path.nv-area')\n          .data(function(d) { return isArea(d) ? [d] : [] }); // this is done differently than lines because I need to check if series is an area\n      areaPaths.enter().append('path')\n          .attr('class', 'nv-area')\n          .attr('d', function(d) {\n            return d3.svg.area()\n                .interpolate(interpolate)\n                .defined(defined)\n                .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n                .y0(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n                .y1(function(d,i) { return y0( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })\n                //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this\n                .apply(this, [d.values])\n          });\n      groups.exit().selectAll('path.nv-area')\n           .remove();\n\n      areaPaths\n          \n          .attr('d', function(d) {\n            return d3.svg.area()\n                .interpolate(interpolate)\n                .defined(defined)\n                .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n                .y0(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n                .y1(function(d,i) { return y( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })\n                //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this\n                .apply(this, [d.values])\n          });\n\n\n\n      var linePaths = groups.selectAll('path.nv-line')\n          .data(function(d) { return [d.values] });\n      linePaths.enter().append('path')\n          .attr('class', 'nv-line')\n          .attr('d',\n            d3.svg.line()\n              .interpolate(interpolate)\n              .defined(defined)\n              .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n              .y(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n          );\n\n      linePaths\n          \n          .attr('d',\n            d3.svg.line()\n              .interpolate(interpolate)\n              .defined(defined)\n              .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n              .y(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n          );\n\n\n\n      //store old scales for use in transitions on update\n      x0 = x.copy();\n      y0 = y.copy();\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  chart.dispatch = scatter.dispatch;\n  chart.scatter = scatter;\n\n  d3.rebind(chart, scatter, 'id', 'interactive', 'size', 'xScale', 'yScale', 'zScale', 'xDomain', 'yDomain', 'xRange', 'yRange',\n    'sizeDomain', 'forceX', 'forceY', 'forceSize', 'clipVoronoi', 'useVoronoi', 'clipRadius', 'padData','highlightPoint','clearHighlights');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.x = function(_) {\n    if (!arguments.length) return getX;\n    getX = _;\n    scatter.x(_);\n    return chart;\n  };\n\n  chart.y = function(_) {\n    if (!arguments.length) return getY;\n    getY = _;\n    scatter.y(_);\n    return chart;\n  };\n\n  chart.clipEdge = function(_) {\n    if (!arguments.length) return clipEdge;\n    clipEdge = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    scatter.color(color);\n    return chart;\n  };\n\n  chart.interpolate = function(_) {\n    if (!arguments.length) return interpolate;\n    interpolate = _;\n    return chart;\n  };\n\n  chart.defined = function(_) {\n    if (!arguments.length) return defined;\n    defined = _;\n    return chart;\n  };\n\n  chart.isArea = function(_) {\n    if (!arguments.length) return isArea;\n    isArea = d3.functor(_);\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.lineChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var lines = nv.models.line()\n    , xAxis = nv.models.axis()\n    , yAxis = nv.models.axis()\n    , legend = nv.models.legend()\n    , interactiveLayer = nv.interactiveGuideline()\n    ;\n\n  var margin = {top: 30, right: 20, bottom: 50, left: 60}\n    , color = nv.utils.defaultColor()\n    , width = null\n    , height = null\n    , showLegend = true\n    , showXAxis = true\n    , showYAxis = true\n    , rightAlignYAxis = false\n    , useInteractiveGuideline = false\n    , tooltips = true\n    , tooltip = function(key, x, y, e, graph) {\n        return '<h3>' + key + '</h3>' +\n               '<p>' +  y + ' at ' + x + '</p>'\n      }\n    , x\n    , y\n    , state = {}\n    , defaultState = null\n    , noData = 'No Data Available.'\n    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n    , transitionDuration = 0\n    ;\n\n  xAxis\n    .orient('bottom')\n    .tickPadding(7)\n    ;\n  yAxis\n    .orient((rightAlignYAxis) ? 'right' : 'left')\n    ;\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var showTooltip = function(e, offsetElement) {\n    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n        x = xAxis.tickFormat()(lines.x()(e.point, e.pointIndex)),\n        y = yAxis.tickFormat()(lines.y()(e.point, e.pointIndex)),\n        content = tooltip(e.series.key, x, y, e, chart);\n\n    nv.tooltip.show([left, top], content, null, null, offsetElement);\n  };\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this),\n          that = this;\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n\n\n      chart.update = function() { container.call(chart) };\n      chart.container = this;\n\n      //set state.disabled\n      state.disabled = data.map(function(d) { return !!d.disabled });\n\n\n      if (!defaultState) {\n        var key;\n        defaultState = {};\n        for (key in state) {\n          if (state[key] instanceof Array)\n            defaultState[key] = state[key].slice(0);\n          else\n            defaultState[key] = state[key];\n        }\n      }\n\n      //------------------------------------------------------------\n      // Display noData message if there's nothing to show.\n\n      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', margin.top + availableHeight / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x = lines.xScale();\n      y = lines.yScale();\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-lineChart').data([data]);\n      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-lineChart').append('g');\n      var g = wrap.select('g');\n\n      gEnter.append(\"rect\").style(\"opacity\",0);\n      gEnter.append('g').attr('class', 'nv-x nv-axis');\n      gEnter.append('g').attr('class', 'nv-y nv-axis');\n      gEnter.append('g').attr('class', 'nv-linesWrap');\n      gEnter.append('g').attr('class', 'nv-legendWrap');\n      gEnter.append('g').attr('class', 'nv-interactive');\n\n      g.select(\"rect\")\n        .attr(\"width\",availableWidth)\n        .attr(\"height\",(availableHeight > 0) ? availableHeight : 0);\n      //------------------------------------------------------------\n      // Legend\n\n      if (showLegend) {\n        legend.width(availableWidth);\n\n        g.select('.nv-legendWrap')\n            .datum(data)\n            .call(legend);\n\n        if ( margin.top != legend.height()) {\n          margin.top = legend.height();\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n        }\n\n        wrap.select('.nv-legendWrap')\n            .attr('transform', 'translate(0,' + (-margin.top) +')')\n      }\n\n      //------------------------------------------------------------\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      if (rightAlignYAxis) {\n          g.select(\".nv-y.nv-axis\")\n              .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n      }\n\n      //------------------------------------------------------------\n      // Main Chart Component(s)\n\n\n      //------------------------------------------------------------\n      //Set up interactive layer\n      if (useInteractiveGuideline) {\n        interactiveLayer\n           .width(availableWidth)\n           .height(availableHeight)\n           .margin({left:margin.left, top:margin.top})\n           .svgContainer(container)\n           .xScale(x);\n        wrap.select(\".nv-interactive\").call(interactiveLayer);\n      }\n\n\n      lines\n        .width(availableWidth)\n        .height(availableHeight)\n        .color(data.map(function(d,i) {\n          return d.color || color(d, i);\n        }).filter(function(d,i) { return !data[i].disabled }));\n\n\n      var linesWrap = g.select('.nv-linesWrap')\n          .datum(data.filter(function(d) { return !d.disabled }))\n\n      linesWrap.call(lines);\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Axes\n\n      if (showXAxis) {\n        xAxis\n          .scale(x)\n          .ticks( availableWidth / 100 )\n          .tickSize(-availableHeight, 0);\n\n        g.select('.nv-x.nv-axis')\n            .attr('transform', 'translate(0,' + y.range()[0] + ')');\n        g.select('.nv-x.nv-axis')\n            \n            .call(xAxis);\n      }\n\n      if (showYAxis) {\n        yAxis\n          .scale(y)\n          .ticks( availableHeight / 36 )\n          .tickSize( -availableWidth, 0);\n\n        g.select('.nv-y.nv-axis')\n            \n            .call(yAxis);\n      }\n      //------------------------------------------------------------\n\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n      legend.dispatch.on('stateChange', function(newState) {\n          state = newState;\n          dispatch.stateChange(state);\n          chart.update();\n      });\n\n      interactiveLayer.dispatch.on('elementMousemove', function(e) {\n          lines.clearHighlights();\n          var singlePoint, pointIndex, pointXLocation, allData = [];\n          data\n          .filter(function(series, i) {\n            series.seriesIndex = i;\n            return !series.disabled;\n          })\n          .forEach(function(series,i) {\n              pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n              lines.highlightPoint(i, pointIndex, true);\n              var point = series.values[pointIndex];\n              if (typeof point === 'undefined') return;\n              if (typeof singlePoint === 'undefined') singlePoint = point;\n              if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n              allData.push({\n                  key: series.key,\n                  value: chart.y()(point, pointIndex),\n                  color: color(series,series.seriesIndex)\n              });\n          });\n          //Highlight the tooltip entry based on which point the mouse is closest to.\n          if (allData.length > 2) {\n            var yValue = chart.yScale().invert(e.mouseY);\n            var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);\n            var threshold = 0.03 * domainExtent;\n            var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value}),yValue,threshold);\n            if (indexToHighlight !== null)\n              allData[indexToHighlight].highlight = true;\n          }\n\n          var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex));\n          interactiveLayer.tooltip\n                  .position({left: pointXLocation + margin.left, top: e.mouseY + margin.top})\n                  .chartContainer(that.parentNode)\n                  .enabled(tooltips)\n                  .valueFormatter(function(d,i) {\n                     return yAxis.tickFormat()(d);\n                  })\n                  .data(\n                      {\n                        value: xValue,\n                        series: allData\n                      }\n                  )();\n\n          interactiveLayer.renderGuideLine(pointXLocation);\n\n      });\n\n      interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n          dispatch.tooltipHide();\n          lines.clearHighlights();\n      });\n\n      dispatch.on('tooltipShow', function(e) {\n        if (tooltips) showTooltip(e, that.parentNode);\n      });\n\n\n      dispatch.on('changeState', function(e) {\n\n        if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {\n          data.forEach(function(series,i) {\n            series.disabled = e.disabled[i];\n          });\n\n          state.disabled = e.disabled;\n        }\n\n        chart.update();\n      });\n\n      //============================================================\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  lines.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  lines.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.dispatch = dispatch;\n  chart.lines = lines;\n  chart.legend = legend;\n  chart.xAxis = xAxis;\n  chart.yAxis = yAxis;\n  chart.interactiveLayer = interactiveLayer;\n\n  d3.rebind(chart, lines, 'defined', 'isArea', 'x', 'y', 'size', 'xScale', 'yScale', 'xDomain', 'yDomain', 'xRange', 'yRange'\n    , 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi', 'useVoronoi','id', 'interpolate');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    legend.color(color);\n    return chart;\n  };\n\n  chart.showLegend = function(_) {\n    if (!arguments.length) return showLegend;\n    showLegend = _;\n    return chart;\n  };\n\n  chart.showXAxis = function(_) {\n    if (!arguments.length) return showXAxis;\n    showXAxis = _;\n    return chart;\n  };\n\n  chart.showYAxis = function(_) {\n    if (!arguments.length) return showYAxis;\n    showYAxis = _;\n    return chart;\n  };\n\n  chart.rightAlignYAxis = function(_) {\n    if(!arguments.length) return rightAlignYAxis;\n    rightAlignYAxis = _;\n    yAxis.orient( (_) ? 'right' : 'left');\n    return chart;\n  };\n\n  chart.useInteractiveGuideline = function(_) {\n    if(!arguments.length) return useInteractiveGuideline;\n    useInteractiveGuideline = _;\n    if (_ === true) {\n       chart.interactive(false);\n       chart.useVoronoi(false);\n    }\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.state = function(_) {\n    if (!arguments.length) return state;\n    state = _;\n    return chart;\n  };\n\n  chart.defaultState = function(_) {\n    if (!arguments.length) return defaultState;\n    defaultState = _;\n    return chart;\n  };\n\n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  chart.transitionDuration = function(_) {\n    if (!arguments.length) return transitionDuration;\n    transitionDuration = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.linePlusBarChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var lines = nv.models.line()\n    , bars = nv.models.historicalBar()\n    , xAxis = nv.models.axis()\n    , y1Axis = nv.models.axis()\n    , y2Axis = nv.models.axis()\n    , legend = nv.models.legend()\n    ;\n\n  var margin = {top: 30, right: 60, bottom: 50, left: 60}\n    , width = null\n    , height = null\n    , getX = function(d) { return d.x }\n    , getY = function(d) { return d.y }\n    , color = nv.utils.defaultColor()\n    , showLegend = true\n    , tooltips = true\n    , tooltip = function(key, x, y, e, graph) {\n        return '<h3>' + key + '</h3>' +\n               '<p>' +  y + ' at ' + x + '</p>';\n      }\n    , x\n    , y1\n    , y2\n    , state = {}\n    , defaultState = null\n    , noData = \"No Data Available.\"\n    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n    ;\n\n  bars\n    .padData(true)\n    ;\n  lines\n    .clipEdge(false)\n    .padData(true)\n    ;\n  xAxis\n    .orient('bottom')\n    .tickPadding(7)\n    .highlightZero(false)\n    ;\n  y1Axis\n    .orient('left')\n    ;\n  y2Axis\n    .orient('right')\n    ;\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var showTooltip = function(e, offsetElement) {\n      var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n          top = e.pos[1] + ( offsetElement.offsetTop || 0),\n          x = xAxis.tickFormat()(lines.x()(e.point, e.pointIndex)),\n          y = (e.series.bar ? y1Axis : y2Axis).tickFormat()(lines.y()(e.point, e.pointIndex)),\n          content = tooltip(e.series.key, x, y, e, chart);\n\n      nv.tooltip.show([left, top], content, e.value < 0 ? 'n' : 's', null, offsetElement);\n    }\n    ;\n\n  //------------------------------------------------------------\n\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this),\n          that = this;\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n\n      chart.update = function() { container.call(chart); };\n      // chart.container = this;\n\n      //set state.disabled\n      state.disabled = data.map(function(d) { return !!d.disabled });\n\n      if (!defaultState) {\n        var key;\n        defaultState = {};\n        for (key in state) {\n          if (state[key] instanceof Array)\n            defaultState[key] = state[key].slice(0);\n          else\n            defaultState[key] = state[key];\n        }\n      }\n\n      //------------------------------------------------------------\n      // Display No Data message if there's nothing to show.\n\n      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', margin.top + availableHeight / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      var dataBars = data.filter(function(d) { return !d.disabled && d.bar });\n      var dataLines = data.filter(function(d) { return !d.bar }); // removed the !d.disabled clause here to fix Issue #240\n\n      //x = xAxis.scale();\n       x = dataLines.filter(function(d) { return !d.disabled; }).length && dataLines.filter(function(d) { return !d.disabled; })[0].values.length ? lines.xScale() : bars.xScale();\n      //x = dataLines.filter(function(d) { return !d.disabled; }).length ? lines.xScale() : bars.xScale(); //old code before change above\n      y1 = bars.yScale();\n      y2 = lines.yScale();\n\n      //------------------------------------------------------------\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = d3.select(this).selectAll('g.nv-wrap.nv-linePlusBar').data([data]);\n      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-linePlusBar').append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-x nv-axis');\n      gEnter.append('g').attr('class', 'nv-y1 nv-axis');\n      gEnter.append('g').attr('class', 'nv-y2 nv-axis');\n      gEnter.append('g').attr('class', 'nv-barsWrap');\n      gEnter.append('g').attr('class', 'nv-linesWrap');\n      gEnter.append('g').attr('class', 'nv-legendWrap');\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Legend\n\n      if (showLegend) {\n        legend.width( availableWidth / 2 );\n\n        g.select('.nv-legendWrap')\n            .datum(data.map(function(series) {\n              series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n              series.key = series.originalKey + (series.bar ? ' (left axis)' : ' (right axis)');\n              return series;\n            }))\n          .call(legend);\n\n        if ( margin.top != legend.height()) {\n          margin.top = legend.height();\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n        }\n\n        g.select('.nv-legendWrap')\n            .attr('transform', 'translate(' + ( availableWidth / 2 ) + ',' + (-margin.top) +')');\n      }\n\n      //------------------------------------------------------------\n\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\n      //------------------------------------------------------------\n      // Main Chart Component(s)\n\n\n      lines\n        .width(availableWidth)\n        .height(availableHeight)\n        .color(data.map(function(d,i) {\n          return d.color || color(d, i);\n        }).filter(function(d,i) { return !data[i].disabled && !data[i].bar }))\n\n      bars\n        .width(availableWidth)\n        .height(availableHeight)\n        .color(data.map(function(d,i) {\n          return d.color || color(d, i);\n        }).filter(function(d,i) { return !data[i].disabled && data[i].bar }))\n\n\n\n      var barsWrap = g.select('.nv-barsWrap')\n          .datum(dataBars.length ? dataBars : [{values:[]}])\n\n      var linesWrap = g.select('.nv-linesWrap')\n          .datum(dataLines[0] && !dataLines[0].disabled ? dataLines : [{values:[]}] );\n          //.datum(!dataLines[0].disabled ? dataLines : [{values:dataLines[0].values.map(function(d) { return [d[0], null] }) }] );\n\n      d3.transition(barsWrap).call(bars);\n      d3.transition(linesWrap).call(lines);\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Axes\n\n      xAxis\n        .scale(x)\n        .ticks( availableWidth / 100 )\n        .tickSize(-availableHeight, 0);\n\n      g.select('.nv-x.nv-axis')\n          .attr('transform', 'translate(0,' + y1.range()[0] + ')');\n      d3.transition(g.select('.nv-x.nv-axis'))\n          .call(xAxis);\n\n\n      y1Axis\n        .scale(y1)\n        .ticks( availableHeight / 36 )\n        .tickSize(-availableWidth, 0);\n\n      d3.transition(g.select('.nv-y1.nv-axis'))\n          .style('opacity', dataBars.length ? 1 : 0)\n          .call(y1Axis);\n\n\n      y2Axis\n        .scale(y2)\n        .ticks( availableHeight / 36 )\n        .tickSize(dataBars.length ? 0 : -availableWidth, 0); // Show the y2 rules only if y1 has none\n\n      g.select('.nv-y2.nv-axis')\n          .style('opacity', dataLines.length ? 1 : 0)\n          .attr('transform', 'translate(' + availableWidth + ',0)');\n          //.attr('transform', 'translate(' + x.range()[1] + ',0)');\n\n      d3.transition(g.select('.nv-y2.nv-axis'))\n          .call(y2Axis);\n\n      //------------------------------------------------------------\n\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n      legend.dispatch.on('stateChange', function(newState) { \n        state = newState;\n        dispatch.stateChange(state);\n        chart.update();\n      });\n\n      dispatch.on('tooltipShow', function(e) {\n        if (tooltips) showTooltip(e, that.parentNode);\n      });\n\n\n      // Update chart from a state object passed to event handler\n      dispatch.on('changeState', function(e) {\n\n        if (typeof e.disabled !== 'undefined') {\n          data.forEach(function(series,i) {\n            series.disabled = e.disabled[i];\n          });\n\n          state.disabled = e.disabled;\n        }\n\n        chart.update();\n      });\n\n      //============================================================\n\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  lines.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  lines.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  bars.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  bars.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.dispatch = dispatch;\n  chart.legend = legend;\n  chart.lines = lines;\n  chart.bars = bars;\n  chart.xAxis = xAxis;\n  chart.y1Axis = y1Axis;\n  chart.y2Axis = y2Axis;\n\n  d3.rebind(chart, lines, 'defined', 'size', 'clipVoronoi', 'interpolate');\n  //TODO: consider rebinding x, y and some other stuff, and simply do soemthign lile bars.x(lines.x()), etc.\n  //d3.rebind(chart, lines, 'x', 'y', 'size', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi', 'id');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  chart.x = function(_) {\n    if (!arguments.length) return getX;\n    getX = _;\n    lines.x(_);\n    bars.x(_);\n    return chart;\n  };\n\n  chart.y = function(_) {\n    if (!arguments.length) return getY;\n    getY = _;\n    lines.y(_);\n    bars.y(_);\n    return chart;\n  };\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    legend.color(color);\n    return chart;\n  };\n\n  chart.showLegend = function(_) {\n    if (!arguments.length) return showLegend;\n    showLegend = _;\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.state = function(_) {\n    if (!arguments.length) return state;\n    state = _;\n    return chart;\n  };\n\n  chart.defaultState = function(_) {\n    if (!arguments.length) return defaultState;\n    defaultState = _;\n    return chart;\n  };\n\n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\nnv.models.lineWithFocusChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var lines = nv.models.line()\n    , lines2 = nv.models.line()\n    , xAxis = nv.models.axis()\n    , yAxis = nv.models.axis()\n    , x2Axis = nv.models.axis()\n    , y2Axis = nv.models.axis()\n    , legend = nv.models.legend()\n    , brush = d3.svg.brush()\n    ;\n\n  var margin = {top: 30, right: 30, bottom: 30, left: 60}\n    , margin2 = {top: 0, right: 30, bottom: 20, left: 60}\n    , color = nv.utils.defaultColor()\n    , width = null\n    , height = null\n    , height2 = 100\n    , x\n    , y\n    , x2\n    , y2\n    , showLegend = true\n    , brushExtent = null\n    , tooltips = true\n    , tooltip = function(key, x, y, e, graph) {\n        return '<h3>' + key + '</h3>' +\n               '<p>' +  y + ' at ' + x + '</p>'\n      }\n    , noData = \"No Data Available.\"\n    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'brush')\n    , transitionDuration = 0\n    ;\n\n  lines\n    .clipEdge(true)\n    ;\n  lines2\n    .interactive(false)\n    ;\n  xAxis\n    .orient('bottom')\n    .tickPadding(5)\n    ;\n  yAxis\n    .orient('left')\n    ;\n  x2Axis\n    .orient('bottom')\n    .tickPadding(5)\n    ;\n  y2Axis\n    .orient('left')\n    ;\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var showTooltip = function(e, offsetElement) {\n    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n        x = xAxis.tickFormat()(lines.x()(e.point, e.pointIndex)),\n        y = yAxis.tickFormat()(lines.y()(e.point, e.pointIndex)),\n        content = tooltip(e.series.key, x, y, e, chart);\n\n    nv.tooltip.show([left, top], content, null, null, offsetElement);\n  };\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this),\n          that = this;\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight1 = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom - height2,\n          availableHeight2 = height2 - margin2.top - margin2.bottom;\n\n      chart.update = function() { container.call(chart) };\n      chart.container = this;\n\n\n      //------------------------------------------------------------\n      // Display No Data message if there's nothing to show.\n\n      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', margin.top + availableHeight1 / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x = lines.xScale();\n      y = lines.yScale();\n      x2 = lines2.xScale();\n      y2 = lines2.yScale();\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-lineWithFocusChart').data([data]);\n      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-lineWithFocusChart').append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-legendWrap');\n\n      var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n      focusEnter.append('g').attr('class', 'nv-x nv-axis');\n      focusEnter.append('g').attr('class', 'nv-y nv-axis');\n      focusEnter.append('g').attr('class', 'nv-linesWrap');\n\n      var contextEnter = gEnter.append('g').attr('class', 'nv-context');\n      contextEnter.append('g').attr('class', 'nv-x nv-axis');\n      contextEnter.append('g').attr('class', 'nv-y nv-axis');\n      contextEnter.append('g').attr('class', 'nv-linesWrap');\n      contextEnter.append('g').attr('class', 'nv-brushBackground');\n      contextEnter.append('g').attr('class', 'nv-x nv-brush');\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Legend\n\n      if (showLegend) {\n        legend.width(availableWidth);\n\n        g.select('.nv-legendWrap')\n            .datum(data)\n            .call(legend);\n\n        if ( margin.top != legend.height()) {\n          margin.top = legend.height();\n          availableHeight1 = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom - height2;\n        }\n\n        g.select('.nv-legendWrap')\n            .attr('transform', 'translate(0,' + (-margin.top) +')')\n      }\n\n      //------------------------------------------------------------\n\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\n      //------------------------------------------------------------\n      // Main Chart Component(s)\n\n      lines\n        .width(availableWidth)\n        .height(availableHeight1)\n        .color(\n          data\n            .map(function(d,i) {\n              return d.color || color(d, i);\n            })\n            .filter(function(d,i) {\n              return !data[i].disabled;\n          })\n        );\n\n      lines2\n        .defined(lines.defined())\n        .width(availableWidth)\n        .height(availableHeight2)\n        .color(\n          data\n            .map(function(d,i) {\n              return d.color || color(d, i);\n            })\n            .filter(function(d,i) {\n              return !data[i].disabled;\n          })\n        );\n\n      g.select('.nv-context')\n          .attr('transform', 'translate(0,' + ( availableHeight1 + margin.bottom + margin2.top) + ')')\n\n      var contextLinesWrap = g.select('.nv-context .nv-linesWrap')\n          .datum(data.filter(function(d) { return !d.disabled }))\n\n      d3.transition(contextLinesWrap).call(lines2);\n\n      //------------------------------------------------------------\n\n\n      /*\n      var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n          .datum(data.filter(function(d) { return !d.disabled }))\n\n      d3.transition(focusLinesWrap).call(lines);\n     */\n\n\n      //------------------------------------------------------------\n      // Setup Main (Focus) Axes\n\n      xAxis\n        .scale(x)\n        .ticks( availableWidth / 100 )\n        .tickSize(-availableHeight1, 0);\n\n      yAxis\n        .scale(y)\n        .ticks( availableHeight1 / 36 )\n        .tickSize( -availableWidth, 0);\n\n      g.select('.nv-focus .nv-x.nv-axis')\n          .attr('transform', 'translate(0,' + availableHeight1 + ')');\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Brush\n\n      brush\n        .x(x2)\n        .on('brush', function() {\n            //When brushing, turn off transitions because chart needs to change immediately.\n            var oldTransition = chart.transitionDuration();\n            chart.transitionDuration(0); \n            onBrush();\n            chart.transitionDuration(oldTransition);\n        });\n\n      if (brushExtent) brush.extent(brushExtent);\n\n      var brushBG = g.select('.nv-brushBackground').selectAll('g')\n          .data([brushExtent || brush.extent()])\n\n      var brushBGenter = brushBG.enter()\n          .append('g');\n\n      brushBGenter.append('rect')\n          .attr('class', 'left')\n          .attr('x', 0)\n          .attr('y', 0)\n          .attr('height', availableHeight2);\n\n      brushBGenter.append('rect')\n          .attr('class', 'right')\n          .attr('x', 0)\n          .attr('y', 0)\n          .attr('height', availableHeight2);\n\n      var gBrush = g.select('.nv-x.nv-brush')\n          .call(brush);\n      gBrush.selectAll('rect')\n          //.attr('y', -5)\n          .attr('height', availableHeight2);\n      gBrush.selectAll('.resize').append('path').attr('d', resizePath);\n\n      onBrush();\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Secondary (Context) Axes\n\n      x2Axis\n        .scale(x2)\n        .ticks( availableWidth / 100 )\n        .tickSize(-availableHeight2, 0);\n\n      g.select('.nv-context .nv-x.nv-axis')\n          .attr('transform', 'translate(0,' + y2.range()[0] + ')');\n      d3.transition(g.select('.nv-context .nv-x.nv-axis'))\n          .call(x2Axis);\n\n\n      y2Axis\n        .scale(y2)\n        .ticks( availableHeight2 / 36 )\n        .tickSize( -availableWidth, 0);\n\n      d3.transition(g.select('.nv-context .nv-y.nv-axis'))\n          .call(y2Axis);\n\n      g.select('.nv-context .nv-x.nv-axis')\n          .attr('transform', 'translate(0,' + y2.range()[0] + ')');\n\n      //------------------------------------------------------------\n\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n      legend.dispatch.on('stateChange', function(newState) { \n        chart.update();\n      });\n\n      dispatch.on('tooltipShow', function(e) {\n        if (tooltips) showTooltip(e, that.parentNode);\n      });\n\n      //============================================================\n\n\n      //============================================================\n      // Functions\n      //------------------------------------------------------------\n\n      // Taken from crossfilter (http://square.github.com/crossfilter/)\n      function resizePath(d) {\n        var e = +(d == 'e'),\n            x = e ? 1 : -1,\n            y = availableHeight2 / 3;\n        return 'M' + (.5 * x) + ',' + y\n            + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n            + 'V' + (2 * y - 6)\n            + 'A6,6 0 0 ' + e + ' ' + (.5 * x) + ',' + (2 * y)\n            + 'Z'\n            + 'M' + (2.5 * x) + ',' + (y + 8)\n            + 'V' + (2 * y - 8)\n            + 'M' + (4.5 * x) + ',' + (y + 8)\n            + 'V' + (2 * y - 8);\n      }\n\n\n      function updateBrushBG() {\n        if (!brush.empty()) brush.extent(brushExtent);\n        brushBG\n            .data([brush.empty() ? x2.domain() : brushExtent])\n            .each(function(d,i) {\n              var leftWidth = x2(d[0]) - x.range()[0],\n                  rightWidth = x.range()[1] - x2(d[1]);\n              d3.select(this).select('.left')\n                .attr('width',  leftWidth < 0 ? 0 : leftWidth);\n\n              d3.select(this).select('.right')\n                .attr('x', x2(d[1]))\n                .attr('width', rightWidth < 0 ? 0 : rightWidth);\n            });\n      }\n\n\n      function onBrush() {\n        brushExtent = brush.empty() ? null : brush.extent();\n        var extent = brush.empty() ? x2.domain() : brush.extent();\n\n        //The brush extent cannot be less than one.  If it is, don't update the line chart.\n        if (Math.abs(extent[0] - extent[1]) <= 1) {\n          return;\n        }\n\n        dispatch.brush({extent: extent, brush: brush});\n\n\n        updateBrushBG();\n\n        // Update Main (Focus)\n        var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n            .datum(\n              data\n                .filter(function(d) { return !d.disabled })\n                .map(function(d,i) {\n                  return {\n                    key: d.key,\n                    values: d.values.filter(function(d,i) {\n                      return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n                    })\n                  }\n                })\n            );\n        focusLinesWrap.call(lines);\n\n\n        // Update Main (Focus) Axes\n        g.select('.nv-focus .nv-x.nv-axis')\n            .call(xAxis);\n        g.select('.nv-focus .nv-y.nv-axis')\n            .call(yAxis);\n      }\n\n      //============================================================\n\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  lines.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  lines.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.dispatch = dispatch;\n  chart.legend = legend;\n  chart.lines = lines;\n  chart.lines2 = lines2;\n  chart.xAxis = xAxis;\n  chart.yAxis = yAxis;\n  chart.x2Axis = x2Axis;\n  chart.y2Axis = y2Axis;\n\n  d3.rebind(chart, lines, 'defined', 'isArea', 'size', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi', 'id');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  chart.x = function(_) {\n    if (!arguments.length) return lines.x;\n    lines.x(_);\n    lines2.x(_);\n    return chart;\n  };\n\n  chart.y = function(_) {\n    if (!arguments.length) return lines.y;\n    lines.y(_);\n    lines2.y(_);\n    return chart;\n  };\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.margin2 = function(_) {\n    if (!arguments.length) return margin2;\n    margin2 = _;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.height2 = function(_) {\n    if (!arguments.length) return height2;\n    height2 = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color =nv.utils.getColor(_);\n    legend.color(color);\n    return chart;\n  };\n\n  chart.showLegend = function(_) {\n    if (!arguments.length) return showLegend;\n    showLegend = _;\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.interpolate = function(_) {\n    if (!arguments.length) return lines.interpolate();\n    lines.interpolate(_);\n    lines2.interpolate(_);\n    return chart;\n  };\n\n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  // Chart has multiple similar Axes, to prevent code duplication, probably need to link all axis functions manually like below\n  chart.xTickFormat = function(_) {\n    if (!arguments.length) return xAxis.tickFormat();\n    xAxis.tickFormat(_);\n    x2Axis.tickFormat(_);\n    return chart;\n  };\n\n  chart.yTickFormat = function(_) {\n    if (!arguments.length) return yAxis.tickFormat();\n    yAxis.tickFormat(_);\n    y2Axis.tickFormat(_);\n    return chart;\n  };\n  \n  chart.brushExtent = function(_) {\n    if (!arguments.length) return brushExtent;\n    brushExtent = _;\n    return chart;\n  };\n\n  chart.transitionDuration = function(_) {\n    if (!arguments.length) return transitionDuration;\n    transitionDuration = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.linePlusBarWithFocusChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var lines = nv.models.line()\n    , lines2 = nv.models.line()\n    , bars = nv.models.historicalBar()\n    , bars2 = nv.models.historicalBar()\n    , xAxis = nv.models.axis()\n    , x2Axis = nv.models.axis()\n    , y1Axis = nv.models.axis()\n    , y2Axis = nv.models.axis()\n    , y3Axis = nv.models.axis()\n    , y4Axis = nv.models.axis()\n    , legend = nv.models.legend()\n    , brush = d3.svg.brush()\n    ;\n\n  var margin = {top: 30, right: 30, bottom: 30, left: 60}\n    , margin2 = {top: 0, right: 30, bottom: 20, left: 60}\n    , width = null\n    , height = null\n    , height2 = 100\n    , getX = function(d) { return d.x }\n    , getY = function(d) { return d.y }\n    , color = nv.utils.defaultColor()\n    , showLegend = true\n    , extent\n    , brushExtent = null\n    , tooltips = true\n    , tooltip = function(key, x, y, e, graph) {\n        return '<h3>' + key + '</h3>' +\n               '<p>' +  y + ' at ' + x + '</p>';\n      }\n    , x\n    , x2\n    , y1\n    , y2\n    , y3\n    , y4\n    , noData = \"No Data Available.\"\n    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'brush')\n    , transitionDuration = 0\n    ;\n\n  lines\n    .clipEdge(true)\n    ;\n  lines2\n    .interactive(false)\n    ;\n  xAxis\n    .orient('bottom')\n    .tickPadding(5)\n    ;\n  y1Axis\n    .orient('left')\n    ;\n  y2Axis\n    .orient('right')\n    ;\n  x2Axis\n    .orient('bottom')\n    .tickPadding(5)\n    ;\n  y3Axis\n    .orient('left')\n    ;\n  y4Axis\n    .orient('right')\n    ;\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var showTooltip = function(e, offsetElement) {\n    if (extent) {\n        e.pointIndex += Math.ceil(extent[0]);\n    }\n    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n        x = xAxis.tickFormat()(lines.x()(e.point, e.pointIndex)),\n        y = (e.series.bar ? y1Axis : y2Axis).tickFormat()(lines.y()(e.point, e.pointIndex)),\n        content = tooltip(e.series.key, x, y, e, chart);\n\n    nv.tooltip.show([left, top], content, e.value < 0 ? 'n' : 's', null, offsetElement);\n  };\n\n  //------------------------------------------------------------\n\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this),\n          that = this;\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight1 = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom - height2,\n          availableHeight2 = height2 - margin2.top - margin2.bottom;\n\n      chart.update = function() { container.call(chart); };\n      chart.container = this;\n\n\n      //------------------------------------------------------------\n      // Display No Data message if there's nothing to show.\n\n      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', margin.top + availableHeight1 / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      var dataBars = data.filter(function(d) { return !d.disabled && d.bar });\n      var dataLines = data.filter(function(d) { return !d.bar }); // removed the !d.disabled clause here to fix Issue #240\n\n      x = bars.xScale();\n      x2 = x2Axis.scale();\n      y1 = bars.yScale();\n      y2 = lines.yScale();\n      y3 = bars2.yScale();\n      y4 = lines2.yScale();\n\n      var series1 = data\n        .filter(function(d) { return !d.disabled && d.bar })\n        .map(function(d) {\n          return d.values.map(function(d,i) {\n            return { x: getX(d,i), y: getY(d,i) }\n          })\n        });\n\n      var series2 = data\n        .filter(function(d) { return !d.disabled && !d.bar })\n        .map(function(d) {\n          return d.values.map(function(d,i) {\n            return { x: getX(d,i), y: getY(d,i) }\n          })\n        });\n\n      x   .range([0, availableWidth]);\n      \n      x2  .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x } ))\n          .range([0, availableWidth]);\n\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-linePlusBar').data([data]);\n      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-linePlusBar').append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-legendWrap');\n      \n      var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n      focusEnter.append('g').attr('class', 'nv-x nv-axis');\n      focusEnter.append('g').attr('class', 'nv-y1 nv-axis');\n      focusEnter.append('g').attr('class', 'nv-y2 nv-axis');\n      focusEnter.append('g').attr('class', 'nv-barsWrap');\n      focusEnter.append('g').attr('class', 'nv-linesWrap');\n\n      var contextEnter = gEnter.append('g').attr('class', 'nv-context');\n      contextEnter.append('g').attr('class', 'nv-x nv-axis');\n      contextEnter.append('g').attr('class', 'nv-y1 nv-axis');\n      contextEnter.append('g').attr('class', 'nv-y2 nv-axis');\n      contextEnter.append('g').attr('class', 'nv-barsWrap');\n      contextEnter.append('g').attr('class', 'nv-linesWrap');\n      contextEnter.append('g').attr('class', 'nv-brushBackground');\n      contextEnter.append('g').attr('class', 'nv-x nv-brush');\n\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Legend\n\n      if (showLegend) {\n        legend.width( availableWidth / 2 );\n\n        g.select('.nv-legendWrap')\n            .datum(data.map(function(series) {\n              series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n              series.key = series.originalKey + (series.bar ? ' (left axis)' : ' (right axis)');\n              return series;\n            }))\n          .call(legend);\n\n        if ( margin.top != legend.height()) {\n          margin.top = legend.height();\n          availableHeight1 = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom - height2;\n        }\n\n        g.select('.nv-legendWrap')\n            .attr('transform', 'translate(' + ( availableWidth / 2 ) + ',' + (-margin.top) +')');\n      }\n\n      //------------------------------------------------------------\n\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\n      //------------------------------------------------------------\n      // Context Components\n\n      bars2\n        .width(availableWidth)\n        .height(availableHeight2)\n        .color(data.map(function(d,i) {\n          return d.color || color(d, i);\n        }).filter(function(d,i) { return !data[i].disabled && data[i].bar }));\n\n      lines2\n        .width(availableWidth)\n        .height(availableHeight2)\n        .color(data.map(function(d,i) {\n          return d.color || color(d, i);\n        }).filter(function(d,i) { return !data[i].disabled && !data[i].bar }));\n        \n      var bars2Wrap = g.select('.nv-context .nv-barsWrap')\n          .datum(dataBars.length ? dataBars : [{values:[]}]);\n\n      var lines2Wrap = g.select('.nv-context .nv-linesWrap')\n          .datum(!dataLines[0].disabled ? dataLines : [{values:[]}]);\n          \n      g.select('.nv-context')\n          .attr('transform', 'translate(0,' + ( availableHeight1 + margin.bottom + margin2.top) + ')')\n\n      bars2Wrap.call(bars2);\n      lines2Wrap.call(lines2);\n\n      //------------------------------------------------------------\n\n\n\n      //------------------------------------------------------------\n      // Setup Brush\n\n      brush\n        .x(x2)\n        .on('brush', onBrush);\n\n      if (brushExtent) brush.extent(brushExtent);\n\n      var brushBG = g.select('.nv-brushBackground').selectAll('g')\n          .data([brushExtent || brush.extent()])\n\n      var brushBGenter = brushBG.enter()\n          .append('g');\n\n      brushBGenter.append('rect')\n          .attr('class', 'left')\n          .attr('x', 0)\n          .attr('y', 0)\n          .attr('height', availableHeight2);\n\n      brushBGenter.append('rect')\n          .attr('class', 'right')\n          .attr('x', 0)\n          .attr('y', 0)\n          .attr('height', availableHeight2);\n\n      var gBrush = g.select('.nv-x.nv-brush')\n          .call(brush);\n      gBrush.selectAll('rect')\n          //.attr('y', -5)\n          .attr('height', availableHeight2);\n      gBrush.selectAll('.resize').append('path').attr('d', resizePath);\n\n      //------------------------------------------------------------\n\n      //------------------------------------------------------------\n      // Setup Secondary (Context) Axes\n\n      x2Axis\n        .ticks( availableWidth / 100 )\n        .tickSize(-availableHeight2, 0);\n\n      g.select('.nv-context .nv-x.nv-axis')\n          .attr('transform', 'translate(0,' + y3.range()[0] + ')');\n      g.select('.nv-context .nv-x.nv-axis')\n          .call(x2Axis);\n\n\n      y3Axis\n        .scale(y3)\n        .ticks( availableHeight2 / 36 )\n        .tickSize( -availableWidth, 0);\n\n      g.select('.nv-context .nv-y1.nv-axis')\n          .style('opacity', dataBars.length ? 1 : 0)\n          .attr('transform', 'translate(0,' + x2.range()[0] + ')');\n          \n      g.select('.nv-context .nv-y1.nv-axis')\n          .call(y3Axis);\n          \n\n      y4Axis\n        .scale(y4)\n        .ticks( availableHeight2 / 36 )\n        .tickSize(dataBars.length ? 0 : -availableWidth, 0); // Show the y2 rules only if y1 has none\n\n      g.select('.nv-context .nv-y2.nv-axis')\n          .style('opacity', dataLines.length ? 1 : 0)\n          .attr('transform', 'translate(' + x2.range()[1] + ',0)');\n\n      g.select('.nv-context .nv-y2.nv-axis')\n          .call(y4Axis);\n          \n      //------------------------------------------------------------\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n      legend.dispatch.on('stateChange', function(newState) { \n        chart.update();\n      });\n\n      dispatch.on('tooltipShow', function(e) {\n        if (tooltips) showTooltip(e, that.parentNode);\n      });\n\n      //============================================================\n\n\n      //============================================================\n      // Functions\n      //------------------------------------------------------------\n\n      // Taken from crossfilter (http://square.github.com/crossfilter/)\n      function resizePath(d) {\n        var e = +(d == 'e'),\n            x = e ? 1 : -1,\n            y = availableHeight2 / 3;\n        return 'M' + (.5 * x) + ',' + y\n            + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n            + 'V' + (2 * y - 6)\n            + 'A6,6 0 0 ' + e + ' ' + (.5 * x) + ',' + (2 * y)\n            + 'Z'\n            + 'M' + (2.5 * x) + ',' + (y + 8)\n            + 'V' + (2 * y - 8)\n            + 'M' + (4.5 * x) + ',' + (y + 8)\n            + 'V' + (2 * y - 8);\n      }\n\n\n      function updateBrushBG() {\n        if (!brush.empty()) brush.extent(brushExtent);\n        brushBG\n            .data([brush.empty() ? x2.domain() : brushExtent])\n            .each(function(d,i) {\n              var leftWidth = x2(d[0]) - x2.range()[0],\n                  rightWidth = x2.range()[1] - x2(d[1]);\n              d3.select(this).select('.left')\n                .attr('width',  leftWidth < 0 ? 0 : leftWidth);\n\n              d3.select(this).select('.right')\n                .attr('x', x2(d[1]))\n                .attr('width', rightWidth < 0 ? 0 : rightWidth);\n            });\n      }\n\n\n      function onBrush() {\n        brushExtent = brush.empty() ? null : brush.extent();\n        extent = brush.empty() ? x2.domain() : brush.extent();\n\n\n        dispatch.brush({extent: extent, brush: brush});\n\n        updateBrushBG();\n\n\n        //------------------------------------------------------------\n        // Prepare Main (Focus) Bars and Lines\n        \n        bars\n        .width(availableWidth)\n        .height(availableHeight1)\n        .color(data.map(function(d,i) {\n          return d.color || color(d, i);\n        }).filter(function(d,i) { return !data[i].disabled && data[i].bar }));\n\n\n        lines\n        .width(availableWidth)\n        .height(availableHeight1)\n        .color(data.map(function(d,i) {\n          return d.color || color(d, i);\n        }).filter(function(d,i) { return !data[i].disabled && !data[i].bar }));\n\n        var focusBarsWrap = g.select('.nv-focus .nv-barsWrap')\n            .datum(!dataBars.length ? [{values:[]}] :\n              dataBars\n                .map(function(d,i) {\n                  return {\n                    key: d.key,\n                    values: d.values.filter(function(d,i) {\n                      return bars.x()(d,i) >= extent[0] && bars.x()(d,i) <= extent[1];\n                    })\n                  }\n                })\n            );\n        \n        var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n            .datum(dataLines[0].disabled ? [{values:[]}] :\n              dataLines\n                .map(function(d,i) {\n                  return {\n                    key: d.key,\n                    values: d.values.filter(function(d,i) {\n                      return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n                    })\n                  }\n                })\n             );\n                 \n        //------------------------------------------------------------\n        \n        \n        //------------------------------------------------------------\n        // Update Main (Focus) X Axis\n\n        if (dataBars.length) {\n            x = bars.xScale();\n        } else {\n            x = lines.xScale();\n        }\n        \n        xAxis\n        .scale(x)\n        .ticks( availableWidth / 100 )\n        .tickSize(-availableHeight1, 0);\n\n        xAxis.domain([Math.ceil(extent[0]), Math.floor(extent[1])]);\n        \n        g.select('.nv-x.nv-axis')\n          .call(xAxis);\n        //------------------------------------------------------------\n        \n        \n        //------------------------------------------------------------\n        // Update Main (Focus) Bars and Lines\n\n        focusBarsWrap.call(bars);\n        focusLinesWrap.call(lines);\n        \n        //------------------------------------------------------------\n        \n          \n        //------------------------------------------------------------\n        // Setup and Update Main (Focus) Y Axes\n        \n        g.select('.nv-focus .nv-x.nv-axis')\n          .attr('transform', 'translate(0,' + y1.range()[0] + ')');\n\n\n        y1Axis\n        .scale(y1)\n        .ticks( availableHeight1 / 36 )\n        .tickSize(-availableWidth, 0);\n\n        g.select('.nv-focus .nv-y1.nv-axis')\n          .style('opacity', dataBars.length ? 1 : 0);\n\n\n        y2Axis\n        .scale(y2)\n        .ticks( availableHeight1 / 36 )\n        .tickSize(dataBars.length ? 0 : -availableWidth, 0); // Show the y2 rules only if y1 has none\n\n        g.select('.nv-focus .nv-y2.nv-axis')\n          .style('opacity', dataLines.length ? 1 : 0)\n          .attr('transform', 'translate(' + x.range()[1] + ',0)');\n\n        g.select('.nv-focus .nv-y1.nv-axis')\n            .call(y1Axis);\n        g.select('.nv-focus .nv-y2.nv-axis')\n            .call(y2Axis);\n      }\n\n      //============================================================\n\n      onBrush();\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  lines.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  lines.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  bars.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  bars.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.dispatch = dispatch;\n  chart.legend = legend;\n  chart.lines = lines;\n  chart.lines2 = lines2;\n  chart.bars = bars;\n  chart.bars2 = bars2;\n  chart.xAxis = xAxis;\n  chart.x2Axis = x2Axis;\n  chart.y1Axis = y1Axis;\n  chart.y2Axis = y2Axis;\n  chart.y3Axis = y3Axis;\n  chart.y4Axis = y4Axis;\n\n  d3.rebind(chart, lines, 'defined', 'size', 'clipVoronoi', 'interpolate');\n  //TODO: consider rebinding x, y and some other stuff, and simply do soemthign lile bars.x(lines.x()), etc.\n  //d3.rebind(chart, lines, 'x', 'y', 'size', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi', 'id');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  chart.x = function(_) {\n    if (!arguments.length) return getX;\n    getX = _;\n    lines.x(_);\n    bars.x(_);\n    return chart;\n  };\n\n  chart.y = function(_) {\n    if (!arguments.length) return getY;\n    getY = _;\n    lines.y(_);\n    bars.y(_);\n    return chart;\n  };\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    legend.color(color);\n    return chart;\n  };\n\n  chart.showLegend = function(_) {\n    if (!arguments.length) return showLegend;\n    showLegend = _;\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  chart.brushExtent = function(_) {\n    if (!arguments.length) return brushExtent;\n    brushExtent = _;\n    return chart;\n  };\n\n\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.multiBar = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n    , width = 960\n    , height = 500\n    , x = d3.scale.ordinal()\n    , y = d3.scale.linear()\n    , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n    , getX = function(d) { return d.x }\n    , getY = function(d) { return d.y }\n    , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n    , clipEdge = true\n    , stacked = false\n    , stackOffset = 'zero' // options include 'silhouette', 'wiggle', 'expand', 'zero', or a custom function\n    , color = nv.utils.defaultColor()\n    , hideable = false\n    , barColor = null // adding the ability to set the color for each rather than the whole group\n    , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled\n    , delay = 1200\n    , xDomain\n    , yDomain\n    , xRange\n    , yRange\n    , groupSpacing = 0.1\n    , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout')\n    ;\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var x0, y0 //used to store previous scales\n      ;\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var availableWidth = width - margin.left - margin.right,\n          availableHeight = height - margin.top - margin.bottom,\n          container = d3.select(this);\n\n      if(hideable && data.length) hideable = [{\n        values: data[0].values.map(function(d) {\n        return {\n          x: d.x,\n          y: 0,\n          series: d.series,\n          size: 0.01\n        };}\n      )}];\n\n      if (stacked)\n        data = d3.layout.stack()\n                 .offset(stackOffset)\n                 .values(function(d){ return d.values })\n                 .y(getY)\n                 (!data.length && hideable ? hideable : data);\n\n\n      //add series index to each data point for reference\n      data.forEach(function(series, i) {\n        series.values.forEach(function(point) {\n          point.series = i;\n        });\n      });\n\n\n      //------------------------------------------------------------\n      // HACK for negative value stacking\n      if (stacked)\n        data[0].values.map(function(d,i) {\n          var posBase = 0, negBase = 0;\n          data.map(function(d) {\n            var f = d.values[i]\n            f.size = Math.abs(f.y);\n            if (f.y<0)  {\n              f.y1 = negBase;\n              negBase = negBase - f.size;\n            } else\n            {\n              f.y1 = f.size + posBase;\n              posBase = posBase + f.size;\n            }\n          });\n        });\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      // remap and flatten the data for use in calculating the scales' domains\n      var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n            data.map(function(d) {\n              return d.values.map(function(d,i) {\n                return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1 }\n              })\n            });\n\n      x   .domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n          .rangeBands(xRange || [0, availableWidth], groupSpacing);\n\n      //y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return d.y + (stacked ? d.y1 : 0) }).concat(forceY)))\n      y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return stacked ? (d.y > 0 ? d.y1 : d.y1 + d.y ) : d.y }).concat(forceY)))\n          .range(yRange || [availableHeight, 0]);\n\n      // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n      if (x.domain()[0] === x.domain()[1])\n        x.domain()[0] ?\n            x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n          : x.domain([-1,1]);\n\n      if (y.domain()[0] === y.domain()[1])\n        y.domain()[0] ?\n            y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n          : y.domain([-1,1]);\n\n\n      x0 = x0 || x;\n      y0 = y0 || y;\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-multibar').data([data]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibar');\n      var defsEnter = wrapEnter.append('defs');\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g')\n\n      gEnter.append('g').attr('class', 'nv-groups');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      //------------------------------------------------------------\n\n\n\n      defsEnter.append('clipPath')\n          .attr('id', 'nv-edge-clip-' + id)\n        .append('rect');\n      wrap.select('#nv-edge-clip-' + id + ' rect')\n          .attr('width', availableWidth)\n          .attr('height', availableHeight);\n\n      g   .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n\n\n      var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n          .data(function(d) { return d }, function(d,i) { return i });\n      groups.enter().append('g')\n          .style('stroke-opacity', 1e-6)\n          .style('fill-opacity', 1e-6);\n      groups.exit()\n        .selectAll('rect.nv-bar')\n          .attr('y', function(d) { return stacked ? y0(d.y0) : y0(0) })\n          .attr('height', 0)\n          .remove();\n      groups\n          .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n          .classed('hover', function(d) { return d.hover })\n          .style('fill', function(d,i){ return color(d, i) })\n          .style('stroke', function(d,i){ return color(d, i) });\n      groups\n          .style('stroke-opacity', 1)\n          .style('fill-opacity', .75);\n\n\n      var bars = groups.selectAll('rect.nv-bar')\n          .data(function(d) { return (hideable && !data.length) ? hideable.values : d.values });\n\n      bars.exit().remove();\n\n\n      var barsEnter = bars.enter().append('rect')\n          .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n          .attr('x', function(d,i,j) {\n              return stacked ? 0 : (j * x.rangeBand() / data.length )\n          })\n          .attr('y', function(d) { return y0(stacked ? d.y0 : 0) })\n          .attr('height', 0)\n          .attr('width', x.rangeBand() / (stacked ? 1 : data.length) )\n          .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })\n          ;\n      bars\n          .style('fill', function(d,i,j){ return color(d, j, i);  })\n          .style('stroke', function(d,i,j){ return color(d, j, i); })\n          .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n            d3.select(this).classed('hover', true);\n            dispatch.elementMouseover({\n              value: getY(d,i),\n              point: d,\n              series: data[d.series],\n              pos: [x(getX(d,i)) + (x.rangeBand() * (stacked ? data.length / 2 : d.series + .5) / data.length), y(getY(d,i) + (stacked ? d.y0 : 0))],  // TODO: Figure out why the value appears to be shifted\n              pointIndex: i,\n              seriesIndex: d.series,\n              e: d3.event\n            });\n          })\n          .on('mouseout', function(d,i) {\n            d3.select(this).classed('hover', false);\n            dispatch.elementMouseout({\n              value: getY(d,i),\n              point: d,\n              series: data[d.series],\n              pointIndex: i,\n              seriesIndex: d.series,\n              e: d3.event\n            });\n          })\n          .on('click', function(d,i) {\n            dispatch.elementClick({\n              value: getY(d,i),\n              point: d,\n              series: data[d.series],\n              pos: [x(getX(d,i)) + (x.rangeBand() * (stacked ? data.length / 2 : d.series + .5) / data.length), y(getY(d,i) + (stacked ? d.y0 : 0))],  // TODO: Figure out why the value appears to be shifted\n              pointIndex: i,\n              seriesIndex: d.series,\n              e: d3.event\n            });\n            d3.event.stopPropagation();\n          })\n          .on('dblclick', function(d,i) {\n            dispatch.elementDblClick({\n              value: getY(d,i),\n              point: d,\n              series: data[d.series],\n              pos: [x(getX(d,i)) + (x.rangeBand() * (stacked ? data.length / 2 : d.series + .5) / data.length), y(getY(d,i) + (stacked ? d.y0 : 0))],  // TODO: Figure out why the value appears to be shifted\n              pointIndex: i,\n              seriesIndex: d.series,\n              e: d3.event\n            });\n            d3.event.stopPropagation();\n          });\n      bars\n          .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n          \n          .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })\n\n      if (barColor) {\n        if (!disabled) disabled = data.map(function() { return true });\n        bars\n          .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })\n          .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });\n      }\n\n\n      if (stacked)\n          bars\n            .attr('y', function(d,i) {\n\n              return y((stacked ? d.y1 : 0));\n            })\n            .attr('height', function(d,i) {\n              return Math.max(Math.abs(y(d.y + (stacked ? d.y0 : 0)) - y((stacked ? d.y0 : 0))),1);\n            })\n            .attr('x', function(d,i) {\n                  return stacked ? 0 : (d.series * x.rangeBand() / data.length )\n            })\n            .attr('width', x.rangeBand() / (stacked ? 1 : data.length) );\n      else\n          bars\n            .attr('x', function(d,i) {\n              return d.series * x.rangeBand() / data.length\n            })\n            .attr('width', x.rangeBand() / data.length)\n            .attr('y', function(d,i) {\n                return getY(d,i) < 0 ?\n                        y(0) :\n                        y(0) - y(getY(d,i)) < 1 ?\n                          y(0) - 1 :\n                        y(getY(d,i)) || 0;\n            })\n            .attr('height', function(d,i) {\n                return Math.max(Math.abs(y(getY(d,i)) - y(0)),1) || 0;\n            });\n\n\n\n      //store old scales for use in transitions on update\n      x0 = x.copy();\n      y0 = y.copy();\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  chart.dispatch = dispatch;\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.x = function(_) {\n    if (!arguments.length) return getX;\n    getX = _;\n    return chart;\n  };\n\n  chart.y = function(_) {\n    if (!arguments.length) return getY;\n    getY = _;\n    return chart;\n  };\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.xScale = function(_) {\n    if (!arguments.length) return x;\n    x = _;\n    return chart;\n  };\n\n  chart.yScale = function(_) {\n    if (!arguments.length) return y;\n    y = _;\n    return chart;\n  };\n\n  chart.xDomain = function(_) {\n    if (!arguments.length) return xDomain;\n    xDomain = _;\n    return chart;\n  };\n\n  chart.yDomain = function(_) {\n    if (!arguments.length) return yDomain;\n    yDomain = _;\n    return chart;\n  };\n\n  chart.xRange = function(_) {\n    if (!arguments.length) return xRange;\n    xRange = _;\n    return chart;\n  };\n\n  chart.yRange = function(_) {\n    if (!arguments.length) return yRange;\n    yRange = _;\n    return chart;\n  };\n\n  chart.forceY = function(_) {\n    if (!arguments.length) return forceY;\n    forceY = _;\n    return chart;\n  };\n\n  chart.stacked = function(_) {\n    if (!arguments.length) return stacked;\n    stacked = _;\n    return chart;\n  };\n\n  chart.stackOffset = function(_) {\n    if (!arguments.length) return stackOffset;\n    stackOffset = _;\n    return chart;\n  };\n\n  chart.clipEdge = function(_) {\n    if (!arguments.length) return clipEdge;\n    clipEdge = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    return chart;\n  };\n\n  chart.barColor = function(_) {\n    if (!arguments.length) return barColor;\n    barColor = nv.utils.getColor(_);\n    return chart;\n  };\n\n  chart.disabled = function(_) {\n    if (!arguments.length) return disabled;\n    disabled = _;\n    return chart;\n  };\n\n  chart.id = function(_) {\n    if (!arguments.length) return id;\n    id = _;\n    return chart;\n  };\n\n  chart.hideable = function(_) {\n    if (!arguments.length) return hideable;\n    hideable = _;\n    return chart;\n  };\n\n  chart.delay = function(_) {\n    if (!arguments.length) return delay;\n    delay = _;\n    return chart;\n  };\n\n  chart.groupSpacing = function(_) {\n    if (!arguments.length) return groupSpacing;\n    groupSpacing = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.multiBarChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var multibar = nv.models.multiBar()\n    , xAxis = nv.models.axis()\n    , yAxis = nv.models.axis()\n    , legend = nv.models.legend()\n    , controls = nv.models.legend()\n    ;\n\n  var margin = {top: 30, right: 20, bottom: 50, left: 60}\n    , width = null\n    , height = null\n    , color = nv.utils.defaultColor()\n    , showControls = true\n    , showLegend = true\n    , showXAxis = true\n    , showYAxis = true\n    , rightAlignYAxis = false\n    , reduceXTicks = true // if false a tick will show for every data point\n    , staggerLabels = false\n    , rotateLabels = 0\n    , tooltips = true\n    , tooltip = function(key, x, y, e, graph) {\n        return '<h3>' + key + '</h3>' +\n               '<p>' +  y + ' on ' + x + '</p>'\n      }\n    , x //can be accessed via chart.xScale()\n    , y //can be accessed via chart.yScale()\n    , state = { stacked: false }\n    , defaultState = null\n    , noData = \"No Data Available.\"\n    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n    , controlWidth = function() { return showControls ? 180 : 0 }\n    , transitionDuration = 0\n    ;\n\n  multibar\n    .stacked(false)\n    ;\n  xAxis\n    .orient('bottom')\n    .tickPadding(7)\n    .highlightZero(true)\n    .showMaxMin(false)\n    .tickFormat(function(d) { return d })\n    ;\n  yAxis\n    .orient((rightAlignYAxis) ? 'right' : 'left')\n    .tickFormat(d3.format(',.1f'))\n    ;\n\n  controls.updateState(false);\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var showTooltip = function(e, offsetElement) {\n    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n        x = xAxis.tickFormat()(multibar.x()(e.point, e.pointIndex)),\n        y = yAxis.tickFormat()(multibar.y()(e.point, e.pointIndex)),\n        content = tooltip(e.series.key, x, y, e, chart);\n\n    nv.tooltip.show([left, top], content, e.value < 0 ? 'n' : 's', null, offsetElement);\n  };\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this),\n          that = this;\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n\n      chart.update = function() { container.call(chart) };\n      chart.container = this;\n\n      //set state.disabled\n      state.disabled = data.map(function(d) { return !!d.disabled });\n\n      if (!defaultState) {\n        var key;\n        defaultState = {};\n        for (key in state) {\n          if (state[key] instanceof Array)\n            defaultState[key] = state[key].slice(0);\n          else\n            defaultState[key] = state[key];\n        }\n      }\n      //------------------------------------------------------------\n      // Display noData message if there's nothing to show.\n\n      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', margin.top + availableHeight / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x = multibar.xScale();\n      y = multibar.yScale();\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-multiBarWithLegend').data([data]);\n      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarWithLegend').append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-x nv-axis');\n      gEnter.append('g').attr('class', 'nv-y nv-axis');\n      gEnter.append('g').attr('class', 'nv-barsWrap');\n      gEnter.append('g').attr('class', 'nv-legendWrap');\n      gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Legend\n\n      if (showLegend) {\n        legend.width(availableWidth - controlWidth());\n\n        if (multibar.barColor())\n          data.forEach(function(series,i) {\n            series.color = d3.rgb('#ccc').darker(i * 1.5).toString();\n          })\n\n        g.select('.nv-legendWrap')\n            .datum(data)\n            .call(legend);\n\n        if ( margin.top != legend.height()) {\n          margin.top = legend.height();\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n        }\n\n        g.select('.nv-legendWrap')\n            .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Controls\n\n      if (showControls) {\n        var controlsData = [\n          { key: 'Grouped', disabled: multibar.stacked() },\n          { key: 'Stacked', disabled: !multibar.stacked() }\n        ];\n\n        controls.width(controlWidth()).color(['#444', '#444', '#444']);\n        g.select('.nv-controlsWrap')\n            .datum(controlsData)\n            .attr('transform', 'translate(0,' + (-margin.top) +')')\n            .call(controls);\n      }\n\n      //------------------------------------------------------------\n\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      if (rightAlignYAxis) {\n          g.select(\".nv-y.nv-axis\")\n              .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n      }\n\n      //------------------------------------------------------------\n      // Main Chart Component(s)\n\n      multibar\n        .disabled(data.map(function(series) { return series.disabled }))\n        .width(availableWidth)\n        .height(availableHeight)\n        .color(data.map(function(d,i) {\n          return d.color || color(d, i);\n        }).filter(function(d,i) { return !data[i].disabled }))\n\n\n      var barsWrap = g.select('.nv-barsWrap')\n          .datum(data.filter(function(d) { return !d.disabled }))\n\n      barsWrap.call(multibar);\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Axes\n\n      if (showXAxis) {\n          xAxis\n            .scale(x)\n            .ticks( availableWidth / 100 )\n            .tickSize(-availableHeight, 0);\n\n          g.select('.nv-x.nv-axis')\n              .attr('transform', 'translate(0,' + y.range()[0] + ')');\n          g.select('.nv-x.nv-axis')\n              .call(xAxis);\n\n          var xTicks = g.select('.nv-x.nv-axis > g').selectAll('g');\n\n          xTicks\n              .selectAll('line, text')\n              .style('opacity', 1)\n\n          if (staggerLabels) {\n              var getTranslate = function(x,y) {\n                  return \"translate(\" + x + \",\" + y + \")\";\n              };\n\n              var staggerUp = 5, staggerDown = 17;  //pixels to stagger by\n              // Issue #140\n              xTicks\n                .selectAll(\"text\")\n                .attr('transform', function(d,i,j) { \n                    return  getTranslate(0, (j % 2 == 0 ? staggerUp : staggerDown));\n                  });\n\n              var totalInBetweenTicks = d3.selectAll(\".nv-x.nv-axis .nv-wrap g g text\")[0].length;\n              g.selectAll(\".nv-x.nv-axis .nv-axisMaxMin text\")\n                .attr(\"transform\", function(d,i) {\n                    return getTranslate(0, (i === 0 || totalInBetweenTicks % 2 !== 0) ? staggerDown : staggerUp);\n                });\n          }\n\n          if (reduceXTicks)\n            xTicks\n              .filter(function(d,i) {\n                  return i % Math.ceil(data[0].values.length / (availableWidth / 100)) !== 0;\n                })\n              .selectAll('text, line')\n              .style('opacity', 0);\n\n          if(rotateLabels)\n            xTicks\n              .selectAll('.tick text')\n              .attr('transform', 'rotate(' + rotateLabels + ' 0,0)')\n              .style('text-anchor', rotateLabels > 0 ? 'start' : 'end');\n          \n          g.select('.nv-x.nv-axis').selectAll('g.nv-axisMaxMin text')\n              .style('opacity', 1);\n      }\n\n\n      if (showYAxis) {      \n          yAxis\n            .scale(y)\n            .ticks( availableHeight / 36 )\n            .tickSize( -availableWidth, 0);\n\n          g.select('.nv-y.nv-axis')\n              .call(yAxis);\n      }\n\n\n      //------------------------------------------------------------\n\n\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n      legend.dispatch.on('stateChange', function(newState) { \n        state = newState;\n        dispatch.stateChange(state);\n        chart.update();\n      });\n\n      controls.dispatch.on('legendClick', function(d,i) {\n        if (!d.disabled) return;\n        controlsData = controlsData.map(function(s) {\n          s.disabled = true;\n          return s;\n        });\n        d.disabled = false;\n\n        switch (d.key) {\n          case 'Grouped':\n            multibar.stacked(false);\n            break;\n          case 'Stacked':\n            multibar.stacked(true);\n            break;\n        }\n\n        state.stacked = multibar.stacked();\n        dispatch.stateChange(state);\n\n        chart.update();\n      });\n\n      dispatch.on('tooltipShow', function(e) {\n        if (tooltips) showTooltip(e, that.parentNode)\n      });\n\n      // Update chart from a state object passed to event handler\n      dispatch.on('changeState', function(e) {\n\n        if (typeof e.disabled !== 'undefined') {\n          data.forEach(function(series,i) {\n            series.disabled = e.disabled[i];\n          });\n\n          state.disabled = e.disabled;\n        }\n\n        if (typeof e.stacked !== 'undefined') {\n          multibar.stacked(e.stacked);\n          state.stacked = e.stacked;\n        }\n\n        chart.update();\n      });\n\n      //============================================================\n\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  multibar.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  multibar.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.dispatch = dispatch;\n  chart.multibar = multibar;\n  chart.legend = legend;\n  chart.xAxis = xAxis;\n  chart.yAxis = yAxis;\n\n  d3.rebind(chart, multibar, 'x', 'y', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'clipEdge',\n   'id', 'stacked', 'stackOffset', 'delay', 'barColor','groupSpacing');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    legend.color(color);\n    return chart;\n  };\n\n  chart.showControls = function(_) {\n    if (!arguments.length) return showControls;\n    showControls = _;\n    return chart;\n  };\n\n  chart.showLegend = function(_) {\n    if (!arguments.length) return showLegend;\n    showLegend = _;\n    return chart;\n  };\n\n  chart.showXAxis = function(_) {\n    if (!arguments.length) return showXAxis;\n    showXAxis = _;\n    return chart;\n  };\n\n  chart.showYAxis = function(_) {\n    if (!arguments.length) return showYAxis;\n    showYAxis = _;\n    return chart;\n  };\n\n  chart.rightAlignYAxis = function(_) {\n    if(!arguments.length) return rightAlignYAxis;\n    rightAlignYAxis = _;\n    yAxis.orient( (_) ? 'right' : 'left');\n    return chart;\n  };\n\n  chart.reduceXTicks= function(_) {\n    if (!arguments.length) return reduceXTicks;\n    reduceXTicks = _;\n    return chart;\n  };\n\n  chart.rotateLabels = function(_) {\n    if (!arguments.length) return rotateLabels;\n    rotateLabels = _;\n    return chart;\n  }\n\n  chart.staggerLabels = function(_) {\n    if (!arguments.length) return staggerLabels;\n    staggerLabels = _;\n    return chart;\n  };\n\n  chart.tooltip = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.state = function(_) {\n    if (!arguments.length) return state;\n    state = _;\n    return chart;\n  };\n\n  chart.defaultState = function(_) {\n    if (!arguments.length) return defaultState;\n    defaultState = _;\n    return chart;\n  };\n  \n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  chart.transitionDuration = function(_) {\n    if (!arguments.length) return transitionDuration;\n    transitionDuration = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.multiBarHorizontal = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n    , width = 960\n    , height = 500\n    , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n    , x = d3.scale.ordinal()\n    , y = d3.scale.linear()\n    , getX = function(d) { return d.x }\n    , getY = function(d) { return d.y }\n    , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n    , color = nv.utils.defaultColor()\n    , barColor = null // adding the ability to set the color for each rather than the whole group\n    , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled\n    , stacked = false\n    , showValues = false\n    , showBarLabels = false\n    , valuePadding = 60\n    , valueFormat = d3.format(',.2f')\n    , delay = 1200\n    , xDomain\n    , yDomain\n    , xRange\n    , yRange\n    , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout')\n    ;\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var x0, y0 //used to store previous scales\n      ;\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var availableWidth = width - margin.left - margin.right,\n          availableHeight = height - margin.top - margin.bottom,\n          container = d3.select(this);\n\n\n      if (stacked)\n        data = d3.layout.stack()\n                 .offset('zero')\n                 .values(function(d){ return d.values })\n                 .y(getY)\n                 (data);\n\n\n      //add series index to each data point for reference\n      data.forEach(function(series, i) {\n        series.values.forEach(function(point) {\n          point.series = i;\n        });\n      });\n\n\n\n      //------------------------------------------------------------\n      // HACK for negative value stacking\n      if (stacked)\n        data[0].values.map(function(d,i) {\n          var posBase = 0, negBase = 0;\n          data.map(function(d) {\n            var f = d.values[i]\n            f.size = Math.abs(f.y);\n            if (f.y<0)  {\n              f.y1 = negBase - f.size;\n              negBase = negBase - f.size;\n            } else\n            {\n              f.y1 = posBase;\n              posBase = posBase + f.size;\n            }\n          });\n        });\n\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      // remap and flatten the data for use in calculating the scales' domains\n      var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n            data.map(function(d) {\n              return d.values.map(function(d,i) {\n                return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1 }\n              })\n            });\n\n      x   .domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n          .rangeBands(xRange || [0, availableHeight], .1);\n\n      //y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return d.y + (stacked ? d.y0 : 0) }).concat(forceY)))\n      y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return stacked ? (d.y > 0 ? d.y1 + d.y : d.y1 ) : d.y }).concat(forceY)))\n\n      if (showValues && !stacked)\n        y.range(yRange || [(y.domain()[0] < 0 ? valuePadding : 0), availableWidth - (y.domain()[1] > 0 ? valuePadding : 0) ]);\n      else\n        y.range(yRange || [0, availableWidth]);\n\n      x0 = x0 || x;\n      y0 = y0 || d3.scale.linear().domain(y.domain()).range([y(0),y(0)]);\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = d3.select(this).selectAll('g.nv-wrap.nv-multibarHorizontal').data([data]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibarHorizontal');\n      var defsEnter = wrapEnter.append('defs');\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-groups');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      //------------------------------------------------------------\n\n\n\n      var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n          .data(function(d) { return d }, function(d,i) { return i });\n      groups.enter().append('g')\n          .style('stroke-opacity', 1e-6)\n          .style('fill-opacity', 1e-6);\n      groups.exit()\n          .style('stroke-opacity', 1e-6)\n          .style('fill-opacity', 1e-6)\n          .remove();\n      groups\n          .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n          .classed('hover', function(d) { return d.hover })\n          .style('fill', function(d,i){ return color(d, i) })\n          .style('stroke', function(d,i){ return color(d, i) });\n      groups\n          .style('stroke-opacity', 1)\n          .style('fill-opacity', .75);\n\n\n      var bars = groups.selectAll('g.nv-bar')\n          .data(function(d) { return d.values });\n\n      bars.exit().remove();\n\n\n      var barsEnter = bars.enter().append('g')\n          .attr('transform', function(d,i,j) {\n              return 'translate(' + y0(stacked ? d.y0 : 0) + ',' + (stacked ? 0 : (j * x.rangeBand() / data.length ) + x(getX(d,i))) + ')'\n          });\n\n      barsEnter.append('rect')\n          .attr('width', 0)\n          .attr('height', x.rangeBand() / (stacked ? 1 : data.length) )\n\n      bars\n          .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n            d3.select(this).classed('hover', true);\n            dispatch.elementMouseover({\n              value: getY(d,i),\n              point: d,\n              series: data[d.series],\n              pos: [ y(getY(d,i) + (stacked ? d.y0 : 0)), x(getX(d,i)) + (x.rangeBand() * (stacked ? data.length / 2 : d.series + .5) / data.length) ],\n              pointIndex: i,\n              seriesIndex: d.series,\n              e: d3.event\n            });\n          })\n          .on('mouseout', function(d,i) {\n            d3.select(this).classed('hover', false);\n            dispatch.elementMouseout({\n              value: getY(d,i),\n              point: d,\n              series: data[d.series],\n              pointIndex: i,\n              seriesIndex: d.series,\n              e: d3.event\n            });\n          })\n          .on('click', function(d,i) {\n            dispatch.elementClick({\n              value: getY(d,i),\n              point: d,\n              series: data[d.series],\n              pos: [x(getX(d,i)) + (x.rangeBand() * (stacked ? data.length / 2 : d.series + .5) / data.length), y(getY(d,i) + (stacked ? d.y0 : 0))],  // TODO: Figure out why the value appears to be shifted\n              pointIndex: i,\n              seriesIndex: d.series,\n              e: d3.event\n            });\n            d3.event.stopPropagation();\n          })\n          .on('dblclick', function(d,i) {\n            dispatch.elementDblClick({\n              value: getY(d,i),\n              point: d,\n              series: data[d.series],\n              pos: [x(getX(d,i)) + (x.rangeBand() * (stacked ? data.length / 2 : d.series + .5) / data.length), y(getY(d,i) + (stacked ? d.y0 : 0))],  // TODO: Figure out why the value appears to be shifted\n              pointIndex: i,\n              seriesIndex: d.series,\n              e: d3.event\n            });\n            d3.event.stopPropagation();\n          });\n\n\n      barsEnter.append('text');\n\n      if (showValues && !stacked) {\n        bars.select('text')\n            .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'end' : 'start' })\n            .attr('y', x.rangeBand() / (data.length * 2))\n            .attr('dy', '.32em')\n            .text(function(d,i) { return valueFormat(getY(d,i)) })\n        bars\n          .select('text')\n            .attr('x', function(d,i) { return getY(d,i) < 0 ? -4 : y(getY(d,i)) - y(0) + 4 })\n      } else {\n        bars.selectAll('text').text('');\n      }\n\n      if (showBarLabels && !stacked) {\n        barsEnter.append('text').classed('nv-bar-label',true);\n        bars.select('text.nv-bar-label')\n            .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'start' : 'end' })\n            .attr('y', x.rangeBand() / (data.length * 2))\n            .attr('dy', '.32em')\n            .text(function(d,i) { return getX(d,i) });\n        bars\n          .select('text.nv-bar-label')\n            .attr('x', function(d,i) { return getY(d,i) < 0 ? y(0) - y(getY(d,i)) + 4 : -4 });\n      }\n      else {\n        bars.selectAll('text.nv-bar-label').text('');\n      }\n\n      bars\n          .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n\n      if (barColor) {\n        if (!disabled) disabled = data.map(function() { return true });\n        bars\n          .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })\n          .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });\n      }\n\n      if (stacked)\n        bars\n            .attr('transform', function(d,i) {\n              return 'translate(' + y(d.y1) + ',' + x(getX(d,i)) + ')'\n            })\n          .select('rect')\n            .attr('width', function(d,i) {\n              return Math.abs(y(getY(d,i) + d.y0) - y(d.y0))\n            })\n            .attr('height', x.rangeBand() );\n      else\n        bars\n            .attr('transform', function(d,i) {\n              //TODO: stacked must be all positive or all negative, not both?\n              return 'translate(' +\n              (getY(d,i) < 0 ? y(getY(d,i)) : y(0))\n              + ',' +\n              (d.series * x.rangeBand() / data.length\n              +\n              x(getX(d,i)) )\n              + ')'\n            })\n          .select('rect')\n            .attr('height', x.rangeBand() / data.length )\n            .attr('width', function(d,i) {\n              return Math.max(Math.abs(y(getY(d,i)) - y(0)),1)\n            });\n\n\n      //store old scales for use in transitions on update\n      x0 = x.copy();\n      y0 = y.copy();\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  chart.dispatch = dispatch;\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.x = function(_) {\n    if (!arguments.length) return getX;\n    getX = _;\n    return chart;\n  };\n\n  chart.y = function(_) {\n    if (!arguments.length) return getY;\n    getY = _;\n    return chart;\n  };\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.xScale = function(_) {\n    if (!arguments.length) return x;\n    x = _;\n    return chart;\n  };\n\n  chart.yScale = function(_) {\n    if (!arguments.length) return y;\n    y = _;\n    return chart;\n  };\n\n  chart.xDomain = function(_) {\n    if (!arguments.length) return xDomain;\n    xDomain = _;\n    return chart;\n  };\n\n  chart.yDomain = function(_) {\n    if (!arguments.length) return yDomain;\n    yDomain = _;\n    return chart;\n  };\n\n  chart.xRange = function(_) {\n    if (!arguments.length) return xRange;\n    xRange = _;\n    return chart;\n  };\n\n  chart.yRange = function(_) {\n    if (!arguments.length) return yRange;\n    yRange = _;\n    return chart;\n  };\n\n  chart.forceY = function(_) {\n    if (!arguments.length) return forceY;\n    forceY = _;\n    return chart;\n  };\n\n  chart.stacked = function(_) {\n    if (!arguments.length) return stacked;\n    stacked = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    return chart;\n  };\n\n  chart.barColor = function(_) {\n    if (!arguments.length) return barColor;\n    barColor = nv.utils.getColor(_);\n    return chart;\n  };\n\n  chart.disabled = function(_) {\n    if (!arguments.length) return disabled;\n    disabled = _;\n    return chart;\n  };\n\n  chart.id = function(_) {\n    if (!arguments.length) return id;\n    id = _;\n    return chart;\n  };\n\n  chart.delay = function(_) {\n    if (!arguments.length) return delay;\n    delay = _;\n    return chart;\n  };\n\n  chart.showValues = function(_) {\n    if (!arguments.length) return showValues;\n    showValues = _;\n    return chart;\n  };\n\n  chart.showBarLabels = function(_) {\n    if (!arguments.length) return showBarLabels;\n    showBarLabels = _;\n    return chart;\n  };\n\n\n  chart.valueFormat= function(_) {\n    if (!arguments.length) return valueFormat;\n    valueFormat = _;\n    return chart;\n  };\n\n  chart.valuePadding = function(_) {\n    if (!arguments.length) return valuePadding;\n    valuePadding = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.multiBarHorizontalChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var multibar = nv.models.multiBarHorizontal()\n    , xAxis = nv.models.axis()\n    , yAxis = nv.models.axis()\n    , legend = nv.models.legend().height(30)\n    , controls = nv.models.legend().height(30)\n    ;\n\n  var margin = {top: 30, right: 20, bottom: 50, left: 60}\n    , width = null\n    , height = null\n    , color = nv.utils.defaultColor()\n    , showControls = true\n    , showLegend = true\n    , showXAxis = true\n    , showYAxis = true\n    , stacked = false\n    , tooltips = true\n    , tooltip = function(key, x, y, e, graph) {\n        return '<h3>' + key + ' - ' + x + '</h3>' +\n               '<p>' +  y + '</p>'\n      }\n    , x //can be accessed via chart.xScale()\n    , y //can be accessed via chart.yScale()\n    , state = { stacked: stacked }\n    , defaultState = null\n    , noData = 'No Data Available.'\n    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n    , controlWidth = function() { return showControls ? 180 : 0 }\n    , transitionDuration = 0\n    ;\n\n  multibar\n    .stacked(stacked)\n    ;\n  xAxis\n    .orient('left')\n    .tickPadding(5)\n    .highlightZero(false)\n    .showMaxMin(false)\n    .tickFormat(function(d) { return d })\n    ;\n  yAxis\n    .orient('bottom')\n    .tickFormat(d3.format(',.1f'))\n    ;\n\n  controls.updateState(false);\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var showTooltip = function(e, offsetElement) {\n    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n        x = xAxis.tickFormat()(multibar.x()(e.point, e.pointIndex)),\n        y = yAxis.tickFormat()(multibar.y()(e.point, e.pointIndex)),\n        content = tooltip(e.series.key, x, y, e, chart);\n\n    nv.tooltip.show([left, top], content, e.value < 0 ? 'e' : 'w', null, offsetElement);\n  };\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this),\n          that = this;\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n\n      chart.update = function() { container.call(chart) };\n      chart.container = this;\n\n      //set state.disabled\n      state.disabled = data.map(function(d) { return !!d.disabled });\n\n      if (!defaultState) {\n        var key;\n        defaultState = {};\n        for (key in state) {\n          if (state[key] instanceof Array)\n            defaultState[key] = state[key].slice(0);\n          else\n            defaultState[key] = state[key];\n        }\n      }\n\n      //------------------------------------------------------------\n      // Display No Data message if there's nothing to show.\n\n      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', margin.top + availableHeight / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x = multibar.xScale();\n      y = multibar.yScale();\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-multiBarHorizontalChart').data([data]);\n      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarHorizontalChart').append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-x nv-axis');\n      gEnter.append('g').attr('class', 'nv-y nv-axis')\n            .append('g').attr('class', 'nv-zeroLine')\n            .append('line');\n      gEnter.append('g').attr('class', 'nv-barsWrap');\n      gEnter.append('g').attr('class', 'nv-legendWrap');\n      gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Legend\n\n      if (showLegend) {\n        legend.width(availableWidth - controlWidth());\n\n        if (multibar.barColor())\n          data.forEach(function(series,i) {\n            series.color = d3.rgb('#ccc').darker(i * 1.5).toString();\n          })\n\n        g.select('.nv-legendWrap')\n            .datum(data)\n            .call(legend);\n\n        if ( margin.top != legend.height()) {\n          margin.top = legend.height();\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n        }\n\n        g.select('.nv-legendWrap')\n            .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Controls\n\n      if (showControls) {\n        var controlsData = [\n          { key: 'Grouped', disabled: multibar.stacked() },\n          { key: 'Stacked', disabled: !multibar.stacked() }\n        ];\n\n        controls.width(controlWidth()).color(['#444', '#444', '#444']);\n        g.select('.nv-controlsWrap')\n            .datum(controlsData)\n            .attr('transform', 'translate(0,' + (-margin.top) +')')\n            .call(controls);\n      }\n\n      //------------------------------------------------------------\n\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\n      //------------------------------------------------------------\n      // Main Chart Component(s)\n\n      multibar\n        .disabled(data.map(function(series) { return series.disabled }))\n        .width(availableWidth)\n        .height(availableHeight)\n        .color(data.map(function(d,i) {\n          return d.color || color(d, i);\n        }).filter(function(d,i) { return !data[i].disabled }))\n\n\n      var barsWrap = g.select('.nv-barsWrap')\n          .datum(data.filter(function(d) { return !d.disabled }))\n\n      barsWrap.call(multibar);\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Axes\n\n      if (showXAxis) {\n          xAxis\n            .scale(x)\n            .ticks( availableHeight / 24 )\n            .tickSize(-availableWidth, 0);\n\n          g.select('.nv-x.nv-axis')\n              .call(xAxis);\n\n          var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n\n          xTicks\n              .selectAll('line, text');\n      }\n\n      if (showYAxis) {\n          yAxis\n            .scale(y)\n            .ticks( availableWidth / 100 )\n            .tickSize( -availableHeight, 0);\n\n          g.select('.nv-y.nv-axis')\n              .attr('transform', 'translate(0,' + availableHeight + ')');\n          g.select('.nv-y.nv-axis')\n              .call(yAxis);\n      }\n\n      // Zero line\n      g.select(\".nv-zeroLine line\")\n        .attr(\"x1\", y(0))\n        .attr(\"x2\", y(0))\n        .attr(\"y1\", 0)\n        .attr(\"y2\", -availableHeight)\n        ;\n\n      //------------------------------------------------------------\n\n\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n      legend.dispatch.on('stateChange', function(newState) {\n        state = newState;\n        dispatch.stateChange(state);\n        chart.update();\n      });\n\n      controls.dispatch.on('legendClick', function(d,i) {\n        if (!d.disabled) return;\n        controlsData = controlsData.map(function(s) {\n          s.disabled = true;\n          return s;\n        });\n        d.disabled = false;\n\n        switch (d.key) {\n          case 'Grouped':\n            multibar.stacked(false);\n            break;\n          case 'Stacked':\n            multibar.stacked(true);\n            break;\n        }\n\n        state.stacked = multibar.stacked();\n        dispatch.stateChange(state);\n\n        chart.update();\n      });\n\n      dispatch.on('tooltipShow', function(e) {\n        if (tooltips) showTooltip(e, that.parentNode);\n      });\n\n      // Update chart from a state object passed to event handler\n      dispatch.on('changeState', function(e) {\n\n        if (typeof e.disabled !== 'undefined') {\n          data.forEach(function(series,i) {\n            series.disabled = e.disabled[i];\n          });\n\n          state.disabled = e.disabled;\n        }\n\n        if (typeof e.stacked !== 'undefined') {\n          multibar.stacked(e.stacked);\n          state.stacked = e.stacked;\n        }\n\n        chart.update();\n      });\n      //============================================================\n\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  multibar.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  multibar.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.dispatch = dispatch;\n  chart.multibar = multibar;\n  chart.legend = legend;\n  chart.xAxis = xAxis;\n  chart.yAxis = yAxis;\n\n  d3.rebind(chart, multibar, 'x', 'y', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY',\n    'clipEdge', 'id', 'delay', 'showValues','showBarLabels', 'valueFormat', 'stacked', 'barColor');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    legend.color(color);\n    return chart;\n  };\n\n  chart.showControls = function(_) {\n    if (!arguments.length) return showControls;\n    showControls = _;\n    return chart;\n  };\n\n  chart.showLegend = function(_) {\n    if (!arguments.length) return showLegend;\n    showLegend = _;\n    return chart;\n  };\n\n  chart.showXAxis = function(_) {\n    if (!arguments.length) return showXAxis;\n    showXAxis = _;\n    return chart;\n  };\n\n  chart.showYAxis = function(_) {\n    if (!arguments.length) return showYAxis;\n    showYAxis = _;\n    return chart;\n  };\n\n  chart.tooltip = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.state = function(_) {\n    if (!arguments.length) return state;\n    state = _;\n    return chart;\n  };\n\n  chart.defaultState = function(_) {\n    if (!arguments.length) return defaultState;\n    defaultState = _;\n    return chart;\n  };\n\n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  chart.transitionDuration = function(_) {\n    if (!arguments.length) return transitionDuration;\n    transitionDuration = _;\n    return chart;\n  };\n  //============================================================\n\n\n  return chart;\n}\nnv.models.multiChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var margin = {top: 30, right: 20, bottom: 50, left: 60},\n      color = d3.scale.category20().range(),\n      width = null, \n      height = null,\n      showLegend = true,\n      tooltips = true,\n      tooltip = function(key, x, y, e, graph) {\n        return '<h3>' + key + '</h3>' +\n               '<p>' +  y + ' at ' + x + '</p>'\n      },\n      x,\n      y,\n      yDomain1,\n      yDomain2\n      ; //can be accessed via chart.lines.[x/y]Scale()\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var x = d3.scale.linear(),\n      yScale1 = d3.scale.linear(),\n      yScale2 = d3.scale.linear(),\n\n      lines1 = nv.models.line().yScale(yScale1),\n      lines2 = nv.models.line().yScale(yScale2),\n\n      bars1 = nv.models.multiBar().stacked(false).yScale(yScale1),\n      bars2 = nv.models.multiBar().stacked(false).yScale(yScale2),\n\n      stack1 = nv.models.stackedArea().yScale(yScale1),\n      stack2 = nv.models.stackedArea().yScale(yScale2),\n\n      xAxis = nv.models.axis().scale(x).orient('bottom').tickPadding(5),\n      yAxis1 = nv.models.axis().scale(yScale1).orient('left'),\n      yAxis2 = nv.models.axis().scale(yScale2).orient('right'),\n\n      legend = nv.models.legend().height(30),\n      dispatch = d3.dispatch('tooltipShow', 'tooltipHide');\n\n  var showTooltip = function(e, offsetElement) {\n    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n        x = xAxis.tickFormat()(lines1.x()(e.point, e.pointIndex)),\n        y = ((e.series.yAxis == 2) ? yAxis2 : yAxis1).tickFormat()(lines1.y()(e.point, e.pointIndex)),\n        content = tooltip(e.series.key, x, y, e, chart);\n\n    nv.tooltip.show([left, top], content, undefined, undefined, offsetElement.offsetParent);\n  };\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this),\n          that = this;\n\n      chart.update = function() { container.call(chart); };\n      chart.container = this;\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n\n      var dataLines1 = data.filter(function(d) {return !d.disabled && d.type == 'line' && d.yAxis == 1})\n      var dataLines2 = data.filter(function(d) {return !d.disabled && d.type == 'line' && d.yAxis == 2})\n      var dataBars1 = data.filter(function(d) {return !d.disabled && d.type == 'bar' && d.yAxis == 1})\n      var dataBars2 = data.filter(function(d) {return !d.disabled && d.type == 'bar' && d.yAxis == 2})\n      var dataStack1 = data.filter(function(d) {return !d.disabled && d.type == 'area' && d.yAxis == 1})\n      var dataStack2 = data.filter(function(d) {return !d.disabled && d.type == 'area' && d.yAxis == 2})\n\n      var series1 = data.filter(function(d) {return !d.disabled && d.yAxis == 1})\n            .map(function(d) {\n              return d.values.map(function(d,i) {\n                return { x: d.x, y: d.y }\n              })\n            })\n\n      var series2 = data.filter(function(d) {return !d.disabled && d.yAxis == 2})\n            .map(function(d) {\n              return d.values.map(function(d,i) {\n                return { x: d.x, y: d.y }\n              })\n            })\n\n      x   .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x } ))\n          .range([0, availableWidth]);\n\n      var wrap = container.selectAll('g.wrap.multiChart').data([data]);\n      var gEnter = wrap.enter().append('g').attr('class', 'wrap nvd3 multiChart').append('g');\n\n      gEnter.append('g').attr('class', 'x axis');\n      gEnter.append('g').attr('class', 'y1 axis');\n      gEnter.append('g').attr('class', 'y2 axis');\n      gEnter.append('g').attr('class', 'lines1Wrap');\n      gEnter.append('g').attr('class', 'lines2Wrap');\n      gEnter.append('g').attr('class', 'bars1Wrap');\n      gEnter.append('g').attr('class', 'bars2Wrap');\n      gEnter.append('g').attr('class', 'stack1Wrap');\n      gEnter.append('g').attr('class', 'stack2Wrap');\n      gEnter.append('g').attr('class', 'legendWrap');\n\n      var g = wrap.select('g');\n\n      if (showLegend) {\n        legend.width( availableWidth / 2 );\n\n        g.select('.legendWrap')\n            .datum(data.map(function(series) { \n              series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n              series.key = series.originalKey + (series.yAxis == 1 ? '' : ' (right axis)');\n              return series;\n            }))\n          .call(legend);\n\n        if ( margin.top != legend.height()) {\n          margin.top = legend.height();\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n        }\n\n        g.select('.legendWrap')\n            .attr('transform', 'translate(' + ( availableWidth / 2 ) + ',' + (-margin.top) +')');\n      }\n\n\n      lines1\n        .width(availableWidth)\n        .height(availableHeight)\n        .interpolate(\"monotone\")\n        .color(data.map(function(d,i) {\n          return d.color || color[i % color.length];\n        }).filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'line'}));\n\n      lines2\n        .width(availableWidth)\n        .height(availableHeight)\n        .interpolate(\"monotone\")\n        .color(data.map(function(d,i) {\n          return d.color || color[i % color.length];\n        }).filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'line'}));\n\n      bars1\n        .width(availableWidth)\n        .height(availableHeight)\n        .color(data.map(function(d,i) {\n          return d.color || color[i % color.length];\n        }).filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'bar'}));\n\n      bars2\n        .width(availableWidth)\n        .height(availableHeight)\n        .color(data.map(function(d,i) {\n          return d.color || color[i % color.length];\n        }).filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'bar'}));\n\n      stack1\n        .width(availableWidth)\n        .height(availableHeight)\n        .color(data.map(function(d,i) {\n          return d.color || color[i % color.length];\n        }).filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'area'}));\n\n      stack2\n        .width(availableWidth)\n        .height(availableHeight)\n        .color(data.map(function(d,i) {\n          return d.color || color[i % color.length];\n        }).filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'area'}));\n\n      g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\n      var lines1Wrap = g.select('.lines1Wrap')\n          .datum(dataLines1)\n      var bars1Wrap = g.select('.bars1Wrap')\n          .datum(dataBars1)\n      var stack1Wrap = g.select('.stack1Wrap')\n          .datum(dataStack1)\n\n      var lines2Wrap = g.select('.lines2Wrap')\n          .datum(dataLines2)\n      var bars2Wrap = g.select('.bars2Wrap')\n          .datum(dataBars2)\n      var stack2Wrap = g.select('.stack2Wrap')\n          .datum(dataStack2)\n\n      var extraValue1 = dataStack1.length ? dataStack1.map(function(a){return a.values}).reduce(function(a,b){\n        return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})\n      }).concat([{x:0, y:0}]) : []\n      var extraValue2 = dataStack2.length ? dataStack2.map(function(a){return a.values}).reduce(function(a,b){\n        return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})\n      }).concat([{x:0, y:0}]) : []\n\n      yScale1 .domain(yDomain1 || d3.extent(d3.merge(series1).concat(extraValue1), function(d) { return d.y } ))\n              .range([0, availableHeight])\n\n      yScale2 .domain(yDomain2 || d3.extent(d3.merge(series2).concat(extraValue2), function(d) { return d.y } ))\n              .range([0, availableHeight])\n\n      lines1.yDomain(yScale1.domain())\n      bars1.yDomain(yScale1.domain())\n      stack1.yDomain(yScale1.domain())\n\n      lines2.yDomain(yScale2.domain())\n      bars2.yDomain(yScale2.domain())\n      stack2.yDomain(yScale2.domain())\n\n      if(dataStack1.length){d3.transition(stack1Wrap).call(stack1);}\n      if(dataStack2.length){d3.transition(stack2Wrap).call(stack2);}\n\n      if(dataBars1.length){d3.transition(bars1Wrap).call(bars1);}\n      if(dataBars2.length){d3.transition(bars2Wrap).call(bars2);}\n\n      if(dataLines1.length){d3.transition(lines1Wrap).call(lines1);}\n      if(dataLines2.length){d3.transition(lines2Wrap).call(lines2);}\n      \n\n\n      xAxis\n        .ticks( availableWidth / 100 )\n        .tickSize(-availableHeight, 0);\n\n      g.select('.x.axis')\n          .attr('transform', 'translate(0,' + availableHeight + ')');\n      d3.transition(g.select('.x.axis'))\n          .call(xAxis);\n\n      yAxis1\n        .ticks( availableHeight / 36 )\n        .tickSize( -availableWidth, 0);\n\n\n      d3.transition(g.select('.y1.axis'))\n          .call(yAxis1);\n\n      yAxis2\n        .ticks( availableHeight / 36 )\n        .tickSize( -availableWidth, 0);\n\n      d3.transition(g.select('.y2.axis'))\n          .call(yAxis2);\n\n      g.select('.y2.axis')\n          .style('opacity', series2.length ? 1 : 0)\n          .attr('transform', 'translate(' + x.range()[1] + ',0)');\n\n      legend.dispatch.on('stateChange', function(newState) { \n        chart.update();\n      });\n     \n      dispatch.on('tooltipShow', function(e) {\n        if (tooltips) showTooltip(e, that.parentNode);\n      });\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  lines1.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  lines1.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  lines2.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  lines2.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  bars1.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  bars1.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  bars2.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  bars2.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  stack1.dispatch.on('tooltipShow', function(e) {\n    //disable tooltips when value ~= 0\n    //// TODO: consider removing points from voronoi that have 0 value instead of this hack\n    if (!Math.round(stack1.y()(e.point) * 100)) {  // 100 will not be good for very small numbers... will have to think about making this valu dynamic, based on data range\n      setTimeout(function() { d3.selectAll('.point.hover').classed('hover', false) }, 0);\n      return false;\n    }\n\n    e.pos = [e.pos[0] + margin.left, e.pos[1] + margin.top],\n    dispatch.tooltipShow(e);\n  });\n\n  stack1.dispatch.on('tooltipHide', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  stack2.dispatch.on('tooltipShow', function(e) {\n    //disable tooltips when value ~= 0\n    //// TODO: consider removing points from voronoi that have 0 value instead of this hack\n    if (!Math.round(stack2.y()(e.point) * 100)) {  // 100 will not be good for very small numbers... will have to think about making this valu dynamic, based on data range\n      setTimeout(function() { d3.selectAll('.point.hover').classed('hover', false) }, 0);\n      return false;\n    }\n\n    e.pos = [e.pos[0] + margin.left, e.pos[1] + margin.top],\n    dispatch.tooltipShow(e);\n  });\n\n  stack2.dispatch.on('tooltipHide', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n    lines1.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  lines1.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  lines2.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  lines2.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n\n\n  //============================================================\n  // Global getters and setters\n  //------------------------------------------------------------\n\n  chart.dispatch = dispatch;\n  chart.lines1 = lines1;\n  chart.lines2 = lines2;\n  chart.bars1 = bars1;\n  chart.bars2 = bars2;\n  chart.stack1 = stack1;\n  chart.stack2 = stack2;\n  chart.xAxis = xAxis;\n  chart.yAxis1 = yAxis1;\n  chart.yAxis2 = yAxis2;\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.x = function(_) {\n    if (!arguments.length) return getX;\n    getX = _;\n    lines1.x(_);\n    bars1.x(_);\n    return chart;\n  };\n\n  chart.y = function(_) {\n    if (!arguments.length) return getY;\n    getY = _;\n    lines1.y(_);\n    bars1.y(_);\n    return chart;\n  };\n\n  chart.yDomain1 = function(_) {\n    if (!arguments.length) return yDomain1;\n    yDomain1 = _;\n    return chart;\n  };\n\n  chart.yDomain2 = function(_) {\n    if (!arguments.length) return yDomain2;\n    yDomain2 = _;\n    return chart;\n  };\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin = _;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = _;\n    legend.color(_);\n    return chart;\n  };\n\n  chart.showLegend = function(_) {\n    if (!arguments.length) return showLegend;\n    showLegend = _;\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  return chart;\n}\n\n\nnv.models.ohlcBar = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n    , width = 960\n    , height = 500\n    , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n    , x = d3.scale.linear()\n    , y = d3.scale.linear()\n    , getX = function(d) { return d.x }\n    , getY = function(d) { return d.y }\n    , getOpen = function(d) { return d.open }\n    , getClose = function(d) { return d.close }\n    , getHigh = function(d) { return d.high }\n    , getLow = function(d) { return d.low }\n    , forceX = []\n    , forceY = []\n    , padData     = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n    , clipEdge = true\n    , color = nv.utils.defaultColor()\n    , xDomain\n    , yDomain\n    , xRange\n    , yRange\n    , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout')\n    ;\n\n  //============================================================\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  //TODO: store old scales for transitions\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var availableWidth = width - margin.left - margin.right,\n          availableHeight = height - margin.top - margin.bottom,\n          container = d3.select(this);\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x   .domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\n      if (padData)\n        x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n      else\n        x.range(xRange || [0, availableWidth]);\n\n      y   .domain(yDomain || [\n            d3.min(data[0].values.map(getLow).concat(forceY)),\n            d3.max(data[0].values.map(getHigh).concat(forceY))\n          ])\n          .range(yRange || [availableHeight, 0]);\n\n      // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n      if (x.domain()[0] === x.domain()[1])\n        x.domain()[0] ?\n            x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n          : x.domain([-1,1]);\n\n      if (y.domain()[0] === y.domain()[1])\n        y.domain()[0] ?\n            y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n          : y.domain([-1,1]);\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = d3.select(this).selectAll('g.nv-wrap.nv-ohlcBar').data([data[0].values]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-ohlcBar');\n      var defsEnter = wrapEnter.append('defs');\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-ticks');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      //------------------------------------------------------------\n\n\n      container\n          .on('click', function(d,i) {\n            dispatch.chartClick({\n                data: d,\n                index: i,\n                pos: d3.event,\n                id: id\n            });\n          });\n\n\n      defsEnter.append('clipPath')\n          .attr('id', 'nv-chart-clip-path-' + id)\n        .append('rect');\n\n      wrap.select('#nv-chart-clip-path-' + id + ' rect')\n          .attr('width', availableWidth)\n          .attr('height', availableHeight);\n\n      g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\n\n\n      var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick')\n          .data(function(d) { return d });\n\n      ticks.exit().remove();\n\n\n      var ticksEnter = ticks.enter().append('path')\n          .attr('class', function(d,i,j) { return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i })\n          .attr('d', function(d,i) {\n            var w = (availableWidth / data[0].values.length) * .9;\n            return 'm0,0l0,'\n                 + (y(getOpen(d,i))\n                 - y(getHigh(d,i)))\n                 + 'l'\n                 + (-w/2)\n                 + ',0l'\n                 + (w/2)\n                 + ',0l0,'\n                 + (y(getLow(d,i)) - y(getOpen(d,i)))\n                 + 'l0,'\n                 + (y(getClose(d,i))\n                 - y(getLow(d,i)))\n                 + 'l'\n                 + (w/2)\n                 + ',0l'\n                 + (-w/2)\n                 + ',0z';\n          })\n          .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })\n          //.attr('fill', function(d,i) { return color[0]; })\n          //.attr('stroke', function(d,i) { return color[0]; })\n          //.attr('x', 0 )\n          //.attr('y', function(d,i) {  return y(Math.max(0, getY(d,i))) })\n          //.attr('height', function(d,i) { return Math.abs(y(getY(d,i)) - y(0)) })\n          .on('mouseover', function(d,i) {\n            d3.select(this).classed('hover', true);\n            dispatch.elementMouseover({\n                point: d,\n                series: data[0],\n                pos: [x(getX(d,i)), y(getY(d,i))],  // TODO: Figure out why the value appears to be shifted\n                pointIndex: i,\n                seriesIndex: 0,\n                e: d3.event\n            });\n\n          })\n          .on('mouseout', function(d,i) {\n                d3.select(this).classed('hover', false);\n                dispatch.elementMouseout({\n                    point: d,\n                    series: data[0],\n                    pointIndex: i,\n                    seriesIndex: 0,\n                    e: d3.event\n                });\n          })\n          .on('click', function(d,i) {\n                dispatch.elementClick({\n                    //label: d[label],\n                    value: getY(d,i),\n                    data: d,\n                    index: i,\n                    pos: [x(getX(d,i)), y(getY(d,i))],\n                    e: d3.event,\n                    id: id\n                });\n              d3.event.stopPropagation();\n          })\n          .on('dblclick', function(d,i) {\n              dispatch.elementDblClick({\n                  //label: d[label],\n                  value: getY(d,i),\n                  data: d,\n                  index: i,\n                  pos: [x(getX(d,i)), y(getY(d,i))],\n                  e: d3.event,\n                  id: id\n              });\n              d3.event.stopPropagation();\n          });\n\n      ticks\n          .attr('class', function(d,i,j) { return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i })\n      d3.transition(ticks)\n          .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })\n          .attr('d', function(d,i) {\n            var w = (availableWidth / data[0].values.length) * .9;\n            return 'm0,0l0,'\n                 + (y(getOpen(d,i))\n                 - y(getHigh(d,i)))\n                 + 'l'\n                 + (-w/2)\n                 + ',0l'\n                 + (w/2)\n                 + ',0l0,'\n                 + (y(getLow(d,i))\n                 - y(getOpen(d,i)))\n                 + 'l0,'\n                 + (y(getClose(d,i))\n                 - y(getLow(d,i)))\n                 + 'l'\n                 + (w/2)\n                 + ',0l'\n                 + (-w/2)\n                 + ',0z';\n          })\n          //.attr('width', (availableWidth / data[0].values.length) * .9 )\n\n\n      //d3.transition(ticks)\n          //.attr('y', function(d,i) {  return y(Math.max(0, getY(d,i))) })\n          //.attr('height', function(d,i) { return Math.abs(y(getY(d,i)) - y(0)) });\n          //.order();  // not sure if this makes any sense for this model\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  chart.dispatch = dispatch;\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.x = function(_) {\n    if (!arguments.length) return getX;\n    getX = _;\n    return chart;\n  };\n\n  chart.y = function(_) {\n    if (!arguments.length) return getY;\n    getY = _;\n    return chart;\n  };\n\n  chart.open = function(_) {\n    if (!arguments.length) return getOpen;\n    getOpen = _;\n    return chart;\n  };\n\n  chart.close = function(_) {\n    if (!arguments.length) return getClose;\n    getClose = _;\n    return chart;\n  };\n\n  chart.high = function(_) {\n    if (!arguments.length) return getHigh;\n    getHigh = _;\n    return chart;\n  };\n\n  chart.low = function(_) {\n    if (!arguments.length) return getLow;\n    getLow = _;\n    return chart;\n  };\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.xScale = function(_) {\n    if (!arguments.length) return x;\n    x = _;\n    return chart;\n  };\n\n  chart.yScale = function(_) {\n    if (!arguments.length) return y;\n    y = _;\n    return chart;\n  };\n\n  chart.xDomain = function(_) {\n    if (!arguments.length) return xDomain;\n    xDomain = _;\n    return chart;\n  };\n\n  chart.yDomain = function(_) {\n    if (!arguments.length) return yDomain;\n    yDomain = _;\n    return chart;\n  };\n\n  chart.xRange = function(_) {\n    if (!arguments.length) return xRange;\n    xRange = _;\n    return chart;\n  };\n\n  chart.yRange = function(_) {\n    if (!arguments.length) return yRange;\n    yRange = _;\n    return chart;\n  };\n\n  chart.forceX = function(_) {\n    if (!arguments.length) return forceX;\n    forceX = _;\n    return chart;\n  };\n\n  chart.forceY = function(_) {\n    if (!arguments.length) return forceY;\n    forceY = _;\n    return chart;\n  };\n\n  chart.padData = function(_) {\n    if (!arguments.length) return padData;\n    padData = _;\n    return chart;\n  };\n\n  chart.clipEdge = function(_) {\n    if (!arguments.length) return clipEdge;\n    clipEdge = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    return chart;\n  };\n\n  chart.id = function(_) {\n    if (!arguments.length) return id;\n    id = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\nnv.models.pie = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n    , width = 500\n    , height = 500\n    , getX = function(d) { return d.x }\n    , getY = function(d) { return d.y }\n    , getDescription = function(d) { return d.description }\n    , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n    , color = nv.utils.defaultColor()\n    , valueFormat = d3.format(',.2f')\n    , showLabels = true\n    , pieLabelsOutside = true\n    , donutLabelsOutside = false\n    , labelType = \"key\"\n    , labelThreshold = .02 //if slice percentage is under this, don't show label\n    , donut = false\n    , labelSunbeamLayout = false\n    , startAngle = false\n    , endAngle = false\n    , donutRatio = 0.5\n    , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout')\n    ;\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var availableWidth = width - margin.left - margin.right,\n          availableHeight = height - margin.top - margin.bottom,\n          radius = Math.min(availableWidth, availableHeight) / 2,\n          arcRadius = radius-(radius / 5),\n          container = d3.select(this);\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      //var wrap = container.selectAll('.nv-wrap.nv-pie').data([data]);\n      var wrap = container.selectAll('.nv-wrap.nv-pie').data(data);\n      var wrapEnter = wrap.enter().append('g').attr('class','nvd3 nv-wrap nv-pie nv-chart-' + id);\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-pie');\n      gEnter.append('g').attr('class', 'nv-pieLabels');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n      g.select('.nv-pie').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');\n      g.select('.nv-pieLabels').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');\n\n      //------------------------------------------------------------\n\n\n      container\n          .on('click', function(d,i) {\n              dispatch.chartClick({\n                  data: d,\n                  index: i,\n                  pos: d3.event,\n                  id: id\n              });\n          });\n\n\n      var arc = d3.svg.arc()\n                  .outerRadius(arcRadius);\n\n      if (startAngle) arc.startAngle(startAngle)\n      if (endAngle) arc.endAngle(endAngle);\n      if (donut) arc.innerRadius(radius * donutRatio);\n\n      // Setup the Pie chart and choose the data element\n      var pie = d3.layout.pie()\n          .sort(null)\n          .value(function(d) { return d.disabled ? 0 : getY(d) });\n\n      var slices = wrap.select('.nv-pie').selectAll('.nv-slice')\n          .data(pie);\n\n      var pieLabels = wrap.select('.nv-pieLabels').selectAll('.nv-label')\n          .data(pie);\n\n      slices.exit().remove();\n      pieLabels.exit().remove();\n\n      var ae = slices.enter().append('g')\n              .attr('class', 'nv-slice')\n              .on('mouseover', function(d,i){\n                d3.select(this).classed('hover', true);\n                dispatch.elementMouseover({\n                    label: getX(d.data),\n                    value: getY(d.data),\n                    point: d.data,\n                    pointIndex: i,\n                    pos: [d3.event.pageX, d3.event.pageY],\n                    id: id\n                });\n              })\n              .on('mouseout', function(d,i){\n                d3.select(this).classed('hover', false);\n                dispatch.elementMouseout({\n                    label: getX(d.data),\n                    value: getY(d.data),\n                    point: d.data,\n                    index: i,\n                    id: id\n                });\n              })\n              .on('click', function(d,i) {\n                dispatch.elementClick({\n                    label: getX(d.data),\n                    value: getY(d.data),\n                    point: d.data,\n                    index: i,\n                    pos: d3.event,\n                    id: id\n                });\n                d3.event.stopPropagation();\n              })\n              .on('dblclick', function(d,i) {\n                dispatch.elementDblClick({\n                    label: getX(d.data),\n                    value: getY(d.data),\n                    point: d.data,\n                    index: i,\n                    pos: d3.event,\n                    id: id\n                });\n                d3.event.stopPropagation();\n              });\n\n        slices.attr('fill', function(d,i) { return color(d, i); })\n            .attr('stroke', function(d,i) { return color(d, i); });\n\n        var paths = ae.append('path')\n            .each(function(d) { this._current = d; });\n            //.attr('d', arc);\n\n        slices.select('path')\n            .attr('d', arc);\n            \n        if (showLabels) {\n          // This does the normal label\n          var labelsArc = d3.svg.arc().innerRadius(0);\n\n          if (pieLabelsOutside){ labelsArc = arc; }\n\n          if (donutLabelsOutside) { labelsArc = d3.svg.arc().outerRadius(arc.outerRadius()); }\n\n          pieLabels.enter().append(\"g\").classed(\"nv-label\",true)\n            .each(function(d,i) {\n                var group = d3.select(this);\n\n                group\n                  .attr('transform', function(d) {\n                       if (labelSunbeamLayout) {\n                         d.outerRadius = arcRadius + 10; // Set Outer Coordinate\n                         d.innerRadius = arcRadius + 15; // Set Inner Coordinate\n                         var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);\n                         if ((d.startAngle+d.endAngle)/2 < Math.PI) {\n                           rotateAngle -= 90;\n                         } else {\n                           rotateAngle += 90;\n                         }\n                         return 'translate(' + labelsArc.centroid(d) + ') rotate(' + rotateAngle + ')';\n                       } else {\n                         d.outerRadius = radius + 10; // Set Outer Coordinate\n                         d.innerRadius = radius + 15; // Set Inner Coordinate\n                         return 'translate(' + labelsArc.centroid(d) + ')'\n                       }\n                  });\n\n                group.append('rect')\n                    .style('stroke', '#fff')\n                    .style('fill', '#fff')\n                    .attr(\"rx\", 3)\n                    .attr(\"ry\", 3);\n\n                group.append('text')\n                    .style('text-anchor', labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle') //center the text on it's origin or begin/end if orthogonal aligned\n                    .style('fill', '#000')\n\n            });\n\n          var labelLocationHash = {};\n          var avgHeight = 14;\n          var avgWidth = 140;\n          var createHashKey = function(coordinates) {\n\n              return Math.floor(coordinates[0]/avgWidth) * avgWidth + ',' + Math.floor(coordinates[1]/avgHeight) * avgHeight;\n          };\n          pieLabels\n                .attr('transform', function(d) {\n                  if (labelSunbeamLayout) {\n                      d.outerRadius = arcRadius + 10; // Set Outer Coordinate\n                      d.innerRadius = arcRadius + 15; // Set Inner Coordinate\n                      var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);\n                      if ((d.startAngle+d.endAngle)/2 < Math.PI) {\n                        rotateAngle -= 90;\n                      } else {\n                        rotateAngle += 90;\n                      }\n                      return 'translate(' + labelsArc.centroid(d) + ') rotate(' + rotateAngle + ')';\n                    } else {\n                      d.outerRadius = radius + 10; // Set Outer Coordinate\n                      d.innerRadius = radius + 15; // Set Inner Coordinate\n\n                      /*\n                      Overlapping pie labels are not good. What this attempts to do is, prevent overlapping.\n                      Each label location is hashed, and if a hash collision occurs, we assume an overlap.\n                      Adjust the label's y-position to remove the overlap.\n                      */\n                      var center = labelsArc.centroid(d);\n                      var hashKey = createHashKey(center);\n                      if (labelLocationHash[hashKey]) {\n                        center[1] -= avgHeight;\n                      }\n                      labelLocationHash[createHashKey(center)] = true;\n                      return 'translate(' + center + ')'\n                    }\n                });\n          pieLabels.select(\".nv-label text\")\n                .style('text-anchor', labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle') //center the text on it's origin or begin/end if orthogonal aligned\n                .text(function(d, i) {\n                  var percent = (d.endAngle - d.startAngle) / (2 * Math.PI);\n                  var labelTypes = {\n                    \"key\" : getX(d.data),\n                    \"value\": getY(d.data),\n                    \"percent\": d3.format('%')(percent)\n                  };\n                  return (d.value && percent > labelThreshold) ? labelTypes[labelType] : '';\n                });\n        }\n\n\n        // Computes the angle of an arc, converting from radians to degrees.\n        function angle(d) {\n          var a = (d.startAngle + d.endAngle) * 90 / Math.PI - 90;\n          return a > 90 ? a - 180 : a;\n        }\n\n        function arcTween(a) {\n          a.endAngle = isNaN(a.endAngle) ? 0 : a.endAngle;\n          a.startAngle = isNaN(a.startAngle) ? 0 : a.startAngle;\n          if (!donut) a.innerRadius = 0;\n          var i = d3.interpolate(this._current, a);\n          this._current = i(0);\n          return function(t) {\n            return arc(i(t));\n          };\n        }\n\n        function tweenPie(b) {\n          b.innerRadius = 0;\n          var i = d3.interpolate({startAngle: 0, endAngle: 0}, b);\n          return function(t) {\n              return arc(i(t));\n          };\n        }\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  chart.dispatch = dispatch;\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.values = function(_) {\n    nv.log(\"pie.values() is no longer supported.\");\n    return chart;\n  };\n\n  chart.x = function(_) {\n    if (!arguments.length) return getX;\n    getX = _;\n    return chart;\n  };\n\n  chart.y = function(_) {\n    if (!arguments.length) return getY;\n    getY = d3.functor(_);\n    return chart;\n  };\n\n  chart.description = function(_) {\n    if (!arguments.length) return getDescription;\n    getDescription = _;\n    return chart;\n  };\n\n  chart.showLabels = function(_) {\n    if (!arguments.length) return showLabels;\n    showLabels = _;\n    return chart;\n  };\n\n  chart.labelSunbeamLayout = function(_) {\n    if (!arguments.length) return labelSunbeamLayout;\n    labelSunbeamLayout = _;\n    return chart;\n  };\n\n  chart.donutLabelsOutside = function(_) {\n    if (!arguments.length) return donutLabelsOutside;\n    donutLabelsOutside = _;\n    return chart;\n  };\n\n  chart.pieLabelsOutside = function(_) {\n    if (!arguments.length) return pieLabelsOutside;\n    pieLabelsOutside = _;\n    return chart;\n  };\n\n  chart.labelType = function(_) {\n    if (!arguments.length) return labelType;\n    labelType = _;\n    labelType = labelType || \"key\";\n    return chart;\n  };\n\n  chart.donut = function(_) {\n    if (!arguments.length) return donut;\n    donut = _;\n    return chart;\n  };\n\n  chart.donutRatio = function(_) {\n    if (!arguments.length) return donutRatio;\n    donutRatio = _;\n    return chart;\n  };\n\n  chart.startAngle = function(_) {\n    if (!arguments.length) return startAngle;\n    startAngle = _;\n    return chart;\n  };\n\n  chart.endAngle = function(_) {\n    if (!arguments.length) return endAngle;\n    endAngle = _;\n    return chart;\n  };\n\n  chart.id = function(_) {\n    if (!arguments.length) return id;\n    id = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    return chart;\n  };\n\n  chart.valueFormat = function(_) {\n    if (!arguments.length) return valueFormat;\n    valueFormat = _;\n    return chart;\n  };\n\n  chart.labelThreshold = function(_) {\n    if (!arguments.length) return labelThreshold;\n    labelThreshold = _;\n    return chart;\n  };\n  //============================================================\n\n\n  return chart;\n}\nnv.models.pieChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var pie = nv.models.pie()\n    , legend = nv.models.legend()\n    ;\n\n  var margin = {top: 30, right: 20, bottom: 20, left: 20}\n    , width = null\n    , height = null\n    , showLegend = true\n    , color = nv.utils.defaultColor()\n    , tooltips = true\n    , tooltip = function(key, y, e, graph) {\n        return '<h3>' + key + '</h3>' +\n               '<p>' +  y + '</p>'\n      }\n    , state = {}\n    , defaultState = null\n    , noData = \"No Data Available.\"\n    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n    ;\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var showTooltip = function(e, offsetElement) {\n    var tooltipLabel = pie.description()(e.point) || pie.x()(e.point)\n    var left = e.pos[0] + ( (offsetElement && offsetElement.offsetLeft) || 0 ),\n        top = e.pos[1] + ( (offsetElement && offsetElement.offsetTop) || 0),\n        y = pie.valueFormat()(pie.y()(e.point)),\n        content = tooltip(tooltipLabel, y, e, chart);\n\n    nv.tooltip.show([left, top], content, e.value < 0 ? 'n' : 's', null, offsetElement);\n  };\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this),\n          that = this;\n\n      var availableWidth = (width || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n\n      chart.update = function() { container.call(chart); };\n      chart.container = this;\n\n      //set state.disabled\n      state.disabled = data.map(function(d) { return !!d.disabled });\n\n      if (!defaultState) {\n        var key;\n        defaultState = {};\n        for (key in state) {\n          if (state[key] instanceof Array)\n            defaultState[key] = state[key].slice(0);\n          else\n            defaultState[key] = state[key];\n        }\n      }\n\n      //------------------------------------------------------------\n      // Display No Data message if there's nothing to show.\n\n      if (!data || !data.length) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', margin.top + availableHeight / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-pieChart').data([data]);\n      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-pieChart').append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-pieWrap');\n      gEnter.append('g').attr('class', 'nv-legendWrap');\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Legend\n\n      if (showLegend) {\n        legend\n          .width( availableWidth )\n          .key(pie.x());\n\n        wrap.select('.nv-legendWrap')\n            .datum(data)\n            .call(legend);\n\n        if ( margin.top != legend.height()) {\n          margin.top = legend.height();\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n        }\n\n        wrap.select('.nv-legendWrap')\n            .attr('transform', 'translate(0,' + (-margin.top) +')');\n      }\n\n      //------------------------------------------------------------\n\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\n      //------------------------------------------------------------\n      // Main Chart Component(s)\n\n      pie\n        .width(availableWidth)\n        .height(availableHeight);\n\n\n      var pieWrap = g.select('.nv-pieWrap')\n          .datum([data]);\n\n      d3.transition(pieWrap).call(pie);\n\n      //------------------------------------------------------------\n\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n      legend.dispatch.on('stateChange', function(newState) {\n        state = newState;\n        dispatch.stateChange(state);\n        chart.update();\n      });\n\n      pie.dispatch.on('elementMouseout.tooltip', function(e) {\n        dispatch.tooltipHide(e);\n      });\n\n      // Update chart from a state object passed to event handler\n      dispatch.on('changeState', function(e) {\n\n        if (typeof e.disabled !== 'undefined') {\n          data.forEach(function(series,i) {\n            series.disabled = e.disabled[i];\n          });\n\n          state.disabled = e.disabled;\n        }\n\n        chart.update();\n      });\n\n      //============================================================\n\n\n    });\n\n    return chart;\n  }\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  pie.dispatch.on('elementMouseover.tooltip', function(e) {\n    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];\n    dispatch.tooltipShow(e);\n  });\n\n  dispatch.on('tooltipShow', function(e) {\n    if (tooltips) showTooltip(e);\n  });\n\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.legend = legend;\n  chart.dispatch = dispatch;\n  chart.pie = pie;\n\n  d3.rebind(chart, pie, 'valueFormat', 'values', 'x', 'y', 'description', 'id', 'showLabels', 'donutLabelsOutside', 'pieLabelsOutside', 'labelType', 'donut', 'donutRatio', 'labelThreshold');\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    legend.color(color);\n    pie.color(color);\n    return chart;\n  };\n\n  chart.showLegend = function(_) {\n    if (!arguments.length) return showLegend;\n    showLegend = _;\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.state = function(_) {\n    if (!arguments.length) return state;\n    state = _;\n    return chart;\n  };\n\n  chart.defaultState = function(_) {\n    if (!arguments.length) return defaultState;\n    defaultState = _;\n    return chart;\n  };\n\n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.scatter = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var margin       = {top: 0, right: 0, bottom: 0, left: 0}\n    , width        = 960\n    , height       = 500\n    , color        = nv.utils.defaultColor() // chooses color\n    , id           = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't select one\n    , x            = d3.scale.linear()\n    , y            = d3.scale.linear()\n    , z            = d3.scale.linear() //linear because d3.svg.shape.size is treated as area\n    , getX         = function(d) { return d.x } // accessor to get the x value\n    , getY         = function(d) { return d.y } // accessor to get the y value\n    , getSize      = function(d) { return d.size || 1} // accessor to get the point size\n    , getShape     = function(d) { return d.shape || 'circle' } // accessor to get point shape\n    , onlyCircles  = true // Set to false to use shapes\n    , forceX       = [] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)\n    , forceY       = [] // List of numbers to Force into the Y scale\n    , forceSize    = [] // List of numbers to Force into the Size scale\n    , interactive  = true // If true, plots a voronoi overlay for advanced point intersection\n    , pointKey     = null\n    , pointActive  = function(d) { return !d.notActive } // any points that return false will be filtered out\n    , padData      = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n    , padDataOuter = .1 //outerPadding to imitate ordinal scale outer padding\n    , clipEdge     = false // if true, masks points within x and y scale\n    , clipVoronoi  = true // if true, masks each point with a circle... can turn off to slightly increase performance\n    , clipRadius   = function() { return 25 } // function to get the radius for voronoi point clips\n    , xDomain      = null // Override x domain (skips the calculation from data)\n    , yDomain      = null // Override y domain\n    , xRange       = null // Override x range\n    , yRange       = null // Override y range\n    , sizeDomain   = null // Override point size domain\n    , sizeRange    = null\n    , singlePoint  = false\n    , dispatch     = d3.dispatch('elementClick', 'elementMouseover', 'elementMouseout')\n    , useVoronoi   = true\n    ;\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var x0, y0, z0 // used to store previous scales\n    , timeoutID\n    , needsUpdate = false // Flag for when the points are visually updating, but the interactive layer is behind, to disable tooltips\n    ;\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var availableWidth = width - margin.left - margin.right,\n          availableHeight = height - margin.top - margin.bottom,\n          container = d3.select(this);\n\n      //add series index to each data point for reference\n      data.forEach(function(series, i) {\n        series.values.forEach(function(point) {\n          point.series = i;\n        });\n      });\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      // remap and flatten the data for use in calculating the scales' domains\n      var seriesData = (xDomain && yDomain && sizeDomain) ? [] : // if we know xDomain and yDomain and sizeDomain, no need to calculate.... if Size is constant remember to set sizeDomain to speed up performance\n            d3.merge(\n              data.map(function(d) {\n                return d.values.map(function(d,i) {\n                  return { x: getX(d,i), y: getY(d,i), size: getSize(d,i) }\n                })\n              })\n            );\n\n      x   .domain(xDomain || d3.extent(seriesData.map(function(d) { return d.x; }).concat(forceX)))\n\n      if (padData && data[0])\n        x.range(xRange || [(availableWidth * padDataOuter +  availableWidth) / (2 *data[0].values.length), availableWidth - availableWidth * (1 + padDataOuter) / (2 * data[0].values.length)  ]);\n        //x.range([availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n      else\n        x.range(xRange || [0, availableWidth]);\n\n      y   .domain(yDomain || d3.extent(seriesData.map(function(d) { return d.y }).concat(forceY)))\n          .range(yRange || [availableHeight, 0]);\n\n      z   .domain(sizeDomain || d3.extent(seriesData.map(function(d) { return d.size }).concat(forceSize)))\n          .range(sizeRange || [16, 256]);\n\n      // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n      if (x.domain()[0] === x.domain()[1] || y.domain()[0] === y.domain()[1]) singlePoint = true;\n      if (x.domain()[0] === x.domain()[1])\n        x.domain()[0] ?\n            x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n          : x.domain([-1,1]);\n\n      if (y.domain()[0] === y.domain()[1])\n        y.domain()[0] ?\n            y.domain([y.domain()[0] - y.domain()[0] * 0.01, y.domain()[1] + y.domain()[1] * 0.01])\n          : y.domain([-1,1]);\n\n      if ( isNaN(x.domain()[0])) {\n          x.domain([-1,1]);\n      }\n\n      if ( isNaN(y.domain()[0])) {\n          y.domain([-1,1]);\n      }\n\n\n      x0 = x0 || x;\n      y0 = y0 || y;\n      z0 = z0 || z;\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-scatter').data([data]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatter nv-chart-' + id + (singlePoint ? ' nv-single-point' : ''));\n      var defsEnter = wrapEnter.append('defs');\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-groups');\n      gEnter.append('g').attr('class', 'nv-point-paths');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      //------------------------------------------------------------\n\n\n      defsEnter.append('clipPath')\n          .attr('id', 'nv-edge-clip-' + id)\n        .append('rect');\n\n      wrap.select('#nv-edge-clip-' + id + ' rect')\n          .attr('width', availableWidth)\n          .attr('height', (availableHeight > 0) ? availableHeight : 0);\n\n      g   .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n\n      function updateInteractiveLayer() {\n\n        if (!interactive) return false;\n\n        var eventElements;\n\n        var vertices = d3.merge(data.map(function(group, groupIndex) {\n            return group.values\n              .map(function(point, pointIndex) {\n                // *Adding noise to make duplicates very unlikely\n                // *Injecting series and point index for reference\n                /* *Adding a 'jitter' to the points, because there's an issue in d3.geom.voronoi.\n                */\n                var pX = getX(point,pointIndex);\n                var pY = getY(point,pointIndex);\n\n                return [x(pX),\n                        y(pY),\n                        groupIndex,\n                        pointIndex, point];\n              })\n              .filter(function(pointArray, pointIndex) {\n                return pointActive(pointArray[4], pointIndex); // Issue #237.. move filter to after map, so pointIndex is correct!\n              })\n          })\n        );\n\n\n\n        //inject series and point index for reference into voronoi\n        if (useVoronoi === true) {\n\n          if (clipVoronoi) {\n            var pointClipsEnter = wrap.select('defs').selectAll('.nv-point-clips')\n                .data([id])\n              .enter();\n\n            pointClipsEnter.append('clipPath')\n                  .attr('class', 'nv-point-clips')\n                  .attr('id', 'nv-points-clip-' + id);\n\n            var pointClips = wrap.select('#nv-points-clip-' + id).selectAll('circle')\n                .data(vertices);\n            pointClips.enter().append('circle')\n                .attr('r', clipRadius);\n            pointClips.exit().remove();\n            pointClips\n                .attr('cx', function(d) { return d[0] })\n                .attr('cy', function(d) { return d[1] });\n\n            wrap.select('.nv-point-paths')\n                .attr('clip-path', 'url(#nv-points-clip-' + id + ')');\n          }\n\n\n          if(vertices.length) {\n            // Issue #283 - Adding 2 dummy points to the voronoi b/c voronoi requires min 3 points to work\n            vertices.push([x.range()[0] - 20, y.range()[0] - 20, null, null]);\n            vertices.push([x.range()[1] + 20, y.range()[1] + 20, null, null]);\n            vertices.push([x.range()[0] - 20, y.range()[0] + 20, null, null]);\n            vertices.push([x.range()[1] + 20, y.range()[1] - 20, null, null]);\n          }\n\n          var bounds = d3.geom.polygon([\n              [-10,-10],\n              [-10,height + 10],\n              [width + 10,height + 10],\n              [width + 10,-10]\n          ]);\n\n          // delete duplicates from vertices - essential assumption for d3.geom.voronoi\n          var epsilon = 1e-6; // d3 uses 1e-6 to determine equivalence.\n          vertices = vertices.sort(function(a,b){return ((a[0] - b[0]) || (a[1] - b[1]))});\n          for (var i = 0; i < vertices.length - 1; ) {\n              if ((Math.abs(vertices[i][0] - vertices[i+1][0]) < epsilon) &&\n                  (Math.abs(vertices[i][1] - vertices[i+1][1]) < epsilon)) {\n                      vertices.splice(i+1, 1);\n              } else {\n                  i++;\n              }\n          }\n \n          var voronoi = d3.geom.voronoi(vertices).map(function(d, i) {\n              return {\n                'data': bounds.clip(d),\n                'series': vertices[i][2],\n                'point': vertices[i][3]\n              }\n            });\n\n\n          var pointPaths = wrap.select('.nv-point-paths').selectAll('path')\n              .data(voronoi);\n          pointPaths.enter().append('path')\n              .attr('class', function(d,i) { return 'nv-path-'+i; });\n          pointPaths.exit().remove();\n          pointPaths\n              .attr('d', function(d) {\n                if (!d || !d.data || d.data.length === 0)\n                    return 'M 0 0';\n                else\n                    return 'M' + d.data.join('L') + 'Z';\n              });\n\n          var mouseEventCallback = function(d,mDispatch) {\n                if (needsUpdate) return 0;\n                var series = data[d.series];\n                if (typeof series === 'undefined') return;\n\n                var point  = series.values[d.point];\n\n                mDispatch({\n                  point: point,\n                  series: series,\n                  pos: [x(getX(point, d.point)) + margin.left, y(getY(point, d.point)) + margin.top],\n                  seriesIndex: d.series,\n                  pointIndex: d.point\n                });\n          };\n\n          pointPaths\n              .on('click', function(d) {\n                mouseEventCallback(d, dispatch.elementClick);\n              })\n              .on('mouseover', function(d) {\n                mouseEventCallback(d, dispatch.elementMouseover);\n              })\n              .on('mouseout', function(d, i) {\n                mouseEventCallback(d, dispatch.elementMouseout);\n              });\n\n\n        } else {\n          /*\n          // bring data in form needed for click handlers\n          var dataWithPoints = vertices.map(function(d, i) {\n              return {\n                'data': d,\n                'series': vertices[i][2],\n                'point': vertices[i][3]\n              }\n            });\n           */\n\n          // add event handlers to points instead voronoi paths\n          wrap.select('.nv-groups').selectAll('.nv-group')\n            .selectAll('.nv-point')\n              //.data(dataWithPoints)\n              //.style('pointer-events', 'auto') // recativate events, disabled by css\n              .on('click', function(d,i) {\n                //nv.log('test', d, i);\n                if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                var series = data[d.series],\n                    point  = series.values[i];\n\n                dispatch.elementClick({\n                  point: point,\n                  series: series,\n                  pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                  seriesIndex: d.series,\n                  pointIndex: i\n                });\n              })\n              .on('mouseover', function(d,i) {\n                if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                var series = data[d.series],\n                    point  = series.values[i];\n\n                dispatch.elementMouseover({\n                  point: point,\n                  series: series,\n                  pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                  seriesIndex: d.series,\n                  pointIndex: i\n                });\n              })\n              .on('mouseout', function(d,i) {\n                if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                var series = data[d.series],\n                    point  = series.values[i];\n\n                dispatch.elementMouseout({\n                  point: point,\n                  series: series,\n                  seriesIndex: d.series,\n                  pointIndex: i\n                });\n              });\n          }\n\n          needsUpdate = false;\n      }\n\n      needsUpdate = true;\n\n      var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n          .data(function(d) { return d }, function(d) { return d.key });\n      groups.enter().append('g')\n          .style('stroke-opacity', 1e-6)\n          .style('fill-opacity', 1e-6);\n      groups.exit()\n          .remove();\n      groups\n          .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n          .classed('hover', function(d) { return d.hover });\n      groups\n          \n          .style('fill', function(d,i) { return color(d, i) })\n          .style('stroke', function(d,i) { return color(d, i) })\n          .style('stroke-opacity', 1)\n          .style('fill-opacity', .5);\n\n\n      if (onlyCircles) {\n\n        var points = groups.selectAll('circle.nv-point')\n            .data(function(d) { return d.values }, pointKey);\n        points.enter().append('circle')\n            .style('fill', function (d,i) { return d.color })\n            .style('stroke', function (d,i) { return d.color })\n            .attr('cx', function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n            .attr('cy', function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n            .attr('r', function(d,i) { return Math.sqrt(z(getSize(d,i))/Math.PI) });\n        points.exit().remove();\n        groups.exit().selectAll('path.nv-point')\n            .attr('cx', function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n            .attr('cy', function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n            .remove();\n        points.each(function(d,i) {\n          d3.select(this)\n            .classed('nv-point', true)\n            .classed('nv-point-' + i, true)\n            .classed('hover',false)\n            ;\n        });\n        points\n            .attr('cx', function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n            .attr('cy', function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n            .attr('r', function(d,i) { return Math.sqrt(z(getSize(d,i))/Math.PI) });\n\n      } else {\n\n        var points = groups.selectAll('path.nv-point')\n            .data(function(d) { return d.values });\n        points.enter().append('path')\n            .style('fill', function (d,i) { return d.color })\n            .style('stroke', function (d,i) { return d.color })\n            .attr('transform', function(d,i) {\n              return 'translate(' + x0(getX(d,i)) + ',' + y0(getY(d,i)) + ')'\n            })\n            .attr('d',\n              d3.svg.symbol()\n                .type(getShape)\n                .size(function(d,i) { return z(getSize(d,i)) })\n            );\n        points.exit().remove();\n        groups.exit().selectAll('path.nv-point')\n            \n            .attr('transform', function(d,i) {\n              return 'translate(' + x(getX(d,i)) + ',' + y(getY(d,i)) + ')'\n            })\n            .remove();\n        points.each(function(d,i) {\n          d3.select(this)\n            .classed('nv-point', true)\n            .classed('nv-point-' + i, true)\n            .classed('hover',false)\n            ;\n        });\n        points\n            .attr('transform', function(d,i) {\n              //nv.log(d,i,getX(d,i), x(getX(d,i)));\n              return 'translate(' + x(getX(d,i)) + ',' + y(getY(d,i)) + ')'\n            })\n            .attr('d',\n              d3.svg.symbol()\n                .type(getShape)\n                .size(function(d,i) { return z(getSize(d,i)) })\n            );\n      }\n\n\n      // Delay updating the invisible interactive layer for smoother animation\n      clearTimeout(timeoutID); // stop repeat calls to updateInteractiveLayer\n      timeoutID = setTimeout(updateInteractiveLayer, 300);\n      //updateInteractiveLayer();\n\n      //store old scales for use in transitions on update\n      x0 = x.copy();\n      y0 = y.copy();\n      z0 = z.copy();\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n  chart.clearHighlights = function() {\n      //Remove the 'hover' class from all highlighted points.\n      d3.selectAll(\".nv-chart-\" + id + \" .nv-point.hover\").classed(\"hover\",false);\n  };\n\n  chart.highlightPoint = function(seriesIndex,pointIndex,isHoverOver) {\n      d3.select(\".nv-chart-\" + id + \" .nv-series-\" + seriesIndex + \" .nv-point-\" + pointIndex)\n          .classed(\"hover\",isHoverOver);\n  };\n\n\n  dispatch.on('elementMouseover.point', function(d) {\n     if (interactive) chart.highlightPoint(d.seriesIndex,d.pointIndex,true);\n  });\n\n  dispatch.on('elementMouseout.point', function(d) {\n     if (interactive) chart.highlightPoint(d.seriesIndex,d.pointIndex,false);\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  chart.dispatch = dispatch;\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.x = function(_) {\n    if (!arguments.length) return getX;\n    getX = d3.functor(_);\n    return chart;\n  };\n\n  chart.y = function(_) {\n    if (!arguments.length) return getY;\n    getY = d3.functor(_);\n    return chart;\n  };\n\n  chart.size = function(_) {\n    if (!arguments.length) return getSize;\n    getSize = d3.functor(_);\n    return chart;\n  };\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.xScale = function(_) {\n    if (!arguments.length) return x;\n    x = _;\n    return chart;\n  };\n\n  chart.yScale = function(_) {\n    if (!arguments.length) return y;\n    y = _;\n    return chart;\n  };\n\n  chart.zScale = function(_) {\n    if (!arguments.length) return z;\n    z = _;\n    return chart;\n  };\n\n  chart.xDomain = function(_) {\n    if (!arguments.length) return xDomain;\n    xDomain = _;\n    return chart;\n  };\n\n  chart.yDomain = function(_) {\n    if (!arguments.length) return yDomain;\n    yDomain = _;\n    return chart;\n  };\n\n  chart.sizeDomain = function(_) {\n    if (!arguments.length) return sizeDomain;\n    sizeDomain = _;\n    return chart;\n  };\n\n  chart.xRange = function(_) {\n    if (!arguments.length) return xRange;\n    xRange = _;\n    return chart;\n  };\n\n  chart.yRange = function(_) {\n    if (!arguments.length) return yRange;\n    yRange = _;\n    return chart;\n  };\n\n  chart.sizeRange = function(_) {\n    if (!arguments.length) return sizeRange;\n    sizeRange = _;\n    return chart;\n  };\n\n  chart.forceX = function(_) {\n    if (!arguments.length) return forceX;\n    forceX = _;\n    return chart;\n  };\n\n  chart.forceY = function(_) {\n    if (!arguments.length) return forceY;\n    forceY = _;\n    return chart;\n  };\n\n  chart.forceSize = function(_) {\n    if (!arguments.length) return forceSize;\n    forceSize = _;\n    return chart;\n  };\n\n  chart.interactive = function(_) {\n    if (!arguments.length) return interactive;\n    interactive = _;\n    return chart;\n  };\n\n  chart.pointKey = function(_) {\n    if (!arguments.length) return pointKey;\n    pointKey = _;\n    return chart;\n  };\n\n  chart.pointActive = function(_) {\n    if (!arguments.length) return pointActive;\n    pointActive = _;\n    return chart;\n  };\n\n  chart.padData = function(_) {\n    if (!arguments.length) return padData;\n    padData = _;\n    return chart;\n  };\n\n  chart.padDataOuter = function(_) {\n    if (!arguments.length) return padDataOuter;\n    padDataOuter = _;\n    return chart;\n  };\n\n  chart.clipEdge = function(_) {\n    if (!arguments.length) return clipEdge;\n    clipEdge = _;\n    return chart;\n  };\n\n  chart.clipVoronoi= function(_) {\n    if (!arguments.length) return clipVoronoi;\n    clipVoronoi = _;\n    return chart;\n  };\n\n  chart.useVoronoi= function(_) {\n    if (!arguments.length) return useVoronoi;\n    useVoronoi = _;\n    if (useVoronoi === false) {\n        clipVoronoi = false;\n    }\n    return chart;\n  };\n\n  chart.clipRadius = function(_) {\n    if (!arguments.length) return clipRadius;\n    clipRadius = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    return chart;\n  };\n\n  chart.shape = function(_) {\n    if (!arguments.length) return getShape;\n    getShape = _;\n    return chart;\n  };\n\n  chart.onlyCircles = function(_) {\n    if (!arguments.length) return onlyCircles;\n    onlyCircles = _;\n    return chart;\n  };\n\n  chart.id = function(_) {\n    if (!arguments.length) return id;\n    id = _;\n    return chart;\n  };\n\n  chart.singlePoint = function(_) {\n    if (!arguments.length) return singlePoint;\n    singlePoint = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\nnv.models.scatterChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var scatter      = nv.models.scatter()\n    , xAxis        = nv.models.axis()\n    , yAxis        = nv.models.axis()\n    , legend       = nv.models.legend()\n    , controls     = nv.models.legend()\n    , distX        = nv.models.distribution()\n    , distY        = nv.models.distribution()\n    ;\n\n  var margin       = {top: 30, right: 20, bottom: 50, left: 75}\n    , width        = null\n    , height       = null\n    , color        = nv.utils.defaultColor()\n    , x            = d3.fisheye ? d3.fisheye.scale(d3.scale.linear).distortion(0) : scatter.xScale()\n    , y            = d3.fisheye ? d3.fisheye.scale(d3.scale.linear).distortion(0) : scatter.yScale()\n    , xPadding     = 0\n    , yPadding     = 0\n    , showDistX    = false\n    , showDistY    = false\n    , showLegend   = true\n    , showXAxis    = true\n    , showYAxis    = true\n    , rightAlignYAxis = false\n    , showControls = !!d3.fisheye\n    , fisheye      = 0\n    , pauseFisheye = false\n    , tooltips     = true\n    , tooltipX     = function(key, x, y) { return '<strong>' + x + '</strong>' }\n    , tooltipY     = function(key, x, y) { return '<strong>' + y + '</strong>' }\n    , tooltip      = null\n    , state = {}\n    , defaultState = null\n    , dispatch     = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n    , noData       = \"No Data Available.\"\n    , transitionDuration = 0\n    ;\n\n  scatter\n    .xScale(x)\n    .yScale(y)\n    ;\n  xAxis\n    .orient('bottom')\n    .tickPadding(10)\n    ;\n  yAxis\n    .orient((rightAlignYAxis) ? 'right' : 'left')\n    .tickPadding(10)\n    ;\n  distX\n    .axis('x')\n    ;\n  distY\n    .axis('y')\n    ;\n\n  controls.updateState(false);\n\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var x0, y0;\n\n  var showTooltip = function(e, offsetElement) {\n    //TODO: make tooltip style an option between single or dual on axes (maybe on all charts with axes?)\n\n    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n        leftX = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n        topX = y.range()[0] + margin.top + ( offsetElement.offsetTop || 0),\n        leftY = x.range()[0] + margin.left + ( offsetElement.offsetLeft || 0 ),\n        topY = e.pos[1] + ( offsetElement.offsetTop || 0),\n        xVal = xAxis.tickFormat()(scatter.x()(e.point, e.pointIndex)),\n        yVal = yAxis.tickFormat()(scatter.y()(e.point, e.pointIndex));\n\n      if( tooltipX != null )\n          nv.tooltip.show([leftX, topX], tooltipX(e.series.key, xVal, yVal, e, chart), 'n', 1, offsetElement, 'x-nvtooltip');\n      if( tooltipY != null )\n          nv.tooltip.show([leftY, topY], tooltipY(e.series.key, xVal, yVal, e, chart), 'e', 1, offsetElement, 'y-nvtooltip');\n      if( tooltip != null )\n          nv.tooltip.show([left, top], tooltip(e.series.key, xVal, yVal, e, chart), e.value < 0 ? 'n' : 's', null, offsetElement);\n  };\n\n  var controlsData = [\n    { key: 'Magnify', disabled: true }\n  ];\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this),\n          that = this;\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n\n      chart.update = function() { container.call(chart); };\n      chart.container = this;\n\n      //set state.disabled\n      state.disabled = data.map(function(d) { return !!d.disabled });\n\n      if (!defaultState) {\n        var key;\n        defaultState = {};\n        for (key in state) {\n          if (state[key] instanceof Array)\n            defaultState[key] = state[key].slice(0);\n          else\n            defaultState[key] = state[key];\n        }\n      }\n\n      //------------------------------------------------------------\n      // Display noData message if there's nothing to show.\n\n      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', margin.top + availableHeight / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x0 = x0 || x;\n      y0 = y0 || y;\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-scatterChart').data([data]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatterChart nv-chart-' + scatter.id());\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g');\n\n      // background for pointer events\n      gEnter.append('rect').attr('class', 'nvd3 nv-background');\n\n      gEnter.append('g').attr('class', 'nv-x nv-axis');\n      gEnter.append('g').attr('class', 'nv-y nv-axis');\n      gEnter.append('g').attr('class', 'nv-scatterWrap');\n      gEnter.append('g').attr('class', 'nv-distWrap');\n      gEnter.append('g').attr('class', 'nv-legendWrap');\n      gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Legend\n\n      if (showLegend) {\n        var legendWidth = (showControls) ? availableWidth / 2 : availableWidth;\n        legend.width(legendWidth);\n\n        wrap.select('.nv-legendWrap')\n            .datum(data)\n            .call(legend);\n\n        if ( margin.top != legend.height()) {\n          margin.top = legend.height();\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n        }\n\n        wrap.select('.nv-legendWrap')\n            .attr('transform', 'translate(' + (availableWidth - legendWidth) + ',' + (-margin.top) +')');\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Controls\n\n      if (showControls) {\n        controls.width(180).color(['#444']);\n        g.select('.nv-controlsWrap')\n            .datum(controlsData)\n            .attr('transform', 'translate(0,' + (-margin.top) +')')\n            .call(controls);\n      }\n\n      //------------------------------------------------------------\n\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      if (rightAlignYAxis) {\n          g.select(\".nv-y.nv-axis\")\n              .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n      }\n\n      //------------------------------------------------------------\n      // Main Chart Component(s)\n\n      scatter\n          .width(availableWidth)\n          .height(availableHeight)\n          .color(data.map(function(d,i) {\n            return d.color || color(d, i);\n          }).filter(function(d,i) { return !data[i].disabled }));\n\n      if (xPadding !== 0)\n        scatter.xDomain(null);\n\n      if (yPadding !== 0)\n        scatter.yDomain(null);\n\n      wrap.select('.nv-scatterWrap')\n          .datum(data.filter(function(d) { return !d.disabled }))\n          .call(scatter);\n\n      //Adjust for x and y padding\n      if (xPadding !== 0) {\n        var xRange = x.domain()[1] - x.domain()[0];\n        scatter.xDomain([x.domain()[0] - (xPadding * xRange), x.domain()[1] + (xPadding * xRange)]);\n      }\n\n      if (yPadding !== 0) {\n        var yRange = y.domain()[1] - y.domain()[0];\n        scatter.yDomain([y.domain()[0] - (yPadding * yRange), y.domain()[1] + (yPadding * yRange)]);\n      }\n\n      //Only need to update the scatter again if x/yPadding changed the domain.\n      if (yPadding !== 0 || xPadding !== 0) {\n        wrap.select('.nv-scatterWrap')\n            .datum(data.filter(function(d) { return !d.disabled }))\n            .call(scatter);\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Axes\n      if (showXAxis) {\n        xAxis\n            .scale(x)\n            .ticks( xAxis.ticks() && xAxis.ticks().length ? xAxis.ticks() : availableWidth / 100 )\n            .tickSize( -availableHeight , 0);\n\n        g.select('.nv-x.nv-axis')\n            .attr('transform', 'translate(0,' + y.range()[0] + ')')\n            .call(xAxis);\n\n      }\n\n      if (showYAxis) {\n        yAxis\n            .scale(y)\n            .ticks( yAxis.ticks() && yAxis.ticks().length ? yAxis.ticks() : availableHeight / 36 )\n            .tickSize( -availableWidth, 0);\n\n        g.select('.nv-y.nv-axis')\n            .call(yAxis);\n      }\n\n\n      if (showDistX) {\n        distX\n            .getData(scatter.x())\n            .scale(x)\n            .width(availableWidth)\n            .color(data.map(function(d,i) {\n              return d.color || color(d, i);\n            }).filter(function(d,i) { return !data[i].disabled }));\n        gEnter.select('.nv-distWrap').append('g')\n            .attr('class', 'nv-distributionX');\n        g.select('.nv-distributionX')\n            .attr('transform', 'translate(0,' + y.range()[0] + ')')\n            .datum(data.filter(function(d) { return !d.disabled }))\n            .call(distX);\n      }\n\n      if (showDistY) {\n        distY\n            .getData(scatter.y())\n            .scale(y)\n            .width(availableHeight)\n            .color(data.map(function(d,i) {\n              return d.color || color(d, i);\n            }).filter(function(d,i) { return !data[i].disabled }));\n        gEnter.select('.nv-distWrap').append('g')\n            .attr('class', 'nv-distributionY');\n        g.select('.nv-distributionY')\n            .attr('transform', \n              'translate(' + (rightAlignYAxis ? availableWidth : -distY.size() ) + ',0)')\n            .datum(data.filter(function(d) { return !d.disabled }))\n            .call(distY);\n      }\n\n      //------------------------------------------------------------\n\n\n\n\n      if (d3.fisheye) {\n        g.select('.nv-background')\n            .attr('width', availableWidth)\n            .attr('height', availableHeight);\n\n        g.select('.nv-background').on('mousemove', updateFisheye);\n        g.select('.nv-background').on('click', function() { pauseFisheye = !pauseFisheye;});\n        scatter.dispatch.on('elementClick.freezeFisheye', function() {\n          pauseFisheye = !pauseFisheye;\n        });\n      }\n\n\n      function updateFisheye() {\n        if (pauseFisheye) {\n          g.select('.nv-point-paths').style('pointer-events', 'all');\n          return false;\n        }\n\n        g.select('.nv-point-paths').style('pointer-events', 'none' );\n\n        var mouse = d3.mouse(this);\n        x.distortion(fisheye).focus(mouse[0]);\n        y.distortion(fisheye).focus(mouse[1]);\n\n        g.select('.nv-scatterWrap')\n            .call(scatter);\n\n        if (showXAxis)\n          g.select('.nv-x.nv-axis').call(xAxis);\n        \n        if (showYAxis)\n          g.select('.nv-y.nv-axis').call(yAxis);\n        \n        g.select('.nv-distributionX')\n            .datum(data.filter(function(d) { return !d.disabled }))\n            .call(distX);\n        g.select('.nv-distributionY')\n            .datum(data.filter(function(d) { return !d.disabled }))\n            .call(distY);\n      }\n\n\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n      controls.dispatch.on('legendClick', function(d,i) {\n        d.disabled = !d.disabled;\n\n        fisheye = d.disabled ? 0 : 2.5;\n        g.select('.nv-background') .style('pointer-events', d.disabled ? 'none' : 'all');\n        g.select('.nv-point-paths').style('pointer-events', d.disabled ? 'all' : 'none' );\n\n        if (d.disabled) {\n          x.distortion(fisheye).focus(0);\n          y.distortion(fisheye).focus(0);\n\n          g.select('.nv-scatterWrap').call(scatter);\n          g.select('.nv-x.nv-axis').call(xAxis);\n          g.select('.nv-y.nv-axis').call(yAxis);\n        } else {\n          pauseFisheye = false;\n        }\n\n        chart.update();\n      });\n\n      legend.dispatch.on('stateChange', function(newState) {\n        state.disabled = newState.disabled;\n        dispatch.stateChange(state);\n        chart.update();\n      });\n\n      scatter.dispatch.on('elementMouseover.tooltip', function(e) {\n        d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-distx-' + e.pointIndex)\n            .attr('y1', function(d,i) { return e.pos[1] - availableHeight;});\n        d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-disty-' + e.pointIndex)\n            .attr('x2', e.pos[0] + distX.size());\n\n        e.pos = [e.pos[0] + margin.left, e.pos[1] + margin.top];\n        dispatch.tooltipShow(e);\n      });\n\n      dispatch.on('tooltipShow', function(e) {\n        if (tooltips) showTooltip(e, that.parentNode);\n      });\n\n      // Update chart from a state object passed to event handler\n      dispatch.on('changeState', function(e) {\n\n        if (typeof e.disabled !== 'undefined') {\n          data.forEach(function(series,i) {\n            series.disabled = e.disabled[i];\n          });\n\n          state.disabled = e.disabled;\n        }\n\n        chart.update();\n      });\n\n      //============================================================\n\n\n      //store old scales for use in transitions on update\n      x0 = x.copy();\n      y0 = y.copy();\n\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  scatter.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n\n    d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-distx-' + e.pointIndex)\n        .attr('y1', 0);\n    d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-disty-' + e.pointIndex)\n        .attr('x2', distY.size());\n  });\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.dispatch = dispatch;\n  chart.scatter = scatter;\n  chart.legend = legend;\n  chart.controls = controls;\n  chart.xAxis = xAxis;\n  chart.yAxis = yAxis;\n  chart.distX = distX;\n  chart.distY = distY;\n\n  d3.rebind(chart, scatter, 'id', 'interactive', 'pointActive', 'x', 'y', 'shape', 'size', 'xScale', 'yScale', 'zScale', 'xDomain', 'yDomain', 'xRange', 'yRange', 'sizeDomain', 'sizeRange', 'forceX', 'forceY', 'forceSize', 'clipVoronoi', 'clipRadius', 'useVoronoi');\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    legend.color(color);\n    distX.color(color);\n    distY.color(color);\n    return chart;\n  };\n\n  chart.showDistX = function(_) {\n    if (!arguments.length) return showDistX;\n    showDistX = _;\n    return chart;\n  };\n\n  chart.showDistY = function(_) {\n    if (!arguments.length) return showDistY;\n    showDistY = _;\n    return chart;\n  };\n\n  chart.showControls = function(_) {\n    if (!arguments.length) return showControls;\n    showControls = _;\n    return chart;\n  };\n\n  chart.showLegend = function(_) {\n    if (!arguments.length) return showLegend;\n    showLegend = _;\n    return chart;\n  };\n\n  chart.showXAxis = function(_) {\n    if (!arguments.length) return showXAxis;\n    showXAxis = _;\n    return chart;\n  };\n\n  chart.showYAxis = function(_) {\n    if (!arguments.length) return showYAxis;\n    showYAxis = _;\n    return chart;\n  };\n\n  chart.rightAlignYAxis = function(_) {\n    if(!arguments.length) return rightAlignYAxis;\n    rightAlignYAxis = _;\n    yAxis.orient( (_) ? 'right' : 'left');\n    return chart;\n  };\n\n\n  chart.fisheye = function(_) {\n    if (!arguments.length) return fisheye;\n    fisheye = _;\n    return chart;\n  };\n\n  chart.xPadding = function(_) {\n    if (!arguments.length) return xPadding;\n    xPadding = _;\n    return chart;\n  };\n\n  chart.yPadding = function(_) {\n    if (!arguments.length) return yPadding;\n    yPadding = _;\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.tooltipXContent = function(_) {\n    if (!arguments.length) return tooltipX;\n    tooltipX = _;\n    return chart;\n  };\n\n  chart.tooltipYContent = function(_) {\n    if (!arguments.length) return tooltipY;\n    tooltipY = _;\n    return chart;\n  };\n\n  chart.state = function(_) {\n    if (!arguments.length) return state;\n    state = _;\n    return chart;\n  };\n\n  chart.defaultState = function(_) {\n    if (!arguments.length) return defaultState;\n    defaultState = _;\n    return chart;\n  };\n  \n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  chart.transitionDuration = function(_) {\n    if (!arguments.length) return transitionDuration;\n    transitionDuration = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.scatterPlusLineChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var scatter      = nv.models.scatter()\n    , xAxis        = nv.models.axis()\n    , yAxis        = nv.models.axis()\n    , legend       = nv.models.legend()\n    , controls     = nv.models.legend()\n    , distX        = nv.models.distribution()\n    , distY        = nv.models.distribution()\n    ;\n\n  var margin       = {top: 30, right: 20, bottom: 50, left: 75}\n    , width        = null\n    , height       = null\n    , color        = nv.utils.defaultColor()\n    , x            = d3.fisheye ? d3.fisheye.scale(d3.scale.linear).distortion(0) : scatter.xScale()\n    , y            = d3.fisheye ? d3.fisheye.scale(d3.scale.linear).distortion(0) : scatter.yScale()\n    , showDistX    = false\n    , showDistY    = false\n    , showLegend   = true\n    , showXAxis    = true\n    , showYAxis    = true\n    , rightAlignYAxis = false\n    , showControls = !!d3.fisheye\n    , fisheye      = 0\n    , pauseFisheye = false\n    , tooltips     = true\n    , tooltipX     = function(key, x, y) { return '<strong>' + x + '</strong>' }\n    , tooltipY     = function(key, x, y) { return '<strong>' + y + '</strong>' }\n    , tooltip      = function(key, x, y, date) { return '<h3>' + key + '</h3>' \n                                                      + '<p>' + date + '</p>' }\n    , state = {}\n    , defaultState = null\n    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n    , noData       = \"No Data Available.\"\n    , transitionDuration = 0\n    ;\n\n  scatter\n    .xScale(x)\n    .yScale(y)\n    ;\n  xAxis\n    .orient('bottom')\n    .tickPadding(10)\n    ;\n  yAxis\n    .orient((rightAlignYAxis) ? 'right' : 'left')\n    .tickPadding(10)\n    ;\n  distX\n    .axis('x')\n    ;\n  distY\n    .axis('y')\n    ;\n  \n  controls.updateState(false);\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var x0, y0;\n\n  var showTooltip = function(e, offsetElement) {\n    //TODO: make tooltip style an option between single or dual on axes (maybe on all charts with axes?)\n\n    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n        leftX = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n        topX = y.range()[0] + margin.top + ( offsetElement.offsetTop || 0),\n        leftY = x.range()[0] + margin.left + ( offsetElement.offsetLeft || 0 ),\n        topY = e.pos[1] + ( offsetElement.offsetTop || 0),\n        xVal = xAxis.tickFormat()(scatter.x()(e.point, e.pointIndex)),\n        yVal = yAxis.tickFormat()(scatter.y()(e.point, e.pointIndex));\n\n      if( tooltipX != null )\n          nv.tooltip.show([leftX, topX], tooltipX(e.series.key, xVal, yVal, e, chart), 'n', 1, offsetElement, 'x-nvtooltip');\n      if( tooltipY != null )\n          nv.tooltip.show([leftY, topY], tooltipY(e.series.key, xVal, yVal, e, chart), 'e', 1, offsetElement, 'y-nvtooltip');\n      if( tooltip != null )\n          nv.tooltip.show([left, top], tooltip(e.series.key, xVal, yVal, e.point.tooltip, e, chart), e.value < 0 ? 'n' : 's', null, offsetElement);\n  };\n\n  var controlsData = [\n    { key: 'Magnify', disabled: true }\n  ];\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this),\n          that = this;\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n\n      chart.update = function() { container.call(chart); };\n      chart.container = this;\n\n      //set state.disabled\n      state.disabled = data.map(function(d) { return !!d.disabled });\n\n      if (!defaultState) {\n        var key;\n        defaultState = {};\n        for (key in state) {\n          if (state[key] instanceof Array)\n            defaultState[key] = state[key].slice(0);\n          else\n            defaultState[key] = state[key];\n        }\n      }\n\n      //------------------------------------------------------------\n      // Display noData message if there's nothing to show.\n\n      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', margin.top + availableHeight / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x = scatter.xScale();\n      y = scatter.yScale();\n\n      x0 = x0 || x;\n      y0 = y0 || y;\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-scatterChart').data([data]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatterChart nv-chart-' + scatter.id());\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g')\n\n      // background for pointer events\n      gEnter.append('rect').attr('class', 'nvd3 nv-background').style(\"pointer-events\",\"none\");\n\n      gEnter.append('g').attr('class', 'nv-x nv-axis');\n      gEnter.append('g').attr('class', 'nv-y nv-axis');\n      gEnter.append('g').attr('class', 'nv-scatterWrap');\n      gEnter.append('g').attr('class', 'nv-regressionLinesWrap');\n      gEnter.append('g').attr('class', 'nv-distWrap');\n      gEnter.append('g').attr('class', 'nv-legendWrap');\n      gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      if (rightAlignYAxis) {\n          g.select(\".nv-y.nv-axis\")\n              .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Legend\n\n      if (showLegend) {\n        legend.width( availableWidth / 2 );\n\n        wrap.select('.nv-legendWrap')\n            .datum(data)\n            .call(legend);\n\n        if ( margin.top != legend.height()) {\n          margin.top = legend.height();\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n        }\n\n        wrap.select('.nv-legendWrap')\n            .attr('transform', 'translate(' + (availableWidth / 2) + ',' + (-margin.top) +')');\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Controls\n\n      if (showControls) {\n        controls.width(180).color(['#444']);\n        g.select('.nv-controlsWrap')\n            .datum(controlsData)\n            .attr('transform', 'translate(0,' + (-margin.top) +')')\n            .call(controls);\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Main Chart Component(s)\n\n      scatter\n          .width(availableWidth)\n          .height(availableHeight)\n          .color(data.map(function(d,i) {\n            return d.color || color(d, i);\n          }).filter(function(d,i) { return !data[i].disabled }))\n\n      wrap.select('.nv-scatterWrap')\n          .datum(data.filter(function(d) { return !d.disabled }))\n          .call(scatter);\n\n      wrap.select('.nv-regressionLinesWrap')\n          .attr('clip-path', 'url(#nv-edge-clip-' + scatter.id() + ')');\n\n      var regWrap = wrap.select('.nv-regressionLinesWrap').selectAll('.nv-regLines')\n                      .data(function(d) {return d });\n      \n      regWrap.enter().append('g').attr('class', 'nv-regLines');\n\n      var regLine = regWrap.selectAll('.nv-regLine').data(function(d){return [d]});\n      var regLineEnter = regLine.enter()\n                       .append('line').attr('class', 'nv-regLine')\n                       .style('stroke-opacity', 0);\n\n      regLine\n          \n          .attr('x1', x.range()[0])\n          .attr('x2', x.range()[1])\n          .attr('y1', function(d,i) {return y(x.domain()[0] * d.slope + d.intercept) })\n          .attr('y2', function(d,i) { return y(x.domain()[1] * d.slope + d.intercept) })\n          .style('stroke', function(d,i,j) { return color(d,j) })\n          .style('stroke-opacity', function(d,i) {\n            return (d.disabled || typeof d.slope === 'undefined' || typeof d.intercept === 'undefined') ? 0 : 1 \n          });\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Axes\n\n      if (showXAxis) {\n        xAxis\n            .scale(x)\n            .ticks( xAxis.ticks() ? xAxis.ticks() : availableWidth / 100 )\n            .tickSize( -availableHeight , 0);\n\n        g.select('.nv-x.nv-axis')\n            .attr('transform', 'translate(0,' + y.range()[0] + ')')\n            .call(xAxis);\n      }\n\n      if (showYAxis) {\n        yAxis\n            .scale(y)\n            .ticks( yAxis.ticks() ? yAxis.ticks() : availableHeight / 36 )\n            .tickSize( -availableWidth, 0);\n\n        g.select('.nv-y.nv-axis')\n            .call(yAxis);\n      }\n\n\n      if (showDistX) {\n        distX\n            .getData(scatter.x())\n            .scale(x)\n            .width(availableWidth)\n            .color(data.map(function(d,i) {\n              return d.color || color(d, i);\n            }).filter(function(d,i) { return !data[i].disabled }));\n        gEnter.select('.nv-distWrap').append('g')\n            .attr('class', 'nv-distributionX');\n        g.select('.nv-distributionX')\n            .attr('transform', 'translate(0,' + y.range()[0] + ')')\n            .datum(data.filter(function(d) { return !d.disabled }))\n            .call(distX);\n      }\n\n      if (showDistY) {\n        distY\n            .getData(scatter.y())\n            .scale(y)\n            .width(availableHeight)\n            .color(data.map(function(d,i) {\n              return d.color || color(d, i);\n            }).filter(function(d,i) { return !data[i].disabled }));\n        gEnter.select('.nv-distWrap').append('g')\n            .attr('class', 'nv-distributionY');\n        g.select('.nv-distributionY')\n            .attr('transform', 'translate(' + (rightAlignYAxis ? availableWidth : -distY.size() ) + ',0)')\n            .datum(data.filter(function(d) { return !d.disabled }))\n            .call(distY);\n      }\n\n      //------------------------------------------------------------\n\n\n\n\n      if (d3.fisheye) {\n        g.select('.nv-background')\n            .attr('width', availableWidth)\n            .attr('height', availableHeight)\n            ;\n\n        g.select('.nv-background').on('mousemove', updateFisheye);\n        g.select('.nv-background').on('click', function() { pauseFisheye = !pauseFisheye;});\n        scatter.dispatch.on('elementClick.freezeFisheye', function() {\n          pauseFisheye = !pauseFisheye;\n        });\n      }\n\n\n      function updateFisheye() {\n        if (pauseFisheye) {\n          g.select('.nv-point-paths').style('pointer-events', 'all');\n          return false;\n        }\n\n        g.select('.nv-point-paths').style('pointer-events', 'none' );\n\n        var mouse = d3.mouse(this);\n        x.distortion(fisheye).focus(mouse[0]);\n        y.distortion(fisheye).focus(mouse[1]);\n\n        g.select('.nv-scatterWrap')\n            .datum(data.filter(function(d) { return !d.disabled }))\n            .call(scatter);\n\n        if (showXAxis)\n          g.select('.nv-x.nv-axis').call(xAxis);\n\n        if (showYAxis)\n          g.select('.nv-y.nv-axis').call(yAxis);\n        \n        g.select('.nv-distributionX')\n            .datum(data.filter(function(d) { return !d.disabled }))\n            .call(distX);\n        g.select('.nv-distributionY')\n            .datum(data.filter(function(d) { return !d.disabled }))\n            .call(distY);\n      }\n\n\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n      controls.dispatch.on('legendClick', function(d,i) {\n        d.disabled = !d.disabled;\n\n        fisheye = d.disabled ? 0 : 2.5;\n        g.select('.nv-background') .style('pointer-events', d.disabled ? 'none' : 'all');\n        g.select('.nv-point-paths').style('pointer-events', d.disabled ? 'all' : 'none' );\n\n        if (d.disabled) {\n          x.distortion(fisheye).focus(0);\n          y.distortion(fisheye).focus(0);\n\n          g.select('.nv-scatterWrap').call(scatter);\n          g.select('.nv-x.nv-axis').call(xAxis);\n          g.select('.nv-y.nv-axis').call(yAxis);\n        } else {\n          pauseFisheye = false;\n        }\n\n        chart.update();\n      });\n\n      legend.dispatch.on('stateChange', function(newState) { \n        state = newState;\n        dispatch.stateChange(state);\n        chart.update();\n      });\n\n\n      scatter.dispatch.on('elementMouseover.tooltip', function(e) {\n        d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-distx-' + e.pointIndex)\n            .attr('y1', e.pos[1] - availableHeight);\n        d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-disty-' + e.pointIndex)\n            .attr('x2', e.pos[0] + distX.size());\n\n        e.pos = [e.pos[0] + margin.left, e.pos[1] + margin.top];\n        dispatch.tooltipShow(e);\n      });\n\n      dispatch.on('tooltipShow', function(e) {\n        if (tooltips) showTooltip(e, that.parentNode);\n      });\n\n      // Update chart from a state object passed to event handler\n      dispatch.on('changeState', function(e) {\n\n        if (typeof e.disabled !== 'undefined') {\n          data.forEach(function(series,i) {\n            series.disabled = e.disabled[i];\n          });\n\n          state.disabled = e.disabled;\n        }\n\n        chart.update();\n      });\n\n      //============================================================\n\n\n      //store old scales for use in transitions on update\n      x0 = x.copy();\n      y0 = y.copy();\n\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  scatter.dispatch.on('elementMouseout.tooltip', function(e) {\n    dispatch.tooltipHide(e);\n\n    d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-distx-' + e.pointIndex)\n        .attr('y1', 0);\n    d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-disty-' + e.pointIndex)\n        .attr('x2', distY.size());\n  });\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.dispatch = dispatch;\n  chart.scatter = scatter;\n  chart.legend = legend;\n  chart.controls = controls;\n  chart.xAxis = xAxis;\n  chart.yAxis = yAxis;\n  chart.distX = distX;\n  chart.distY = distY;\n\n  d3.rebind(chart, scatter, 'id', 'interactive', 'pointActive', 'x', 'y', 'shape', 'size', 'xScale', 'yScale', 'zScale', 'xDomain', 'yDomain', 'xRange', 'yRange', 'sizeDomain', 'sizeRange', 'forceX', 'forceY', 'forceSize', 'clipVoronoi', 'clipRadius', 'useVoronoi');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    legend.color(color);\n    distX.color(color);\n    distY.color(color);\n    return chart;\n  };\n\n  chart.showDistX = function(_) {\n    if (!arguments.length) return showDistX;\n    showDistX = _;\n    return chart;\n  };\n\n  chart.showDistY = function(_) {\n    if (!arguments.length) return showDistY;\n    showDistY = _;\n    return chart;\n  };\n\n  chart.showControls = function(_) {\n    if (!arguments.length) return showControls;\n    showControls = _;\n    return chart;\n  };\n\n  chart.showLegend = function(_) {\n    if (!arguments.length) return showLegend;\n    showLegend = _;\n    return chart;\n  };\n\n  chart.showXAxis = function(_) {\n    if (!arguments.length) return showXAxis;\n    showXAxis = _;\n    return chart;\n  };\n\n  chart.showYAxis = function(_) {\n    if (!arguments.length) return showYAxis;\n    showYAxis = _;\n    return chart;\n  };\n\n  chart.rightAlignYAxis = function(_) {\n    if(!arguments.length) return rightAlignYAxis;\n    rightAlignYAxis = _;\n    yAxis.orient( (_) ? 'right' : 'left');\n    return chart;\n  };\n\n  chart.fisheye = function(_) {\n    if (!arguments.length) return fisheye;\n    fisheye = _;\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.tooltipXContent = function(_) {\n    if (!arguments.length) return tooltipX;\n    tooltipX = _;\n    return chart;\n  };\n\n  chart.tooltipYContent = function(_) {\n    if (!arguments.length) return tooltipY;\n    tooltipY = _;\n    return chart;\n  };\n\n  chart.state = function(_) {\n    if (!arguments.length) return state;\n    state = _;\n    return chart;\n  };\n\n  chart.defaultState = function(_) {\n    if (!arguments.length) return defaultState;\n    defaultState = _;\n    return chart;\n  };\n\n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  chart.transitionDuration = function(_) {\n    if (!arguments.length) return transitionDuration;\n    transitionDuration = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.sparkline = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var margin = {top: 2, right: 0, bottom: 2, left: 0}\n    , width = 400\n    , height = 32\n    , animate = true\n    , x = d3.scale.linear()\n    , y = d3.scale.linear()\n    , getX = function(d) { return d.x }\n    , getY = function(d) { return d.y }\n    , color = nv.utils.getColor(['#000'])\n    , xDomain\n    , yDomain\n    , xRange\n    , yRange\n    ;\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var availableWidth = width - margin.left - margin.right,\n          availableHeight = height - margin.top - margin.bottom,\n          container = d3.select(this);\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x   .domain(xDomain || d3.extent(data, getX ))\n          .range(xRange || [0, availableWidth]);\n\n      y   .domain(yDomain || d3.extent(data, getY ))\n          .range(yRange || [availableHeight, 0]);\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-sparkline').data([data]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparkline');\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\n      //------------------------------------------------------------\n\n\n      var paths = wrap.selectAll('path')\n          .data(function(d) { return [d] });\n      paths.enter().append('path');\n      paths.exit().remove();\n      paths\n          .style('stroke', function(d,i) { return d.color || color(d, i) })\n          .attr('d', d3.svg.line()\n            .x(function(d,i) { return x(getX(d,i)) })\n            .y(function(d,i) { return y(getY(d,i)) })\n          );\n\n\n      // TODO: Add CURRENT data point (Need Min, Mac, Current / Most recent)\n      var points = wrap.selectAll('circle.nv-point')\n          .data(function(data) {\n              var yValues = data.map(function(d, i) { return getY(d,i); });\n              function pointIndex(index) {\n                  if (index != -1) {\n\t              var result = data[index];\n                      result.pointIndex = index;\n                      return result;\n                  } else {\n                      return null;\n                  }\n              }\n              var maxPoint = pointIndex(yValues.lastIndexOf(y.domain()[1])),\n                  minPoint = pointIndex(yValues.indexOf(y.domain()[0])),\n                  currentPoint = pointIndex(yValues.length - 1);\n              return [minPoint, maxPoint, currentPoint].filter(function (d) {return d != null;});\n          });\n      points.enter().append('circle');\n      points.exit().remove();\n      points\n          .attr('cx', function(d,i) { return x(getX(d,d.pointIndex)) })\n          .attr('cy', function(d,i) { return y(getY(d,d.pointIndex)) })\n          .attr('r', 2)\n          .attr('class', function(d,i) {\n            return getX(d, d.pointIndex) == x.domain()[1] ? 'nv-point nv-currentValue' :\n                   getY(d, d.pointIndex) == y.domain()[0] ? 'nv-point nv-minValue' : 'nv-point nv-maxValue'\n          });\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.x = function(_) {\n    if (!arguments.length) return getX;\n    getX = d3.functor(_);\n    return chart;\n  };\n\n  chart.y = function(_) {\n    if (!arguments.length) return getY;\n    getY = d3.functor(_);\n    return chart;\n  };\n\n  chart.xScale = function(_) {\n    if (!arguments.length) return x;\n    x = _;\n    return chart;\n  };\n\n  chart.yScale = function(_) {\n    if (!arguments.length) return y;\n    y = _;\n    return chart;\n  };\n\n  chart.xDomain = function(_) {\n    if (!arguments.length) return xDomain;\n    xDomain = _;\n    return chart;\n  };\n\n  chart.yDomain = function(_) {\n    if (!arguments.length) return yDomain;\n    yDomain = _;\n    return chart;\n  };\n\n  chart.xRange = function(_) {\n    if (!arguments.length) return xRange;\n    xRange = _;\n    return chart;\n  };\n\n  chart.yRange = function(_) {\n    if (!arguments.length) return yRange;\n    yRange = _;\n    return chart;\n  };\n\n  chart.animate = function(_) {\n    if (!arguments.length) return animate;\n    animate = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.sparklinePlus = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var sparkline = nv.models.sparkline();\n\n  var margin = {top: 15, right: 100, bottom: 10, left: 50}\n    , width = null\n    , height = null\n    , x\n    , y\n    , index = []\n    , paused = false\n    , xTickFormat = d3.format(',r')\n    , yTickFormat = d3.format(',.2f')\n    , showValue = true\n    , alignValue = true\n    , rightAlignValue = false\n    , noData = \"No Data Available.\"\n    ;\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this);\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n\n      \n\n      chart.update = function() { chart(selection) };\n      chart.container = this;\n\n\n      //------------------------------------------------------------\n      // Display No Data message if there's nothing to show.\n\n      if (!data || !data.length) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', margin.top + availableHeight / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      var currentValue = sparkline.y()(data[data.length-1], data.length-1);\n\n      //------------------------------------------------------------\n\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x = sparkline.xScale();\n      y = sparkline.yScale();\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-sparklineplus').data([data]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparklineplus');\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-sparklineWrap');\n      gEnter.append('g').attr('class', 'nv-valueWrap');\n      gEnter.append('g').attr('class', 'nv-hoverArea');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Main Chart Component(s)\n\n      var sparklineWrap = g.select('.nv-sparklineWrap');\n\n      sparkline\n        .width(availableWidth)\n        .height(availableHeight);\n\n      sparklineWrap\n          .call(sparkline);\n\n      //------------------------------------------------------------\n\n\n      var valueWrap = g.select('.nv-valueWrap');\n      \n      var value = valueWrap.selectAll('.nv-currentValue')\n          .data([currentValue]);\n\n      value.enter().append('text').attr('class', 'nv-currentValue')\n          .attr('dx', rightAlignValue ? -8 : 8)\n          .attr('dy', '.9em')\n          .style('text-anchor', rightAlignValue ? 'end' : 'start');\n\n      value\n          .attr('x', availableWidth + (rightAlignValue ? margin.right : 0))\n          .attr('y', alignValue ? function(d) { return y(d) } : 0)\n          .style('fill', sparkline.color()(data[data.length-1], data.length-1))\n          .text(yTickFormat(currentValue));\n\n\n\n      gEnter.select('.nv-hoverArea').append('rect')\n          .on('mousemove', sparklineHover)\n          .on('click', function() { paused = !paused })\n          .on('mouseout', function() { index = []; updateValueLine(); });\n          //.on('mouseout', function() { index = null; updateValueLine(); });\n\n      g.select('.nv-hoverArea rect')\n          .attr('transform', function(d) { return 'translate(' + -margin.left + ',' + -margin.top + ')' })\n          .attr('width', availableWidth + margin.left + margin.right)\n          .attr('height', availableHeight + margin.top);\n\n\n\n      function updateValueLine() { //index is currently global (within the chart), may or may not keep it that way\n        if (paused) return;\n\n        var hoverValue = g.selectAll('.nv-hoverValue').data(index)\n\n        var hoverEnter = hoverValue.enter()\n          .append('g').attr('class', 'nv-hoverValue')\n            .style('stroke-opacity', 0)\n            .style('fill-opacity', 0);\n\n        hoverValue.exit()\n          \n            .style('stroke-opacity', 0)\n            .style('fill-opacity', 0)\n            .remove();\n\n        hoverValue\n            .attr('transform', function(d) { return 'translate(' + x(sparkline.x()(data[d],d)) + ',0)' })\n          \n            .style('stroke-opacity', 1)\n            .style('fill-opacity', 1);\n\n        if (!index.length) return;\n\n        hoverEnter.append('line')\n            .attr('x1', 0)\n            .attr('y1', -margin.top)\n            .attr('x2', 0)\n            .attr('y2', availableHeight);\n\n\n        hoverEnter.append('text').attr('class', 'nv-xValue')\n            .attr('x', -6)\n            .attr('y', -margin.top)\n            .attr('text-anchor', 'end')\n            .attr('dy', '.9em')\n\n\n        g.select('.nv-hoverValue .nv-xValue')\n            .text(xTickFormat(sparkline.x()(data[index[0]], index[0])));\n\n        hoverEnter.append('text').attr('class', 'nv-yValue')\n            .attr('x', 6)\n            .attr('y', -margin.top)\n            .attr('text-anchor', 'start')\n            .attr('dy', '.9em')\n\n        g.select('.nv-hoverValue .nv-yValue')\n            .text(yTickFormat(sparkline.y()(data[index[0]], index[0])));\n\n      }\n\n\n      function sparklineHover() {\n        if (paused) return;\n\n        var pos = d3.mouse(this)[0] - margin.left;\n\n        function getClosestIndex(data, x) {\n          var distance = Math.abs(sparkline.x()(data[0], 0) - x);\n          var closestIndex = 0;\n          for (var i = 0; i < data.length; i++){\n            if (Math.abs(sparkline.x()(data[i], i) - x) < distance) {\n              distance = Math.abs(sparkline.x()(data[i], i) - x);\n              closestIndex = i;\n            }\n          }\n          return closestIndex;\n        }\n\n        index = [getClosestIndex(data, Math.round(x.invert(pos)))];\n\n        updateValueLine();\n      }\n\n    });\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.sparkline = sparkline;\n\n  d3.rebind(chart, sparkline, 'x', 'y', 'xScale', 'yScale', 'color');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n  \n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.xTickFormat = function(_) {\n    if (!arguments.length) return xTickFormat;\n    xTickFormat = _;\n    return chart;\n  };\n\n  chart.yTickFormat = function(_) {\n    if (!arguments.length) return yTickFormat;\n    yTickFormat = _;\n    return chart;\n  };\n\n  chart.showValue = function(_) {\n    if (!arguments.length) return showValue;\n    showValue = _;\n    return chart;\n  };\n\n  chart.alignValue = function(_) {\n    if (!arguments.length) return alignValue;\n    alignValue = _;\n    return chart;\n  };\n\n  chart.rightAlignValue = function(_) {\n    if (!arguments.length) return rightAlignValue;\n    rightAlignValue = _;\n    return chart;\n  };\n\n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.stackedArea = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var margin = {top: 0, right: 0, bottom: 0, left: 0}\n    , width = 960\n    , height = 500\n    , color = nv.utils.defaultColor() // a function that computes the color\n    , id = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't selet one\n    , getX = function(d) { return d.x } // accessor to get the x value from a data point\n    , getY = function(d) { return d.y } // accessor to get the y value from a data point\n    , style = 'stack'\n    , offset = 'zero'\n    , order = 'default'\n    , interpolate = 'linear'  // controls the line interpolation\n    , clipEdge = false // if true, masks lines within x and y scale\n    , x //can be accessed via chart.xScale()\n    , y //can be accessed via chart.yScale()\n    , scatter = nv.models.scatter()\n    , dispatch =  d3.dispatch('tooltipShow', 'tooltipHide', 'areaClick', 'areaMouseover', 'areaMouseout')\n    ;\n\n  scatter\n    .size(2.2) // default size\n    .sizeDomain([2.2,2.2]) // all the same size by default\n    ;\n\n  /************************************\n   * offset:\n   *   'wiggle' (stream)\n   *   'zero' (stacked)\n   *   'expand' (normalize to 100%)\n   *   'silhouette' (simple centered)\n   *\n   * order:\n   *   'inside-out' (stream)\n   *   'default' (input order)\n   ************************************/\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var availableWidth = width - margin.left - margin.right,\n          availableHeight = height - margin.top - margin.bottom,\n          container = d3.select(this);\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x = scatter.xScale();\n      y = scatter.yScale();\n\n      //------------------------------------------------------------\n\n      var dataRaw = data;\n      // Injecting point index into each point because d3.layout.stack().out does not give index\n      data.forEach(function(aseries, i) {\n        aseries.seriesIndex = i;\n        aseries.values = aseries.values.map(function(d, j) {\n          d.index = j;\n          d.seriesIndex = i;\n          return d;\n        });\n      });\n\n      var dataFiltered = data.filter(function(series) {\n            return !series.disabled;\n      });\n\n      data = d3.layout.stack()\n               .order(order)\n               .offset(offset)\n               .values(function(d) { return d.values })  //TODO: make values customizeable in EVERY model in this fashion\n               .x(getX)\n               .y(getY)\n               .out(function(d, y0, y) {\n                    var yHeight = (getY(d) === 0) ? 0 : y;\n                    d.display = {\n                      y: yHeight,\n                     y0: y0\n                    };\n                })\n              (dataFiltered);\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-stackedarea').data([data]);\n      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedarea');\n      var defsEnter = wrapEnter.append('defs');\n      var gEnter = wrapEnter.append('g');\n      var g = wrap.select('g');\n\n      gEnter.append('g').attr('class', 'nv-areaWrap');\n      gEnter.append('g').attr('class', 'nv-scatterWrap');\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      //------------------------------------------------------------\n\n\n      scatter\n        .width(availableWidth)\n        .height(availableHeight)\n        .x(getX)\n        .y(function(d) { return d.display.y + d.display.y0 })\n        .forceY([0])\n        .color(data.map(function(d,i) {\n          return d.color || color(d, d.seriesIndex);\n        }));\n\n\n      var scatterWrap = g.select('.nv-scatterWrap')\n          .datum(data);\n\n      scatterWrap.call(scatter);\n\n      defsEnter.append('clipPath')\n          .attr('id', 'nv-edge-clip-' + id)\n        .append('rect');\n\n      wrap.select('#nv-edge-clip-' + id + ' rect')\n          .attr('width', availableWidth)\n          .attr('height', availableHeight);\n\n      g   .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n      var area = d3.svg.area()\n          .x(function(d,i)  { return x(getX(d,i)) })\n          .y0(function(d) {\n              return y(d.display.y0)\n          })\n          .y1(function(d) {\n              return y(d.display.y + d.display.y0)\n          })\n          .interpolate(interpolate);\n\n      var zeroArea = d3.svg.area()\n          .x(function(d,i)  { return x(getX(d,i)) })\n          .y0(function(d) { return y(d.display.y0) })\n          .y1(function(d) { return y(d.display.y0) });\n\n\n      var path = g.select('.nv-areaWrap').selectAll('path.nv-area')\n          .data(function(d) { return d });\n\n      path.enter().append('path').attr('class', function(d,i) { return 'nv-area nv-area-' + i })\n          .attr('d', function(d,i){\n            return zeroArea(d.values, d.seriesIndex);\n          })\n          .on('mouseover', function(d,i) {\n            d3.select(this).classed('hover', true);\n            dispatch.areaMouseover({\n              point: d,\n              series: d.key,\n              pos: [d3.event.pageX, d3.event.pageY],\n              seriesIndex: d.seriesIndex\n            });\n          })\n          .on('mouseout', function(d,i) {\n            d3.select(this).classed('hover', false);\n            dispatch.areaMouseout({\n              point: d,\n              series: d.key,\n              pos: [d3.event.pageX, d3.event.pageY],\n              seriesIndex: d.seriesIndex\n            });\n          })\n          .on('click', function(d,i) {\n            d3.select(this).classed('hover', false);\n            dispatch.areaClick({\n              point: d,\n              series: d.key,\n              pos: [d3.event.pageX, d3.event.pageY],\n              seriesIndex: d.seriesIndex\n            });\n          })\n\n      path.exit().remove();\n\n      path\n          .style('fill', function(d,i){\n            return d.color || color(d, d.seriesIndex)\n          })\n          .style('stroke', function(d,i){ return d.color || color(d, d.seriesIndex) });\n      path\n          .attr('d', function(d,i) {\n            return area(d.values,i)\n          });\n\n\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n      scatter.dispatch.on('elementMouseover.area', function(e) {\n        g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', true);\n      });\n      scatter.dispatch.on('elementMouseout.area', function(e) {\n        g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', false);\n      });\n\n      //============================================================\n      //Special offset functions\n      chart.d3_stackedOffset_stackPercent = function(stackData) {\n          var n = stackData.length,    //How many series\n          m = stackData[0].length,     //how many points per series\n          k = 1 / n,\n           i,\n           j,\n           o,\n           y0 = [];\n\n          for (j = 0; j < m; ++j) { //Looping through all points\n            for (i = 0, o = 0; i < dataRaw.length; i++)  //looping through series'\n                o += getY(dataRaw[i].values[j])   //total value of all points at a certian point in time.\n\n            if (o) for (i = 0; i < n; i++)\n               stackData[i][j][1] /= o;\n            else\n              for (i = 0; i < n; i++)\n               stackData[i][j][1] = k;\n          }\n          for (j = 0; j < m; ++j) y0[j] = 0;\n          return y0;\n      };\n\n    });\n\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  scatter.dispatch.on('elementClick.area', function(e) {\n    dispatch.areaClick(e);\n  })\n  scatter.dispatch.on('elementMouseover.tooltip', function(e) {\n        e.pos = [e.pos[0] + margin.left, e.pos[1] + margin.top],\n        dispatch.tooltipShow(e);\n  });\n  scatter.dispatch.on('elementMouseout.tooltip', function(e) {\n        dispatch.tooltipHide(e);\n  });\n\n  //============================================================\n\n  //============================================================\n  // Global getters and setters\n  //------------------------------------------------------------\n\n  chart.dispatch = dispatch;\n  chart.scatter = scatter;\n\n  d3.rebind(chart, scatter, 'interactive', 'size', 'xScale', 'yScale', 'zScale', 'xDomain', 'yDomain', 'xRange', 'yRange',\n    'sizeDomain', 'forceX', 'forceY', 'forceSize', 'clipVoronoi', 'useVoronoi','clipRadius','highlightPoint','clearHighlights');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.x = function(_) {\n    if (!arguments.length) return getX;\n    getX = d3.functor(_);\n    return chart;\n  };\n\n  chart.y = function(_) {\n    if (!arguments.length) return getY;\n    getY = d3.functor(_);\n    return chart;\n  }\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.clipEdge = function(_) {\n    if (!arguments.length) return clipEdge;\n    clipEdge = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    return chart;\n  };\n\n  chart.offset = function(_) {\n    if (!arguments.length) return offset;\n    offset = _;\n    return chart;\n  };\n\n  chart.order = function(_) {\n    if (!arguments.length) return order;\n    order = _;\n    return chart;\n  };\n\n  //shortcut for offset + order\n  chart.style = function(_) {\n    if (!arguments.length) return style;\n    style = _;\n\n    switch (style) {\n      case 'stack':\n        chart.offset('zero');\n        chart.order('default');\n        break;\n      case 'stream':\n        chart.offset('wiggle');\n        chart.order('inside-out');\n        break;\n      case 'stream-center':\n          chart.offset('silhouette');\n          chart.order('inside-out');\n          break;\n      case 'expand':\n        chart.offset('expand');\n        chart.order('default');\n        break;\n      case 'stack_percent':\n        chart.offset(chart.d3_stackedOffset_stackPercent);\n        chart.order('default');\n        break;\n    }\n\n    return chart;\n  };\n\n  chart.interpolate = function(_) {\n\t    if (!arguments.length) return interpolate;\n\t    interpolate = _;\n\t    return chart;\n  };\n  //============================================================\n\n\n  return chart;\n}\n\nnv.models.stackedAreaChart = function() {\n  \"use strict\";\n  //============================================================\n  // Public Variables with Default Settings\n  //------------------------------------------------------------\n\n  var stacked = nv.models.stackedArea()\n    , xAxis = nv.models.axis()\n    , yAxis = nv.models.axis()\n    , legend = nv.models.legend()\n    , controls = nv.models.legend()\n    , interactiveLayer = nv.interactiveGuideline()\n    ;\n\n  var margin = {top: 30, right: 25, bottom: 50, left: 60}\n    , width = null\n    , height = null\n    , color = nv.utils.defaultColor() // a function that takes in d, i and returns color\n    , showControls = true\n    , showLegend = true\n    , showXAxis = true\n    , showYAxis = true\n    , rightAlignYAxis = false\n    , useInteractiveGuideline = false\n    , tooltips = true\n    , tooltip = function(key, x, y, e, graph) {\n        return '<h3>' + key + '</h3>' +\n               '<p>' +  y + ' on ' + x + '</p>'\n      }\n    , x //can be accessed via chart.xScale()\n    , y //can be accessed via chart.yScale()\n    , yAxisTickFormat = d3.format(',.2f')\n    , state = { style: stacked.style() }\n    , defaultState = null\n    , noData = 'No Data Available.'\n    , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')\n    , controlWidth = 250\n    , cData = ['Stacked','Stream','Expanded']\n    , controlLabels = {}\n    , transitionDuration = 0\n    ;\n\n  xAxis\n    .orient('bottom')\n    .tickPadding(7)\n    ;\n  yAxis\n    .orient((rightAlignYAxis) ? 'right' : 'left')\n    ;\n\n  controls.updateState(false);\n  //============================================================\n\n\n  //============================================================\n  // Private Variables\n  //------------------------------------------------------------\n\n  var showTooltip = function(e, offsetElement) {\n    var left = e.pos[0] + ( offsetElement.offsetLeft || 0 ),\n        top = e.pos[1] + ( offsetElement.offsetTop || 0),\n        x = xAxis.tickFormat()(stacked.x()(e.point, e.pointIndex)),\n        y = yAxis.tickFormat()(stacked.y()(e.point, e.pointIndex)),\n        content = tooltip(e.series.key, x, y, e, chart);\n\n    nv.tooltip.show([left, top], content, e.value < 0 ? 'n' : 's', null, offsetElement);\n  };\n\n  //============================================================\n\n\n  function chart(selection) {\n    selection.each(function(data) {\n      var container = d3.select(this),\n          that = this;\n\n      var availableWidth = (width  || parseInt(container.style('width')) || 960)\n                             - margin.left - margin.right,\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n\n      chart.update = function() { container.call(chart); };\n      chart.container = this;\n\n      //set state.disabled\n      state.disabled = data.map(function(d) { return !!d.disabled });\n\n      if (!defaultState) {\n        var key;\n        defaultState = {};\n        for (key in state) {\n          if (state[key] instanceof Array)\n            defaultState[key] = state[key].slice(0);\n          else\n            defaultState[key] = state[key];\n        }\n      }\n\n      //------------------------------------------------------------\n      // Display No Data message if there's nothing to show.\n\n      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n        var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n        noDataText.enter().append('text')\n          .attr('class', 'nvd3 nv-noData')\n          .attr('dy', '-.7em')\n          .style('text-anchor', 'middle');\n\n        noDataText\n          .attr('x', margin.left + availableWidth / 2)\n          .attr('y', margin.top + availableHeight / 2)\n          .text(function(d) { return d });\n\n        return chart;\n      } else {\n        container.selectAll('.nv-noData').remove();\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Scales\n\n      x = stacked.xScale();\n      y = stacked.yScale();\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup containers and skeleton of chart\n\n      var wrap = container.selectAll('g.nv-wrap.nv-stackedAreaChart').data([data]);\n      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedAreaChart').append('g');\n      var g = wrap.select('g');\n\n      gEnter.append(\"rect\").style(\"opacity\",0);\n      gEnter.append('g').attr('class', 'nv-x nv-axis');\n      gEnter.append('g').attr('class', 'nv-y nv-axis');\n      gEnter.append('g').attr('class', 'nv-stackedWrap');\n      gEnter.append('g').attr('class', 'nv-legendWrap');\n      gEnter.append('g').attr('class', 'nv-controlsWrap');\n      gEnter.append('g').attr('class', 'nv-interactive');\n\n      g.select(\"rect\").attr(\"width\",availableWidth).attr(\"height\",availableHeight);\n      //------------------------------------------------------------\n      // Legend\n\n      if (showLegend) {\n        var legendWidth = (showControls) ? availableWidth - controlWidth : availableWidth;\n        legend\n          .width(legendWidth);\n\n        g.select('.nv-legendWrap')\n            .datum(data)\n            .call(legend);\n\n        if ( margin.top != legend.height()) {\n          margin.top = legend.height();\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n        }\n\n        g.select('.nv-legendWrap')\n            .attr('transform', 'translate(' + (availableWidth-legendWidth) + ',' + (-margin.top) +')');\n      }\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Controls\n\n      if (showControls) {\n        var controlsData = [\n          {\n            key: controlLabels.stacked || 'Stacked',\n            metaKey: 'Stacked',\n            disabled: stacked.style() != 'stack',\n            style: 'stack'\n          },\n          {\n            key: controlLabels.stream || 'Stream',\n            metaKey: 'Stream',\n            disabled: stacked.style() != 'stream',\n            style: 'stream'\n          },\n          {\n            key: controlLabels.expanded || 'Expanded',\n            metaKey: 'Expanded',\n            disabled: stacked.style() != 'expand',\n            style: 'expand'\n          },\n          {\n            key: controlLabels.stack_percent || 'Stack %',\n            metaKey: 'Stack_Percent',\n            disabled: stacked.style() != 'stack_percent',\n            style: 'stack_percent'\n          }\n        ];\n\n        controlWidth = (cData.length/3) * 260;\n\n        controlsData = controlsData.filter(function(d) {\n          return cData.indexOf(d.metaKey) !== -1;\n        })\n\n        controls\n          .width( controlWidth )\n          .color(['#444', '#444', '#444']);\n\n        g.select('.nv-controlsWrap')\n            .datum(controlsData)\n            .call(controls);\n\n\n        if ( margin.top != Math.max(controls.height(), legend.height()) ) {\n          margin.top = Math.max(controls.height(), legend.height());\n          availableHeight = (height || parseInt(container.style('height')) || 400)\n                             - margin.top - margin.bottom;\n        }\n\n\n        g.select('.nv-controlsWrap')\n            .attr('transform', 'translate(0,' + (-margin.top) +')');\n      }\n\n      //------------------------------------------------------------\n\n\n      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      if (rightAlignYAxis) {\n          g.select(\".nv-y.nv-axis\")\n              .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n      }\n\n      //------------------------------------------------------------\n      // Main Chart Component(s)\n\n      //------------------------------------------------------------\n      //Set up interactive layer\n      if (useInteractiveGuideline) {\n        interactiveLayer\n           .width(availableWidth)\n           .height(availableHeight)\n           .margin({left: margin.left, top: margin.top})\n           .svgContainer(container)\n           .xScale(x);\n        wrap.select(\".nv-interactive\").call(interactiveLayer);\n      }\n\n      stacked\n        .width(availableWidth)\n        .height(availableHeight)\n\n      var stackedWrap = g.select('.nv-stackedWrap')\n          .datum(data);\n\n      stackedWrap.call(stacked);\n\n      //------------------------------------------------------------\n\n\n      //------------------------------------------------------------\n      // Setup Axes\n\n      if (showXAxis) {\n        xAxis\n          .scale(x)\n          .ticks( availableWidth / 100 )\n          .tickSize( -availableHeight, 0);\n\n        g.select('.nv-x.nv-axis')\n            .attr('transform', 'translate(0,' + availableHeight + ')');\n\n        g.select('.nv-x.nv-axis')\n          \n            .call(xAxis);\n      }\n\n      if (showYAxis) {\n        yAxis\n          .scale(y)\n          .ticks(stacked.offset() == 'wiggle' ? 0 : availableHeight / 36)\n          .tickSize(-availableWidth, 0)\n          .setTickFormat( (stacked.style() == 'expand' || stacked.style() == 'stack_percent')\n                ? d3.format('%') : yAxisTickFormat);\n\n        g.select('.nv-y.nv-axis')\n          \n            .call(yAxis);\n      }\n\n      //------------------------------------------------------------\n\n\n      //============================================================\n      // Event Handling/Dispatching (in chart's scope)\n      //------------------------------------------------------------\n\n      stacked.dispatch.on('areaClick.toggle', function(e) {\n        if (data.filter(function(d) { return !d.disabled }).length === 1)\n          data.forEach(function(d) {\n            d.disabled = false;\n          });\n        else\n          data.forEach(function(d,i) {\n            d.disabled = (i != e.seriesIndex);\n          });\n\n        state.disabled = data.map(function(d) { return !!d.disabled });\n        dispatch.stateChange(state);\n\n        chart.update();\n      });\n\n      legend.dispatch.on('stateChange', function(newState) {\n        state.disabled = newState.disabled;\n        dispatch.stateChange(state);\n        chart.update();\n      });\n\n      controls.dispatch.on('legendClick', function(d,i) {\n        if (!d.disabled) return;\n\n        controlsData = controlsData.map(function(s) {\n          s.disabled = true;\n          return s;\n        });\n        d.disabled = false;\n\n        stacked.style(d.style);\n\n\n        state.style = stacked.style();\n        dispatch.stateChange(state);\n\n        chart.update();\n      });\n\n\n      interactiveLayer.dispatch.on('elementMousemove', function(e) {\n          stacked.clearHighlights();\n          var singlePoint, pointIndex, pointXLocation, allData = [];\n          data\n          .filter(function(series, i) {\n            series.seriesIndex = i;\n            return !series.disabled;\n          })\n          .forEach(function(series,i) {\n              pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n              stacked.highlightPoint(i, pointIndex, true);\n              var point = series.values[pointIndex];\n              if (typeof point === 'undefined') return;\n              if (typeof singlePoint === 'undefined') singlePoint = point;\n              if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n\n              //If we are in 'expand' mode, use the stacked percent value instead of raw value.\n              var tooltipValue = (stacked.style() == 'expand') ? point.display.y : chart.y()(point,pointIndex);\n              allData.push({\n                  key: series.key,\n                  value: tooltipValue,\n                  color: color(series,series.seriesIndex),\n                  stackedValue: point.display\n              });\n          });\n\n          allData.reverse();\n\n          //Highlight the tooltip entry based on which stack the mouse is closest to.\n          if (allData.length > 2) {\n            var yValue = chart.yScale().invert(e.mouseY);\n            var yDistMax = Infinity, indexToHighlight = null;\n            allData.forEach(function(series,i) {\n\n               //To handle situation where the stacked area chart is negative, we need to use absolute values\n               //when checking if the mouse Y value is within the stack area.\n               yValue = Math.abs(yValue);\n               var stackedY0 = Math.abs(series.stackedValue.y0);\n               var stackedY = Math.abs(series.stackedValue.y);\n               if ( yValue >= stackedY0 && yValue <= (stackedY + stackedY0))\n               {\n                  indexToHighlight = i;\n                  return;\n               }\n            });\n            if (indexToHighlight != null)\n               allData[indexToHighlight].highlight = true;\n          }\n\n          var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex));\n\n          //If we are in 'expand' mode, force the format to be a percentage.\n          var valueFormatter = (stacked.style() == 'expand') ?\n               function(d,i) {return d3.format(\".1%\")(d);} :\n               function(d,i) {return yAxis.tickFormat()(d); };\n          interactiveLayer.tooltip\n                  .position({left: pointXLocation + margin.left, top: e.mouseY + margin.top})\n                  .chartContainer(that.parentNode)\n                  .enabled(tooltips)\n                  .valueFormatter(valueFormatter)\n                  .data(\n                      {\n                        value: xValue,\n                        series: allData\n                      }\n                  )();\n\n          interactiveLayer.renderGuideLine(pointXLocation);\n\n      });\n\n      interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n          dispatch.tooltipHide();\n          stacked.clearHighlights();\n      });\n\n\n      dispatch.on('tooltipShow', function(e) {\n        if (tooltips) showTooltip(e, that.parentNode);\n      });\n\n      // Update chart from a state object passed to event handler\n      dispatch.on('changeState', function(e) {\n\n        if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {\n          data.forEach(function(series,i) {\n            series.disabled = e.disabled[i];\n          });\n\n          state.disabled = e.disabled;\n        }\n\n        if (typeof e.style !== 'undefined') {\n          stacked.style(e.style);\n        }\n\n        chart.update();\n      });\n\n    });\n\n\n    return chart;\n  }\n\n\n  //============================================================\n  // Event Handling/Dispatching (out of chart's scope)\n  //------------------------------------------------------------\n\n  stacked.dispatch.on('tooltipShow', function(e) {\n    //disable tooltips when value ~= 0\n    //// TODO: consider removing points from voronoi that have 0 value instead of this hack\n    /*\n    if (!Math.round(stacked.y()(e.point) * 100)) {  // 100 will not be good for very small numbers... will have to think about making this valu dynamic, based on data range\n      setTimeout(function() { d3.selectAll('.point.hover').classed('hover', false) }, 0);\n      return false;\n    }\n   */\n\n    e.pos = [e.pos[0] + margin.left, e.pos[1] + margin.top],\n    dispatch.tooltipShow(e);\n  });\n\n  stacked.dispatch.on('tooltipHide', function(e) {\n    dispatch.tooltipHide(e);\n  });\n\n  dispatch.on('tooltipHide', function() {\n    if (tooltips) nv.tooltip.cleanup();\n  });\n\n  //============================================================\n\n\n  //============================================================\n  // Expose Public Variables\n  //------------------------------------------------------------\n\n  // expose chart's sub-components\n  chart.dispatch = dispatch;\n  chart.stacked = stacked;\n  chart.legend = legend;\n  chart.controls = controls;\n  chart.xAxis = xAxis;\n  chart.yAxis = yAxis;\n  chart.interactiveLayer = interactiveLayer;\n\n  d3.rebind(chart, stacked, 'x', 'y', 'size', 'xScale', 'yScale', 'xDomain', 'yDomain', 'xRange', 'yRange', 'sizeDomain', 'interactive', 'useVoronoi', 'offset', 'order', 'style', 'clipEdge', 'forceX', 'forceY', 'forceSize', 'interpolate');\n\n  chart.options = nv.utils.optionsFunc.bind(chart);\n\n  chart.margin = function(_) {\n    if (!arguments.length) return margin;\n    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n    return chart;\n  };\n\n  chart.width = function(_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function(_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.color = function(_) {\n    if (!arguments.length) return color;\n    color = nv.utils.getColor(_);\n    legend.color(color);\n    stacked.color(color);\n    return chart;\n  };\n\n  chart.showControls = function(_) {\n    if (!arguments.length) return showControls;\n    showControls = _;\n    return chart;\n  };\n\n  chart.showLegend = function(_) {\n    if (!arguments.length) return showLegend;\n    showLegend = _;\n    return chart;\n  };\n\n  chart.showXAxis = function(_) {\n    if (!arguments.length) return showXAxis;\n    showXAxis = _;\n    return chart;\n  };\n\n  chart.showYAxis = function(_) {\n    if (!arguments.length) return showYAxis;\n    showYAxis = _;\n    return chart;\n  };\n\n  chart.rightAlignYAxis = function(_) {\n    if(!arguments.length) return rightAlignYAxis;\n    rightAlignYAxis = _;\n    yAxis.orient( (_) ? 'right' : 'left');\n    return chart;\n  };\n\n  chart.useInteractiveGuideline = function(_) {\n    if(!arguments.length) return useInteractiveGuideline;\n    useInteractiveGuideline = _;\n    if (_ === true) {\n       chart.interactive(false);\n       chart.useVoronoi(false);\n    }\n    return chart;\n  };\n\n  chart.tooltip = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.tooltips = function(_) {\n    if (!arguments.length) return tooltips;\n    tooltips = _;\n    return chart;\n  };\n\n  chart.tooltipContent = function(_) {\n    if (!arguments.length) return tooltip;\n    tooltip = _;\n    return chart;\n  };\n\n  chart.state = function(_) {\n    if (!arguments.length) return state;\n    state = _;\n    return chart;\n  };\n\n  chart.defaultState = function(_) {\n    if (!arguments.length) return defaultState;\n    defaultState = _;\n    return chart;\n  };\n\n  chart.noData = function(_) {\n    if (!arguments.length) return noData;\n    noData = _;\n    return chart;\n  };\n\n  chart.transitionDuration = function(_) {\n    if (!arguments.length) return transitionDuration;\n    transitionDuration = _;\n    return chart;\n  };\n\n  chart.controlsData = function(_) {\n    if (!arguments.length) return cData;\n    cData = _;\n    return chart;\n  };\n\n  chart.controlLabels = function(_) {\n    if (!arguments.length) return controlLabels;\n    if (typeof _ !== 'object') return controlLabels;\n    controlLabels = _;\n    return chart;\n  };\n\n  yAxis.setTickFormat = yAxis.tickFormat;\n\n  yAxis.tickFormat = function(_) {\n    if (!arguments.length) return yAxisTickFormat;\n    yAxisTickFormat = _;\n    return yAxis;\n  };\n\n\n  //============================================================\n\n  return chart;\n}\n})();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./static/repository/plugins/nvd3/nv.d3.js\n ** module id = 10\n ** module chunks = 7 8 9 10 11 12 13 14 15 16 17 18 19\n **/"],"sourceRoot":""}